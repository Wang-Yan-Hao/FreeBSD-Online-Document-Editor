/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/regexp_anchors"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$==', '$new']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    
    Opal.const_set($nesting[0], 'REGEXP_START', (function() {if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
      return "^"
    } else {
      return nil
    }; return nil; })());
    Opal.const_set($nesting[0], 'REGEXP_END', (function() {if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
      return "$"
    } else {
      return nil
    }; return nil; })());
    Opal.const_set($nesting[0], 'FORBIDDEN_STARTING_IDENTIFIER_CHARS', "\\u0001-\\u002F\\u003A-\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    Opal.const_set($nesting[0], 'FORBIDDEN_ENDING_IDENTIFIER_CHARS', "\\u0001-\\u0020\\u0022-\\u002F\\u003A-\\u003E\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    Opal.const_set($nesting[0], 'INLINE_IDENTIFIER_REGEXP', $$($nesting, 'Regexp').$new("" + "[^" + ($$($nesting, 'FORBIDDEN_STARTING_IDENTIFIER_CHARS')) + "]*[^" + ($$($nesting, 'FORBIDDEN_ENDING_IDENTIFIER_CHARS')) + "]"));
    Opal.const_set($nesting[0], 'FORBIDDEN_CONST_NAME_CHARS', "\\u0001-\\u0020\\u0021-\\u002F\\u003B-\\u003F\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    Opal.const_set($nesting[0], 'CONST_NAME_REGEXP', $$($nesting, 'Regexp').$new("" + ($$($nesting, 'REGEXP_START')) + "(::)?[A-Z][^" + ($$($nesting, 'FORBIDDEN_CONST_NAME_CHARS')) + "]*" + ($$($nesting, 'REGEXP_END'))));
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/comparable"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$===', '$>', '$<', '$equal?', '$<=>', '$normalize', '$raise', '$class']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Comparable');

    var $nesting = [self].concat($parent_nesting), $Comparable_normalize$1, $Comparable_$eq_eq$2, $Comparable_$gt$3, $Comparable_$gt_eq$4, $Comparable_$lt$5, $Comparable_$lt_eq$6, $Comparable_between$ques$7, $Comparable_clamp$8;

    
    Opal.defs(self, '$normalize', $Comparable_normalize$1 = function $$normalize(what) {
      var self = this;

      
      if ($truthy($$($nesting, 'Integer')['$==='](what))) {
        return what};
      if ($truthy($rb_gt(what, 0))) {
        return 1};
      if ($truthy($rb_lt(what, 0))) {
        return -1};
      return 0;
    }, $Comparable_normalize$1.$$arity = 1);
    
    Opal.def(self, '$==', $Comparable_$eq_eq$2 = function(other) {
      var self = this, cmp = nil;

      try {
        
        if ($truthy(self['$equal?'](other))) {
          return true};
        
      if (self["$<=>"] == Opal.Kernel["$<=>"]) {
        return false;
      }

      // check for infinite recursion
      if (self.$$comparable) {
        delete self.$$comparable;
        return false;
      }
    ;
        if ($truthy((cmp = self['$<=>'](other)))) {
        } else {
          return false
        };
        return $$($nesting, 'Comparable').$normalize(cmp) == 0;
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
          try {
            return false
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, $Comparable_$eq_eq$2.$$arity = 1);
    
    Opal.def(self, '$>', $Comparable_$gt$3 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $$($nesting, 'Comparable').$normalize(cmp) > 0;
    }, $Comparable_$gt$3.$$arity = 1);
    
    Opal.def(self, '$>=', $Comparable_$gt_eq$4 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $$($nesting, 'Comparable').$normalize(cmp) >= 0;
    }, $Comparable_$gt_eq$4.$$arity = 1);
    
    Opal.def(self, '$<', $Comparable_$lt$5 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $$($nesting, 'Comparable').$normalize(cmp) < 0;
    }, $Comparable_$lt$5.$$arity = 1);
    
    Opal.def(self, '$<=', $Comparable_$lt_eq$6 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $$($nesting, 'Comparable').$normalize(cmp) <= 0;
    }, $Comparable_$lt_eq$6.$$arity = 1);
    
    Opal.def(self, '$between?', $Comparable_between$ques$7 = function(min, max) {
      var self = this;

      
      if ($rb_lt(self, min)) {
        return false};
      if ($rb_gt(self, max)) {
        return false};
      return true;
    }, $Comparable_between$ques$7.$$arity = 2);
    
    Opal.def(self, '$clamp', $Comparable_clamp$8 = function $$clamp(min, max) {
      var self = this, cmp = nil;

      
      cmp = min['$<=>'](max);
      if ($truthy(cmp)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (min.$class()) + " with " + (max.$class()) + " failed")
      };
      if ($truthy($rb_gt($$($nesting, 'Comparable').$normalize(cmp), 0))) {
        self.$raise($$($nesting, 'ArgumentError'), "min argument must be smaller than max argument")};
      if ($truthy($rb_lt($$($nesting, 'Comparable').$normalize(self['$<=>'](min)), 0))) {
        return min};
      if ($truthy($rb_gt($$($nesting, 'Comparable').$normalize(self['$<=>'](max)), 0))) {
        return max};
      return self;
    }, $Comparable_clamp$8.$$arity = 2);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["pathname"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $module = Opal.module;

  Opal.add_stubs(['$require', '$include', '$quote', '$===', '$to_s', '$path', '$respond_to?', '$to_path', '$is_a?', '$nil?', '$raise', '$class', '$==', '$attr_reader', '$!', '$relative?', '$chop_basename', '$basename', '$=~', '$new', '$source', '$[]', '$rindex', '$sub', '$absolute?', '$expand_path', '$plus', '$unshift', '$length', '$!=', '$empty?', '$first', '$shift', '$+', '$join', '$dirname', '$pop', '$reverse_each', '$directory?', '$extname', '$<=>', '$nonzero?', '$proc', '$casecmp', '$cleanpath', '$inspect', '$include?', '$fill', '$map', '$entries']);
  
  self.$require("corelib/comparable");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Pathname');

    var $nesting = [self].concat($parent_nesting), $Pathname_initialize$1, $Pathname_$eq_eq$2, $Pathname_absolute$ques$3, $Pathname_relative$ques$4, $Pathname_chop_basename$5, $Pathname_root$ques$6, $Pathname_parent$7, $Pathname_sub$8, $Pathname_cleanpath$9, $Pathname_to_path$10, $Pathname_hash$11, $Pathname_expand_path$12, $Pathname_$plus$13, $Pathname_plus$14, $Pathname_join$15, $Pathname_split$17, $Pathname_dirname$18, $Pathname_basename$19, $Pathname_directory$ques$20, $Pathname_extname$21, $Pathname_$lt_eq_gt$22, $Pathname$23, $Pathname$24, $Pathname_relative_path_from$25, $Pathname_entries$26;

    self.$$prototype.path = nil;
    
    self.$include($$($nesting, 'Comparable'));
    Opal.const_set($nesting[0], 'SEPARATOR_PAT', new RegExp($$($nesting, 'Regexp').$quote($$$($$($nesting, 'File'), 'SEPARATOR'))));
    
    Opal.def(self, '$initialize', $Pathname_initialize$1 = function $$initialize(path) {
      var self = this;

      
      if ($truthy($$($nesting, 'Pathname')['$==='](path))) {
        self.path = path.$path().$to_s()
      } else if ($truthy(path['$respond_to?']("to_path"))) {
        self.path = path.$to_path()
      } else if ($truthy(path['$is_a?']($$($nesting, 'String')))) {
        self.path = path
      } else if ($truthy(path['$nil?']())) {
        self.$raise($$($nesting, 'TypeError'), "no implicit conversion of nil into String")
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "no implicit conversion of " + (path.$class()) + " into String")
      };
      if (self.path['$==']("\u0000")) {
        return self.$raise($$($nesting, 'ArgumentError'))
      } else {
        return nil
      };
    }, $Pathname_initialize$1.$$arity = 1);
    self.$attr_reader("path");
    
    Opal.def(self, '$==', $Pathname_$eq_eq$2 = function(other) {
      var self = this;

      return other.$path()['$=='](self.path)
    }, $Pathname_$eq_eq$2.$$arity = 1);
    
    Opal.def(self, '$absolute?', $Pathname_absolute$ques$3 = function() {
      var self = this;

      return self['$relative?']()['$!']()
    }, $Pathname_absolute$ques$3.$$arity = 0);
    
    Opal.def(self, '$relative?', $Pathname_relative$ques$4 = function() {
      var $a, $b, $c, self = this, path = nil, r = nil;

      
      path = self.path;
      while ($truthy((r = self.$chop_basename(path)))) {
        $c = r, $b = Opal.to_ary($c), (path = ($b[0] == null ? nil : $b[0])), $c
      };
      return path['$==']("");
    }, $Pathname_relative$ques$4.$$arity = 0);
    
    Opal.def(self, '$chop_basename', $Pathname_chop_basename$5 = function $$chop_basename(path) {
      var self = this, base = nil;

      
      base = $$($nesting, 'File').$basename(path);
      if ($truthy($$($nesting, 'Regexp').$new("" + "^" + ($$$($$($nesting, 'Pathname'), 'SEPARATOR_PAT').$source()) + "?$")['$=~'](base))) {
        return nil
      } else {
        return [path['$[]'](0, path.$rindex(base)), base]
      };
    }, $Pathname_chop_basename$5.$$arity = 1);
    
    Opal.def(self, '$root?', $Pathname_root$ques$6 = function() {
      var self = this;

      return self.path['$==']("/")
    }, $Pathname_root$ques$6.$$arity = 0);
    
    Opal.def(self, '$parent', $Pathname_parent$7 = function $$parent() {
      var self = this, new_path = nil;

      
      new_path = self.path.$sub(/\/([^\/]+\/?$)/, "");
      if (new_path['$==']("")) {
        new_path = (function() {if ($truthy(self['$absolute?']())) {
          return "/"
        } else {
          return "."
        }; return nil; })()};
      return $$($nesting, 'Pathname').$new(new_path);
    }, $Pathname_parent$7.$$arity = 0);
    
    Opal.def(self, '$sub', $Pathname_sub$8 = function $$sub($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $$($nesting, 'Pathname').$new($send(self.path, 'sub', Opal.to_a(args)));
    }, $Pathname_sub$8.$$arity = -1);
    
    Opal.def(self, '$cleanpath', $Pathname_cleanpath$9 = function $$cleanpath() {
      var self = this;

      return Opal.normalize(self.path)
    }, $Pathname_cleanpath$9.$$arity = 0);
    
    Opal.def(self, '$to_path', $Pathname_to_path$10 = function $$to_path() {
      var self = this;

      return self.path
    }, $Pathname_to_path$10.$$arity = 0);
    
    Opal.def(self, '$hash', $Pathname_hash$11 = function $$hash() {
      var self = this;

      return self.path
    }, $Pathname_hash$11.$$arity = 0);
    
    Opal.def(self, '$expand_path', $Pathname_expand_path$12 = function $$expand_path() {
      var self = this;

      return $$($nesting, 'Pathname').$new($$($nesting, 'File').$expand_path(self.path))
    }, $Pathname_expand_path$12.$$arity = 0);
    
    Opal.def(self, '$+', $Pathname_$plus$13 = function(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Pathname')['$==='](other))) {
      } else {
        other = $$($nesting, 'Pathname').$new(other)
      };
      return $$($nesting, 'Pathname').$new(self.$plus(self.path, other.$to_s()));
    }, $Pathname_$plus$13.$$arity = 1);
    
    Opal.def(self, '$plus', $Pathname_plus$14 = function $$plus(path1, path2) {
      var $a, $b, $c, self = this, prefix2 = nil, index_list2 = nil, basename_list2 = nil, r2 = nil, basename2 = nil, prefix1 = nil, r1 = nil, basename1 = nil, suffix2 = nil;

      
      prefix2 = path2;
      index_list2 = [];
      basename_list2 = [];
      while ($truthy((r2 = self.$chop_basename(prefix2)))) {
        
        $c = r2, $b = Opal.to_ary($c), (prefix2 = ($b[0] == null ? nil : $b[0])), (basename2 = ($b[1] == null ? nil : $b[1])), $c;
        index_list2.$unshift(prefix2.$length());
        basename_list2.$unshift(basename2);
      };
      if ($truthy(prefix2['$!='](""))) {
        return path2};
      prefix1 = path1;
      while ($truthy(true)) {
        
        while ($truthy(($truthy($c = basename_list2['$empty?']()['$!']()) ? basename_list2.$first()['$=='](".") : $c))) {
          
          index_list2.$shift();
          basename_list2.$shift();
        };
        if ($truthy((r1 = self.$chop_basename(prefix1)))) {
        } else {
          break;
        };
        $c = r1, $b = Opal.to_ary($c), (prefix1 = ($b[0] == null ? nil : $b[0])), (basename1 = ($b[1] == null ? nil : $b[1])), $c;
        if (basename1['$=='](".")) {
          continue;};
        if ($truthy(($truthy($b = ($truthy($c = basename1['$==']("..")) ? $c : basename_list2['$empty?']())) ? $b : basename_list2.$first()['$!=']("..")))) {
          
          prefix1 = $rb_plus(prefix1, basename1);
          break;;};
        index_list2.$shift();
        basename_list2.$shift();
      };
      r1 = self.$chop_basename(prefix1);
      if ($truthy(($truthy($a = r1['$!']()) ? new RegExp($$($nesting, 'SEPARATOR_PAT'))['$=~']($$($nesting, 'File').$basename(prefix1)) : $a))) {
        while ($truthy(($truthy($b = basename_list2['$empty?']()['$!']()) ? basename_list2.$first()['$==']("..") : $b))) {
          
          index_list2.$shift();
          basename_list2.$shift();
        }};
      if ($truthy(basename_list2['$empty?']()['$!']())) {
        
        suffix2 = path2['$[]'](Opal.Range.$new(index_list2.$first(), -1, false));
        if ($truthy(r1)) {
          return $$($nesting, 'File').$join(prefix1, suffix2)
        } else {
          return $rb_plus(prefix1, suffix2)
        };
      } else if ($truthy(r1)) {
        return prefix1
      } else {
        return $$($nesting, 'File').$dirname(prefix1)
      };
    }, $Pathname_plus$14.$$arity = 2);
    
    Opal.def(self, '$join', $Pathname_join$15 = function $$join($a) {try {

      var $post_args, args, $$16, self = this, result = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(args['$empty?']())) {
        return self};
      result = args.$pop();
      if ($truthy($$($nesting, 'Pathname')['$==='](result))) {
      } else {
        result = $$($nesting, 'Pathname').$new(result)
      };
      if ($truthy(result['$absolute?']())) {
        return result};
      $send(args, 'reverse_each', [], ($$16 = function(arg){var self = $$16.$$s || this;

      
        
        if (arg == null) {
          arg = nil;
        };
        if ($truthy($$($nesting, 'Pathname')['$==='](arg))) {
        } else {
          arg = $$($nesting, 'Pathname').$new(arg)
        };
        result = $rb_plus(arg, result);
        if ($truthy(result['$absolute?']())) {
          Opal.ret(result)
        } else {
          return nil
        };}, $$16.$$s = self, $$16.$$arity = 1, $$16));
      return $rb_plus(self, result);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Pathname_join$15.$$arity = -1);
    
    Opal.def(self, '$split', $Pathname_split$17 = function $$split() {
      var self = this;

      return [self.$dirname(), self.$basename()]
    }, $Pathname_split$17.$$arity = 0);
    
    Opal.def(self, '$dirname', $Pathname_dirname$18 = function $$dirname() {
      var self = this;

      return $$($nesting, 'Pathname').$new($$($nesting, 'File').$dirname(self.path))
    }, $Pathname_dirname$18.$$arity = 0);
    
    Opal.def(self, '$basename', $Pathname_basename$19 = function $$basename() {
      var self = this;

      return $$($nesting, 'Pathname').$new($$($nesting, 'File').$basename(self.path))
    }, $Pathname_basename$19.$$arity = 0);
    
    Opal.def(self, '$directory?', $Pathname_directory$ques$20 = function() {
      var self = this;

      return $$($nesting, 'File')['$directory?'](self.path)
    }, $Pathname_directory$ques$20.$$arity = 0);
    
    Opal.def(self, '$extname', $Pathname_extname$21 = function $$extname() {
      var self = this;

      return $$($nesting, 'File').$extname(self.path)
    }, $Pathname_extname$21.$$arity = 0);
    
    Opal.def(self, '$<=>', $Pathname_$lt_eq_gt$22 = function(other) {
      var self = this;

      return self.$path()['$<=>'](other.$path())
    }, $Pathname_$lt_eq_gt$22.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    Opal.alias(self, "===", "==");
    Opal.alias(self, "to_str", "to_path");
    Opal.alias(self, "to_s", "to_path");
    Opal.const_set($nesting[0], 'SAME_PATHS', (function() {if ($truthy($$$($$($nesting, 'File'), 'FNM_SYSCASE')['$nonzero?']())) {
      return $send(self, 'proc', [], ($Pathname$23 = function(a, b){var self = $Pathname$23.$$s || this;

      
        
        if (a == null) {
          a = nil;
        };
        
        if (b == null) {
          b = nil;
        };
        return a.$casecmp(b)['$=='](0);}, $Pathname$23.$$s = self, $Pathname$23.$$arity = 2, $Pathname$23))
    } else {
      return $send(self, 'proc', [], ($Pathname$24 = function(a, b){var self = $Pathname$24.$$s || this;

      
        
        if (a == null) {
          a = nil;
        };
        
        if (b == null) {
          b = nil;
        };
        return a['$=='](b);}, $Pathname$24.$$s = self, $Pathname$24.$$arity = 2, $Pathname$24))
    }; return nil; })());
    
    Opal.def(self, '$relative_path_from', $Pathname_relative_path_from$25 = function $$relative_path_from(base_directory) {
      var $a, $b, $c, self = this, dest_directory = nil, dest_prefix = nil, dest_names = nil, r = nil, basename = nil, base_prefix = nil, base_names = nil, relpath_names = nil;

      
      dest_directory = self.$cleanpath().$to_s();
      base_directory = base_directory.$cleanpath().$to_s();
      dest_prefix = dest_directory;
      dest_names = [];
      while ($truthy((r = self.$chop_basename(dest_prefix)))) {
        
        $c = r, $b = Opal.to_ary($c), (dest_prefix = ($b[0] == null ? nil : $b[0])), (basename = ($b[1] == null ? nil : $b[1])), $c;
        if ($truthy(basename['$!=']("."))) {
          dest_names.$unshift(basename)};
      };
      base_prefix = base_directory;
      base_names = [];
      while ($truthy((r = self.$chop_basename(base_prefix)))) {
        
        $c = r, $b = Opal.to_ary($c), (base_prefix = ($b[0] == null ? nil : $b[0])), (basename = ($b[1] == null ? nil : $b[1])), $c;
        if ($truthy(basename['$!=']("."))) {
          base_names.$unshift(basename)};
      };
      if ($truthy($$($nesting, 'SAME_PATHS')['$[]'](dest_prefix, base_prefix))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "different prefix: " + (dest_prefix.$inspect()) + " and " + (base_directory.$inspect()))
      };
      while ($truthy(($truthy($b = ($truthy($c = dest_names['$empty?']()['$!']()) ? base_names['$empty?']()['$!']() : $c)) ? $$($nesting, 'SAME_PATHS')['$[]'](dest_names.$first(), base_names.$first()) : $b))) {
        
        dest_names.$shift();
        base_names.$shift();
      };
      if ($truthy(base_names['$include?'](".."))) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "base_directory has ..: " + (base_directory.$inspect()))};
      base_names.$fill("..");
      relpath_names = $rb_plus(base_names, dest_names);
      if ($truthy(relpath_names['$empty?']())) {
        return $$($nesting, 'Pathname').$new(".")
      } else {
        return $$($nesting, 'Pathname').$new($send($$($nesting, 'File'), 'join', Opal.to_a(relpath_names)))
      };
    }, $Pathname_relative_path_from$25.$$arity = 1);
    return (Opal.def(self, '$entries', $Pathname_entries$26 = function $$entries() {
      var $$27, self = this;

      return $send($$($nesting, 'Dir').$entries(self.path), 'map', [], ($$27 = function(f){var self = $$27.$$s || this;

      
        
        if (f == null) {
          f = nil;
        };
        return self.$class().$new(f);}, $$27.$$s = self, $$27.$$arity = 1, $$27))
    }, $Pathname_entries$26.$$arity = 0), nil) && 'entries';
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_Pathname$28;

    
    Opal.def(self, '$Pathname', $Kernel_Pathname$28 = function $$Pathname(path) {
      var self = this;

      return $$($nesting, 'Pathname').$new(path)
    }, $Kernel_Pathname$28.$$arity = 1)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/hike"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$attr_reader', '$freeze', '$dup', '$map', '$new', '$to_s', '$sub', '$=~', '$find_in_base_path', '$find_in_paths', '$[]', '$directory?', '$sort', '$reject', '$entries', '$[]=', '$-', '$key?', '$exist?', '$stat', '$protected', '$is_a?', '$last', '$pop', '$split', '$each', '$match', '$join', '$to_proc', '$paths_contain?', '$pattern_for', '$select', '$sort_matches', '$file?', '$any?', '$paths', '$==', '$length', '$build_pattern_for', '$extensions', '$escape', '$sort_by', '$scan', '$inject', '$index', '$+', '$expand_path', '$concat', '$normalize_path', '$normalize_extension', '$find', '$root', '$private', '$start_with?', '$relative?']);
  
  self.$require("pathname");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Hike');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Index');

        var $nesting = [self].concat($parent_nesting), $Index_initialize$1, $Index_root$3, $Index_index$4, $Index_find$5, $Index_entries$8, $Index_stat$10, $Index_extract_options$excl$11, $Index_find_in_paths$12, $Index_find_in_base_path$14, $Index_match$15, $Index_paths_contain$ques$18, $Index_pattern_for$20, $Index_build_pattern_for$21, $Index_sort_matches$23;

        self.$$prototype.root = self.$$prototype.entries = self.$$prototype.stats = self.$$prototype.pathnames = self.$$prototype.patterns = nil;
        
        self.$attr_reader("paths");
        self.$attr_reader("extensions");
        
        Opal.def(self, '$initialize', $Index_initialize$1 = function $$initialize(root, paths, extensions) {
          var $$2, self = this;

          
          self.root = root;
          self.paths = paths.$dup().$freeze();
          self.extensions = extensions.$dup().$freeze();
          self.pathnames = $send(paths, 'map', [], ($$2 = function(path){var self = $$2.$$s || this;

          
            
            if (path == null) {
              path = nil;
            };
            return $$($nesting, 'Pathname').$new(path);}, $$2.$$s = self, $$2.$$arity = 1, $$2));
          self.stats = $hash2([], {});
          self.entries = $hash2([], {});
          return (self.patterns = $hash2([], {}));
        }, $Index_initialize$1.$$arity = 3);
        
        Opal.def(self, '$root', $Index_root$3 = function $$root() {
          var self = this;

          return self.root.$to_s()
        }, $Index_root$3.$$arity = 0);
        
        Opal.def(self, '$index', $Index_index$4 = function $$index() {
          var self = this;

          return self
        }, $Index_index$4.$$arity = 0);
        
        Opal.def(self, '$find', $Index_find$5 = function $$find(logical_path) {try {

          var $$6, $$7, self = this, base_path = nil;

          
          base_path = $$($nesting, 'Pathname').$new(self.root);
          logical_path = $$($nesting, 'Pathname').$new(logical_path.$sub(/^\//, ""));
          if ($truthy(logical_path.$to_s()['$=~'](/^\.\.?\//))) {
            $send(self, 'find_in_base_path', [logical_path, base_path], ($$6 = function(path){var self = $$6.$$s || this;

            
              
              if (path == null) {
                path = nil;
              };
              Opal.ret(path);}, $$6.$$s = self, $$6.$$arity = 1, $$6))
          } else {
            $send(self, 'find_in_paths', [logical_path], ($$7 = function(path){var self = $$7.$$s || this;

            
              
              if (path == null) {
                path = nil;
              };
              Opal.ret(path);}, $$7.$$s = self, $$7.$$arity = 1, $$7))
          };
          return nil;
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, $Index_find$5.$$arity = 1);
        
        Opal.def(self, '$entries', $Index_entries$8 = function $$entries(path) {
          var $a, $$9, self = this, $writer = nil, pathname = nil;

          return ($truthy($a = self.entries['$[]'](path.$to_s())) ? $a : (($writer = [path.$to_s(), ((pathname = $$($nesting, 'Pathname').$new(path)), (function() {if ($truthy(pathname['$directory?']())) {
            return $send(pathname.$entries(), 'reject', [], ($$9 = function(entry){var self = $$9.$$s || this;

            
              
              if (entry == null) {
                entry = nil;
              };
              return entry.$to_s()['$=~'](/^\.|~$|^\#.*\#$/);}, $$9.$$s = self, $$9.$$arity = 1, $$9)).$sort()
          } else {
            return []
          }; return nil; })())]), $send(self.entries, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
        }, $Index_entries$8.$$arity = 1);
        
        Opal.def(self, '$stat', $Index_stat$10 = function $$stat(path) {
          var self = this, key = nil, $writer = nil;

          
          key = path.$to_s();
          if ($truthy(self.stats['$key?'](key))) {
            return self.stats['$[]'](key)
          } else if ($truthy($$($nesting, 'File')['$exist?'](path))) {
            
            $writer = [key, $$($nesting, 'File').$stat(path)];
            $send(self.stats, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            
            $writer = [key, nil];
            $send(self.stats, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          };
        }, $Index_stat$10.$$arity = 1);
        self.$protected();
        
        Opal.def(self, '$extract_options!', $Index_extract_options$excl$11 = function(arguments$) {
          var self = this;

          if ($truthy(arguments$.$last()['$is_a?']($$($nesting, 'Hash')))) {
            return arguments$.$pop().$dup()
          } else {
            return $hash2([], {})
          }
        }, $Index_extract_options$excl$11.$$arity = 1);
        
        Opal.def(self, '$find_in_paths', $Index_find_in_paths$12 = function $$find_in_paths(logical_path) {
          var $iter = $Index_find_in_paths$12.$$p, block = $iter || nil, $a, $b, $$13, self = this, dirname = nil, basename = nil;

          if ($iter) $Index_find_in_paths$12.$$p = null;
          
          
          if ($iter) $Index_find_in_paths$12.$$p = null;;
          $b = logical_path.$split(), $a = Opal.to_ary($b), (dirname = ($a[0] == null ? nil : $a[0])), (basename = ($a[1] == null ? nil : $a[1])), $b;
          return $send(self.pathnames, 'each', [], ($$13 = function(base_path){var self = $$13.$$s || this;

          
            
            if (base_path == null) {
              base_path = nil;
            };
            return $send(self, 'match', [base_path.$join(dirname), basename], block.$to_proc());}, $$13.$$s = self, $$13.$$arity = 1, $$13));
        }, $Index_find_in_paths$12.$$arity = 1);
        
        Opal.def(self, '$find_in_base_path', $Index_find_in_base_path$14 = function $$find_in_base_path(logical_path, base_path) {
          var $iter = $Index_find_in_base_path$14.$$p, block = $iter || nil, $a, $b, self = this, candidate = nil, dirname = nil, basename = nil;

          if ($iter) $Index_find_in_base_path$14.$$p = null;
          
          
          if ($iter) $Index_find_in_base_path$14.$$p = null;;
          candidate = base_path.$join(logical_path);
          $b = candidate.$split(), $a = Opal.to_ary($b), (dirname = ($a[0] == null ? nil : $a[0])), (basename = ($a[1] == null ? nil : $a[1])), $b;
          if ($truthy(self['$paths_contain?'](dirname))) {
            return $send(self, 'match', [dirname, basename], block.$to_proc())
          } else {
            return nil
          };
        }, $Index_find_in_base_path$14.$$arity = 2);
        
        Opal.def(self, '$match', $Index_match$15 = function $$match(dirname, basename) {
          var $$16, $$17, $iter = $Index_match$15.$$p, $yield = $iter || nil, self = this, matches = nil, pattern = nil;

          if ($iter) $Index_match$15.$$p = null;
          
          matches = self.$entries(dirname);
          pattern = self.$pattern_for(basename);
          matches = $send(matches, 'select', [], ($$16 = function(m){var self = $$16.$$s || this;

          
            
            if (m == null) {
              m = nil;
            };
            return m.$to_s()['$=~'](pattern);}, $$16.$$s = self, $$16.$$arity = 1, $$16));
          return $send(self.$sort_matches(matches, basename), 'each', [], ($$17 = function(path){var self = $$17.$$s || this, $a, pathname = nil, stat = nil;

          
            
            if (path == null) {
              path = nil;
            };
            pathname = dirname.$join(path);
            stat = self.$stat(pathname);
            if ($truthy(($truthy($a = stat) ? stat['$file?']() : $a))) {
              return Opal.yield1($yield, pathname.$to_s());
            } else {
              return nil
            };}, $$17.$$s = self, $$17.$$arity = 1, $$17));
        }, $Index_match$15.$$arity = 2);
        
        Opal.def(self, '$paths_contain?', $Index_paths_contain$ques$18 = function(dirname) {
          var $$19, self = this;

          return $send(self.$paths(), 'any?', [], ($$19 = function(path){var self = $$19.$$s || this;

          
            
            if (path == null) {
              path = nil;
            };
            return dirname.$to_s()['$[]'](0, path.$length())['$=='](path);}, $$19.$$s = self, $$19.$$arity = 1, $$19))
        }, $Index_paths_contain$ques$18.$$arity = 1);
        
        Opal.def(self, '$pattern_for', $Index_pattern_for$20 = function $$pattern_for(basename) {
          var $a, self = this, $writer = nil;

          return ($truthy($a = self.patterns['$[]'](basename)) ? $a : (($writer = [basename, self.$build_pattern_for(basename)]), $send(self.patterns, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
        }, $Index_pattern_for$20.$$arity = 1);
        
        Opal.def(self, '$build_pattern_for', $Index_build_pattern_for$21 = function $$build_pattern_for(basename) {
          var $$22, self = this, extension_pattern = nil;

          
          extension_pattern = $send(self.$extensions(), 'map', [], ($$22 = function(e){var self = $$22.$$s || this;

          
            
            if (e == null) {
              e = nil;
            };
            return $$($nesting, 'Regexp').$escape(e);}, $$22.$$s = self, $$22.$$arity = 1, $$22)).$join("|");
          return new RegExp("" + "^" + (basename) + "(?:" + (extension_pattern) + ")*$");
        }, $Index_build_pattern_for$21.$$arity = 1);
        return (Opal.def(self, '$sort_matches', $Index_sort_matches$23 = function $$sort_matches(matches, basename) {
          var $$24, self = this;

          return $send(matches, 'sort_by', [], ($$24 = function(match){var self = $$24.$$s || this, $$25, extnames = nil;

          
            
            if (match == null) {
              match = nil;
            };
            extnames = match.$sub(basename.$to_s(), "").$to_s().$scan(/\.[^.]+/);
            return $send(extnames, 'inject', [0], ($$25 = function(sum, ext){var self = $$25.$$s || this, index = nil;

            
              
              if (sum == null) {
                sum = nil;
              };
              
              if (ext == null) {
                ext = nil;
              };
              index = self.$extensions().$index(ext);
              if ($truthy(index)) {
                return $rb_plus($rb_plus(sum, index), 1)
              } else {
                return sum
              };}, $$25.$$s = self, $$25.$$arity = 2, $$25));}, $$24.$$s = self, $$24.$$arity = 1, $$24))
        }, $Index_sort_matches$23.$$arity = 2), nil) && 'sort_matches';
      })($nesting[0], null, $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Trail');

        var $nesting = [self].concat($parent_nesting), $Trail_initialize$26, $Trail_root$27, $Trail_append_paths$28, $Trail_append_extensions$30, $Trail_find$32, $Trail_index$33, $Trail_entries$34, $Trail_stat$36, $Trail_normalize_extension$37, $Trail_normalize_path$38;

        self.$$prototype.root = self.$$prototype.paths = self.$$prototype.extensions = nil;
        
        self.$attr_reader("paths");
        self.$attr_reader("extensions");
        
        Opal.def(self, '$initialize', $Trail_initialize$26 = function $$initialize(root) {
          var self = this;

          
          
          if (root == null) {
            root = ".";
          };
          self.root = $$($nesting, 'Pathname').$new(root).$expand_path();
          self.paths = [];
          return (self.extensions = []);
        }, $Trail_initialize$26.$$arity = -1);
        
        Opal.def(self, '$root', $Trail_root$27 = function $$root() {
          var self = this;

          return self.root.$to_s()
        }, $Trail_root$27.$$arity = 0);
        
        Opal.def(self, '$append_paths', $Trail_append_paths$28 = function $$append_paths($a) {
          var $post_args, paths, $$29, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          paths = $post_args;;
          return self.paths.$concat($send(paths, 'map', [], ($$29 = function(p){var self = $$29.$$s || this;

          
            
            if (p == null) {
              p = nil;
            };
            return self.$normalize_path(p);}, $$29.$$s = self, $$29.$$arity = 1, $$29)));
        }, $Trail_append_paths$28.$$arity = -1);
        
        Opal.def(self, '$append_extensions', $Trail_append_extensions$30 = function $$append_extensions($a) {
          var $post_args, extensions, $$31, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          extensions = $post_args;;
          return self.extensions.$concat($send(extensions, 'map', [], ($$31 = function(e){var self = $$31.$$s || this;

          
            
            if (e == null) {
              e = nil;
            };
            return self.$normalize_extension(e);}, $$31.$$s = self, $$31.$$arity = 1, $$31)));
        }, $Trail_append_extensions$30.$$arity = -1);
        
        Opal.def(self, '$find', $Trail_find$32 = function $$find($a) {
          var $iter = $Trail_find$32.$$p, block = $iter || nil, $post_args, args, self = this;

          if ($iter) $Trail_find$32.$$p = null;
          
          
          if ($iter) $Trail_find$32.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self.$index(), 'find', Opal.to_a(args), block.$to_proc());
        }, $Trail_find$32.$$arity = -1);
        
        Opal.def(self, '$index', $Trail_index$33 = function $$index() {
          var self = this;

          return $$($nesting, 'Index').$new(self.$root(), self.$paths(), self.$extensions())
        }, $Trail_index$33.$$arity = 0);
        
        Opal.def(self, '$entries', $Trail_entries$34 = function $$entries(path) {
          var $$35, self = this, pathname = nil;

          
          pathname = $$($nesting, 'Pathname').$new(path);
          if ($truthy(pathname['$directory?']())) {
            return $send(pathname.$entries(), 'reject', [], ($$35 = function(entry){var self = $$35.$$s || this;

            
              
              if (entry == null) {
                entry = nil;
              };
              return entry.$to_s()['$=~'](/^\.|~$|^\#.*\#$/);}, $$35.$$s = self, $$35.$$arity = 1, $$35)).$sort()
          } else {
            return []
          };
        }, $Trail_entries$34.$$arity = 1);
        
        Opal.def(self, '$stat', $Trail_stat$36 = function $$stat(path) {
          var self = this;

          if ($truthy($$($nesting, 'File')['$exist?'](path))) {
            return $$($nesting, 'File').$stat(path.$to_s())
          } else {
            return nil
          }
        }, $Trail_stat$36.$$arity = 1);
        self.$private();
        
        Opal.def(self, '$normalize_extension', $Trail_normalize_extension$37 = function $$normalize_extension(ext) {
          var self = this;

          if ($truthy(ext['$start_with?']("."))) {
            return ext
          } else {
            return "" + "." + (ext)
          }
        }, $Trail_normalize_extension$37.$$arity = 1);
        return (Opal.def(self, '$normalize_path', $Trail_normalize_path$38 = function $$normalize_path(path) {
          var self = this;

          
          path = $$($nesting, 'Pathname').$new(path);
          if ($truthy(path['$relative?']())) {
            path = self.root.$join(path)};
          return path.$expand_path().$to_s();
        }, $Trail_normalize_path$38.$$arity = 1), nil) && 'normalize_path';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/path_reader"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$quote', '$freeze', '$paths', '$new', '$append_paths', '$append_extensions', '$expand', '$nil?', '$open', '$to_proc', '$absolute?', '$=~', '$find_path', '$file_finder', '$extensions', '$private', '$Pathname', '$exist?', '$find', '$attr_reader']);
  
  self.$require("opal/regexp_anchors");
  self.$require("opal/hike");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'PathReader');

      var $nesting = [self].concat($parent_nesting), $PathReader_initialize$1, $PathReader_read$2, $PathReader_expand$3, $PathReader_paths$4, $PathReader_extensions$5, $PathReader_append_paths$6, $PathReader_find_path$7;

      self.$$prototype.file_finder = nil;
      
      Opal.const_set($nesting[0], 'RELATIVE_PATH_REGEXP', new RegExp("" + ($$$($$($nesting, 'Opal'), 'REGEXP_START')) + "\\.?\\." + ($$($nesting, 'Regexp').$quote($$$($$($nesting, 'File'), 'SEPARATOR')))));
      Opal.const_set($nesting[0], 'DEFAULT_EXTENSIONS', [".js", ".js.rb", ".rb", ".opalerb"].$freeze());
      
      Opal.def(self, '$initialize', $PathReader_initialize$1 = function $$initialize(paths, extensions) {
        var self = this;

        
        
        if (paths == null) {
          paths = $$($nesting, 'Opal').$paths();
        };
        
        if (extensions == null) {
          extensions = $$($nesting, 'DEFAULT_EXTENSIONS');
        };
        self.file_finder = $$$($$($nesting, 'Hike'), 'Trail').$new();
        $send(self.file_finder, 'append_paths', Opal.to_a(paths));
        return $send(self.file_finder, 'append_extensions', Opal.to_a(extensions));
      }, $PathReader_initialize$1.$$arity = -1);
      
      Opal.def(self, '$read', $PathReader_read$2 = function $$read(path) {
        var self = this, full_path = nil;

        
        full_path = self.$expand(path);
        if ($truthy(full_path['$nil?']())) {
          return nil};
        return $send($$($nesting, 'File'), 'open', [full_path, "rb:UTF-8"], "read".$to_proc());
      }, $PathReader_read$2.$$arity = 1);
      
      Opal.def(self, '$expand', $PathReader_expand$3 = function $$expand(path) {
        var $a, self = this;

        if ($truthy(($truthy($a = $$($nesting, 'Pathname').$new(path)['$absolute?']()) ? $a : path['$=~']($$($nesting, 'RELATIVE_PATH_REGEXP'))))) {
          return path
        } else {
          return self.$find_path(path)
        }
      }, $PathReader_expand$3.$$arity = 1);
      
      Opal.def(self, '$paths', $PathReader_paths$4 = function $$paths() {
        var self = this;

        return self.$file_finder().$paths()
      }, $PathReader_paths$4.$$arity = 0);
      
      Opal.def(self, '$extensions', $PathReader_extensions$5 = function $$extensions() {
        var self = this;

        return self.$file_finder().$extensions()
      }, $PathReader_extensions$5.$$arity = 0);
      
      Opal.def(self, '$append_paths', $PathReader_append_paths$6 = function $$append_paths($a) {
        var $post_args, paths, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        paths = $post_args;;
        return $send(self.$file_finder(), 'append_paths', Opal.to_a(paths));
      }, $PathReader_append_paths$6.$$arity = -1);
      self.$private();
      
      Opal.def(self, '$find_path', $PathReader_find_path$7 = function $$find_path(path) {
        var $a, self = this, pathname = nil;

        
        pathname = self.$Pathname(path);
        if ($truthy(($truthy($a = pathname['$absolute?']()) ? pathname['$exist?']() : $a))) {
          return path};
        return self.$file_finder().$find(path);
      }, $PathReader_find_path$7.$$arity = 1);
      return self.$attr_reader("file_finder");
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/paths"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$expand_path', '$untaint', '$dup', '$append_paths', '$concat', '$require_paths_for_gem', '$private', '$find_by_name', '$raise', '$each', '$runtime_dependencies', '$+', '$name', '$gem_dir', '$map', '$require_paths', '$<<', '$join', '$extend', '$freeze', '$core_dir', '$std_dir', '$!=', '$reset_paths!']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting), $Opal_gem_dir$1, $Opal_core_dir$2, $Opal_std_dir$3, $Opal_append_path$4, $Opal_append_paths$5, $Opal_paths$10, $Opal_reset_paths$excl$11;

    
    Opal.defs(self, '$gem_dir', $Opal_gem_dir$1 = function $$gem_dir() {
      var self = this;

      return $$($nesting, 'File').$expand_path("../..", "opal/paths.rb".$dup().$untaint())
    }, $Opal_gem_dir$1.$$arity = 0);
    Opal.defs(self, '$core_dir', $Opal_core_dir$2 = function $$core_dir() {
      var self = this;

      return $$($nesting, 'File').$expand_path("../../../opal", "opal/paths.rb".$dup().$untaint())
    }, $Opal_core_dir$2.$$arity = 0);
    Opal.defs(self, '$std_dir', $Opal_std_dir$3 = function $$std_dir() {
      var self = this;

      return $$($nesting, 'File').$expand_path("../../../stdlib", "opal/paths.rb".$dup().$untaint())
    }, $Opal_std_dir$3.$$arity = 0);
    Opal.defs(self, '$append_path', $Opal_append_path$4 = function $$append_path(path) {
      var self = this;

      return self.$append_paths(path)
    }, $Opal_append_path$4.$$arity = 1);
    Opal.defs(self, '$append_paths', $Opal_append_paths$5 = function $$append_paths($a) {
      var $post_args, paths, self = this;
      if (self.paths == null) self.paths = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      paths = $post_args;;
      self.paths.$concat(paths);
      return nil;
    }, $Opal_append_paths$5.$$arity = -1);
    (function($base, $parent_nesting) {
      var self = $module($base, 'UseGem');

      var $nesting = [self].concat($parent_nesting), $UseGem_use_gem$6, $UseGem_require_paths_for_gem$7;

      
      
      Opal.def(self, '$use_gem', $UseGem_use_gem$6 = function $$use_gem(gem_name, include_dependencies) {
        var self = this;

        
        
        if (include_dependencies == null) {
          include_dependencies = true;
        };
        return $send(self, 'append_paths', Opal.to_a(self.$require_paths_for_gem(gem_name, include_dependencies)));
      }, $UseGem_use_gem$6.$$arity = -2);
      self.$private();
      
      Opal.def(self, '$require_paths_for_gem', $UseGem_require_paths_for_gem$7 = function $$require_paths_for_gem(gem_name, include_dependencies) {
        var $$8, $$9, self = this, paths = nil, spec = nil, gem_dir = nil;

        
        paths = [];
        spec = $$$($$($nesting, 'Gem'), 'Specification').$find_by_name(gem_name);
        if ($truthy(spec)) {
        } else {
          self.$raise($$($nesting, 'GemNotFound'), gem_name)
        };
        if ($truthy(include_dependencies)) {
          $send(spec.$runtime_dependencies(), 'each', [], ($$8 = function(dependency){var self = $$8.$$s || this;

          
            
            if (dependency == null) {
              dependency = nil;
            };
            return (paths = $rb_plus(paths, self.$require_paths_for_gem(dependency.$name(), include_dependencies)));}, $$8.$$s = self, $$8.$$arity = 1, $$8))};
        gem_dir = spec.$gem_dir();
        $send(spec.$require_paths(), 'map', [], ($$9 = function(path){var self = $$9.$$s || this;

        
          
          if (path == null) {
            path = nil;
          };
          return paths['$<<']($$($nesting, 'File').$join(gem_dir, path));}, $$9.$$s = self, $$9.$$arity = 1, $$9));
        return paths;
      }, $UseGem_require_paths_for_gem$7.$$arity = 2);
    })($nesting[0], $nesting);
    self.$extend($$($nesting, 'UseGem'));
    Opal.defs(self, '$paths', $Opal_paths$10 = function $$paths() {
      var self = this;
      if (self.paths == null) self.paths = nil;

      return self.paths.$dup().$freeze()
    }, $Opal_paths$10.$$arity = 0);
    Opal.defs(self, '$reset_paths!', $Opal_reset_paths$excl$11 = function() {
      var self = this;

      
      self.paths = [self.$core_dir().$untaint(), self.$std_dir().$untaint(), self.$gem_dir().$untaint()];
      if ($truthy($$($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
        nil};
      return nil;
    }, $Opal_reset_paths$excl$11.$$arity = 0);
    self['$reset_paths!']();
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["set"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $module = Opal.module;

  Opal.add_stubs(['$include', '$new', '$nil?', '$===', '$raise', '$each', '$add', '$merge', '$class', '$respond_to?', '$subtract', '$dup', '$join', '$to_a', '$equal?', '$instance_of?', '$==', '$instance_variable_get', '$is_a?', '$size', '$all?', '$include?', '$[]=', '$-', '$enum_for', '$[]', '$<<', '$replace', '$delete', '$select', '$each_key', '$to_proc', '$empty?', '$eql?', '$instance_eval', '$clear', '$<', '$<=', '$keys']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Set');

    var $nesting = [self].concat($parent_nesting), $Set_$$$1, $Set_initialize$2, $Set_dup$4, $Set_$minus$5, $Set_inspect$6, $Set_$eq_eq$7, $Set_add$9, $Set_classify$10, $Set_collect$excl$13, $Set_delete$15, $Set_delete$ques$16, $Set_delete_if$17, $Set_add$ques$20, $Set_each$21, $Set_empty$ques$22, $Set_eql$ques$23, $Set_clear$25, $Set_include$ques$26, $Set_merge$27, $Set_replace$29, $Set_size$30, $Set_subtract$31, $Set_$$33, $Set_superset$ques$34, $Set_proper_superset$ques$36, $Set_subset$ques$38, $Set_proper_subset$ques$40, $Set_to_a$42;

    self.$$prototype.hash = nil;
    
    self.$include($$($nesting, 'Enumerable'));
    Opal.defs(self, '$[]', $Set_$$$1 = function($a) {
      var $post_args, ary, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      ary = $post_args;;
      return self.$new(ary);
    }, $Set_$$$1.$$arity = -1);
    
    Opal.def(self, '$initialize', $Set_initialize$2 = function $$initialize(enum$) {
      var $iter = $Set_initialize$2.$$p, block = $iter || nil, $$3, self = this;

      if ($iter) $Set_initialize$2.$$p = null;
      
      
      if ($iter) $Set_initialize$2.$$p = null;;
      
      if (enum$ == null) {
        enum$ = nil;
      };
      self.hash = $hash2([], {});
      if ($truthy(enum$['$nil?']())) {
        return nil};
      if ($truthy($$($nesting, 'Enumerable')['$==='](enum$))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be enumerable")
      };
      if ($truthy(block)) {
        return $send(enum$, 'each', [], ($$3 = function(item){var self = $$3.$$s || this;

        
          
          if (item == null) {
            item = nil;
          };
          return self.$add(Opal.yield1(block, item));}, $$3.$$s = self, $$3.$$arity = 1, $$3))
      } else {
        return self.$merge(enum$)
      };
    }, $Set_initialize$2.$$arity = -1);
    
    Opal.def(self, '$dup', $Set_dup$4 = function $$dup() {
      var self = this, result = nil;

      
      result = self.$class().$new();
      return result.$merge(self);
    }, $Set_dup$4.$$arity = 0);
    
    Opal.def(self, '$-', $Set_$minus$5 = function(enum$) {
      var self = this;

      
      if ($truthy(enum$['$respond_to?']("each"))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$subtract(enum$);
    }, $Set_$minus$5.$$arity = 1);
    Opal.alias(self, "difference", "-");
    
    Opal.def(self, '$inspect', $Set_inspect$6 = function $$inspect() {
      var self = this;

      return "" + "#<Set: {" + (self.$to_a().$join(",")) + "}>"
    }, $Set_inspect$6.$$arity = 0);
    
    Opal.def(self, '$==', $Set_$eq_eq$7 = function(other) {
      var $a, $$8, self = this;

      if ($truthy(self['$equal?'](other))) {
        return true
      } else if ($truthy(other['$instance_of?'](self.$class()))) {
        return self.hash['$=='](other.$instance_variable_get("@hash"))
      } else if ($truthy(($truthy($a = other['$is_a?']($$($nesting, 'Set'))) ? self.$size()['$=='](other.$size()) : $a))) {
        return $send(other, 'all?', [], ($$8 = function(o){var self = $$8.$$s || this;
          if (self.hash == null) self.hash = nil;

        
          
          if (o == null) {
            o = nil;
          };
          return self.hash['$include?'](o);}, $$8.$$s = self, $$8.$$arity = 1, $$8))
      } else {
        return false
      }
    }, $Set_$eq_eq$7.$$arity = 1);
    
    Opal.def(self, '$add', $Set_add$9 = function $$add(o) {
      var self = this, $writer = nil;

      
      
      $writer = [o, true];
      $send(self.hash, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return self;
    }, $Set_add$9.$$arity = 1);
    Opal.alias(self, "<<", "add");
    
    Opal.def(self, '$classify', $Set_classify$10 = function $$classify() {
      var $iter = $Set_classify$10.$$p, block = $iter || nil, $$11, $$12, self = this, result = nil;

      if ($iter) $Set_classify$10.$$p = null;
      
      
      if ($iter) $Set_classify$10.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("classify")
      };
      result = $send($$($nesting, 'Hash'), 'new', [], ($$11 = function(h, k){var self = $$11.$$s || this, $writer = nil;

      
        
        if (h == null) {
          h = nil;
        };
        
        if (k == null) {
          k = nil;
        };
        $writer = [k, self.$class().$new()];
        $send(h, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, $$11.$$s = self, $$11.$$arity = 2, $$11));
      $send(self, 'each', [], ($$12 = function(item){var self = $$12.$$s || this;

      
        
        if (item == null) {
          item = nil;
        };
        return result['$[]'](Opal.yield1(block, item)).$add(item);}, $$12.$$s = self, $$12.$$arity = 1, $$12));
      return result;
    }, $Set_classify$10.$$arity = 0);
    
    Opal.def(self, '$collect!', $Set_collect$excl$13 = function() {
      var $iter = $Set_collect$excl$13.$$p, block = $iter || nil, $$14, self = this, result = nil;

      if ($iter) $Set_collect$excl$13.$$p = null;
      
      
      if ($iter) $Set_collect$excl$13.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("collect!")
      };
      result = self.$class().$new();
      $send(self, 'each', [], ($$14 = function(item){var self = $$14.$$s || this;

      
        
        if (item == null) {
          item = nil;
        };
        return result['$<<'](Opal.yield1(block, item));}, $$14.$$s = self, $$14.$$arity = 1, $$14));
      return self.$replace(result);
    }, $Set_collect$excl$13.$$arity = 0);
    Opal.alias(self, "map!", "collect!");
    
    Opal.def(self, '$delete', $Set_delete$15 = function(o) {
      var self = this;

      
      self.hash.$delete(o);
      return self;
    }, $Set_delete$15.$$arity = 1);
    
    Opal.def(self, '$delete?', $Set_delete$ques$16 = function(o) {
      var self = this;

      if ($truthy(self['$include?'](o))) {
        
        self.$delete(o);
        return self;
      } else {
        return nil
      }
    }, $Set_delete$ques$16.$$arity = 1);
    
    Opal.def(self, '$delete_if', $Set_delete_if$17 = function $$delete_if() {
      var $$18, $$19, $iter = $Set_delete_if$17.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Set_delete_if$17.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return self.$enum_for("delete_if")
      };
      $send($send(self, 'select', [], ($$18 = function(o){var self = $$18.$$s || this;

      
        
        if (o == null) {
          o = nil;
        };
        return Opal.yield1($yield, o);;}, $$18.$$s = self, $$18.$$arity = 1, $$18)), 'each', [], ($$19 = function(o){var self = $$19.$$s || this;
        if (self.hash == null) self.hash = nil;

      
        
        if (o == null) {
          o = nil;
        };
        return self.hash.$delete(o);}, $$19.$$s = self, $$19.$$arity = 1, $$19));
      return self;
    }, $Set_delete_if$17.$$arity = 0);
    
    Opal.def(self, '$add?', $Set_add$ques$20 = function(o) {
      var self = this;

      if ($truthy(self['$include?'](o))) {
        return nil
      } else {
        return self.$add(o)
      }
    }, $Set_add$ques$20.$$arity = 1);
    
    Opal.def(self, '$each', $Set_each$21 = function $$each() {
      var $iter = $Set_each$21.$$p, block = $iter || nil, self = this;

      if ($iter) $Set_each$21.$$p = null;
      
      
      if ($iter) $Set_each$21.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("each")
      };
      $send(self.hash, 'each_key', [], block.$to_proc());
      return self;
    }, $Set_each$21.$$arity = 0);
    
    Opal.def(self, '$empty?', $Set_empty$ques$22 = function() {
      var self = this;

      return self.hash['$empty?']()
    }, $Set_empty$ques$22.$$arity = 0);
    
    Opal.def(self, '$eql?', $Set_eql$ques$23 = function(other) {
      var $$24, self = this;

      return self.hash['$eql?']($send(other, 'instance_eval', [], ($$24 = function(){var self = $$24.$$s || this;
        if (self.hash == null) self.hash = nil;

      return self.hash}, $$24.$$s = self, $$24.$$arity = 0, $$24)))
    }, $Set_eql$ques$23.$$arity = 1);
    
    Opal.def(self, '$clear', $Set_clear$25 = function $$clear() {
      var self = this;

      
      self.hash.$clear();
      return self;
    }, $Set_clear$25.$$arity = 0);
    
    Opal.def(self, '$include?', $Set_include$ques$26 = function(o) {
      var self = this;

      return self.hash['$include?'](o)
    }, $Set_include$ques$26.$$arity = 1);
    Opal.alias(self, "member?", "include?");
    
    Opal.def(self, '$merge', $Set_merge$27 = function $$merge(enum$) {
      var $$28, self = this;

      
      $send(enum$, 'each', [], ($$28 = function(item){var self = $$28.$$s || this;

      
        
        if (item == null) {
          item = nil;
        };
        return self.$add(item);}, $$28.$$s = self, $$28.$$arity = 1, $$28));
      return self;
    }, $Set_merge$27.$$arity = 1);
    
    Opal.def(self, '$replace', $Set_replace$29 = function $$replace(enum$) {
      var self = this;

      
      self.$clear();
      self.$merge(enum$);
      return self;
    }, $Set_replace$29.$$arity = 1);
    
    Opal.def(self, '$size', $Set_size$30 = function $$size() {
      var self = this;

      return self.hash.$size()
    }, $Set_size$30.$$arity = 0);
    Opal.alias(self, "length", "size");
    
    Opal.def(self, '$subtract', $Set_subtract$31 = function $$subtract(enum$) {
      var $$32, self = this;

      
      $send(enum$, 'each', [], ($$32 = function(item){var self = $$32.$$s || this;

      
        
        if (item == null) {
          item = nil;
        };
        return self.$delete(item);}, $$32.$$s = self, $$32.$$arity = 1, $$32));
      return self;
    }, $Set_subtract$31.$$arity = 1);
    
    Opal.def(self, '$|', $Set_$$33 = function(enum$) {
      var self = this;

      
      if ($truthy(enum$['$respond_to?']("each"))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$merge(enum$);
    }, $Set_$$33.$$arity = 1);
    
    Opal.def(self, '$superset?', $Set_superset$ques$34 = function(set) {
      var $a, $$35, self = this;

      
      ($truthy($a = set['$is_a?']($$($nesting, 'Set'))) ? $a : self.$raise($$($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_lt(self.$size(), set.$size()))) {
        return false};
      return $send(set, 'all?', [], ($$35 = function(o){var self = $$35.$$s || this;

      
        
        if (o == null) {
          o = nil;
        };
        return self['$include?'](o);}, $$35.$$s = self, $$35.$$arity = 1, $$35));
    }, $Set_superset$ques$34.$$arity = 1);
    Opal.alias(self, ">=", "superset?");
    
    Opal.def(self, '$proper_superset?', $Set_proper_superset$ques$36 = function(set) {
      var $a, $$37, self = this;

      
      ($truthy($a = set['$is_a?']($$($nesting, 'Set'))) ? $a : self.$raise($$($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_le(self.$size(), set.$size()))) {
        return false};
      return $send(set, 'all?', [], ($$37 = function(o){var self = $$37.$$s || this;

      
        
        if (o == null) {
          o = nil;
        };
        return self['$include?'](o);}, $$37.$$s = self, $$37.$$arity = 1, $$37));
    }, $Set_proper_superset$ques$36.$$arity = 1);
    Opal.alias(self, ">", "proper_superset?");
    
    Opal.def(self, '$subset?', $Set_subset$ques$38 = function(set) {
      var $a, $$39, self = this;

      
      ($truthy($a = set['$is_a?']($$($nesting, 'Set'))) ? $a : self.$raise($$($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_lt(set.$size(), self.$size()))) {
        return false};
      return $send(self, 'all?', [], ($$39 = function(o){var self = $$39.$$s || this;

      
        
        if (o == null) {
          o = nil;
        };
        return set['$include?'](o);}, $$39.$$s = self, $$39.$$arity = 1, $$39));
    }, $Set_subset$ques$38.$$arity = 1);
    Opal.alias(self, "<=", "subset?");
    
    Opal.def(self, '$proper_subset?', $Set_proper_subset$ques$40 = function(set) {
      var $a, $$41, self = this;

      
      ($truthy($a = set['$is_a?']($$($nesting, 'Set'))) ? $a : self.$raise($$($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_le(set.$size(), self.$size()))) {
        return false};
      return $send(self, 'all?', [], ($$41 = function(o){var self = $$41.$$s || this;

      
        
        if (o == null) {
          o = nil;
        };
        return set['$include?'](o);}, $$41.$$s = self, $$41.$$arity = 1, $$41));
    }, $Set_proper_subset$ques$40.$$arity = 1);
    Opal.alias(self, "<", "proper_subset?");
    Opal.alias(self, "+", "|");
    Opal.alias(self, "union", "|");
    return (Opal.def(self, '$to_a', $Set_to_a$42 = function $$to_a() {
      var self = this;

      return self.hash.$keys()
    }, $Set_to_a$42.$$arity = 0), nil) && 'to_a';
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Enumerable');

    var $nesting = [self].concat($parent_nesting), $Enumerable_to_set$43;

    
    Opal.def(self, '$to_set', $Enumerable_to_set$43 = function $$to_set($a, $b) {
      var $iter = $Enumerable_to_set$43.$$p, block = $iter || nil, $post_args, klass, args, self = this;

      if ($iter) $Enumerable_to_set$43.$$p = null;
      
      
      if ($iter) $Enumerable_to_set$43.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      if ($post_args.length > 0) {
        klass = $post_args[0];
        $post_args.splice(0, 1);
      }
      if (klass == null) {
        klass = $$($nesting, 'Set');
      };
      
      args = $post_args;;
      return $send(klass, 'new', [self].concat(Opal.to_a(args)), block.$to_proc());
    }, $Enumerable_to_set$43.$$arity = -1)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/config"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $lambda = Opal.lambda;

  Opal.add_stubs(['$require', '$extend', '$private', '$fetch', '$[]=', '$config_options', '$-', '$define_singleton_method', '$config', '$any?', '$===', '$raise', '$inspect', '$public', '$each', '$call', '$default_config', '$config_option', '$new']);
  
  self.$require("set");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Config');

      var $nesting = [self].concat($parent_nesting), $Config_config_options$1, $Config_config_option$2, $Config_default_config$6, $Config_compiler_options$8, $Config_config$10, $Config_reset$excl$11, $Config$12;

      
      self.$extend(self);
      self.$private();
      
      Opal.def(self, '$config_options', $Config_config_options$1 = function $$config_options() {
        var $a, self = this;
        if (self.config_options == null) self.config_options = nil;

        return (self.config_options = ($truthy($a = self.config_options) ? $a : $hash2([], {})))
      }, $Config_config_options$1.$$arity = 0);
      
      Opal.def(self, '$config_option', $Config_config_option$2 = function $$config_option(name, default_value, options) {
        var $$3, $$4, self = this, compiler = nil, valid_values = nil, $writer = nil;

        
        
        if (options == null) {
          options = $hash2([], {});
        };
        compiler = options.$fetch("compiler_option", nil);
        valid_values = options.$fetch("valid_values", [true, false]);
        
        $writer = [name, $hash2(["default", "compiler"], {"default": default_value, "compiler": compiler})];
        $send(self.$config_options(), '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        $send(self, 'define_singleton_method', [name], ($$3 = function(){var self = $$3.$$s || this;

        return self.$config().$fetch(name, default_value)}, $$3.$$s = self, $$3.$$arity = 0, $$3));
        return $send(self, 'define_singleton_method', ["" + (name) + "="], ($$4 = function(value){var self = $$4.$$s || this, $$5;

        
          
          if (value == null) {
            value = nil;
          };
          if ($truthy($send(valid_values, 'any?', [], ($$5 = function(valid_value){var self = $$5.$$s || this;

          
            
            if (valid_value == null) {
              valid_value = nil;
            };
            return valid_value['$==='](value);}, $$5.$$s = self, $$5.$$arity = 1, $$5)))) {
          } else {
            self.$raise($$($nesting, 'ArgumentError'), "" + ("" + "Not a valid value for option " + (self) + "." + (name) + ", provided " + (value.$inspect()) + ". ") + ("" + "Must be " + (valid_values.$inspect()) + " === " + (value.$inspect())))
          };
          
          $writer = [name, value];
          $send(self.$config(), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;}, $$4.$$s = self, $$4.$$arity = 1, $$4));
      }, $Config_config_option$2.$$arity = -3);
      self.$public();
      
      Opal.def(self, '$default_config', $Config_default_config$6 = function $$default_config() {
        var $$7, self = this, default_config = nil;

        
        default_config = $hash2([], {});
        $send(self.$config_options(), 'each', [], ($$7 = function(name, options){var self = $$7.$$s || this, default_value = nil, $writer = nil;

        
          
          if (name == null) {
            name = nil;
          };
          
          if (options == null) {
            options = nil;
          };
          default_value = options.$fetch("default");
          default_value = (function() {if ($truthy($$($nesting, 'Proc')['$==='](default_value))) {
            return default_value.$call()
          } else {
            return default_value
          }; return nil; })();
          
          $writer = [name, default_value];
          $send(default_config, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;}, $$7.$$s = self, $$7.$$arity = 2, $$7));
        return default_config;
      }, $Config_default_config$6.$$arity = 0);
      
      Opal.def(self, '$compiler_options', $Config_compiler_options$8 = function $$compiler_options() {
        var $$9, self = this, compiler_options = nil;

        
        compiler_options = $hash2([], {});
        $send(self.$config_options(), 'each', [], ($$9 = function(name, options){var self = $$9.$$s || this, compiler_option_name = nil, $writer = nil;

        
          
          if (name == null) {
            name = nil;
          };
          
          if (options == null) {
            options = nil;
          };
          compiler_option_name = options.$fetch("compiler");
          
          $writer = [compiler_option_name, self.$config().$fetch(name)];
          $send(compiler_options, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;}, $$9.$$s = self, $$9.$$arity = 2, $$9));
        return compiler_options;
      }, $Config_compiler_options$8.$$arity = 0);
      
      Opal.def(self, '$config', $Config_config$10 = function $$config() {
        var $a, self = this;
        if (self.config == null) self.config = nil;

        return (self.config = ($truthy($a = self.config) ? $a : self.$default_config()))
      }, $Config_config$10.$$arity = 0);
      
      Opal.def(self, '$reset!', $Config_reset$excl$11 = function() {
        var self = this;

        return (self.config = nil)
      }, $Config_reset$excl$11.$$arity = 0);
      self.$config_option("method_missing_enabled", true, $hash2(["compiler_option"], {"compiler_option": "method_missing"}));
      self.$config_option("const_missing_enabled", true, $hash2(["compiler_option"], {"compiler_option": "const_missing"}));
      self.$config_option("arity_check_enabled", false, $hash2(["compiler_option"], {"compiler_option": "arity_check"}));
      self.$config_option("freezing_stubs_enabled", true, $hash2(["compiler_option"], {"compiler_option": "freezing"}));
      self.$config_option("tainting_stubs_enabled", true, $hash2(["compiler_option"], {"compiler_option": "tainting"}));
      self.$config_option("dynamic_require_severity", "warning", $hash2(["compiler_option", "valid_values"], {"compiler_option": "dynamic_require_severity", "valid_values": ["error", "warning", "ignore"]}));
      self.$config_option("missing_require_severity", "error", $hash2(["valid_values"], {"valid_values": ["error", "warning", "ignore"]}));
      self.$config_option("irb_enabled", false, $hash2(["compiler_option"], {"compiler_option": "irb"}));
      self.$config_option("inline_operators_enabled", true, $hash2(["compiler_option"], {"compiler_option": "inline_operators"}));
      self.$config_option("source_map_enabled", true);
      self.$config_option("stubbed_files", $lambda(($Config$12 = function(){var self = $Config$12.$$s || this;

      return $$($nesting, 'Set').$new()}, $Config$12.$$s = self, $Config$12.$$arity = 0, $Config$12)), $hash2(["valid_values"], {"valid_values": [$$($nesting, 'Set')]}));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/builder"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2, $lambda = Opal.lambda;

  Opal.add_stubs(['$require', '$include?', '$processors', '$<<', '$each', '$extensions', '$each_pair', '$public_send', '$new', '$paths', '$flatten', '$map', '$compiler_options', '$missing_require_severity', '$build', '$to_proc', '$build_str', '$source_for', '$read', '$nil?', '$expand_path', '$expand_ext', '$processor_for', '$+', '$preload', '$requires', '$tree_requires', '$process_require', '$processed', '$raise', '$inspect', '$message', '$backtrace', '$dup', '$stubs', '$path_reader', '$prerequired', '$to_sym', '$join', '$append_paths', '$include', '$attr_reader', '$attr_accessor', '$private', '$empty?', '$to_s', '$pwd', '$dirname', '$Pathname', '$flat_map', '$required_trees', '$find', '$start_with?', '$glob', '$relative_path_from', '$match?', '$merge', '$[]', '$===', '$warn', '$already_processed', '$stub?', '$process_requires', '$expand', '$basename']);
  
  self.$require("opal/path_reader");
  self.$require("opal/paths");
  self.$require("opal/config");
  self.$require("set");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Builder');

      var $nesting = [self].concat($parent_nesting), $Builder_processors$1, $Builder_extensions$2, $Builder_register_processor$3, $Builder_initialize$5, $Builder_build$8, $Builder_build$9, $Builder_source_for$10, $Builder_build_str$11, $Builder_build_require$13, $Builder_initialize_copy$14, $Builder_to_s$15, $Builder_source_map$16, $Builder_append_paths$17, $Builder_tree_requires$18, $Builder_processor_for$23, $Builder_read$25, $Builder_process_require$27, $Builder_expand_ext$28, $Builder_expand_path$29, $Builder_process_requires$30, $Builder_already_processed$32, $Builder_stub$ques$33, $Builder_extensions$34;

      self.$$prototype.stubs = self.$$prototype.preload = self.$$prototype.processors = self.$$prototype.path_reader = self.$$prototype.prerequired = self.$$prototype.compiler_options = self.$$prototype.missing_require_severity = self.$$prototype.already_processed = nil;
      
      Opal.defs(self, '$processors', $Builder_processors$1 = function $$processors() {
        var $a, self = this;
        if (self.processors == null) self.processors = nil;

        return (self.processors = ($truthy($a = self.processors) ? $a : []))
      }, $Builder_processors$1.$$arity = 0);
      Opal.defs(self, '$extensions', $Builder_extensions$2 = function $$extensions() {
        var $a, self = this;
        if (self.extensions == null) self.extensions = nil;

        return (self.extensions = ($truthy($a = self.extensions) ? $a : []))
      }, $Builder_extensions$2.$$arity = 0);
      Opal.defs(self, '$register_processor', $Builder_register_processor$3 = function $$register_processor(processor, processor_extensions) {
        var $$4, self = this;

        
        if ($truthy(self.$processors()['$include?'](processor))) {
          return nil};
        self.$processors()['$<<'](processor);
        return $send(processor_extensions, 'each', [], ($$4 = function(ext){var self = $$4.$$s || this;

        
          
          if (ext == null) {
            ext = nil;
          };
          return self.$extensions()['$<<'](ext);}, $$4.$$s = self, $$4.$$arity = 1, $$4));
      }, $Builder_register_processor$3.$$arity = 2);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'MissingRequire');

        var $nesting = [self].concat($parent_nesting);

        return nil
      })($nesting[0], $$($nesting, 'LoadError'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ProcessorNotFound');

        var $nesting = [self].concat($parent_nesting);

        return nil
      })($nesting[0], $$($nesting, 'LoadError'), $nesting);
      
      Opal.def(self, '$initialize', $Builder_initialize$5 = function $$initialize(options) {
        var $a, $$6, $$7, self = this;

        
        
        if (options == null) {
          options = nil;
        };
        $send(($truthy($a = options) ? $a : $hash2([], {})), 'each_pair', [], ($$6 = function(k, v){var self = $$6.$$s || this;

        
          
          if (k == null) {
            k = nil;
          };
          
          if (v == null) {
            v = nil;
          };
          return self.$public_send("" + (k) + "=", v);}, $$6.$$s = self, $$6.$$arity = 2, $$6));
        self.stubs = ($truthy($a = self.stubs) ? $a : []);
        self.preload = ($truthy($a = self.preload) ? $a : []);
        self.processors = ($truthy($a = self.processors) ? $a : $$$($$$('::', 'Opal'), 'Builder').$processors());
        self.path_reader = ($truthy($a = self.path_reader) ? $a : $$($nesting, 'PathReader').$new($$($nesting, 'Opal').$paths(), $send(self.$extensions(), 'map', [], ($$7 = function(e){var self = $$7.$$s || this;

        
          
          if (e == null) {
            e = nil;
          };
          return ["" + "." + (e), "" + ".js." + (e)];}, $$7.$$s = self, $$7.$$arity = 1, $$7)).$flatten()));
        self.prerequired = ($truthy($a = self.prerequired) ? $a : []);
        self.compiler_options = ($truthy($a = self.compiler_options) ? $a : $$$($$($nesting, 'Opal'), 'Config').$compiler_options());
        self.missing_require_severity = ($truthy($a = self.missing_require_severity) ? $a : $$$($$($nesting, 'Opal'), 'Config').$missing_require_severity());
        return (self.processed = []);
      }, $Builder_initialize$5.$$arity = -1);
      Opal.defs(self, '$build', $Builder_build$8 = function $$build($a) {
        var $iter = $Builder_build$8.$$p, block = $iter || nil, $post_args, args, self = this;

        if ($iter) $Builder_build$8.$$p = null;
        
        
        if ($iter) $Builder_build$8.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        return $send(self.$new(), 'build', Opal.to_a(args), block.$to_proc());
      }, $Builder_build$8.$$arity = -1);
      
      Opal.def(self, '$build', $Builder_build$9 = function $$build(path, options) {
        var self = this;

        
        
        if (options == null) {
          options = $hash2([], {});
        };
        return self.$build_str(self.$source_for(path), path, options);
      }, $Builder_build$9.$$arity = -2);
      
      Opal.def(self, '$source_for', $Builder_source_for$10 = function $$source_for(path) {
        var self = this;

        return self.$read(path)
      }, $Builder_source_for$10.$$arity = 1);
      
      Opal.def(self, '$build_str', $Builder_build_str$11 = function $$build_str(source, rel_path, options) {
        var $$12, self = this, abs_path = nil, asset = nil, requires = nil, error = nil;

        
        
        if (options == null) {
          options = $hash2([], {});
        };
        try {
          
          if ($truthy(source['$nil?']())) {
            return nil};
          abs_path = self.$expand_path(rel_path);
          rel_path = self.$expand_ext(rel_path);
          asset = self.$processor_for(source, rel_path, abs_path, options);
          requires = $rb_plus($rb_plus(self.$preload(), asset.$requires()), self.$tree_requires(asset, abs_path));
          $send(requires, 'map', [], ($$12 = function(r){var self = $$12.$$s || this;

          
            
            if (r == null) {
              r = nil;
            };
            return self.$process_require(r, options);}, $$12.$$s = self, $$12.$$arity = 1, $$12));
          self.$processed()['$<<'](asset);
          return self;
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'MissingRequire')])) {error = $err;
            try {
              return self.$raise(error, "" + "A file required by " + (rel_path.$inspect()) + " wasn't found.\n" + (error.$message()), error.$backtrace())
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, $Builder_build_str$11.$$arity = -3);
      
      Opal.def(self, '$build_require', $Builder_build_require$13 = function $$build_require(path, options) {
        var self = this;

        
        
        if (options == null) {
          options = $hash2([], {});
        };
        return self.$process_require(path, options);
      }, $Builder_build_require$13.$$arity = -2);
      
      Opal.def(self, '$initialize_copy', $Builder_initialize_copy$14 = function $$initialize_copy(other) {
        var $iter = $Builder_initialize_copy$14.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) $Builder_initialize_copy$14.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        $send(self, Opal.find_super_dispatcher(self, 'initialize_copy', $Builder_initialize_copy$14, false), $zuper, $iter);
        self.stubs = other.$stubs().$dup();
        self.preload = other.$preload().$dup();
        self.processors = other.$processors().$dup();
        self.path_reader = other.$path_reader().$dup();
        self.prerequired = other.$prerequired().$dup();
        self.compiler_options = other.$compiler_options().$dup();
        self.missing_require_severity = other.$missing_require_severity().$to_sym();
        return (self.processed = other.$processed().$dup());
      }, $Builder_initialize_copy$14.$$arity = 1);
      
      Opal.def(self, '$to_s', $Builder_to_s$15 = function $$to_s() {
        var self = this;

        return $send(self.$processed(), 'map', [], "to_s".$to_proc()).$join("\n")
      }, $Builder_to_s$15.$$arity = 0);
      
      Opal.def(self, '$source_map', $Builder_source_map$16 = function $$source_map() {
        var self = this;

        return $$$($$$($$$('::', 'Opal'), 'SourceMap'), 'Index').$new($send(self.$processed(), 'map', [], "source_map".$to_proc()), $hash2(["join"], {"join": "\n"}))
      }, $Builder_source_map$16.$$arity = 0);
      
      Opal.def(self, '$append_paths', $Builder_append_paths$17 = function $$append_paths($a) {
        var $post_args, paths, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        paths = $post_args;;
        return $send(self.$path_reader(), 'append_paths', Opal.to_a(paths));
      }, $Builder_append_paths$17.$$arity = -1);
      self.$include($$($nesting, 'UseGem'));
      self.$attr_reader("processed");
      self.$attr_accessor("processors", "path_reader", "stubs", "prerequired", "preload", "compiler_options", "missing_require_severity");
      self.$private();
      
      Opal.def(self, '$tree_requires', $Builder_tree_requires$18 = function $$tree_requires(asset, asset_path) {
        var $$19, $$20, self = this, dirname = nil, abs_base_paths = nil;

        
        dirname = (function() {if ($truthy(asset_path.$to_s()['$empty?']())) {
          return $$($nesting, 'Pathname').$pwd()
        } else {
          return self.$Pathname(asset_path).$expand_path().$dirname()
        }; return nil; })();
        abs_base_paths = $send(self.$path_reader().$paths(), 'map', [], ($$19 = function(p){var self = $$19.$$s || this;

        
          
          if (p == null) {
            p = nil;
          };
          return $$($nesting, 'File').$expand_path(p);}, $$19.$$s = self, $$19.$$arity = 1, $$19));
        return $send(asset.$required_trees(), 'flat_map', [], ($$20 = function(tree){var self = $$20.$$s || this, $$21, $$22, abs_tree_path = nil, abs_base_path = nil, entries_glob = nil;

        
          
          if (tree == null) {
            tree = nil;
          };
          abs_tree_path = dirname.$join(tree).$expand_path().$to_s();
          abs_base_path = $send(abs_base_paths, 'find', [], ($$21 = function(p){var self = $$21.$$s || this;

          
            
            if (p == null) {
              p = nil;
            };
            return abs_tree_path['$start_with?'](p);}, $$21.$$s = self, $$21.$$arity = 1, $$21));
          if ($truthy(abs_base_path)) {
            
            abs_base_path = self.$Pathname(abs_base_path);
            entries_glob = self.$Pathname(abs_tree_path).$join("**", "" + "*{.js,}.{" + (self.$extensions().$join(",")) + "}");
            return $send($$($nesting, 'Pathname').$glob(entries_glob), 'map', [], ($$22 = function(file){var self = $$22.$$s || this;

            
              
              if (file == null) {
                file = nil;
              };
              return file.$relative_path_from(abs_base_path).$to_s();}, $$22.$$s = self, $$22.$$arity = 1, $$22));
          } else {
            return []
          };}, $$20.$$s = self, $$20.$$arity = 1, $$20));
      }, $Builder_tree_requires$18.$$arity = 2);
      
      Opal.def(self, '$processor_for', $Builder_processor_for$23 = function $$processor_for(source, rel_path, abs_path, options) {
        var $a, $$24, self = this, processor = nil;

        
        processor = ($truthy($a = $send(self.$processors(), 'find', [], ($$24 = function(p){var self = $$24.$$s || this;

        
          
          if (p == null) {
            p = nil;
          };
          return p['$match?'](abs_path);}, $$24.$$s = self, $$24.$$arity = 1, $$24))) ? $a : self.$raise($$($nesting, 'ProcessorNotFound'), "" + "can't find processor for rel_path: " + ("" + (rel_path.$inspect()) + ", ") + ("" + "abs_path: " + (abs_path.$inspect()) + ", ") + ("" + "source: " + (source.$inspect()) + ", ") + ("" + "processors: " + (self.$processors().$inspect()))));
        return processor.$new(source, rel_path, self.compiler_options.$merge(options));
      }, $Builder_processor_for$23.$$arity = 4);
      
      Opal.def(self, '$read', $Builder_read$25 = function $$read(path) {
        var $a, $$26, self = this, print_list = nil, message = nil, $case = nil;

        return ($truthy($a = self.$path_reader().$read(path)) ? $a : ((print_list = $lambda(($$26 = function(list){var self = $$26.$$s || this;

        
          
          if (list == null) {
            list = nil;
          };
          return "" + "- " + (list.$join("\n- ")) + "\n";}, $$26.$$s = self, $$26.$$arity = 1, $$26))), (message = $rb_plus($rb_plus($rb_plus($rb_plus($rb_plus("" + "can't find file: " + (path.$inspect()) + " in:\n", print_list['$[]'](self.$path_reader().$paths())), "\nWith the following extensions:\n"), print_list['$[]'](self.$path_reader().$extensions())), "\nAnd the following processors:\n"), print_list['$[]'](self.$processors()))), (function() {$case = self.$missing_require_severity();
        if ("error"['$===']($case)) {return self.$raise($$($nesting, 'MissingRequire'), message)}
        else if ("warning"['$===']($case)) {return self.$warn(message)}
        else if ("ignore"['$===']($case)) {return nil}
        else { return nil }})(), nil))
      }, $Builder_read$25.$$arity = 1);
      
      Opal.def(self, '$process_require', $Builder_process_require$27 = function $$process_require(rel_path, options) {
        var self = this, source = nil, message = nil, $case = nil, abs_path = nil, asset = nil;

        
        if ($truthy(self.$prerequired()['$include?'](rel_path))) {
          return nil};
        if ($truthy(self.$already_processed()['$include?'](rel_path))) {
          return nil};
        self.$already_processed()['$<<'](rel_path);
        source = (function() {if ($truthy(self['$stub?'](rel_path))) {
          return ""
        } else {
          return self.$read(rel_path)
        }; return nil; })();
        if ($truthy(source['$nil?']())) {
          
          message = "" + "can't find file: " + (rel_path.$inspect());
          $case = self.$missing_require_severity();
          if ("error"['$===']($case)) {self.$raise($$($nesting, 'LoadError'), message)}
          else if ("warning"['$===']($case)) {self.$warn("" + "can't find file: " + (rel_path.$inspect()))}
          else if ("ignore"['$===']($case)) {nil};
          return nil;};
        abs_path = self.$expand_path(rel_path);
        rel_path = self.$expand_ext(rel_path);
        asset = self.$processor_for(source, rel_path, abs_path, options.$merge($hash2(["requirable"], {"requirable": true})));
        self.$process_requires(rel_path, $rb_plus(asset.$requires(), self.$tree_requires(asset, abs_path)), options);
        return self.$processed()['$<<'](asset);
      }, $Builder_process_require$27.$$arity = 2);
      
      Opal.def(self, '$expand_ext', $Builder_expand_ext$28 = function $$expand_ext(path) {
        var self = this, abs_path = nil;

        
        abs_path = self.$path_reader().$expand(path);
        if ($truthy(abs_path)) {
          return $$($nesting, 'File').$join($$($nesting, 'File').$dirname(path), $$($nesting, 'File').$basename(abs_path))
        } else {
          return path
        };
      }, $Builder_expand_ext$28.$$arity = 1);
      
      Opal.def(self, '$expand_path', $Builder_expand_path$29 = function $$expand_path(path) {
        var $a, self = this;

        
        if ($truthy(self['$stub?'](path))) {
          return nil};
        return ($truthy($a = self.$path_reader().$expand(path)) ? $a : $$($nesting, 'File').$expand_path(path)).$to_s();
      }, $Builder_expand_path$29.$$arity = 1);
      
      Opal.def(self, '$process_requires', $Builder_process_requires$30 = function $$process_requires(rel_path, requires, options) {
        var $$31, self = this, error = nil;

        try {
          return $send(requires, 'map', [], ($$31 = function(r){var self = $$31.$$s || this;

          
            
            if (r == null) {
              r = nil;
            };
            return self.$process_require(r, options);}, $$31.$$s = self, $$31.$$arity = 1, $$31))
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'MissingRequire')])) {error = $err;
            try {
              return self.$raise(error, "" + "A file required by " + (rel_path.$inspect()) + " wasn't found.\n" + (error.$message()), error.$backtrace())
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }
      }, $Builder_process_requires$30.$$arity = 3);
      
      Opal.def(self, '$already_processed', $Builder_already_processed$32 = function $$already_processed() {
        var $a, self = this;

        return (self.already_processed = ($truthy($a = self.already_processed) ? $a : $$($nesting, 'Set').$new()))
      }, $Builder_already_processed$32.$$arity = 0);
      
      Opal.def(self, '$stub?', $Builder_stub$ques$33 = function(path) {
        var self = this;

        return self.$stubs()['$include?'](path)
      }, $Builder_stub$ques$33.$$arity = 1);
      return (Opal.def(self, '$extensions', $Builder_extensions$34 = function $$extensions() {
        var self = this;

        return $$$($$$('::', 'Opal'), 'Builder').$extensions()
      }, $Builder_extensions$34.$$arity = 0), nil) && 'extensions';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["ast/node"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$to_sym', '$freeze', '$to_a', '$assign_properties', '$hash', '$class', '$eql?', '$type', '$children', '$each', '$instance_variable_set', '$protected', '$private', '$==', '$nil?', '$send', '$original_dup', '$equal?', '$respond_to?', '$to_ast', '$updated', '$+', '$*', '$fancy_type', '$is_a?', '$to_sexp', '$inspect', '$map', '$to_sexp_array', '$gsub', '$to_s']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'AST');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Node');

      var $nesting = [self].concat($parent_nesting), $Node_initialize$1, $Node_eql$ques$2, $Node_assign_properties$3, $Node_dup$5, $Node_updated$6, $Node_$eq_eq$7, $Node_concat$8, $Node_append$9, $Node_to_sexp$10, $Node_inspect$12, $Node_to_ast$14, $Node_to_sexp_array$15, $Node_fancy_type$17;

      self.$$prototype.type = self.$$prototype.children = nil;
      
      self.$attr_reader("type");
      self.$attr_reader("children");
      Opal.alias(self, "to_a", "children");
      self.$attr_reader("hash");
      
      Opal.def(self, '$initialize', $Node_initialize$1 = function $$initialize(type, children, properties) {
        var $a, self = this;

        
        
        if (children == null) {
          children = [];
        };
        
        if (properties == null) {
          properties = $hash2([], {});
        };
        $a = [type.$to_sym(), children.$to_a().$freeze()], (self.type = $a[0]), (self.children = $a[1]), $a;
        self.$assign_properties(properties);
        self.hash = [self.type, self.children, self.$class()].$hash();
        return self.$freeze();
      }, $Node_initialize$1.$$arity = -2);
      
      Opal.def(self, '$eql?', $Node_eql$ques$2 = function(other) {
        var $a, $b, self = this;

        return ($truthy($a = ($truthy($b = self.$class()['$eql?'](other.$class())) ? self.type['$eql?'](other.$type()) : $b)) ? self.children['$eql?'](other.$children()) : $a)
      }, $Node_eql$ques$2.$$arity = 1);
      
      Opal.def(self, '$assign_properties', $Node_assign_properties$3 = function $$assign_properties(properties) {
        var $$4, self = this;

        
        $send(properties, 'each', [], ($$4 = function(name, value){var self = $$4.$$s || this;

        
          
          if (name == null) {
            name = nil;
          };
          
          if (value == null) {
            value = nil;
          };
          return self.$instance_variable_set("" + "@" + (name), value);}, $$4.$$s = self, $$4.$$arity = 2, $$4));
        return nil;
      }, $Node_assign_properties$3.$$arity = 1);
      self.$protected("assign_properties");
      Opal.alias(self, "original_dup", "dup");
      self.$private("original_dup");
      
      Opal.def(self, '$dup', $Node_dup$5 = function $$dup() {
        var self = this;

        return self
      }, $Node_dup$5.$$arity = 0);
      Opal.alias(self, "clone", "dup");
      
      Opal.def(self, '$updated', $Node_updated$6 = function $$updated(type, children, properties) {
        var $a, $b, self = this, new_type = nil, new_children = nil, new_properties = nil;

        
        
        if (type == null) {
          type = nil;
        };
        
        if (children == null) {
          children = nil;
        };
        
        if (properties == null) {
          properties = nil;
        };
        new_type = ($truthy($a = type) ? $a : self.type);
        new_children = ($truthy($a = children) ? $a : self.children);
        new_properties = ($truthy($a = properties) ? $a : $hash2([], {}));
        if ($truthy(($truthy($a = (($b = self.type['$=='](new_type)) ? self.children['$=='](new_children) : self.type['$=='](new_type))) ? properties['$nil?']() : $a))) {
          return self
        } else {
          return self.$original_dup().$send("initialize", new_type, new_children, new_properties)
        };
      }, $Node_updated$6.$$arity = -1);
      
      Opal.def(self, '$==', $Node_$eq_eq$7 = function(other) {
        var $a, self = this;

        if ($truthy(self['$equal?'](other))) {
          return true
        } else if ($truthy(other['$respond_to?']("to_ast"))) {
          
          other = other.$to_ast();
          return (($a = other.$type()['$=='](self.$type())) ? other.$children()['$=='](self.$children()) : other.$type()['$=='](self.$type()));
        } else {
          return false
        }
      }, $Node_$eq_eq$7.$$arity = 1);
      
      Opal.def(self, '$concat', $Node_concat$8 = function $$concat(array) {
        var self = this;

        return self.$updated(nil, $rb_plus(self.children, array.$to_a()))
      }, $Node_concat$8.$$arity = 1);
      Opal.alias(self, "+", "concat");
      
      Opal.def(self, '$append', $Node_append$9 = function $$append(element) {
        var self = this;

        return self.$updated(nil, $rb_plus(self.children, [element]))
      }, $Node_append$9.$$arity = 1);
      Opal.alias(self, "<<", "append");
      
      Opal.def(self, '$to_sexp', $Node_to_sexp$10 = function $$to_sexp(indent) {
        var $$11, self = this, indented = nil, sexp = nil;

        
        
        if (indent == null) {
          indent = 0;
        };
        indented = $rb_times("  ", indent);
        sexp = "" + (indented) + "(" + (self.$fancy_type());
        $send(self.$children(), 'each', [], ($$11 = function(child){var self = $$11.$$s || this;

        
          
          if (child == null) {
            child = nil;
          };
          if ($truthy(child['$is_a?']($$($nesting, 'Node')))) {
            return (sexp = $rb_plus(sexp, "" + "\n" + (child.$to_sexp($rb_plus(indent, 1)))))
          } else {
            return (sexp = $rb_plus(sexp, "" + " " + (child.$inspect())))
          };}, $$11.$$s = self, $$11.$$arity = 1, $$11));
        sexp = $rb_plus(sexp, ")");
        return sexp;
      }, $Node_to_sexp$10.$$arity = -1);
      Opal.alias(self, "to_s", "to_sexp");
      
      Opal.def(self, '$inspect', $Node_inspect$12 = function $$inspect(indent) {
        var $$13, self = this, indented = nil, sexp = nil;

        
        
        if (indent == null) {
          indent = 0;
        };
        indented = $rb_times("  ", indent);
        sexp = "" + (indented) + "s(:" + (self.type);
        $send(self.$children(), 'each', [], ($$13 = function(child){var self = $$13.$$s || this;

        
          
          if (child == null) {
            child = nil;
          };
          if ($truthy(child['$is_a?']($$($nesting, 'Node')))) {
            return (sexp = $rb_plus(sexp, "" + ",\n" + (child.$inspect($rb_plus(indent, 1)))))
          } else {
            return (sexp = $rb_plus(sexp, "" + ", " + (child.$inspect())))
          };}, $$13.$$s = self, $$13.$$arity = 1, $$13));
        sexp = $rb_plus(sexp, ")");
        return sexp;
      }, $Node_inspect$12.$$arity = -1);
      
      Opal.def(self, '$to_ast', $Node_to_ast$14 = function $$to_ast() {
        var self = this;

        return self
      }, $Node_to_ast$14.$$arity = 0);
      
      Opal.def(self, '$to_sexp_array', $Node_to_sexp_array$15 = function $$to_sexp_array() {
        var $$16, self = this, children_sexp_arrs = nil;

        
        children_sexp_arrs = $send(self.$children(), 'map', [], ($$16 = function(child){var self = $$16.$$s || this;

        
          
          if (child == null) {
            child = nil;
          };
          if ($truthy(child['$is_a?']($$($nesting, 'Node')))) {
            return child.$to_sexp_array()
          } else {
            return child
          };}, $$16.$$s = self, $$16.$$arity = 1, $$16));
        return [self.$type()].concat(Opal.to_a(children_sexp_arrs));
      }, $Node_to_sexp_array$15.$$arity = 0);
      self.$protected();
      return (Opal.def(self, '$fancy_type', $Node_fancy_type$17 = function $$fancy_type() {
        var self = this;

        return self.type.$to_s().$gsub("_", "-")
      }, $Node_fancy_type$17.$$arity = 0), nil) && 'fancy_type';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["ast/processor/mixin"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$nil?', '$to_ast', '$type', '$respond_to?', '$send', '$handler_missing', '$map', '$to_a', '$process']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'AST');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Processor');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Mixin');

        var $nesting = [self].concat($parent_nesting), $Mixin_process$1, $Mixin_process_all$2, $Mixin_handler_missing$4;

        
        
        Opal.def(self, '$process', $Mixin_process$1 = function $$process(node) {
          var self = this, on_handler = nil, new_node = nil;

          
          if ($truthy(node['$nil?']())) {
            return nil};
          node = node.$to_ast();
          on_handler = "" + "on_" + (node.$type());
          if ($truthy(self['$respond_to?'](on_handler))) {
            new_node = self.$send(on_handler, node)
          } else {
            new_node = self.$handler_missing(node)
          };
          if ($truthy(new_node)) {
            node = new_node};
          return node;
        }, $Mixin_process$1.$$arity = 1);
        
        Opal.def(self, '$process_all', $Mixin_process_all$2 = function $$process_all(nodes) {
          var $$3, self = this;

          return $send(nodes.$to_a(), 'map', [], ($$3 = function(node){var self = $$3.$$s || this;

          
            
            if (node == null) {
              node = nil;
            };
            return self.$process(node);}, $$3.$$s = self, $$3.$$arity = 1, $$3))
        }, $Mixin_process_all$2.$$arity = 1);
        
        Opal.def(self, '$handler_missing', $Mixin_handler_missing$4 = function $$handler_missing(node) {
          var self = this;

          return nil
        }, $Mixin_handler_missing$4.$$arity = 1);
      })($nesting[0], $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["ast/processor"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'AST');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Processor');

      var $nesting = [self].concat($parent_nesting);

      
      self.$require("ast/processor/mixin");
      return self.$include($$($nesting, 'Mixin'));
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["ast/sexp"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$new']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'AST');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Sexp');

      var $nesting = [self].concat($parent_nesting), $Sexp_s$1;

      
      Opal.def(self, '$s', $Sexp_s$1 = function $$s(type, $a) {
        var $post_args, children, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        children = $post_args;;
        return $$($nesting, 'Node').$new(type, children);
      }, $Sexp_s$1.$$arity = -2)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["ast"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'AST');

    var $nesting = [self].concat($parent_nesting);

    
    self.$require("ast/node");
    self.$require("ast/processor");
    self.$require("ast/sexp");
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/ast/node"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$[]', '$frozen?', '$dup', '$node=', '$-']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Node');

        var $nesting = [self].concat($parent_nesting), $Node_assign_properties$1;

        
        self.$attr_reader("location");
        Opal.alias(self, "loc", "location");
        return (Opal.def(self, '$assign_properties', $Node_assign_properties$1 = function $$assign_properties(properties) {
          var self = this, location = nil, $writer = nil;

          if ($truthy((location = properties['$[]']("location")))) {
            
            if ($truthy(location['$frozen?']())) {
              location = location.$dup()};
            
            $writer = [self];
            $send(location, 'node=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return (self.location = location);
          } else {
            return nil
          }
        }, $Node_assign_properties$1.$$arity = 1), nil) && 'assign_properties';
      })($nesting[0], $$$($$$('::', 'AST'), 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/ast/node"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$require', '$attr_reader', '$[]', '$frozen?', '$dup', '$merge!', '$loc', '$line', '$column']);
  
  self.$require("ast");
  self.$require("parser/ast/node");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Node');

        var $nesting = [self].concat($parent_nesting), $Node_assign_properties$1, $Node_line$2, $Node_column$3;

        self.$$prototype.meta = nil;
        
        self.$attr_reader("meta");
        
        Opal.def(self, '$assign_properties', $Node_assign_properties$1 = function $$assign_properties(properties) {
          var $a, $iter = $Node_assign_properties$1.$$p, $yield = $iter || nil, self = this, meta = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $Node_assign_properties$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          if ($truthy((meta = properties['$[]']("meta")))) {
            
            if ($truthy(meta['$frozen?']())) {
              meta = meta.$dup()};
            self.meta['$merge!'](meta);
          } else {
            self.meta = ($truthy($a = self.meta) ? $a : $hash2([], {}))
          };
          return $send(self, Opal.find_super_dispatcher(self, 'assign_properties', $Node_assign_properties$1, false), $zuper, $iter);
        }, $Node_assign_properties$1.$$arity = 1);
        
        Opal.def(self, '$line', $Node_line$2 = function $$line() {
          var self = this;

          if ($truthy(self.$loc())) {
            return self.$loc().$line()
          } else {
            return nil
          }
        }, $Node_line$2.$$arity = 0);
        return (Opal.def(self, '$column', $Node_column$3 = function $$column() {
          var self = this;

          if ($truthy(self.$loc())) {
            return self.$loc().$column()
          } else {
            return nil
          }
        }, $Node_column$3.$$arity = 0), nil) && 'column';
      })($nesting[0], $$$($$$($$$('::', 'Parser'), 'AST'), 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["racc/parser"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var $a, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $gvars = Opal.gvars, $send = Opal.send;

  Opal.add_stubs(['$[]', '$class', '$<', '$size', '$[]=', '$-', '$__send__', '$_racc_setup', '$raise', '$_racc_init_sysvars', '$catch', '$!=', '$next_token', '$racc_read_token', '$+', '$>=', '$==', '$_racc_evalact', '$!', '$>', '$push', '$racc_shift', '$-@', '$_racc_do_reduce', '$===', '$racc_accept', '$throw', '$on_error', '$<=', '$pop', '$racc_e_pop', '$inspect', '$racc_next_state', '$*', '$racc_reduce', '$sprintf', '$token_to_str', '$print', '$racc_token2str', '$puts', '$racc_print_stacks', '$empty?', '$each', '$racc_print_states', '$each_index']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Racc');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ParseError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'StandardError'), $nesting)
  })($nesting[0], $nesting);
  if ($truthy((($a = $$$('::', 'ParseError', 'skip_raise')) ? 'constant' : nil))) {
  } else {
    Opal.const_set($nesting[0], 'ParseError', $$$($$($nesting, 'Racc'), 'ParseError'))
  };
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Racc');

    var $nesting = [self].concat($parent_nesting), $a;

    
    if ($truthy((($a = $$($nesting, 'Racc_No_Extensions', 'skip_raise')) ? 'constant' : nil))) {
    } else {
      Opal.const_set($nesting[0], 'Racc_No_Extensions', false)
    };
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Parser');

      var $nesting = [self].concat($parent_nesting), $Parser_racc_runtime_type$1, $Parser__racc_setup$2, $Parser__racc_init_sysvars$3, $Parser_do_parse$4, $Parser_next_token$5, $Parser__racc_do_parse_rb$6, $Parser_yyparse$8, $Parser__racc_yyparse_rb$9, $Parser__racc_evalact$12, $Parser__racc_do_reduce$14, $Parser_on_error$15, $Parser_yyerror$16, $Parser_yyaccept$17, $Parser_yyerrok$18, $Parser_racc_read_token$19, $Parser_racc_shift$20, $Parser_racc_reduce$21, $Parser_racc_accept$23, $Parser_racc_e_pop$24, $Parser_racc_next_state$25, $Parser_racc_print_stacks$26, $Parser_racc_print_states$28, $Parser_racc_token2str$30, $Parser_token_to_str$31;

      self.$$prototype.yydebug = self.$$prototype.racc_debug_out = self.$$prototype.racc_error_status = self.$$prototype.racc_t = self.$$prototype.racc_vstack = self.$$prototype.racc_val = self.$$prototype.racc_state = self.$$prototype.racc_tstack = nil;
      
      Opal.const_set($nesting[0], 'Racc_Runtime_Version', "1.4.6");
      Opal.const_set($nesting[0], 'Racc_Runtime_Revision', ["originalRevision:", "1.8"]['$[]'](1));
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Version_R', "1.4.6");
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Revision_R', ["originalRevision:", "1.8"]['$[]'](1));
      Opal.const_set($nesting[0], 'Racc_Main_Parsing_Routine', "_racc_do_parse_rb");
      Opal.const_set($nesting[0], 'Racc_YY_Parse_Method', "_racc_yyparse_rb");
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Version', $$($nesting, 'Racc_Runtime_Core_Version_R'));
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Revision', $$($nesting, 'Racc_Runtime_Core_Revision_R'));
      Opal.const_set($nesting[0], 'Racc_Runtime_Type', "ruby");
      Opal.defs($$($nesting, 'Parser'), '$racc_runtime_type', $Parser_racc_runtime_type$1 = function $$racc_runtime_type() {
        var self = this;

        return $$($nesting, 'Racc_Runtime_Type')
      }, $Parser_racc_runtime_type$1.$$arity = 0);
      
      Opal.def(self, '$_racc_setup', $Parser__racc_setup$2 = function $$_racc_setup() {
        var $a, $b, $c, self = this, arg = nil, $writer = nil;
        if ($gvars.stderr == null) $gvars.stderr = nil;

        
        if ($truthy($$$(self.$class(), 'Racc_debug_parser'))) {
        } else {
          self.yydebug = false
        };
        if ($truthy((($a = self['yydebug'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
        } else {
          self.yydebug = false
        };
        if ($truthy(self.yydebug)) {
          
          if ($truthy((($b = self['racc_debug_out'], $b != null && $b !== nil) ? 'instance-variable' : nil))) {
          } else {
            self.racc_debug_out = $gvars.stderr
          };
          self.racc_debug_out = ($truthy($c = self.racc_debug_out) ? $c : $gvars.stderr);};
        arg = $$$(self.$class(), 'Racc_arg');
        if ($truthy($rb_lt(arg.$size(), 14))) {
          
          $writer = [13, true];
          $send(arg, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        return arg;
      }, $Parser__racc_setup$2.$$arity = 0);
      
      Opal.def(self, '$_racc_init_sysvars', $Parser__racc_init_sysvars$3 = function $$_racc_init_sysvars() {
        var self = this;

        
        self.racc_state = [0];
        self.racc_tstack = [];
        self.racc_vstack = [];
        self.racc_t = nil;
        self.racc_val = nil;
        self.racc_read_next = true;
        self.racc_user_yyerror = false;
        return (self.racc_error_status = 0);
      }, $Parser__racc_init_sysvars$3.$$arity = 0);
      
      Opal.def(self, '$do_parse', $Parser_do_parse$4 = function $$do_parse() {
        var self = this;

        return self.$__send__($$($nesting, 'Racc_Main_Parsing_Routine'), self.$_racc_setup(), false)
      }, $Parser_do_parse$4.$$arity = 0);
      
      Opal.def(self, '$next_token', $Parser_next_token$5 = function $$next_token() {
        var self = this;

        return self.$raise($$($nesting, 'NotImplementedError'), "" + (self.$class()) + "#next_token is not defined")
      }, $Parser_next_token$5.$$arity = 0);
      
      Opal.def(self, '$_racc_do_parse_rb', $Parser__racc_do_parse_rb$6 = function $$_racc_do_parse_rb(arg, in_debug) {
        var $a, $b, $$7, self = this, action_table = nil, action_check = nil, action_default = nil, action_pointer = nil, _ = nil, token_table = nil, tok = nil, act = nil, i = nil;

        
        $b = arg, $a = Opal.to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (action_default = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (token_table = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), $b;
        self.$_racc_init_sysvars();
        tok = (act = (i = nil));
        return $send(self, 'catch', ["racc_end_parse"], ($$7 = function(){var self = $$7.$$s || this, $c, $d, $e;
          if (self.racc_state == null) self.racc_state = nil;
          if (self.racc_read_next == null) self.racc_read_next = nil;
          if (self.racc_t == null) self.racc_t = nil;
          if (self.yydebug == null) self.yydebug = nil;
          if (self.racc_val == null) self.racc_val = nil;

        while ($truthy(true)) {
            
            if ($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1))))) {
              
              if ($truthy(self.racc_read_next)) {
                if ($truthy(self.racc_t['$!='](0))) {
                  
                  $e = self.$next_token(), $d = Opal.to_ary($e), (tok = ($d[0] == null ? nil : $d[0])), (self.racc_val = ($d[1] == null ? nil : $d[1])), $e;
                  if ($truthy(tok)) {
                    self.racc_t = ($truthy($d = token_table['$[]'](tok)) ? $d : 1)
                  } else {
                    self.racc_t = 0
                  };
                  if ($truthy(self.yydebug)) {
                    self.$racc_read_token(self.racc_t, tok, self.racc_val)};
                  self.racc_read_next = false;}};
              i = $rb_plus(i, self.racc_t);
              if ($truthy(($truthy($d = ($truthy($e = $rb_ge(i, 0)) ? (act = action_table['$[]'](i)) : $e)) ? action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1)) : $d))) {
              } else {
                act = action_default['$[]'](self.racc_state['$[]'](-1))
              };
            } else {
              act = action_default['$[]'](self.racc_state['$[]'](-1))
            };
            while ($truthy((act = self.$_racc_evalact(act, arg)))) {
              
            };
          }}, $$7.$$s = self, $$7.$$arity = 0, $$7));
      }, $Parser__racc_do_parse_rb$6.$$arity = 2);
      
      Opal.def(self, '$yyparse', $Parser_yyparse$8 = function $$yyparse(recv, mid) {
        var self = this;

        return self.$__send__($$($nesting, 'Racc_YY_Parse_Method'), recv, mid, self.$_racc_setup(), true)
      }, $Parser_yyparse$8.$$arity = 2);
      
      Opal.def(self, '$_racc_yyparse_rb', $Parser__racc_yyparse_rb$9 = function $$_racc_yyparse_rb(recv, mid, arg, c_debug) {
        var $a, $b, $$10, self = this, action_table = nil, action_check = nil, action_default = nil, action_pointer = nil, _ = nil, token_table = nil, act = nil, i = nil;

        
        $b = arg, $a = Opal.to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (action_default = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (token_table = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), $b;
        self.$_racc_init_sysvars();
        act = nil;
        i = nil;
        return $send(self, 'catch', ["racc_end_parse"], ($$10 = function(){var self = $$10.$$s || this, $c, $d, $$11;
          if (self.racc_state == null) self.racc_state = nil;

        
          while (!($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1)))))) {
            while ($truthy((act = self.$_racc_evalact(action_default['$[]'](self.racc_state['$[]'](-1)), arg)))) {
              
            }
          };
          return $send(recv, '__send__', [mid], ($$11 = function(tok, val){var self = $$11.$$s || this, $e, $f, $g, $h, $i;
            if (self.racc_t == null) self.racc_t = nil;
            if (self.racc_state == null) self.racc_state = nil;
            if (self.racc_read_next == null) self.racc_read_next = nil;

          
            
            if (tok == null) {
              tok = nil;
            };
            
            if (val == null) {
              val = nil;
            };
            if ($truthy(tok)) {
              self.racc_t = ($truthy($e = token_table['$[]'](tok)) ? $e : 1)
            } else {
              self.racc_t = 0
            };
            self.racc_val = val;
            self.racc_read_next = false;
            i = $rb_plus(i, self.racc_t);
            if ($truthy(($truthy($e = ($truthy($f = $rb_ge(i, 0)) ? (act = action_table['$[]'](i)) : $f)) ? action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1)) : $e))) {
            } else {
              act = action_default['$[]'](self.racc_state['$[]'](-1))
            };
            while ($truthy((act = self.$_racc_evalact(act, arg)))) {
              
            };
            while ($truthy(($truthy($f = ($truthy($g = (i = action_pointer['$[]'](self.racc_state['$[]'](-1)))['$!']()) ? $g : self.racc_read_next['$!']())) ? $f : self.racc_t['$=='](0)))) {
              
              if ($truthy(($truthy($f = ($truthy($g = ($truthy($h = ($truthy($i = i) ? (i = $rb_plus(i, self.racc_t)) : $i)) ? $rb_ge(i, 0) : $h)) ? (act = action_table['$[]'](i)) : $g)) ? action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1)) : $f))) {
              } else {
                act = action_default['$[]'](self.racc_state['$[]'](-1))
              };
              while ($truthy((act = self.$_racc_evalact(act, arg)))) {
                
              };
            };}, $$11.$$s = self, $$11.$$arity = 2, $$11));}, $$10.$$s = self, $$10.$$arity = 0, $$10));
      }, $Parser__racc_yyparse_rb$9.$$arity = 4);
      
      Opal.def(self, '$_racc_evalact', $Parser__racc_evalact$12 = function $$_racc_evalact(act, arg) {
        var $a, $b, $$13, $c, self = this, action_table = nil, action_check = nil, _ = nil, action_pointer = nil, shift_n = nil, reduce_n = nil, code = nil, $case = nil, i = nil;

        
        $b = arg, $a = Opal.to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (_ = ($a[10] == null ? nil : $a[10])), (shift_n = ($a[11] == null ? nil : $a[11])), (reduce_n = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), (_ = ($a[14] == null ? nil : $a[14])), $b;
        if ($truthy(($truthy($a = $rb_gt(act, 0)) ? $rb_lt(act, shift_n) : $a))) {
          
          if ($truthy($rb_gt(self.racc_error_status, 0))) {
            if (self.racc_t['$=='](1)) {
            } else {
              self.racc_error_status = $rb_minus(self.racc_error_status, 1)
            }};
          self.racc_vstack.$push(self.racc_val);
          self.racc_state.$push(act);
          self.racc_read_next = true;
          if ($truthy(self.yydebug)) {
            
            self.racc_tstack.$push(self.racc_t);
            self.$racc_shift(self.racc_t, self.racc_tstack, self.racc_vstack);};
        } else if ($truthy(($truthy($a = $rb_lt(act, 0)) ? $rb_gt(act, reduce_n['$-@']()) : $a))) {
          
          code = $send(self, 'catch', ["racc_jump"], ($$13 = function(){var self = $$13.$$s || this;
            if (self.racc_state == null) self.racc_state = nil;

          
            self.racc_state.$push(self.$_racc_do_reduce(arg, act));
            return false;}, $$13.$$s = self, $$13.$$arity = 0, $$13));
          if ($truthy(code)) {
            $case = code;
            if ((1)['$===']($case)) {
            self.racc_user_yyerror = true;
            return reduce_n['$-@']();}
            else if ((2)['$===']($case)) {return shift_n}
            else {self.$raise("[Racc Bug] unknown jump code")}};
        } else if (act['$=='](shift_n)) {
          
          if ($truthy(self.yydebug)) {
            self.$racc_accept()};
          self.$throw("racc_end_parse", self.racc_vstack['$[]'](0));
        } else if (act['$=='](reduce_n['$-@']())) {
          
          $case = self.racc_error_status;
          if ((0)['$===']($case)) {if ($truthy(arg['$[]'](21))) {
          } else {
            self.$on_error(self.racc_t, self.racc_val, self.racc_vstack)
          }}
          else if ((3)['$===']($case)) {
          if (self.racc_t['$=='](0)) {
            self.$throw("racc_end_parse", nil)};
          self.racc_read_next = true;};
          self.racc_user_yyerror = false;
          self.racc_error_status = 3;
          while ($truthy(true)) {
            
            if ($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1))))) {
              
              i = $rb_plus(i, 1);
              if ($truthy(($truthy($b = ($truthy($c = $rb_ge(i, 0)) ? (act = action_table['$[]'](i)) : $c)) ? action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1)) : $b))) {
                break;};};
            if ($truthy($rb_le(self.racc_state.$size(), 1))) {
              self.$throw("racc_end_parse", nil)};
            self.racc_state.$pop();
            self.racc_vstack.$pop();
            if ($truthy(self.yydebug)) {
              
              self.racc_tstack.$pop();
              self.$racc_e_pop(self.racc_state, self.racc_tstack, self.racc_vstack);};
          };
          return act;
        } else {
          self.$raise("" + "[Racc Bug] unknown action " + (act.$inspect()))
        };
        if ($truthy(self.yydebug)) {
          self.$racc_next_state(self.racc_state['$[]'](-1), self.racc_state)};
        return nil;
      }, $Parser__racc_evalact$12.$$arity = 2);
      
      Opal.def(self, '$_racc_do_reduce', $Parser__racc_do_reduce$14 = function $$_racc_do_reduce(arg, act) {
        var $a, $b, self = this, _ = nil, goto_table = nil, goto_check = nil, goto_default = nil, goto_pointer = nil, nt_base = nil, reduce_table = nil, use_result = nil, state = nil, vstack = nil, tstack = nil, i = nil, len = nil, reduce_to = nil, method_id = nil, void_array = nil, tmp_t = nil, tmp_v = nil, $writer = nil, k1 = nil, curstate = nil;

        
        $b = arg, $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), (_ = ($a[3] == null ? nil : $a[3])), (goto_table = ($a[4] == null ? nil : $a[4])), (goto_check = ($a[5] == null ? nil : $a[5])), (goto_default = ($a[6] == null ? nil : $a[6])), (goto_pointer = ($a[7] == null ? nil : $a[7])), (nt_base = ($a[8] == null ? nil : $a[8])), (reduce_table = ($a[9] == null ? nil : $a[9])), (_ = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (use_result = ($a[13] == null ? nil : $a[13])), $b;
        state = self.racc_state;
        vstack = self.racc_vstack;
        tstack = self.racc_tstack;
        i = $rb_times(act, -3);
        len = reduce_table['$[]'](i);
        reduce_to = reduce_table['$[]']($rb_plus(i, 1));
        method_id = reduce_table['$[]']($rb_plus(i, 2));
        void_array = [];
        if ($truthy(self.yydebug)) {
          tmp_t = tstack['$[]'](len['$-@'](), len)};
        tmp_v = vstack['$[]'](len['$-@'](), len);
        if ($truthy(self.yydebug)) {
          
          $writer = [len['$-@'](), len, void_array];
          $send(tstack, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        
        $writer = [len['$-@'](), len, void_array];
        $send(vstack, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [len['$-@'](), len, void_array];
        $send(state, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(use_result)) {
          vstack.$push(self.$__send__(method_id, tmp_v, vstack, tmp_v['$[]'](0)))
        } else {
          vstack.$push(self.$__send__(method_id, tmp_v, vstack))
        };
        tstack.$push(reduce_to);
        if ($truthy(self.yydebug)) {
          self.$racc_reduce(tmp_t, reduce_to, tstack, vstack)};
        k1 = $rb_minus(reduce_to, nt_base);
        if ($truthy((i = goto_pointer['$[]'](k1)))) {
          
          i = $rb_plus(i, state['$[]'](-1));
          if ($truthy(($truthy($a = ($truthy($b = $rb_ge(i, 0)) ? (curstate = goto_table['$[]'](i)) : $b)) ? goto_check['$[]'](i)['$=='](k1) : $a))) {
            return curstate};};
        return goto_default['$[]'](k1);
      }, $Parser__racc_do_reduce$14.$$arity = 2);
      
      Opal.def(self, '$on_error', $Parser_on_error$15 = function $$on_error(t, val, vstack) {
        var $a, self = this;

        return self.$raise($$($nesting, 'ParseError'), self.$sprintf("\nparse error on value %s (%s)", val.$inspect(), ($truthy($a = self.$token_to_str(t)) ? $a : "?")))
      }, $Parser_on_error$15.$$arity = 3);
      
      Opal.def(self, '$yyerror', $Parser_yyerror$16 = function $$yyerror() {
        var self = this;

        return self.$throw("racc_jump", 1)
      }, $Parser_yyerror$16.$$arity = 0);
      
      Opal.def(self, '$yyaccept', $Parser_yyaccept$17 = function $$yyaccept() {
        var self = this;

        return self.$throw("racc_jump", 2)
      }, $Parser_yyaccept$17.$$arity = 0);
      
      Opal.def(self, '$yyerrok', $Parser_yyerrok$18 = function $$yyerrok() {
        var self = this;

        return (self.racc_error_status = 0)
      }, $Parser_yyerrok$18.$$arity = 0);
      
      Opal.def(self, '$racc_read_token', $Parser_racc_read_token$19 = function $$racc_read_token(t, tok, val) {
        var self = this;

        
        self.racc_debug_out.$print("read    ");
        self.racc_debug_out.$print(tok.$inspect(), "(", self.$racc_token2str(t), ") ");
        self.racc_debug_out.$puts(val.$inspect());
        return self.racc_debug_out.$puts();
      }, $Parser_racc_read_token$19.$$arity = 3);
      
      Opal.def(self, '$racc_shift', $Parser_racc_shift$20 = function $$racc_shift(tok, tstack, vstack) {
        var self = this;

        
        self.racc_debug_out.$puts("" + "shift   " + (self.$racc_token2str(tok)));
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_shift$20.$$arity = 3);
      
      Opal.def(self, '$racc_reduce', $Parser_racc_reduce$21 = function $$racc_reduce(toks, sim, tstack, vstack) {
        var $$22, self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("reduce ");
        if ($truthy(toks['$empty?']())) {
          out.$print(" <none>")
        } else {
          $send(toks, 'each', [], ($$22 = function(t){var self = $$22.$$s || this;

          
            
            if (t == null) {
              t = nil;
            };
            return out.$print(" ", self.$racc_token2str(t));}, $$22.$$s = self, $$22.$$arity = 1, $$22))
        };
        out.$puts("" + " --> " + (self.$racc_token2str(sim)));
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_reduce$21.$$arity = 4);
      
      Opal.def(self, '$racc_accept', $Parser_racc_accept$23 = function $$racc_accept() {
        var self = this;

        
        self.racc_debug_out.$puts("accept");
        return self.racc_debug_out.$puts();
      }, $Parser_racc_accept$23.$$arity = 0);
      
      Opal.def(self, '$racc_e_pop', $Parser_racc_e_pop$24 = function $$racc_e_pop(state, tstack, vstack) {
        var self = this;

        
        self.racc_debug_out.$puts("error recovering mode: pop token");
        self.$racc_print_states(state);
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_e_pop$24.$$arity = 3);
      
      Opal.def(self, '$racc_next_state', $Parser_racc_next_state$25 = function $$racc_next_state(curstate, state) {
        var self = this;

        
        self.racc_debug_out.$puts("" + "goto    " + (curstate));
        self.$racc_print_states(state);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_next_state$25.$$arity = 2);
      
      Opal.def(self, '$racc_print_stacks', $Parser_racc_print_stacks$26 = function $$racc_print_stacks(t, v) {
        var $$27, self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("        [");
        $send(t, 'each_index', [], ($$27 = function(i){var self = $$27.$$s || this;

        
          
          if (i == null) {
            i = nil;
          };
          return out.$print(" (", self.$racc_token2str(t['$[]'](i)), " ", v['$[]'](i).$inspect(), ")");}, $$27.$$s = self, $$27.$$arity = 1, $$27));
        return out.$puts(" ]");
      }, $Parser_racc_print_stacks$26.$$arity = 2);
      
      Opal.def(self, '$racc_print_states', $Parser_racc_print_states$28 = function $$racc_print_states(s) {
        var $$29, self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("        [");
        $send(s, 'each', [], ($$29 = function(st){var self = $$29.$$s || this;

        
          
          if (st == null) {
            st = nil;
          };
          return out.$print(" ", st);}, $$29.$$s = self, $$29.$$arity = 1, $$29));
        return out.$puts(" ]");
      }, $Parser_racc_print_states$28.$$arity = 1);
      
      Opal.def(self, '$racc_token2str', $Parser_racc_token2str$30 = function $$racc_token2str(tok) {
        var $a, self = this;

        return ($truthy($a = $$$(self.$class(), 'Racc_token_to_s_table')['$[]'](tok)) ? $a : self.$raise("" + "[Racc Bug] can't convert token " + (tok) + " to string"))
      }, $Parser_racc_token2str$30.$$arity = 1);
      return (Opal.def(self, '$token_to_str', $Parser_token_to_str$31 = function $$token_to_str(t) {
        var self = this;

        return $$$(self.$class(), 'Racc_token_to_s_table')['$[]'](t)
      }, $Parser_token_to_str$31.$$arity = 1), nil) && 'token_to_str';
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/version"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    Opal.const_set($nesting[0], 'VERSION', "2.5.3.0")
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["racc/parser"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var $a, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $gvars = Opal.gvars, $send = Opal.send;

  Opal.add_stubs(['$[]', '$class', '$<', '$size', '$[]=', '$-', '$__send__', '$_racc_setup', '$raise', '$_racc_init_sysvars', '$catch', '$!=', '$next_token', '$racc_read_token', '$+', '$>=', '$==', '$_racc_evalact', '$!', '$>', '$push', '$racc_shift', '$-@', '$_racc_do_reduce', '$===', '$racc_accept', '$throw', '$on_error', '$<=', '$pop', '$racc_e_pop', '$inspect', '$racc_next_state', '$*', '$racc_reduce', '$sprintf', '$token_to_str', '$print', '$racc_token2str', '$puts', '$racc_print_stacks', '$empty?', '$each', '$racc_print_states', '$each_index']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Racc');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ParseError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'StandardError'), $nesting)
  })($nesting[0], $nesting);
  if ($truthy((($a = $$$('::', 'ParseError', 'skip_raise')) ? 'constant' : nil))) {
  } else {
    Opal.const_set($nesting[0], 'ParseError', $$$($$($nesting, 'Racc'), 'ParseError'))
  };
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Racc');

    var $nesting = [self].concat($parent_nesting), $a;

    
    if ($truthy((($a = $$($nesting, 'Racc_No_Extensions', 'skip_raise')) ? 'constant' : nil))) {
    } else {
      Opal.const_set($nesting[0], 'Racc_No_Extensions', false)
    };
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Parser');

      var $nesting = [self].concat($parent_nesting), $Parser_racc_runtime_type$1, $Parser__racc_setup$2, $Parser__racc_init_sysvars$3, $Parser_do_parse$4, $Parser_next_token$5, $Parser__racc_do_parse_rb$6, $Parser_yyparse$8, $Parser__racc_yyparse_rb$9, $Parser__racc_evalact$12, $Parser__racc_do_reduce$14, $Parser_on_error$15, $Parser_yyerror$16, $Parser_yyaccept$17, $Parser_yyerrok$18, $Parser_racc_read_token$19, $Parser_racc_shift$20, $Parser_racc_reduce$21, $Parser_racc_accept$23, $Parser_racc_e_pop$24, $Parser_racc_next_state$25, $Parser_racc_print_stacks$26, $Parser_racc_print_states$28, $Parser_racc_token2str$30, $Parser_token_to_str$31;

      self.$$prototype.yydebug = self.$$prototype.racc_debug_out = self.$$prototype.racc_error_status = self.$$prototype.racc_t = self.$$prototype.racc_vstack = self.$$prototype.racc_val = self.$$prototype.racc_state = self.$$prototype.racc_tstack = nil;
      
      Opal.const_set($nesting[0], 'Racc_Runtime_Version', "1.4.6");
      Opal.const_set($nesting[0], 'Racc_Runtime_Revision', ["originalRevision:", "1.8"]['$[]'](1));
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Version_R', "1.4.6");
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Revision_R', ["originalRevision:", "1.8"]['$[]'](1));
      Opal.const_set($nesting[0], 'Racc_Main_Parsing_Routine', "_racc_do_parse_rb");
      Opal.const_set($nesting[0], 'Racc_YY_Parse_Method', "_racc_yyparse_rb");
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Version', $$($nesting, 'Racc_Runtime_Core_Version_R'));
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Revision', $$($nesting, 'Racc_Runtime_Core_Revision_R'));
      Opal.const_set($nesting[0], 'Racc_Runtime_Type', "ruby");
      Opal.defs($$($nesting, 'Parser'), '$racc_runtime_type', $Parser_racc_runtime_type$1 = function $$racc_runtime_type() {
        var self = this;

        return $$($nesting, 'Racc_Runtime_Type')
      }, $Parser_racc_runtime_type$1.$$arity = 0);
      
      Opal.def(self, '$_racc_setup', $Parser__racc_setup$2 = function $$_racc_setup() {
        var $a, $b, $c, self = this, arg = nil, $writer = nil;
        if ($gvars.stderr == null) $gvars.stderr = nil;

        
        if ($truthy($$$(self.$class(), 'Racc_debug_parser'))) {
        } else {
          self.yydebug = false
        };
        if ($truthy((($a = self['yydebug'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
        } else {
          self.yydebug = false
        };
        if ($truthy(self.yydebug)) {
          
          if ($truthy((($b = self['racc_debug_out'], $b != null && $b !== nil) ? 'instance-variable' : nil))) {
          } else {
            self.racc_debug_out = $gvars.stderr
          };
          self.racc_debug_out = ($truthy($c = self.racc_debug_out) ? $c : $gvars.stderr);};
        arg = $$$(self.$class(), 'Racc_arg');
        if ($truthy($rb_lt(arg.$size(), 14))) {
          
          $writer = [13, true];
          $send(arg, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        return arg;
      }, $Parser__racc_setup$2.$$arity = 0);
      
      Opal.def(self, '$_racc_init_sysvars', $Parser__racc_init_sysvars$3 = function $$_racc_init_sysvars() {
        var self = this;

        
        self.racc_state = [0];
        self.racc_tstack = [];
        self.racc_vstack = [];
        self.racc_t = nil;
        self.racc_val = nil;
        self.racc_read_next = true;
        self.racc_user_yyerror = false;
        return (self.racc_error_status = 0);
      }, $Parser__racc_init_sysvars$3.$$arity = 0);
      
      Opal.def(self, '$do_parse', $Parser_do_parse$4 = function $$do_parse() {
        var self = this;

        return self.$__send__($$($nesting, 'Racc_Main_Parsing_Routine'), self.$_racc_setup(), false)
      }, $Parser_do_parse$4.$$arity = 0);
      
      Opal.def(self, '$next_token', $Parser_next_token$5 = function $$next_token() {
        var self = this;

        return self.$raise($$($nesting, 'NotImplementedError'), "" + (self.$class()) + "#next_token is not defined")
      }, $Parser_next_token$5.$$arity = 0);
      
      Opal.def(self, '$_racc_do_parse_rb', $Parser__racc_do_parse_rb$6 = function $$_racc_do_parse_rb(arg, in_debug) {
        var $a, $b, $$7, self = this, action_table = nil, action_check = nil, action_default = nil, action_pointer = nil, _ = nil, token_table = nil, tok = nil, act = nil, i = nil;

        
        $b = arg, $a = Opal.to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (action_default = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (token_table = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), $b;
        self.$_racc_init_sysvars();
        tok = (act = (i = nil));
        return $send(self, 'catch', ["racc_end_parse"], ($$7 = function(){var self = $$7.$$s || this, $c, $d, $e;
          if (self.racc_state == null) self.racc_state = nil;
          if (self.racc_read_next == null) self.racc_read_next = nil;
          if (self.racc_t == null) self.racc_t = nil;
          if (self.yydebug == null) self.yydebug = nil;
          if (self.racc_val == null) self.racc_val = nil;

        while ($truthy(true)) {
            
            if ($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1))))) {
              
              if ($truthy(self.racc_read_next)) {
                if ($truthy(self.racc_t['$!='](0))) {
                  
                  $e = self.$next_token(), $d = Opal.to_ary($e), (tok = ($d[0] == null ? nil : $d[0])), (self.racc_val = ($d[1] == null ? nil : $d[1])), $e;
                  if ($truthy(tok)) {
                    self.racc_t = ($truthy($d = token_table['$[]'](tok)) ? $d : 1)
                  } else {
                    self.racc_t = 0
                  };
                  if ($truthy(self.yydebug)) {
                    self.$racc_read_token(self.racc_t, tok, self.racc_val)};
                  self.racc_read_next = false;}};
              i = $rb_plus(i, self.racc_t);
              if ($truthy(($truthy($d = ($truthy($e = $rb_ge(i, 0)) ? (act = action_table['$[]'](i)) : $e)) ? action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1)) : $d))) {
              } else {
                act = action_default['$[]'](self.racc_state['$[]'](-1))
              };
            } else {
              act = action_default['$[]'](self.racc_state['$[]'](-1))
            };
            while ($truthy((act = self.$_racc_evalact(act, arg)))) {
              
            };
          }}, $$7.$$s = self, $$7.$$arity = 0, $$7));
      }, $Parser__racc_do_parse_rb$6.$$arity = 2);
      
      Opal.def(self, '$yyparse', $Parser_yyparse$8 = function $$yyparse(recv, mid) {
        var self = this;

        return self.$__send__($$($nesting, 'Racc_YY_Parse_Method'), recv, mid, self.$_racc_setup(), true)
      }, $Parser_yyparse$8.$$arity = 2);
      
      Opal.def(self, '$_racc_yyparse_rb', $Parser__racc_yyparse_rb$9 = function $$_racc_yyparse_rb(recv, mid, arg, c_debug) {
        var $a, $b, $$10, self = this, action_table = nil, action_check = nil, action_default = nil, action_pointer = nil, _ = nil, token_table = nil, act = nil, i = nil;

        
        $b = arg, $a = Opal.to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (action_default = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (token_table = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), $b;
        self.$_racc_init_sysvars();
        act = nil;
        i = nil;
        return $send(self, 'catch', ["racc_end_parse"], ($$10 = function(){var self = $$10.$$s || this, $c, $d, $$11;
          if (self.racc_state == null) self.racc_state = nil;

        
          while (!($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1)))))) {
            while ($truthy((act = self.$_racc_evalact(action_default['$[]'](self.racc_state['$[]'](-1)), arg)))) {
              
            }
          };
          return $send(recv, '__send__', [mid], ($$11 = function(tok, val){var self = $$11.$$s || this, $e, $f, $g, $h, $i;
            if (self.racc_t == null) self.racc_t = nil;
            if (self.racc_state == null) self.racc_state = nil;
            if (self.racc_read_next == null) self.racc_read_next = nil;

          
            
            if (tok == null) {
              tok = nil;
            };
            
            if (val == null) {
              val = nil;
            };
            if ($truthy(tok)) {
              self.racc_t = ($truthy($e = token_table['$[]'](tok)) ? $e : 1)
            } else {
              self.racc_t = 0
            };
            self.racc_val = val;
            self.racc_read_next = false;
            i = $rb_plus(i, self.racc_t);
            if ($truthy(($truthy($e = ($truthy($f = $rb_ge(i, 0)) ? (act = action_table['$[]'](i)) : $f)) ? action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1)) : $e))) {
            } else {
              act = action_default['$[]'](self.racc_state['$[]'](-1))
            };
            while ($truthy((act = self.$_racc_evalact(act, arg)))) {
              
            };
            while ($truthy(($truthy($f = ($truthy($g = (i = action_pointer['$[]'](self.racc_state['$[]'](-1)))['$!']()) ? $g : self.racc_read_next['$!']())) ? $f : self.racc_t['$=='](0)))) {
              
              if ($truthy(($truthy($f = ($truthy($g = ($truthy($h = ($truthy($i = i) ? (i = $rb_plus(i, self.racc_t)) : $i)) ? $rb_ge(i, 0) : $h)) ? (act = action_table['$[]'](i)) : $g)) ? action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1)) : $f))) {
              } else {
                act = action_default['$[]'](self.racc_state['$[]'](-1))
              };
              while ($truthy((act = self.$_racc_evalact(act, arg)))) {
                
              };
            };}, $$11.$$s = self, $$11.$$arity = 2, $$11));}, $$10.$$s = self, $$10.$$arity = 0, $$10));
      }, $Parser__racc_yyparse_rb$9.$$arity = 4);
      
      Opal.def(self, '$_racc_evalact', $Parser__racc_evalact$12 = function $$_racc_evalact(act, arg) {
        var $a, $b, $$13, $c, self = this, action_table = nil, action_check = nil, _ = nil, action_pointer = nil, shift_n = nil, reduce_n = nil, code = nil, $case = nil, i = nil;

        
        $b = arg, $a = Opal.to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (_ = ($a[10] == null ? nil : $a[10])), (shift_n = ($a[11] == null ? nil : $a[11])), (reduce_n = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), (_ = ($a[14] == null ? nil : $a[14])), $b;
        if ($truthy(($truthy($a = $rb_gt(act, 0)) ? $rb_lt(act, shift_n) : $a))) {
          
          if ($truthy($rb_gt(self.racc_error_status, 0))) {
            if (self.racc_t['$=='](1)) {
            } else {
              self.racc_error_status = $rb_minus(self.racc_error_status, 1)
            }};
          self.racc_vstack.$push(self.racc_val);
          self.racc_state.$push(act);
          self.racc_read_next = true;
          if ($truthy(self.yydebug)) {
            
            self.racc_tstack.$push(self.racc_t);
            self.$racc_shift(self.racc_t, self.racc_tstack, self.racc_vstack);};
        } else if ($truthy(($truthy($a = $rb_lt(act, 0)) ? $rb_gt(act, reduce_n['$-@']()) : $a))) {
          
          code = $send(self, 'catch', ["racc_jump"], ($$13 = function(){var self = $$13.$$s || this;
            if (self.racc_state == null) self.racc_state = nil;

          
            self.racc_state.$push(self.$_racc_do_reduce(arg, act));
            return false;}, $$13.$$s = self, $$13.$$arity = 0, $$13));
          if ($truthy(code)) {
            $case = code;
            if ((1)['$===']($case)) {
            self.racc_user_yyerror = true;
            return reduce_n['$-@']();}
            else if ((2)['$===']($case)) {return shift_n}
            else {self.$raise("[Racc Bug] unknown jump code")}};
        } else if (act['$=='](shift_n)) {
          
          if ($truthy(self.yydebug)) {
            self.$racc_accept()};
          self.$throw("racc_end_parse", self.racc_vstack['$[]'](0));
        } else if (act['$=='](reduce_n['$-@']())) {
          
          $case = self.racc_error_status;
          if ((0)['$===']($case)) {if ($truthy(arg['$[]'](21))) {
          } else {
            self.$on_error(self.racc_t, self.racc_val, self.racc_vstack)
          }}
          else if ((3)['$===']($case)) {
          if (self.racc_t['$=='](0)) {
            self.$throw("racc_end_parse", nil)};
          self.racc_read_next = true;};
          self.racc_user_yyerror = false;
          self.racc_error_status = 3;
          while ($truthy(true)) {
            
            if ($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1))))) {
              
              i = $rb_plus(i, 1);
              if ($truthy(($truthy($b = ($truthy($c = $rb_ge(i, 0)) ? (act = action_table['$[]'](i)) : $c)) ? action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1)) : $b))) {
                break;};};
            if ($truthy($rb_le(self.racc_state.$size(), 1))) {
              self.$throw("racc_end_parse", nil)};
            self.racc_state.$pop();
            self.racc_vstack.$pop();
            if ($truthy(self.yydebug)) {
              
              self.racc_tstack.$pop();
              self.$racc_e_pop(self.racc_state, self.racc_tstack, self.racc_vstack);};
          };
          return act;
        } else {
          self.$raise("" + "[Racc Bug] unknown action " + (act.$inspect()))
        };
        if ($truthy(self.yydebug)) {
          self.$racc_next_state(self.racc_state['$[]'](-1), self.racc_state)};
        return nil;
      }, $Parser__racc_evalact$12.$$arity = 2);
      
      Opal.def(self, '$_racc_do_reduce', $Parser__racc_do_reduce$14 = function $$_racc_do_reduce(arg, act) {
        var $a, $b, self = this, _ = nil, goto_table = nil, goto_check = nil, goto_default = nil, goto_pointer = nil, nt_base = nil, reduce_table = nil, use_result = nil, state = nil, vstack = nil, tstack = nil, i = nil, len = nil, reduce_to = nil, method_id = nil, void_array = nil, tmp_t = nil, tmp_v = nil, $writer = nil, k1 = nil, curstate = nil;

        
        $b = arg, $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), (_ = ($a[3] == null ? nil : $a[3])), (goto_table = ($a[4] == null ? nil : $a[4])), (goto_check = ($a[5] == null ? nil : $a[5])), (goto_default = ($a[6] == null ? nil : $a[6])), (goto_pointer = ($a[7] == null ? nil : $a[7])), (nt_base = ($a[8] == null ? nil : $a[8])), (reduce_table = ($a[9] == null ? nil : $a[9])), (_ = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (use_result = ($a[13] == null ? nil : $a[13])), $b;
        state = self.racc_state;
        vstack = self.racc_vstack;
        tstack = self.racc_tstack;
        i = $rb_times(act, -3);
        len = reduce_table['$[]'](i);
        reduce_to = reduce_table['$[]']($rb_plus(i, 1));
        method_id = reduce_table['$[]']($rb_plus(i, 2));
        void_array = [];
        if ($truthy(self.yydebug)) {
          tmp_t = tstack['$[]'](len['$-@'](), len)};
        tmp_v = vstack['$[]'](len['$-@'](), len);
        if ($truthy(self.yydebug)) {
          
          $writer = [len['$-@'](), len, void_array];
          $send(tstack, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        
        $writer = [len['$-@'](), len, void_array];
        $send(vstack, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [len['$-@'](), len, void_array];
        $send(state, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(use_result)) {
          vstack.$push(self.$__send__(method_id, tmp_v, vstack, tmp_v['$[]'](0)))
        } else {
          vstack.$push(self.$__send__(method_id, tmp_v, vstack))
        };
        tstack.$push(reduce_to);
        if ($truthy(self.yydebug)) {
          self.$racc_reduce(tmp_t, reduce_to, tstack, vstack)};
        k1 = $rb_minus(reduce_to, nt_base);
        if ($truthy((i = goto_pointer['$[]'](k1)))) {
          
          i = $rb_plus(i, state['$[]'](-1));
          if ($truthy(($truthy($a = ($truthy($b = $rb_ge(i, 0)) ? (curstate = goto_table['$[]'](i)) : $b)) ? goto_check['$[]'](i)['$=='](k1) : $a))) {
            return curstate};};
        return goto_default['$[]'](k1);
      }, $Parser__racc_do_reduce$14.$$arity = 2);
      
      Opal.def(self, '$on_error', $Parser_on_error$15 = function $$on_error(t, val, vstack) {
        var $a, self = this;

        return self.$raise($$($nesting, 'ParseError'), self.$sprintf("\nparse error on value %s (%s)", val.$inspect(), ($truthy($a = self.$token_to_str(t)) ? $a : "?")))
      }, $Parser_on_error$15.$$arity = 3);
      
      Opal.def(self, '$yyerror', $Parser_yyerror$16 = function $$yyerror() {
        var self = this;

        return self.$throw("racc_jump", 1)
      }, $Parser_yyerror$16.$$arity = 0);
      
      Opal.def(self, '$yyaccept', $Parser_yyaccept$17 = function $$yyaccept() {
        var self = this;

        return self.$throw("racc_jump", 2)
      }, $Parser_yyaccept$17.$$arity = 0);
      
      Opal.def(self, '$yyerrok', $Parser_yyerrok$18 = function $$yyerrok() {
        var self = this;

        return (self.racc_error_status = 0)
      }, $Parser_yyerrok$18.$$arity = 0);
      
      Opal.def(self, '$racc_read_token', $Parser_racc_read_token$19 = function $$racc_read_token(t, tok, val) {
        var self = this;

        
        self.racc_debug_out.$print("read    ");
        self.racc_debug_out.$print(tok.$inspect(), "(", self.$racc_token2str(t), ") ");
        self.racc_debug_out.$puts(val.$inspect());
        return self.racc_debug_out.$puts();
      }, $Parser_racc_read_token$19.$$arity = 3);
      
      Opal.def(self, '$racc_shift', $Parser_racc_shift$20 = function $$racc_shift(tok, tstack, vstack) {
        var self = this;

        
        self.racc_debug_out.$puts("" + "shift   " + (self.$racc_token2str(tok)));
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_shift$20.$$arity = 3);
      
      Opal.def(self, '$racc_reduce', $Parser_racc_reduce$21 = function $$racc_reduce(toks, sim, tstack, vstack) {
        var $$22, self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("reduce ");
        if ($truthy(toks['$empty?']())) {
          out.$print(" <none>")
        } else {
          $send(toks, 'each', [], ($$22 = function(t){var self = $$22.$$s || this;

          
            
            if (t == null) {
              t = nil;
            };
            return out.$print(" ", self.$racc_token2str(t));}, $$22.$$s = self, $$22.$$arity = 1, $$22))
        };
        out.$puts("" + " --> " + (self.$racc_token2str(sim)));
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_reduce$21.$$arity = 4);
      
      Opal.def(self, '$racc_accept', $Parser_racc_accept$23 = function $$racc_accept() {
        var self = this;

        
        self.racc_debug_out.$puts("accept");
        return self.racc_debug_out.$puts();
      }, $Parser_racc_accept$23.$$arity = 0);
      
      Opal.def(self, '$racc_e_pop', $Parser_racc_e_pop$24 = function $$racc_e_pop(state, tstack, vstack) {
        var self = this;

        
        self.racc_debug_out.$puts("error recovering mode: pop token");
        self.$racc_print_states(state);
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_e_pop$24.$$arity = 3);
      
      Opal.def(self, '$racc_next_state', $Parser_racc_next_state$25 = function $$racc_next_state(curstate, state) {
        var self = this;

        
        self.racc_debug_out.$puts("" + "goto    " + (curstate));
        self.$racc_print_states(state);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_next_state$25.$$arity = 2);
      
      Opal.def(self, '$racc_print_stacks', $Parser_racc_print_stacks$26 = function $$racc_print_stacks(t, v) {
        var $$27, self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("        [");
        $send(t, 'each_index', [], ($$27 = function(i){var self = $$27.$$s || this;

        
          
          if (i == null) {
            i = nil;
          };
          return out.$print(" (", self.$racc_token2str(t['$[]'](i)), " ", v['$[]'](i).$inspect(), ")");}, $$27.$$s = self, $$27.$$arity = 1, $$27));
        return out.$puts(" ]");
      }, $Parser_racc_print_stacks$26.$$arity = 2);
      
      Opal.def(self, '$racc_print_states', $Parser_racc_print_states$28 = function $$racc_print_states(s) {
        var $$29, self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("        [");
        $send(s, 'each', [], ($$29 = function(st){var self = $$29.$$s || this;

        
          
          if (st == null) {
            st = nil;
          };
          return out.$print(" ", st);}, $$29.$$s = self, $$29.$$arity = 1, $$29));
        return out.$puts(" ]");
      }, $Parser_racc_print_states$28.$$arity = 1);
      
      Opal.def(self, '$racc_token2str', $Parser_racc_token2str$30 = function $$racc_token2str(tok) {
        var $a, self = this;

        return ($truthy($a = $$$(self.$class(), 'Racc_token_to_s_table')['$[]'](tok)) ? $a : self.$raise("" + "[Racc Bug] can't convert token " + (tok) + " to string"))
      }, $Parser_racc_token2str$30.$$arity = 1);
      return (Opal.def(self, '$token_to_str', $Parser_token_to_str$31 = function $$token_to_str(t) {
        var self = this;

        return $$$(self.$class(), 'Racc_token_to_s_table')['$[]'](t)
      }, $Parser_token_to_str$31.$$arity = 1), nil) && 'token_to_str';
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/messages"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$freeze']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    Opal.const_set($nesting[0], 'MESSAGES', $hash2(["unicode_point_too_large", "invalid_escape", "incomplete_escape", "invalid_hex_escape", "invalid_unicode_escape", "unterminated_unicode", "escape_eof", "string_eof", "regexp_options", "cvar_name", "ivar_name", "trailing_in_number", "empty_numeric", "invalid_octal", "no_dot_digit_literal", "bare_backslash", "unexpected", "embedded_document", "heredoc_id_has_newline", "heredoc_id_ends_with_nl", "invalid_escape_use", "ambiguous_literal", "ambiguous_prefix", "nth_ref_alias", "begin_in_method", "backref_assignment", "invalid_assignment", "module_name_const", "unexpected_token", "argument_const", "argument_ivar", "argument_gvar", "argument_cvar", "duplicate_argument", "empty_symbol", "odd_hash", "singleton_literal", "dynamic_const", "const_reassignment", "module_in_def", "class_in_def", "unexpected_percent_str", "block_and_blockarg", "masgn_as_condition", "block_given_to_yield", "invalid_regexp", "invalid_return", "useless_else", "invalid_encoding", "invalid_action", "clobbered", "different_replacements", "swallowed_insertions", "swallowed_insertions_conflict", "crossing_deletions", "crossing_deletions_conflict", "crossing_insertions", "crossing_insertions_conflict"], {"unicode_point_too_large": "invalid Unicode codepoint (too large)", "invalid_escape": "invalid escape character syntax", "incomplete_escape": "incomplete character syntax", "invalid_hex_escape": "invalid hex escape", "invalid_unicode_escape": "invalid Unicode escape", "unterminated_unicode": "unterminated Unicode escape", "escape_eof": "escape sequence meets end of file", "string_eof": "unterminated string meets end of file", "regexp_options": "unknown regexp options: %{options}", "cvar_name": "`%{name}' is not allowed as a class variable name", "ivar_name": "`%{name}' is not allowed as an instance variable name", "trailing_in_number": "trailing `%{character}' in number", "empty_numeric": "numeric literal without digits", "invalid_octal": "invalid octal digit", "no_dot_digit_literal": "no .<digit> floating literal anymore; put 0 before dot", "bare_backslash": "bare backslash only allowed before newline", "unexpected": "unexpected `%{character}'", "embedded_document": "embedded document meets end of file (and they embark on a romantic journey)", "heredoc_id_has_newline": "here document identifier across newlines, never match", "heredoc_id_ends_with_nl": "here document identifier ends with a newline", "invalid_escape_use": "invalid character syntax; use ?%{escape}", "ambiguous_literal": "ambiguous first argument; put parentheses or a space even after the operator", "ambiguous_prefix": "`%{prefix}' interpreted as argument prefix", "nth_ref_alias": "cannot define an alias for a back-reference variable", "begin_in_method": "BEGIN in method", "backref_assignment": "cannot assign to a back-reference variable", "invalid_assignment": "cannot assign to a keyword", "module_name_const": "class or module name must be a constant literal", "unexpected_token": "unexpected token %{token}", "argument_const": "formal argument cannot be a constant", "argument_ivar": "formal argument cannot be an instance variable", "argument_gvar": "formal argument cannot be a global variable", "argument_cvar": "formal argument cannot be a class variable", "duplicate_argument": "duplicate argument name", "empty_symbol": "empty symbol literal", "odd_hash": "odd number of entries for a hash", "singleton_literal": "cannot define a singleton method for a literal", "dynamic_const": "dynamic constant assignment", "const_reassignment": "constant re-assignment", "module_in_def": "module definition in method body", "class_in_def": "class definition in method body", "unexpected_percent_str": "%{type}: unknown type of percent-literal", "block_and_blockarg": "both block argument and literal block are passed", "masgn_as_condition": "multiple assignment in conditional context", "block_given_to_yield": "block given to yield", "invalid_regexp": "%{message}", "invalid_return": "Invalid return in class/module body", "useless_else": "else without rescue is useless", "invalid_encoding": "literal contains escape sequences incompatible with UTF-8", "invalid_action": "cannot %{action}", "clobbered": "clobbered by: %{action}", "different_replacements": "different replacements: %{replacement} vs %{other_replacement}", "swallowed_insertions": "this replacement:", "swallowed_insertions_conflict": "swallows some inner rewriting actions:", "crossing_deletions": "the deletion of:", "crossing_deletions_conflict": "is crossing:", "crossing_insertions": "the rewriting action on:", "crossing_insertions_conflict": "is crossing that on:"}).$freeze())
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/deprecation"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_writer', '$warn']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Deprecation');

      var $nesting = [self].concat($parent_nesting), $Deprecation_warn_of_deprecation$1;

      
      self.$attr_writer("warned_of_deprecation");
      
      Opal.def(self, '$warn_of_deprecation', $Deprecation_warn_of_deprecation$1 = function $$warn_of_deprecation() {
        var $a, $b, self = this;
        if (self.warned_of_deprecation == null) self.warned_of_deprecation = nil;

        return (self.warned_of_deprecation = ($truthy($a = self.warned_of_deprecation) ? $a : ($truthy($b = self.$warn($$$(self, 'DEPRECATION_WARNING'))) ? $b : true)))
      }, $Deprecation_warn_of_deprecation$1.$$arity = 0);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/ast/processor"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$updated', '$process_all', '$on_var', '$!', '$nil?', '$process', '$on_vasgn', '$on_argument', '$warn']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Processor');

        var $nesting = [self].concat($parent_nesting), $Processor_process_regular_node$1, $Processor_on_var$2, $Processor_process_variable_node$3, $Processor_on_vasgn$4, $Processor_process_var_asgn_node$5, $Processor_on_op_asgn$6, $Processor_on_const$7, $Processor_on_casgn$8, $Processor_on_argument$9, $Processor_process_argument_node$10, $Processor_on_def$11, $Processor_on_defs$12, $Processor_on_send$13, $Processor_process_variable_node$14, $Processor_process_var_asgn_node$15, $Processor_process_argument_node$16;

        
        
        Opal.def(self, '$process_regular_node', $Processor_process_regular_node$1 = function $$process_regular_node(node) {
          var self = this;

          return node.$updated(nil, self.$process_all(node))
        }, $Processor_process_regular_node$1.$$arity = 1);
        Opal.alias(self, "on_dstr", "process_regular_node");
        Opal.alias(self, "on_dsym", "process_regular_node");
        Opal.alias(self, "on_regexp", "process_regular_node");
        Opal.alias(self, "on_xstr", "process_regular_node");
        Opal.alias(self, "on_splat", "process_regular_node");
        Opal.alias(self, "on_kwsplat", "process_regular_node");
        Opal.alias(self, "on_array", "process_regular_node");
        Opal.alias(self, "on_pair", "process_regular_node");
        Opal.alias(self, "on_hash", "process_regular_node");
        Opal.alias(self, "on_irange", "process_regular_node");
        Opal.alias(self, "on_erange", "process_regular_node");
        
        Opal.def(self, '$on_var', $Processor_on_var$2 = function $$on_var(node) {
          var self = this;

          return node
        }, $Processor_on_var$2.$$arity = 1);
        
        Opal.def(self, '$process_variable_node', $Processor_process_variable_node$3 = function $$process_variable_node(node) {
          var self = this;

          return self.$on_var(node)
        }, $Processor_process_variable_node$3.$$arity = 1);
        Opal.alias(self, "on_lvar", "process_variable_node");
        Opal.alias(self, "on_ivar", "process_variable_node");
        Opal.alias(self, "on_gvar", "process_variable_node");
        Opal.alias(self, "on_cvar", "process_variable_node");
        Opal.alias(self, "on_back_ref", "process_variable_node");
        Opal.alias(self, "on_nth_ref", "process_variable_node");
        
        Opal.def(self, '$on_vasgn', $Processor_on_vasgn$4 = function $$on_vasgn(node) {
          var $a, self = this, name = nil, value_node = nil;

          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (value_node = ($a[1] == null ? nil : $a[1])), $a;
          if ($truthy(value_node['$nil?']()['$!']())) {
            return node.$updated(nil, [name, self.$process(value_node)])
          } else {
            return node
          };
        }, $Processor_on_vasgn$4.$$arity = 1);
        
        Opal.def(self, '$process_var_asgn_node', $Processor_process_var_asgn_node$5 = function $$process_var_asgn_node(node) {
          var self = this;

          return self.$on_vasgn(node)
        }, $Processor_process_var_asgn_node$5.$$arity = 1);
        Opal.alias(self, "on_lvasgn", "process_var_asgn_node");
        Opal.alias(self, "on_ivasgn", "process_var_asgn_node");
        Opal.alias(self, "on_gvasgn", "process_var_asgn_node");
        Opal.alias(self, "on_cvasgn", "process_var_asgn_node");
        Opal.alias(self, "on_and_asgn", "process_regular_node");
        Opal.alias(self, "on_or_asgn", "process_regular_node");
        
        Opal.def(self, '$on_op_asgn', $Processor_on_op_asgn$6 = function $$on_op_asgn(node) {
          var $a, self = this, var_node = nil, method_name = nil, value_node = nil;

          
          $a = [].concat(Opal.to_a(node)), (var_node = ($a[0] == null ? nil : $a[0])), (method_name = ($a[1] == null ? nil : $a[1])), (value_node = ($a[2] == null ? nil : $a[2])), $a;
          return node.$updated(nil, [self.$process(var_node), method_name, self.$process(value_node)]);
        }, $Processor_on_op_asgn$6.$$arity = 1);
        Opal.alias(self, "on_mlhs", "process_regular_node");
        Opal.alias(self, "on_masgn", "process_regular_node");
        
        Opal.def(self, '$on_const', $Processor_on_const$7 = function $$on_const(node) {
          var $a, self = this, scope_node = nil, name = nil;

          
          $a = [].concat(Opal.to_a(node)), (scope_node = ($a[0] == null ? nil : $a[0])), (name = ($a[1] == null ? nil : $a[1])), $a;
          return node.$updated(nil, [self.$process(scope_node), name]);
        }, $Processor_on_const$7.$$arity = 1);
        
        Opal.def(self, '$on_casgn', $Processor_on_casgn$8 = function $$on_casgn(node) {
          var $a, self = this, scope_node = nil, name = nil, value_node = nil;

          
          $a = [].concat(Opal.to_a(node)), (scope_node = ($a[0] == null ? nil : $a[0])), (name = ($a[1] == null ? nil : $a[1])), (value_node = ($a[2] == null ? nil : $a[2])), $a;
          if ($truthy(value_node['$nil?']()['$!']())) {
            return node.$updated(nil, [self.$process(scope_node), name, self.$process(value_node)])
          } else {
            return node.$updated(nil, [self.$process(scope_node), name])
          };
        }, $Processor_on_casgn$8.$$arity = 1);
        Opal.alias(self, "on_args", "process_regular_node");
        
        Opal.def(self, '$on_argument', $Processor_on_argument$9 = function $$on_argument(node) {
          var $a, self = this, arg_name = nil, value_node = nil;

          
          $a = [].concat(Opal.to_a(node)), (arg_name = ($a[0] == null ? nil : $a[0])), (value_node = ($a[1] == null ? nil : $a[1])), $a;
          if ($truthy(value_node['$nil?']()['$!']())) {
            return node.$updated(nil, [arg_name, self.$process(value_node)])
          } else {
            return node
          };
        }, $Processor_on_argument$9.$$arity = 1);
        
        Opal.def(self, '$process_argument_node', $Processor_process_argument_node$10 = function $$process_argument_node(node) {
          var self = this;

          return self.$on_argument(node)
        }, $Processor_process_argument_node$10.$$arity = 1);
        Opal.alias(self, "on_arg", "process_argument_node");
        Opal.alias(self, "on_optarg", "process_argument_node");
        Opal.alias(self, "on_restarg", "process_argument_node");
        Opal.alias(self, "on_blockarg", "process_argument_node");
        Opal.alias(self, "on_shadowarg", "process_argument_node");
        Opal.alias(self, "on_kwarg", "process_argument_node");
        Opal.alias(self, "on_kwoptarg", "process_argument_node");
        Opal.alias(self, "on_kwrestarg", "process_argument_node");
        Opal.alias(self, "on_procarg0", "process_argument_node");
        Opal.alias(self, "on_arg_expr", "process_regular_node");
        Opal.alias(self, "on_restarg_expr", "process_regular_node");
        Opal.alias(self, "on_blockarg_expr", "process_regular_node");
        Opal.alias(self, "on_block_pass", "process_regular_node");
        Opal.alias(self, "on_module", "process_regular_node");
        Opal.alias(self, "on_class", "process_regular_node");
        Opal.alias(self, "on_sclass", "process_regular_node");
        
        Opal.def(self, '$on_def', $Processor_on_def$11 = function $$on_def(node) {
          var $a, self = this, name = nil, args_node = nil, body_node = nil;

          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (args_node = ($a[1] == null ? nil : $a[1])), (body_node = ($a[2] == null ? nil : $a[2])), $a;
          return node.$updated(nil, [name, self.$process(args_node), self.$process(body_node)]);
        }, $Processor_on_def$11.$$arity = 1);
        
        Opal.def(self, '$on_defs', $Processor_on_defs$12 = function $$on_defs(node) {
          var $a, self = this, definee_node = nil, name = nil, args_node = nil, body_node = nil;

          
          $a = [].concat(Opal.to_a(node)), (definee_node = ($a[0] == null ? nil : $a[0])), (name = ($a[1] == null ? nil : $a[1])), (args_node = ($a[2] == null ? nil : $a[2])), (body_node = ($a[3] == null ? nil : $a[3])), $a;
          return node.$updated(nil, [self.$process(definee_node), name, self.$process(args_node), self.$process(body_node)]);
        }, $Processor_on_defs$12.$$arity = 1);
        Opal.alias(self, "on_undef", "process_regular_node");
        Opal.alias(self, "on_alias", "process_regular_node");
        
        Opal.def(self, '$on_send', $Processor_on_send$13 = function $$on_send(node) {
          var $a, self = this, receiver_node = nil, method_name = nil, arg_nodes = nil;

          
          $a = [].concat(Opal.to_a(node)), (receiver_node = ($a[0] == null ? nil : $a[0])), (method_name = ($a[1] == null ? nil : $a[1])), (arg_nodes = $slice.call($a, 2)), $a;
          if ($truthy(receiver_node)) {
            receiver_node = self.$process(receiver_node)};
          return node.$updated(nil, [receiver_node, method_name].concat(Opal.to_a(self.$process_all(arg_nodes))));
        }, $Processor_on_send$13.$$arity = 1);
        Opal.alias(self, "on_csend", "on_send");
        Opal.alias(self, "on_index", "process_regular_node");
        Opal.alias(self, "on_indexasgn", "process_regular_node");
        Opal.alias(self, "on_block", "process_regular_node");
        Opal.alias(self, "on_lambda", "process_regular_node");
        Opal.alias(self, "on_while", "process_regular_node");
        Opal.alias(self, "on_while_post", "process_regular_node");
        Opal.alias(self, "on_until", "process_regular_node");
        Opal.alias(self, "on_until_post", "process_regular_node");
        Opal.alias(self, "on_for", "process_regular_node");
        Opal.alias(self, "on_return", "process_regular_node");
        Opal.alias(self, "on_break", "process_regular_node");
        Opal.alias(self, "on_next", "process_regular_node");
        Opal.alias(self, "on_redo", "process_regular_node");
        Opal.alias(self, "on_retry", "process_regular_node");
        Opal.alias(self, "on_super", "process_regular_node");
        Opal.alias(self, "on_yield", "process_regular_node");
        Opal.alias(self, "on_defined?", "process_regular_node");
        Opal.alias(self, "on_not", "process_regular_node");
        Opal.alias(self, "on_and", "process_regular_node");
        Opal.alias(self, "on_or", "process_regular_node");
        Opal.alias(self, "on_if", "process_regular_node");
        Opal.alias(self, "on_when", "process_regular_node");
        Opal.alias(self, "on_case", "process_regular_node");
        Opal.alias(self, "on_iflipflop", "process_regular_node");
        Opal.alias(self, "on_eflipflop", "process_regular_node");
        Opal.alias(self, "on_match_current_line", "process_regular_node");
        Opal.alias(self, "on_match_with_lvasgn", "process_regular_node");
        Opal.alias(self, "on_resbody", "process_regular_node");
        Opal.alias(self, "on_rescue", "process_regular_node");
        Opal.alias(self, "on_ensure", "process_regular_node");
        Opal.alias(self, "on_begin", "process_regular_node");
        Opal.alias(self, "on_kwbegin", "process_regular_node");
        Opal.alias(self, "on_preexe", "process_regular_node");
        Opal.alias(self, "on_postexe", "process_regular_node");
        
        Opal.def(self, '$process_variable_node', $Processor_process_variable_node$14 = function $$process_variable_node(node) {
          var self = this;

          
          self.$warn("" + "Parser::AST::Processor#process_variable_node is deprecated as a" + " public API and will be removed. Please use " + "Parser::AST::Processor#on_var instead.");
          return self.$on_var(node);
        }, $Processor_process_variable_node$14.$$arity = 1);
        
        Opal.def(self, '$process_var_asgn_node', $Processor_process_var_asgn_node$15 = function $$process_var_asgn_node(node) {
          var self = this;

          
          self.$warn("" + "Parser::AST::Processor#process_var_asgn_node is deprecated as a" + " public API and will be removed. Please use " + "Parser::AST::Processor#on_vasgn instead.");
          return self.$on_vasgn(node);
        }, $Processor_process_var_asgn_node$15.$$arity = 1);
        return (Opal.def(self, '$process_argument_node', $Processor_process_argument_node$16 = function $$process_argument_node(node) {
          var self = this;

          
          self.$warn("" + "Parser::AST::Processor#process_argument_node is deprecated as a" + " public API and will be removed. Please use " + "Parser::AST::Processor#on_argument instead.");
          return self.$on_argument(node);
        }, $Processor_process_argument_node$16.$$arity = 1), nil) && 'process_argument_node';
      })($nesting[0], $$$($$$('::', 'AST'), 'Processor'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/meta"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send;

  Opal.add_stubs(['$freeze', '$to_set', '$map', '$to_proc']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Meta');

      var $nesting = [self].concat($parent_nesting);

      Opal.const_set($nesting[0], 'NODE_TYPES', $send(["true", "false", "nil", "int", "float", "str", "dstr", "sym", "dsym", "xstr", "regopt", "regexp", "array", "splat", "pair", "kwsplat", "hash", "irange", "erange", "self", "lvar", "ivar", "cvar", "gvar", "const", "defined?", "lvasgn", "ivasgn", "cvasgn", "gvasgn", "casgn", "mlhs", "masgn", "op_asgn", "and_asgn", "ensure", "rescue", "arg_expr", "or_asgn", "back_ref", "nth_ref", "match_with_lvasgn", "match_current_line", "module", "class", "sclass", "def", "defs", "undef", "alias", "args", "cbase", "arg", "optarg", "restarg", "blockarg", "block_pass", "kwarg", "kwoptarg", "kwrestarg", "send", "csend", "super", "zsuper", "yield", "block", "and", "not", "or", "if", "when", "case", "while", "until", "while_post", "until_post", "for", "break", "next", "redo", "return", "resbody", "kwbegin", "begin", "retry", "preexe", "postexe", "iflipflop", "eflipflop", "shadowarg", "complex", "rational", "__FILE__", "__LINE__", "__ENCODING__"], 'map', [], "to_sym".$to_proc()).$to_set().$freeze())
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/source/buffer"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $gvars = Opal.gvars, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$empty?', '$=~', '$start_with?', '$freeze', '$==', '$[]', '$nil?', '$!=', '$match', '$find', '$encoding', '$recognize_encoding', '$force_encoding', '$encode', '$to_s', '$open', '$read', '$source=', '$-', '$raise', '$frozen?', '$dup', '$reencode_string', '$class', '$valid_encoding?', '$name', '$raw_source=', '$gsub', '$!', '$ascii_only?', '$line_for', '$+', '$[]=', '$to_a', '$lines', '$end_with?', '$<<', '$each', '$chomp!', '$fetch', '$source_lines', '$<=', '$>', '$size', '$line_begins', '$new', '$-@', '$source', '$private', '$index', '$unshift', '$length', '$bsearch']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Buffer');

        var $nesting = [self].concat($parent_nesting), $Buffer_recognize_encoding$1, $Buffer_reencode_string$2, $Buffer_initialize$3, $Buffer_read$4, $Buffer_source$6, $Buffer_source$eq$7, $Buffer_raw_source$eq$8, $Buffer_slice$9, $Buffer_decompose_position$10, $Buffer_line_for_position$11, $Buffer_column_for_position$12, $Buffer_source_lines$13, $Buffer_source_line$15, $Buffer_line_range$16, $Buffer_source_range$17, $Buffer_last_line$18, $Buffer_line_begins$19, $Buffer_line_for$20;

        self.$$prototype.name = self.$$prototype.source = self.$$prototype.slice_source = self.$$prototype.first_line = self.$$prototype.line_for_position = self.$$prototype.column_for_position = self.$$prototype.lines = self.$$prototype.source_range = self.$$prototype.line_begins = nil;
        
        self.$attr_reader("name", "first_line");
        Opal.const_set($nesting[0], 'ENCODING_RE', new RegExp("" + "[\\s#](en)?coding\\s*[:=]\\s*" + "(" + "" + "(utf8-mac)" + "|" + "" + "([A-Za-z0-9_-]+?)(-unix|-dos|-mac)" + "|" + "([A-Za-z0-9_-]+)" + ")" + ""));
        Opal.defs(self, '$recognize_encoding', $Buffer_recognize_encoding$1 = function $$recognize_encoding(string) {
          var $a, $b, self = this, first_line = nil, second_line = nil, encoding_line = nil, result = nil;

          
          if ($truthy(string['$empty?']())) {
            return nil};
          string['$=~'](/^(.*)\n?(.*\n)?/);
          $a = [(($b = $gvars['~']) === nil ? nil : $b['$[]'](1)), (($b = $gvars['~']) === nil ? nil : $b['$[]'](2))], (first_line = $a[0]), (second_line = $a[1]), $a;
          if ($truthy(first_line['$start_with?']("\xEF\xBB\xBF".$force_encoding("ASCII-8BIT").$freeze()))) {
            return $$$($$($nesting, 'Encoding'), 'UTF_8')
          } else if (first_line['$[]'](0, 2)['$==']("#!".$force_encoding("ASCII-8BIT").$freeze())) {
            encoding_line = second_line
          } else {
            encoding_line = first_line
          };
          if ($truthy(($truthy($a = encoding_line['$nil?']()) ? $a : encoding_line['$[]'](0)['$!=']("#".$force_encoding("ASCII-8BIT"))))) {
            return nil};
          if ($truthy((result = $$($nesting, 'ENCODING_RE').$match(encoding_line)))) {
            return $$($nesting, 'Encoding').$find(($truthy($a = ($truthy($b = result['$[]'](3)) ? $b : result['$[]'](4))) ? $a : result['$[]'](6)))
          } else {
            return nil
          };
        }, $Buffer_recognize_encoding$1.$$arity = 1);
        Opal.defs(self, '$reencode_string', $Buffer_reencode_string$2 = function $$reencode_string(input) {
          var self = this, original_encoding = nil, detected_encoding = nil;

          
          original_encoding = input.$encoding();
          detected_encoding = self.$recognize_encoding(input.$force_encoding($$$($$($nesting, 'Encoding'), 'BINARY')));
          if ($truthy(detected_encoding['$nil?']())) {
            return input.$force_encoding(original_encoding)
          } else if (detected_encoding['$==']($$$($$($nesting, 'Encoding'), 'BINARY'))) {
            return input
          } else {
            return input.$force_encoding(detected_encoding).$encode($$$($$($nesting, 'Encoding'), 'UTF_8'))
          };
        }, $Buffer_reencode_string$2.$$arity = 1);
        
        Opal.def(self, '$initialize', $Buffer_initialize$3 = function $$initialize(name, first_line) {
          var self = this;

          
          
          if (first_line == null) {
            first_line = 1;
          };
          self.name = name.$to_s();
          self.source = nil;
          self.first_line = first_line;
          self.lines = nil;
          self.line_begins = nil;
          self.slice_source = nil;
          self.line_for_position = $hash2([], {});
          return (self.column_for_position = $hash2([], {}));
        }, $Buffer_initialize$3.$$arity = -2);
        
        Opal.def(self, '$read', $Buffer_read$4 = function $$read() {
          var $$5, self = this;

          
          $send($$($nesting, 'File'), 'open', [self.name, "rb".$force_encoding("ASCII-8BIT")], ($$5 = function(io){var self = $$5.$$s || this, $writer = nil;

          
            
            if (io == null) {
              io = nil;
            };
            $writer = [io.$read()];
            $send(self, 'source=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$5.$$s = self, $$5.$$arity = 1, $$5));
          return self;
        }, $Buffer_read$4.$$arity = 0);
        
        Opal.def(self, '$source', $Buffer_source$6 = function $$source() {
          var self = this;

          
          if ($truthy(self.source['$nil?']())) {
            self.$raise($$($nesting, 'RuntimeError'), "Cannot extract source from uninitialized Source::Buffer".$force_encoding("ASCII-8BIT"))};
          return self.source;
        }, $Buffer_source$6.$$arity = 0);
        
        Opal.def(self, '$source=', $Buffer_source$eq$7 = function(input) {
          var self = this, $writer = nil;

          
          if ($truthy(input['$frozen?']())) {
            input = input.$dup()};
          input = self.$class().$reencode_string(input);
          if ($truthy(input['$valid_encoding?']())) {
          } else {
            self.$raise($$($nesting, 'EncodingError'), "" + "invalid byte sequence in " + (input.$encoding().$name()))
          };
          
          $writer = [input];
          $send(self, 'raw_source=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        }, $Buffer_source$eq$7.$$arity = 1);
        
        Opal.def(self, '$raw_source=', $Buffer_raw_source$eq$8 = function(input) {
          var $a, $b, self = this;

          
          if ($truthy(self.source)) {
            self.$raise($$($nesting, 'ArgumentError'), "Source::Buffer is immutable".$force_encoding("ASCII-8BIT"))};
          self.source = input.$gsub("\r\n".$force_encoding("ASCII-8BIT").$freeze(), "\n".$force_encoding("ASCII-8BIT").$freeze()).$freeze();
          if ($truthy(($truthy($a = ($truthy($b = self.source['$ascii_only?']()['$!']()) ? self.source.$encoding()['$!=']($$$($$($nesting, 'Encoding'), 'UTF_32LE')) : $b)) ? self.source.$encoding()['$!=']($$$($$($nesting, 'Encoding'), 'BINARY')) : $a))) {
            return (self.slice_source = self.source.$encode($$$($$($nesting, 'Encoding'), 'UTF_32LE')))
          } else {
            return nil
          };
        }, $Buffer_raw_source$eq$8.$$arity = 1);
        
        Opal.def(self, '$slice', $Buffer_slice$9 = function $$slice(range) {
          var self = this;

          if ($truthy(self.slice_source['$nil?']())) {
            return self.source['$[]'](range)
          } else {
            return self.slice_source['$[]'](range).$encode(self.source.$encoding())
          }
        }, $Buffer_slice$9.$$arity = 1);
        
        Opal.def(self, '$decompose_position', $Buffer_decompose_position$10 = function $$decompose_position(position) {
          var $a, $b, self = this, line_no = nil, line_begin = nil;

          
          $b = self.$line_for(position), $a = Opal.to_ary($b), (line_no = ($a[0] == null ? nil : $a[0])), (line_begin = ($a[1] == null ? nil : $a[1])), $b;
          return [$rb_plus(self.first_line, line_no), $rb_minus(position, line_begin)];
        }, $Buffer_decompose_position$10.$$arity = 1);
        
        Opal.def(self, '$line_for_position', $Buffer_line_for_position$11 = function $$line_for_position(position) {
          var $a, $b, $c, self = this, $writer = nil, line_no = nil, _ = nil;

          return ($truthy($a = self.line_for_position['$[]'](position)) ? $a : (($writer = [position, ($c = self.$line_for(position), $b = Opal.to_ary($c), (line_no = ($b[0] == null ? nil : $b[0])), (_ = ($b[1] == null ? nil : $b[1])), $c, $rb_plus(self.first_line, line_no))]), $send(self.line_for_position, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
        }, $Buffer_line_for_position$11.$$arity = 1);
        
        Opal.def(self, '$column_for_position', $Buffer_column_for_position$12 = function $$column_for_position(position) {
          var $a, $b, $c, self = this, $writer = nil, _ = nil, line_begin = nil;

          return ($truthy($a = self.column_for_position['$[]'](position)) ? $a : (($writer = [position, ($c = self.$line_for(position), $b = Opal.to_ary($c), (_ = ($b[0] == null ? nil : $b[0])), (line_begin = ($b[1] == null ? nil : $b[1])), $c, $rb_minus(position, line_begin))]), $send(self.column_for_position, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
        }, $Buffer_column_for_position$12.$$arity = 1);
        
        Opal.def(self, '$source_lines', $Buffer_source_lines$13 = function $$source_lines() {
          var $a, $$14, self = this, lines = nil;

          return (self.lines = ($truthy($a = self.lines) ? $a : ((lines = self.source.$lines().$to_a()), (function() {if ($truthy(self.source['$end_with?']("\n".$force_encoding("ASCII-8BIT").$freeze()))) {
            return lines['$<<']("".$force_encoding("ASCII-8BIT").$dup())
          } else {
            return nil
          }; return nil; })(), $send(lines, 'each', [], ($$14 = function(line){var self = $$14.$$s || this;

          
            
            if (line == null) {
              line = nil;
            };
            line['$chomp!']("\n".$force_encoding("ASCII-8BIT").$freeze());
            return line.$freeze();}, $$14.$$s = self, $$14.$$arity = 1, $$14)), lines.$freeze())))
        }, $Buffer_source_lines$13.$$arity = 0);
        
        Opal.def(self, '$source_line', $Buffer_source_line$15 = function $$source_line(lineno) {
          var self = this;

          return self.$source_lines().$fetch($rb_minus(lineno, self.first_line)).$dup()
        }, $Buffer_source_line$15.$$arity = 1);
        
        Opal.def(self, '$line_range', $Buffer_line_range$16 = function $$line_range(lineno) {
          var $a, self = this, index = nil;

          
          index = $rb_plus($rb_minus(lineno, self.first_line), 1);
          if ($truthy(($truthy($a = $rb_le(index, 0)) ? $a : $rb_gt(index, self.$line_begins().$size())))) {
            return self.$raise($$($nesting, 'IndexError'), "" + "Parser::Source::Buffer: range for line " + ("" + (lineno) + " requested, valid line numbers are " + (self.first_line) + "..") + ("" + ($rb_minus($rb_plus(self.first_line, self.$line_begins().$size()), 1))))
          } else if (index['$=='](self.$line_begins().$size())) {
            return $$($nesting, 'Range').$new(self, self.$line_begins()['$[]'](index['$-@']())['$[]'](1), self.source.$size())
          } else {
            return $$($nesting, 'Range').$new(self, self.$line_begins()['$[]'](index['$-@']())['$[]'](1), $rb_minus(self.$line_begins()['$[]']($rb_minus(index['$-@'](), 1))['$[]'](1), 1))
          };
        }, $Buffer_line_range$16.$$arity = 1);
        
        Opal.def(self, '$source_range', $Buffer_source_range$17 = function $$source_range() {
          var $a, self = this;

          return (self.source_range = ($truthy($a = self.source_range) ? $a : $$($nesting, 'Range').$new(self, 0, self.$source().$size())))
        }, $Buffer_source_range$17.$$arity = 0);
        
        Opal.def(self, '$last_line', $Buffer_last_line$18 = function $$last_line() {
          var self = this;

          return $rb_minus($rb_plus(self.$line_begins().$size(), self.first_line), 1)
        }, $Buffer_last_line$18.$$arity = 0);
        self.$private();
        
        Opal.def(self, '$line_begins', $Buffer_line_begins$19 = function $$line_begins() {
          var $a, self = this, index = nil;

          
          if ($truthy(self.line_begins)) {
          } else {
            
            $a = [[[0, 0]], 0], (self.line_begins = $a[0]), (index = $a[1]), $a;
            while ($truthy((index = self.source.$index("\n".$force_encoding("ASCII-8BIT").$freeze(), index)))) {
              
              index = $rb_plus(index, 1);
              self.line_begins.$unshift([self.line_begins.$length(), index]);
            };
          };
          return self.line_begins;
        }, $Buffer_line_begins$19.$$arity = 0);
        return (Opal.def(self, '$line_for', $Buffer_line_for$20 = function $$line_for(position) {
          var $$21, self = this;

          return $send(self.$line_begins(), 'bsearch', [], ($$21 = function(line, line_begin){var self = $$21.$$s || this;

          
            
            if (line == null) {
              line = nil;
            };
            
            if (line_begin == null) {
              line_begin = nil;
            };
            return $rb_le(line_begin, position);}, $$21.$$s = self, $$21.$$arity = 2, $$21))
        }, $Buffer_line_for$20.$$arity = 1), nil) && 'line_for';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/source/range"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$include', '$attr_reader', '$<', '$raise', '$nil?', '$freeze', '$with', '$-', '$line_for_position', '$alias_method', '$column_for_position', '$!=', '$line', '$begin', '$end', '$inspect', '$column', '$source_line', '$slice', '$begin_pos', '$end_pos', '$include?', '$source', '$to_a', '$decompose_position', '$join', '$name', '$+', '$new', '$min', '$max', '$disjoint?', '$empty?', '$>=', '$!', '$<=>', '$contains?', '$overlaps?', '$==', '$*', '$is_a?', '$source_buffer', '$nonzero?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Range');

        var $nesting = [self].concat($parent_nesting), $Range_initialize$1, $Range_begin$2, $Range_end$3, $Range_size$4, $Range_line$5, $Range_column$6, $Range_last_line$7, $Range_last_column$8, $Range_column_range$9, $Range_source_line$10, $Range_source$11, $Range_is$ques$12, $Range_to_a$13, $Range_to_s$14, $Range_with$15, $Range_adjust$16, $Range_resize$17, $Range_join$18, $Range_intersect$19, $Range_disjoint$ques$20, $Range_overlaps$ques$21, $Range_contains$ques$22, $Range_contained$ques$23, $Range_crossing$ques$24, $Range_empty$ques$25, $Range_$lt_eq_gt$26, $Range_inspect$27;

        self.$$prototype.begin_pos = self.$$prototype.end_pos = self.$$prototype.source_buffer = nil;
        
        self.$include($$($nesting, 'Comparable'));
        self.$attr_reader("source_buffer");
        self.$attr_reader("begin_pos", "end_pos");
        
        Opal.def(self, '$initialize', $Range_initialize$1 = function $$initialize(source_buffer, begin_pos, end_pos) {
          var $a, self = this;

          
          if ($truthy($rb_lt(end_pos, begin_pos))) {
            self.$raise($$($nesting, 'ArgumentError'), "Parser::Source::Range: end_pos must not be less than begin_pos")};
          if ($truthy(source_buffer['$nil?']())) {
            self.$raise($$($nesting, 'ArgumentError'), "Parser::Source::Range: source_buffer must not be nil")};
          self.source_buffer = source_buffer;
          $a = [begin_pos, end_pos], (self.begin_pos = $a[0]), (self.end_pos = $a[1]), $a;
          return self.$freeze();
        }, $Range_initialize$1.$$arity = 3);
        
        Opal.def(self, '$begin', $Range_begin$2 = function $$begin() {
          var self = this;

          return self.$with($hash2(["end_pos"], {"end_pos": self.begin_pos}))
        }, $Range_begin$2.$$arity = 0);
        
        Opal.def(self, '$end', $Range_end$3 = function $$end() {
          var self = this;

          return self.$with($hash2(["begin_pos"], {"begin_pos": self.end_pos}))
        }, $Range_end$3.$$arity = 0);
        
        Opal.def(self, '$size', $Range_size$4 = function $$size() {
          var self = this;

          return $rb_minus(self.end_pos, self.begin_pos)
        }, $Range_size$4.$$arity = 0);
        Opal.alias(self, "length", "size");
        
        Opal.def(self, '$line', $Range_line$5 = function $$line() {
          var self = this;

          return self.source_buffer.$line_for_position(self.begin_pos)
        }, $Range_line$5.$$arity = 0);
        self.$alias_method("first_line", "line");
        
        Opal.def(self, '$column', $Range_column$6 = function $$column() {
          var self = this;

          return self.source_buffer.$column_for_position(self.begin_pos)
        }, $Range_column$6.$$arity = 0);
        
        Opal.def(self, '$last_line', $Range_last_line$7 = function $$last_line() {
          var self = this;

          return self.source_buffer.$line_for_position(self.end_pos)
        }, $Range_last_line$7.$$arity = 0);
        
        Opal.def(self, '$last_column', $Range_last_column$8 = function $$last_column() {
          var self = this;

          return self.source_buffer.$column_for_position(self.end_pos)
        }, $Range_last_column$8.$$arity = 0);
        
        Opal.def(self, '$column_range', $Range_column_range$9 = function $$column_range() {
          var self = this;

          
          if ($truthy(self.$begin().$line()['$!='](self.$end().$line()))) {
            self.$raise($$($nesting, 'RangeError'), "" + (self.$inspect()) + " spans more than one line")};
          return Opal.Range.$new(self.$begin().$column(),self.$end().$column(), true);
        }, $Range_column_range$9.$$arity = 0);
        
        Opal.def(self, '$source_line', $Range_source_line$10 = function $$source_line() {
          var self = this;

          return self.source_buffer.$source_line(self.$line())
        }, $Range_source_line$10.$$arity = 0);
        
        Opal.def(self, '$source', $Range_source$11 = function $$source() {
          var self = this;

          return self.source_buffer.$slice(Opal.Range.$new(self.$begin_pos(),self.$end_pos(), true))
        }, $Range_source$11.$$arity = 0);
        
        Opal.def(self, '$is?', $Range_is$ques$12 = function($a) {
          var $post_args, what, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          what = $post_args;;
          return what['$include?'](self.$source());
        }, $Range_is$ques$12.$$arity = -1);
        
        Opal.def(self, '$to_a', $Range_to_a$13 = function $$to_a() {
          var self = this;

          return Opal.Range.$new(self.begin_pos,self.end_pos, true).$to_a()
        }, $Range_to_a$13.$$arity = 0);
        
        Opal.def(self, '$to_s', $Range_to_s$14 = function $$to_s() {
          var $a, $b, self = this, line = nil, column = nil;

          
          $b = self.source_buffer.$decompose_position(self.begin_pos), $a = Opal.to_ary($b), (line = ($a[0] == null ? nil : $a[0])), (column = ($a[1] == null ? nil : $a[1])), $b;
          return [self.source_buffer.$name(), line, $rb_plus(column, 1)].$join(":");
        }, $Range_to_s$14.$$arity = 0);
        
        Opal.def(self, '$with', $Range_with$15 = function($kwargs) {
          var begin_pos, end_pos, self = this;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          begin_pos = $kwargs.$$smap["begin_pos"];
          if (begin_pos == null) {
            begin_pos = self.begin_pos
          };
          
          end_pos = $kwargs.$$smap["end_pos"];
          if (end_pos == null) {
            end_pos = self.end_pos
          };
          return $$($nesting, 'Range').$new(self.source_buffer, begin_pos, end_pos);
        }, $Range_with$15.$$arity = -1);
        
        Opal.def(self, '$adjust', $Range_adjust$16 = function $$adjust($kwargs) {
          var begin_pos, end_pos, self = this;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          begin_pos = $kwargs.$$smap["begin_pos"];
          if (begin_pos == null) {
            begin_pos = 0
          };
          
          end_pos = $kwargs.$$smap["end_pos"];
          if (end_pos == null) {
            end_pos = 0
          };
          return $$($nesting, 'Range').$new(self.source_buffer, $rb_plus(self.begin_pos, begin_pos), $rb_plus(self.end_pos, end_pos));
        }, $Range_adjust$16.$$arity = -1);
        
        Opal.def(self, '$resize', $Range_resize$17 = function $$resize(new_size) {
          var self = this;

          return self.$with($hash2(["end_pos"], {"end_pos": $rb_plus(self.begin_pos, new_size)}))
        }, $Range_resize$17.$$arity = 1);
        
        Opal.def(self, '$join', $Range_join$18 = function $$join(other) {
          var self = this;

          return $$($nesting, 'Range').$new(self.source_buffer, [self.begin_pos, other.$begin_pos()].$min(), [self.end_pos, other.$end_pos()].$max())
        }, $Range_join$18.$$arity = 1);
        
        Opal.def(self, '$intersect', $Range_intersect$19 = function $$intersect(other) {
          var self = this;

          if ($truthy(self['$disjoint?'](other))) {
            return nil
          } else {
            return $$($nesting, 'Range').$new(self.source_buffer, [self.begin_pos, other.$begin_pos()].$max(), [self.end_pos, other.$end_pos()].$min())
          }
        }, $Range_intersect$19.$$arity = 1);
        
        Opal.def(self, '$disjoint?', $Range_disjoint$ques$20 = function(other) {
          var $a, self = this;

          if ($truthy(($truthy($a = self['$empty?']()) ? other['$empty?']() : $a))) {
            return self.begin_pos['$!='](other.$begin_pos())
          } else {
            return ($truthy($a = $rb_ge(self.begin_pos, other.$end_pos())) ? $a : $rb_ge(other.$begin_pos(), self.end_pos))
          }
        }, $Range_disjoint$ques$20.$$arity = 1);
        
        Opal.def(self, '$overlaps?', $Range_overlaps$ques$21 = function(other) {
          var self = this;

          return self['$disjoint?'](other)['$!']()
        }, $Range_overlaps$ques$21.$$arity = 1);
        
        Opal.def(self, '$contains?', $Range_contains$ques$22 = function(other) {
          var self = this;

          return $rb_ge($rb_plus(other.$begin_pos()['$<=>'](self.begin_pos), self.end_pos['$<=>'](other.$end_pos())), (function() {if ($truthy(other['$empty?']())) {
            return 2
          } else {
            return 1
          }; return nil; })())
        }, $Range_contains$ques$22.$$arity = 1);
        
        Opal.def(self, '$contained?', $Range_contained$ques$23 = function(other) {
          var self = this;

          return other['$contains?'](self)
        }, $Range_contained$ques$23.$$arity = 1);
        
        Opal.def(self, '$crossing?', $Range_crossing$ques$24 = function(other) {
          var self = this;

          
          if ($truthy(self['$overlaps?'](other))) {
          } else {
            return false
          };
          return $rb_times(self.begin_pos['$<=>'](other.$begin_pos()), self.end_pos['$<=>'](other.$end_pos()))['$=='](1);
        }, $Range_crossing$ques$24.$$arity = 1);
        
        Opal.def(self, '$empty?', $Range_empty$ques$25 = function() {
          var self = this;

          return self.begin_pos['$=='](self.end_pos)
        }, $Range_empty$ques$25.$$arity = 0);
        
        Opal.def(self, '$<=>', $Range_$lt_eq_gt$26 = function(other) {
          var $a, self = this;

          
          if ($truthy(($truthy($a = other['$is_a?']($$$($$$($$$('::', 'Parser'), 'Source'), 'Range'))) ? self.source_buffer['$=='](other.$source_buffer()) : $a))) {
          } else {
            return nil
          };
          return ($truthy($a = self.begin_pos['$<=>'](other.$begin_pos())['$nonzero?']()) ? $a : self.end_pos['$<=>'](other.$end_pos()));
        }, $Range_$lt_eq_gt$26.$$arity = 1);
        return (Opal.def(self, '$inspect', $Range_inspect$27 = function $$inspect() {
          var self = this;

          return "" + "#<Parser::Source::Range " + (self.source_buffer.$name()) + " " + (self.begin_pos) + "..." + (self.end_pos) + ">"
        }, $Range_inspect$27.$$arity = 0), nil) && 'inspect';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/source/comment"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$alias_method', '$new', '$associate', '$associate_locations', '$freeze', '$source', '$start_with?', '$text', '$==', '$type', '$is_a?', '$location', '$to_s', '$expression', '$inspect']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Comment');

        var $nesting = [self].concat($parent_nesting), $Comment_associate$1, $Comment_associate_locations$2, $Comment_initialize$3, $Comment_type$4, $Comment_inline$ques$5, $Comment_document$ques$6, $Comment_$eq_eq$7, $Comment_inspect$8;

        self.$$prototype.location = nil;
        
        self.$attr_reader("text");
        self.$attr_reader("location");
        self.$alias_method("loc", "location");
        Opal.defs(self, '$associate', $Comment_associate$1 = function $$associate(ast, comments) {
          var self = this, associator = nil;

          
          associator = $$($nesting, 'Associator').$new(ast, comments);
          return associator.$associate();
        }, $Comment_associate$1.$$arity = 2);
        Opal.defs(self, '$associate_locations', $Comment_associate_locations$2 = function $$associate_locations(ast, comments) {
          var self = this, associator = nil;

          
          associator = $$($nesting, 'Associator').$new(ast, comments);
          return associator.$associate_locations();
        }, $Comment_associate_locations$2.$$arity = 2);
        
        Opal.def(self, '$initialize', $Comment_initialize$3 = function $$initialize(range) {
          var self = this;

          
          self.location = $$$($$$($$($nesting, 'Parser'), 'Source'), 'Map').$new(range);
          self.text = range.$source().$freeze();
          return self.$freeze();
        }, $Comment_initialize$3.$$arity = 1);
        
        Opal.def(self, '$type', $Comment_type$4 = function $$type() {
          var self = this;

          if ($truthy(self.$text()['$start_with?']("#".$freeze()))) {
            return "inline"
          } else if ($truthy(self.$text()['$start_with?']("=begin".$freeze()))) {
            return "document"
          } else {
            return nil
          }
        }, $Comment_type$4.$$arity = 0);
        
        Opal.def(self, '$inline?', $Comment_inline$ques$5 = function() {
          var self = this;

          return self.$type()['$==']("inline")
        }, $Comment_inline$ques$5.$$arity = 0);
        
        Opal.def(self, '$document?', $Comment_document$ques$6 = function() {
          var self = this;

          return self.$type()['$==']("document")
        }, $Comment_document$ques$6.$$arity = 0);
        
        Opal.def(self, '$==', $Comment_$eq_eq$7 = function(other) {
          var $a, self = this;

          return ($truthy($a = other['$is_a?']($$$($$($nesting, 'Source'), 'Comment'))) ? self.location['$=='](other.$location()) : $a)
        }, $Comment_$eq_eq$7.$$arity = 1);
        return (Opal.def(self, '$inspect', $Comment_inspect$8 = function $$inspect() {
          var self = this;

          return "" + "#<Parser::Source::Comment " + (self.location.$expression().$to_s()) + " " + (self.$text().$inspect()) + ">"
        }, $Comment_inspect$8.$$arity = 0), nil) && 'inspect';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/source/comment/associator"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_accessor', '$do_associate', '$private', '$new', '$[]=', '$-', '$advance_comment', '$advance_through_directives', '$visit', '$process_leading_comments', '$location', '$<=', '$line', '$last_line', '$is_a?', '$each', '$children', '$loc', '$expression', '$process_trailing_comments', '$==', '$type', '$current_comment_before?', '$associate_and_advance_comment', '$current_comment_before_end?', '$current_comment_decorates?', '$+', '$[]', '$!', '$end_pos', '$begin_pos', '$<<', '$start_with?', '$text', '$freeze', '$=~']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Associator');

        var $nesting = [self].concat($parent_nesting), $Associator_initialize$1, $Associator_associate$2, $Associator_associate_locations$3, $Associator_do_associate$4, $Associator_visit$6, $Associator_process_leading_comments$8, $Associator_process_trailing_comments$9, $Associator_advance_comment$10, $Associator_current_comment_before$ques$11, $Associator_current_comment_before_end$ques$12, $Associator_current_comment_decorates$ques$13, $Associator_associate_and_advance_comment$14, $Associator_advance_through_directives$15;

        self.$$prototype.skip_directives = self.$$prototype.ast = self.$$prototype.mapping = self.$$prototype.current_comment = self.$$prototype.comment_num = self.$$prototype.comments = self.$$prototype.map_using_locations = nil;
        
        self.$attr_accessor("skip_directives");
        
        Opal.def(self, '$initialize', $Associator_initialize$1 = function $$initialize(ast, comments) {
          var self = this;

          
          self.ast = ast;
          self.comments = comments;
          return (self.skip_directives = true);
        }, $Associator_initialize$1.$$arity = 2);
        
        Opal.def(self, '$associate', $Associator_associate$2 = function $$associate() {
          var self = this;

          
          self.map_using_locations = false;
          return self.$do_associate();
        }, $Associator_associate$2.$$arity = 0);
        
        Opal.def(self, '$associate_locations', $Associator_associate_locations$3 = function $$associate_locations() {
          var self = this;

          
          self.map_using_locations = true;
          return self.$do_associate();
        }, $Associator_associate_locations$3.$$arity = 0);
        self.$private();
        
        Opal.def(self, '$do_associate', $Associator_do_associate$4 = function $$do_associate() {
          var $$5, self = this;

          
          self.mapping = $send($$($nesting, 'Hash'), 'new', [], ($$5 = function(h, k){var self = $$5.$$s || this, $writer = nil;

          
            
            if (h == null) {
              h = nil;
            };
            
            if (k == null) {
              k = nil;
            };
            $writer = [k, []];
            $send(h, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$5.$$s = self, $$5.$$arity = 2, $$5));
          self.comment_num = -1;
          self.$advance_comment();
          if ($truthy(self.skip_directives)) {
            self.$advance_through_directives()};
          if ($truthy(self.ast)) {
            self.$visit(self.ast)};
          return self.mapping;
        }, $Associator_do_associate$4.$$arity = 0);
        
        Opal.def(self, '$visit', $Associator_visit$6 = function $$visit(node) {
          var $a, $$7, self = this, node_loc = nil;

          
          self.$process_leading_comments(node);
          if ($truthy(self.current_comment)) {
          } else {
            return nil
          };
          node_loc = node.$location();
          if ($truthy(($truthy($a = $rb_le(self.current_comment.$location().$line(), node_loc.$last_line())) ? $a : node_loc['$is_a?']($$$($$($nesting, 'Map'), 'Heredoc'))))) {
            
            $send(node.$children(), 'each', [], ($$7 = function(child){var self = $$7.$$s || this, $b, $c;

            
              
              if (child == null) {
                child = nil;
              };
              if ($truthy(($truthy($b = ($truthy($c = child['$is_a?']($$$($$($nesting, 'AST'), 'Node'))) ? child.$loc() : $c)) ? child.$loc().$expression() : $b))) {
              } else {
                return nil;
              };
              return self.$visit(child);}, $$7.$$s = self, $$7.$$arity = 1, $$7));
            return self.$process_trailing_comments(node);
          } else {
            return nil
          };
        }, $Associator_visit$6.$$arity = 1);
        
        Opal.def(self, '$process_leading_comments', $Associator_process_leading_comments$8 = function $$process_leading_comments(node) {
          var $a, self = this;

          
          if (node.$type()['$==']("begin")) {
            return nil};
          while ($truthy(self['$current_comment_before?'](node))) {
            self.$associate_and_advance_comment(node)
          };
        }, $Associator_process_leading_comments$8.$$arity = 1);
        
        Opal.def(self, '$process_trailing_comments', $Associator_process_trailing_comments$9 = function $$process_trailing_comments(node) {
          var $a, self = this;

          
          while ($truthy(self['$current_comment_before_end?'](node))) {
            self.$associate_and_advance_comment(node)
          };
          while ($truthy(self['$current_comment_decorates?'](node))) {
            self.$associate_and_advance_comment(node)
          };
        }, $Associator_process_trailing_comments$9.$$arity = 1);
        
        Opal.def(self, '$advance_comment', $Associator_advance_comment$10 = function $$advance_comment() {
          var self = this;

          
          self.comment_num = $rb_plus(self.comment_num, 1);
          return (self.current_comment = self.comments['$[]'](self.comment_num));
        }, $Associator_advance_comment$10.$$arity = 0);
        
        Opal.def(self, '$current_comment_before?', $Associator_current_comment_before$ques$11 = function(node) {
          var self = this, comment_loc = nil, node_loc = nil;

          
          if ($truthy(self.current_comment['$!']())) {
            return false};
          comment_loc = self.current_comment.$location().$expression();
          node_loc = node.$location().$expression();
          return $rb_le(comment_loc.$end_pos(), node_loc.$begin_pos());
        }, $Associator_current_comment_before$ques$11.$$arity = 1);
        
        Opal.def(self, '$current_comment_before_end?', $Associator_current_comment_before_end$ques$12 = function(node) {
          var self = this, comment_loc = nil, node_loc = nil;

          
          if ($truthy(self.current_comment['$!']())) {
            return false};
          comment_loc = self.current_comment.$location().$expression();
          node_loc = node.$location().$expression();
          return $rb_le(comment_loc.$end_pos(), node_loc.$end_pos());
        }, $Associator_current_comment_before_end$ques$12.$$arity = 1);
        
        Opal.def(self, '$current_comment_decorates?', $Associator_current_comment_decorates$ques$13 = function(node) {
          var self = this;

          
          if ($truthy(self.current_comment['$!']())) {
            return false};
          return self.current_comment.$location().$line()['$=='](node.$location().$last_line());
        }, $Associator_current_comment_decorates$ques$13.$$arity = 1);
        
        Opal.def(self, '$associate_and_advance_comment', $Associator_associate_and_advance_comment$14 = function $$associate_and_advance_comment(node) {
          var self = this, key = nil;

          
          key = (function() {if ($truthy(self.map_using_locations)) {
            return node.$location()
          } else {
            return node
          }; return nil; })();
          self.mapping['$[]'](key)['$<<'](self.current_comment);
          return self.$advance_comment();
        }, $Associator_associate_and_advance_comment$14.$$arity = 1);
        Opal.const_set($nesting[0], 'MAGIC_COMMENT_RE', /^#\s*(-\*-|)\s*(frozen_string_literal|warn_indent|warn_past_scope):.*\1$/);
        return (Opal.def(self, '$advance_through_directives', $Associator_advance_through_directives$15 = function $$advance_through_directives() {
          var $a, self = this;

          
          if ($truthy(($truthy($a = self.current_comment) ? self.current_comment.$text()['$start_with?']("#!".$freeze()) : $a))) {
            self.$advance_comment()};
          if ($truthy(($truthy($a = self.current_comment) ? self.current_comment.$text()['$=~']($$($nesting, 'MAGIC_COMMENT_RE')) : $a))) {
            self.$advance_comment()};
          if ($truthy(($truthy($a = self.current_comment) ? self.current_comment.$text()['$=~']($$$($$($nesting, 'Buffer'), 'ENCODING_RE')) : $a))) {
            return self.$advance_comment()
          } else {
            return nil
          };
        }, $Associator_advance_through_directives$15.$$arity = 0), nil) && 'advance_through_directives';
      })($$($nesting, 'Comment'), null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/source/rewriter"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $gvars = Opal.gvars, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$warn_of_deprecation', '$class', '$new', '$lambda', '$puts', '$render', '$consumer=', '$-', '$append', '$freeze', '$begin', '$end', '$+', '$in_transaction?', '$raise', '$dup', '$source', '$each', '$sort', '$begin_pos', '$range', '$length', '$replacement', '$[]=', '$private', '$empty?', '$!', '$allow_multiple_insertions?', '$clobbered_insertion?', '$raise_clobber_error', '$record_insertion', '$adjacent_updates?', '$find', '$overlaps?', '$replace_compatible_with_insertion?', '$merge_actions!', '$<<', '$active_queue', '$adjacent_insertions?', '$merge_actions', '$delete', '$can_merge?', '$record_replace', '$|', '$active_insertions', '$active_insertions=', '$active_clobber', '$clobbered_position_mask', '$active_clobber=', '$size', '$!=', '$&', '$<=', '$end_pos', '$adjacent_insertion_mask', '$select', '$adjacent?', '$adjacent_position_mask', '$>=', '$==', '$[]', '$all?', '$intersect', '$nil?', '$max', '$sort_by', '$push', '$join', '$first', '$max_by', '$merge_replacements', '$replace_actions', '$disjoint?', '$<', '$process', '$extend']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Rewriter');

        var $nesting = [self].concat($parent_nesting), $Rewriter_initialize$1, $Rewriter_remove$3, $Rewriter_insert_before$4, $Rewriter_wrap$5, $Rewriter_insert_before_multi$6, $Rewriter_insert_after$7, $Rewriter_insert_after_multi$8, $Rewriter_replace$9, $Rewriter_process$10, $Rewriter_transaction$12, $Rewriter_append$13, $Rewriter_record_insertion$16, $Rewriter_record_replace$17, $Rewriter_clobbered_position_mask$18, $Rewriter_adjacent_position_mask$19, $Rewriter_adjacent_insertion_mask$20, $Rewriter_clobbered_insertion$ques$21, $Rewriter_adjacent_insertions$ques$23, $Rewriter_adjacent_updates$ques$25, $Rewriter_replace_compatible_with_insertion$ques$27, $Rewriter_can_merge$ques$28, $Rewriter_merge_actions$30, $Rewriter_merge_actions$excl$33, $Rewriter_merge_replacements$34, $Rewriter_replace_actions$36, $Rewriter_raise_clobber_error$38, $Rewriter_in_transaction$ques$39, $Rewriter_active_queue$40, $Rewriter_active_clobber$41, $Rewriter_active_insertions$42, $Rewriter_active_clobber$eq$43, $Rewriter_active_insertions$eq$44, $Rewriter_adjacent$ques$45;

        self.$$prototype.diagnostics = self.$$prototype.insert_before_multi_order = self.$$prototype.insert_after_multi_order = self.$$prototype.source_buffer = self.$$prototype.queue = self.$$prototype.clobber = self.$$prototype.insertions = self.$$prototype.pending_queue = self.$$prototype.pending_clobber = self.$$prototype.pending_insertions = nil;
        
        self.$attr_reader("source_buffer");
        self.$attr_reader("diagnostics");
        
        Opal.def(self, '$initialize', $Rewriter_initialize$1 = function $$initialize(source_buffer) {
          var $$2, self = this, $writer = nil;

          
          self.$class().$warn_of_deprecation();
          self.diagnostics = $$$($$($nesting, 'Diagnostic'), 'Engine').$new();
          
          $writer = [$send(self, 'lambda', [], ($$2 = function(diag){var self = $$2.$$s || this;
            if ($gvars.stderr == null) $gvars.stderr = nil;

          
            
            if (diag == null) {
              diag = nil;
            };
            return $gvars.stderr.$puts(diag.$render());}, $$2.$$s = self, $$2.$$arity = 1, $$2))];
          $send(self.diagnostics, 'consumer=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          self.source_buffer = source_buffer;
          self.queue = [];
          self.clobber = 0;
          self.insertions = 0;
          self.insert_before_multi_order = 0;
          self.insert_after_multi_order = 0;
          self.pending_queue = nil;
          self.pending_clobber = nil;
          return (self.pending_insertions = nil);
        }, $Rewriter_initialize$1.$$arity = 1);
        
        Opal.def(self, '$remove', $Rewriter_remove$3 = function $$remove(range) {
          var self = this;

          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range, "".$freeze()))
        }, $Rewriter_remove$3.$$arity = 1);
        
        Opal.def(self, '$insert_before', $Rewriter_insert_before$4 = function $$insert_before(range, content) {
          var self = this;

          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range.$begin(), content))
        }, $Rewriter_insert_before$4.$$arity = 2);
        
        Opal.def(self, '$wrap', $Rewriter_wrap$5 = function $$wrap(range, before, after) {
          var self = this;

          
          self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range.$begin(), before));
          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range.$end(), after));
        }, $Rewriter_wrap$5.$$arity = 3);
        
        Opal.def(self, '$insert_before_multi', $Rewriter_insert_before_multi$6 = function $$insert_before_multi(range, content) {
          var self = this;

          
          self.insert_before_multi_order = $rb_minus(self.insert_before_multi_order, 1);
          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range.$begin(), content, true, self.insert_before_multi_order));
        }, $Rewriter_insert_before_multi$6.$$arity = 2);
        
        Opal.def(self, '$insert_after', $Rewriter_insert_after$7 = function $$insert_after(range, content) {
          var self = this;

          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range.$end(), content))
        }, $Rewriter_insert_after$7.$$arity = 2);
        
        Opal.def(self, '$insert_after_multi', $Rewriter_insert_after_multi$8 = function $$insert_after_multi(range, content) {
          var self = this;

          
          self.insert_after_multi_order = $rb_plus(self.insert_after_multi_order, 1);
          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range.$end(), content, true, self.insert_after_multi_order));
        }, $Rewriter_insert_after_multi$8.$$arity = 2);
        
        Opal.def(self, '$replace', $Rewriter_replace$9 = function $$replace(range, content) {
          var self = this;

          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range, content))
        }, $Rewriter_replace$9.$$arity = 2);
        
        Opal.def(self, '$process', $Rewriter_process$10 = function $$process() {
          var $$11, self = this, adjustment = nil, source = nil;

          
          if ($truthy(self['$in_transaction?']())) {
            self.$raise("" + "Do not call " + (self.$class()) + "#" + ("process") + " inside a transaction")};
          adjustment = 0;
          source = self.source_buffer.$source().$dup();
          $send(self.queue.$sort(), 'each', [], ($$11 = function(action){var self = $$11.$$s || this, begin_pos = nil, end_pos = nil, $writer = nil;

          
            
            if (action == null) {
              action = nil;
            };
            begin_pos = $rb_plus(action.$range().$begin_pos(), adjustment);
            end_pos = $rb_plus(begin_pos, action.$range().$length());
            
            $writer = [Opal.Range.$new(begin_pos,end_pos, true), action.$replacement()];
            $send(source, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return (adjustment = $rb_plus(adjustment, $rb_minus(action.$replacement().$length(), action.$range().$length())));}, $$11.$$s = self, $$11.$$arity = 1, $$11));
          return source;
        }, $Rewriter_process$10.$$arity = 0);
        
        Opal.def(self, '$transaction', $Rewriter_transaction$12 = function $$transaction() {
          var $iter = $Rewriter_transaction$12.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Rewriter_transaction$12.$$p = null;
          return (function() { try {
          
          if (($yield !== nil)) {
          } else {
            self.$raise("" + (self.$class()) + "#" + ("transaction") + " requires block")
          };
          if ($truthy(self['$in_transaction?']())) {
            self.$raise("Nested transaction is not supported")};
          self.pending_queue = self.queue.$dup();
          self.pending_clobber = self.clobber;
          self.pending_insertions = self.insertions;
          Opal.yieldX($yield, []);
          self.queue = self.pending_queue;
          self.clobber = self.pending_clobber;
          self.insertions = self.pending_insertions;
          return self;
          } finally {
            ((self.pending_queue = nil), (self.pending_clobber = nil), (self.pending_insertions = nil))
          }; })()
        }, $Rewriter_transaction$12.$$arity = 0);
        self.$private();
        
        Opal.def(self, '$append', $Rewriter_append$13 = function $$append(action) {
          var $a, $$14, $$15, self = this, range = nil, conflicting = nil, adjacent = nil, insertions = nil;

          
          range = action.$range();
          if ($truthy(range['$empty?']())) {
            
            if ($truthy(action.$replacement()['$empty?']())) {
              return self};
            if ($truthy(($truthy($a = action['$allow_multiple_insertions?']()['$!']()) ? (conflicting = self['$clobbered_insertion?'](range)) : $a))) {
              self.$raise_clobber_error(action, [conflicting])};
            self.$record_insertion(range);
            if ($truthy((adjacent = self['$adjacent_updates?'](range)))) {
              
              conflicting = $send(adjacent, 'find', [], ($$14 = function(a){var self = $$14.$$s || this, $b;

              
                
                if (a == null) {
                  a = nil;
                };
                return ($truthy($b = a.$range()['$overlaps?'](range)) ? self['$replace_compatible_with_insertion?'](a, action)['$!']() : $b);}, $$14.$$s = self, $$14.$$arity = 1, $$14));
              if ($truthy(conflicting)) {
                self.$raise_clobber_error(action, [conflicting])};
              self['$merge_actions!'](action, adjacent);
            } else {
              self.$active_queue()['$<<'](action)
            };
          } else {
            
            if ($truthy((insertions = self['$adjacent_insertions?'](range)))) {
              $send(insertions, 'each', [], ($$15 = function(insertion){var self = $$15.$$s || this, $b;

              
                
                if (insertion == null) {
                  insertion = nil;
                };
                if ($truthy(($truthy($b = range['$overlaps?'](insertion.$range())) ? self['$replace_compatible_with_insertion?'](action, insertion)['$!']() : $b))) {
                  return self.$raise_clobber_error(action, [insertion])
                } else {
                  
                  action = self.$merge_actions(action, [insertion]);
                  return self.$active_queue().$delete(insertion);
                };}, $$15.$$s = self, $$15.$$arity = 1, $$15))};
            if ($truthy((adjacent = self['$adjacent_updates?'](range)))) {
              if ($truthy(self['$can_merge?'](action, adjacent))) {
                
                self.$record_replace(range);
                self['$merge_actions!'](action, adjacent);
              } else {
                self.$raise_clobber_error(action, adjacent)
              }
            } else {
              
              self.$record_replace(range);
              self.$active_queue()['$<<'](action);
            };
          };
          return self;
        }, $Rewriter_append$13.$$arity = 1);
        
        Opal.def(self, '$record_insertion', $Rewriter_record_insertion$16 = function $$record_insertion(range) {
          var self = this, $writer = nil;

          
          $writer = [self.$active_insertions()['$|']((1)['$<<'](range.$begin_pos()))];
          $send(self, 'active_insertions=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, $Rewriter_record_insertion$16.$$arity = 1);
        
        Opal.def(self, '$record_replace', $Rewriter_record_replace$17 = function $$record_replace(range) {
          var self = this, $writer = nil;

          
          $writer = [self.$active_clobber()['$|'](self.$clobbered_position_mask(range))];
          $send(self, 'active_clobber=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, $Rewriter_record_replace$17.$$arity = 1);
        
        Opal.def(self, '$clobbered_position_mask', $Rewriter_clobbered_position_mask$18 = function $$clobbered_position_mask(range) {
          var self = this;

          return $rb_minus((1)['$<<'](range.$size()), 1)['$<<'](range.$begin_pos())
        }, $Rewriter_clobbered_position_mask$18.$$arity = 1);
        
        Opal.def(self, '$adjacent_position_mask', $Rewriter_adjacent_position_mask$19 = function $$adjacent_position_mask(range) {
          var self = this;

          return $rb_minus((1)['$<<']($rb_plus(range.$size(), 2)), 1)['$<<']($rb_minus(range.$begin_pos(), 1))
        }, $Rewriter_adjacent_position_mask$19.$$arity = 1);
        
        Opal.def(self, '$adjacent_insertion_mask', $Rewriter_adjacent_insertion_mask$20 = function $$adjacent_insertion_mask(range) {
          var self = this;

          return $rb_minus((1)['$<<']($rb_plus(range.$size(), 1)), 1)['$<<'](range.$begin_pos())
        }, $Rewriter_adjacent_insertion_mask$20.$$arity = 1);
        
        Opal.def(self, '$clobbered_insertion?', $Rewriter_clobbered_insertion$ques$21 = function(insertion) {
          var $$22, self = this, insertion_pos = nil;

          
          insertion_pos = insertion.$begin_pos();
          if ($truthy(self.$active_insertions()['$&']((1)['$<<'](insertion_pos))['$!='](0))) {
            return $send(self.$active_queue(), 'find', [], ($$22 = function(a){var self = $$22.$$s || this, $a;

            
              
              if (a == null) {
                a = nil;
              };
              return ($truthy($a = $rb_le(a.$range().$begin_pos(), insertion_pos)) ? $rb_le(insertion_pos, a.$range().$end_pos()) : $a);}, $$22.$$s = self, $$22.$$arity = 1, $$22))
          } else {
            return nil
          };
        }, $Rewriter_clobbered_insertion$ques$21.$$arity = 1);
        
        Opal.def(self, '$adjacent_insertions?', $Rewriter_adjacent_insertions$ques$23 = function(range) {
          var $$24, self = this, result = nil;

          if ($truthy(self.$active_insertions()['$&'](self.$adjacent_insertion_mask(range))['$!='](0))) {
            
            result = $send(self.$active_queue(), 'select', [], ($$24 = function(a){var self = $$24.$$s || this, $a;

            
              
              if (a == null) {
                a = nil;
              };
              return ($truthy($a = a.$range()['$empty?']()) ? self['$adjacent?'](range, a.$range()) : $a);}, $$24.$$s = self, $$24.$$arity = 1, $$24));
            if ($truthy(result['$empty?']())) {
              return nil
            } else {
              return result
            };
          } else {
            return nil
          }
        }, $Rewriter_adjacent_insertions$ques$23.$$arity = 1);
        
        Opal.def(self, '$adjacent_updates?', $Rewriter_adjacent_updates$ques$25 = function(range) {
          var $$26, self = this;

          if ($truthy(self.$active_clobber()['$&'](self.$adjacent_position_mask(range))['$!='](0))) {
            return $send(self.$active_queue(), 'select', [], ($$26 = function(a){var self = $$26.$$s || this;

            
              
              if (a == null) {
                a = nil;
              };
              return self['$adjacent?'](range, a.$range());}, $$26.$$s = self, $$26.$$arity = 1, $$26))
          } else {
            return nil
          }
        }, $Rewriter_adjacent_updates$ques$25.$$arity = 1);
        
        Opal.def(self, '$replace_compatible_with_insertion?', $Rewriter_replace_compatible_with_insertion$ques$27 = function(replace, insertion) {
          var $a, $b, self = this, offset = nil;

          return ($truthy($a = ($truthy($b = $rb_ge($rb_minus(replace.$replacement().$length(), replace.$range().$size()), insertion.$range().$size())) ? (offset = $rb_minus(insertion.$range().$begin_pos(), replace.$range().$begin_pos())) : $b)) ? replace.$replacement()['$[]'](offset, insertion.$replacement().$length())['$=='](insertion.$replacement()) : $a)
        }, $Rewriter_replace_compatible_with_insertion$ques$27.$$arity = 2);
        
        Opal.def(self, '$can_merge?', $Rewriter_can_merge$ques$28 = function(action, existing) {
          var $$29, self = this, range = nil;

          
          range = action.$range();
          return $send(existing, 'all?', [], ($$29 = function(other){var self = $$29.$$s || this, $a, overlap = nil, repl1_offset = nil, repl2_offset = nil, repl1_length = nil, repl2_length = nil, replacement1 = nil, replacement2 = nil;

          
            
            if (other == null) {
              other = nil;
            };
            overlap = range.$intersect(other.$range());
            if ($truthy(overlap['$nil?']())) {
              return true;};
            repl1_offset = $rb_minus(overlap.$begin_pos(), range.$begin_pos());
            repl2_offset = $rb_minus(overlap.$begin_pos(), other.$range().$begin_pos());
            repl1_length = [$rb_minus(other.$range().$length(), repl2_offset), $rb_minus(other.$replacement().$length(), repl2_offset)].$max();
            repl2_length = [$rb_minus(range.$length(), repl1_offset), $rb_minus(action.$replacement().$length(), repl1_offset)].$max();
            replacement1 = ($truthy($a = action.$replacement()['$[]'](repl1_offset, repl1_length)) ? $a : "".$freeze());
            replacement2 = ($truthy($a = other.$replacement()['$[]'](repl2_offset, repl2_length)) ? $a : "".$freeze());
            return replacement1['$=='](replacement2);}, $$29.$$s = self, $$29.$$arity = 1, $$29));
        }, $Rewriter_can_merge$ques$28.$$arity = 2);
        
        Opal.def(self, '$merge_actions', $Rewriter_merge_actions$30 = function $$merge_actions(action, existing) {
          var $$31, $$32, self = this, actions = nil, range = nil;

          
          actions = $send(existing.$push(action), 'sort_by', [], ($$31 = function(a){var self = $$31.$$s || this;

          
            
            if (a == null) {
              a = nil;
            };
            return [a.$range().$begin_pos(), a.$range().$end_pos()];}, $$31.$$s = self, $$31.$$arity = 1, $$31));
          range = actions.$first().$range().$join($send(actions, 'max_by', [], ($$32 = function(a){var self = $$32.$$s || this;

          
            
            if (a == null) {
              a = nil;
            };
            return a.$range().$end_pos();}, $$32.$$s = self, $$32.$$arity = 1, $$32)).$range());
          return $$$($$($nesting, 'Rewriter'), 'Action').$new(range, self.$merge_replacements(actions));
        }, $Rewriter_merge_actions$30.$$arity = 2);
        
        Opal.def(self, '$merge_actions!', $Rewriter_merge_actions$excl$33 = function(action, existing) {
          var self = this, new_action = nil;

          
          new_action = self.$merge_actions(action, existing);
          self.$active_queue().$delete(action);
          return self.$replace_actions(existing, new_action);
        }, $Rewriter_merge_actions$excl$33.$$arity = 2);
        
        Opal.def(self, '$merge_replacements', $Rewriter_merge_replacements$34 = function $$merge_replacements(actions) {
          var $$35, self = this, result = nil, prev_act = nil;

          
          result = "".$dup();
          prev_act = nil;
          $send(actions, 'each', [], ($$35 = function(act){var self = $$35.$$s || this, $a, prev_end = nil, offset = nil;

          
            
            if (act == null) {
              act = nil;
            };
            if ($truthy(($truthy($a = prev_act['$!']()) ? $a : act.$range()['$disjoint?'](prev_act.$range())))) {
              result['$<<'](act.$replacement())
            } else {
              
              prev_end = [$rb_plus(prev_act.$range().$begin_pos(), prev_act.$replacement().$length()), prev_act.$range().$end_pos()].$max();
              offset = $rb_minus(prev_end, act.$range().$begin_pos());
              if ($truthy($rb_lt(offset, act.$replacement().$size()))) {
                result['$<<'](act.$replacement()['$[]'](Opal.Range.$new(offset, -1, false)))};
            };
            return (prev_act = act);}, $$35.$$s = self, $$35.$$arity = 1, $$35));
          return result;
        }, $Rewriter_merge_replacements$34.$$arity = 1);
        
        Opal.def(self, '$replace_actions', $Rewriter_replace_actions$36 = function $$replace_actions(old, updated) {
          var $$37, self = this;

          
          $send(old, 'each', [], ($$37 = function(act){var self = $$37.$$s || this;

          
            
            if (act == null) {
              act = nil;
            };
            return self.$active_queue().$delete(act);}, $$37.$$s = self, $$37.$$arity = 1, $$37));
          return self.$active_queue()['$<<'](updated);
        }, $Rewriter_replace_actions$36.$$arity = 2);
        
        Opal.def(self, '$raise_clobber_error', $Rewriter_raise_clobber_error$38 = function $$raise_clobber_error(action, existing) {
          var self = this, diagnostic = nil;

          
          diagnostic = $$($nesting, 'Diagnostic').$new("error", "invalid_action", $hash2(["action"], {"action": action}), action.$range());
          self.diagnostics.$process(diagnostic);
          diagnostic = $$($nesting, 'Diagnostic').$new("note", "clobbered", $hash2(["action"], {"action": existing['$[]'](0)}), existing['$[]'](0).$range());
          self.diagnostics.$process(diagnostic);
          return self.$raise($$($nesting, 'ClobberingError'), "Parser::Source::Rewriter detected clobbering");
        }, $Rewriter_raise_clobber_error$38.$$arity = 2);
        
        Opal.def(self, '$in_transaction?', $Rewriter_in_transaction$ques$39 = function() {
          var self = this;

          return self.pending_queue['$nil?']()['$!']()
        }, $Rewriter_in_transaction$ques$39.$$arity = 0);
        
        Opal.def(self, '$active_queue', $Rewriter_active_queue$40 = function $$active_queue() {
          var $a, self = this;

          return ($truthy($a = self.pending_queue) ? $a : self.queue)
        }, $Rewriter_active_queue$40.$$arity = 0);
        
        Opal.def(self, '$active_clobber', $Rewriter_active_clobber$41 = function $$active_clobber() {
          var $a, self = this;

          return ($truthy($a = self.pending_clobber) ? $a : self.clobber)
        }, $Rewriter_active_clobber$41.$$arity = 0);
        
        Opal.def(self, '$active_insertions', $Rewriter_active_insertions$42 = function $$active_insertions() {
          var $a, self = this;

          return ($truthy($a = self.pending_insertions) ? $a : self.insertions)
        }, $Rewriter_active_insertions$42.$$arity = 0);
        
        Opal.def(self, '$active_clobber=', $Rewriter_active_clobber$eq$43 = function(value) {
          var self = this;

          if ($truthy(self.pending_clobber)) {
            return (self.pending_clobber = value)
          } else {
            return (self.clobber = value)
          }
        }, $Rewriter_active_clobber$eq$43.$$arity = 1);
        
        Opal.def(self, '$active_insertions=', $Rewriter_active_insertions$eq$44 = function(value) {
          var self = this;

          if ($truthy(self.pending_insertions)) {
            return (self.pending_insertions = value)
          } else {
            return (self.insertions = value)
          }
        }, $Rewriter_active_insertions$eq$44.$$arity = 1);
        
        Opal.def(self, '$adjacent?', $Rewriter_adjacent$ques$45 = function(range1, range2) {
          var $a, self = this;

          return ($truthy($a = $rb_le(range1.$begin_pos(), range2.$end_pos())) ? $rb_le(range2.$begin_pos(), range1.$end_pos()) : $a)
        }, $Rewriter_adjacent$ques$45.$$arity = 2);
        Opal.const_set($nesting[0], 'DEPRECATION_WARNING', ["Parser::Source::Rewriter is deprecated.", "Please update your code to use Parser::Source::TreeRewriter instead"].$join("\n").$freeze());
        return self.$extend($$($nesting, 'Deprecation'));
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/source/rewriter/action"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$attr_reader', '$alias_method', '$freeze', '$<=>', '$begin_pos', '$range', '$zero?', '$order', '$==', '$length', '$empty?', '$inspect']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Action');

        var $nesting = [self].concat($parent_nesting), $Action_initialize$1, $Action_$lt_eq_gt$2, $Action_to_s$3;

        self.$$prototype.range = self.$$prototype.replacement = nil;
        
        self.$include($$($nesting, 'Comparable'));
        self.$attr_reader("range", "replacement", "allow_multiple_insertions", "order");
        self.$alias_method("allow_multiple_insertions?", "allow_multiple_insertions");
        
        Opal.def(self, '$initialize', $Action_initialize$1 = function $$initialize(range, replacement, allow_multiple_insertions, order) {
          var self = this;

          
          
          if (replacement == null) {
            replacement = "";
          };
          
          if (allow_multiple_insertions == null) {
            allow_multiple_insertions = false;
          };
          
          if (order == null) {
            order = 0;
          };
          self.range = range;
          self.replacement = replacement;
          self.allow_multiple_insertions = allow_multiple_insertions;
          self.order = order;
          return self.$freeze();
        }, $Action_initialize$1.$$arity = -2);
        
        Opal.def(self, '$<=>', $Action_$lt_eq_gt$2 = function(other) {
          var self = this, result = nil;

          
          result = self.$range().$begin_pos()['$<=>'](other.$range().$begin_pos());
          if ($truthy(result['$zero?']())) {
          } else {
            return result
          };
          return self.$order()['$<=>'](other.$order());
        }, $Action_$lt_eq_gt$2.$$arity = 1);
        return (Opal.def(self, '$to_s', $Action_to_s$3 = function $$to_s() {
          var $a, self = this;

          if ($truthy((($a = self.range.$length()['$=='](0)) ? self.replacement['$empty?']() : self.range.$length()['$=='](0)))) {
            return "do nothing"
          } else if (self.range.$length()['$=='](0)) {
            return "" + "insert " + (self.replacement.$inspect())
          } else if ($truthy(self.replacement['$empty?']())) {
            return "" + "remove " + (self.range.$length()) + " character(s)"
          } else {
            return "" + "replace " + (self.range.$length()) + " character(s) with " + (self.replacement.$inspect())
          }
        }, $Action_to_s$3.$$arity = 0), nil) && 'to_s';
      })($$($nesting, 'Rewriter'), null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/source/tree_rewriter"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $lambda = Opal.lambda, $gvars = Opal.gvars, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$new', '$puts', '$render', '$consumer=', '$-', '$freeze', '$check_policy_validity', '$method', '$adjust', '$source_range', '$combine', '$to_s', '$replace', '$wrap', '$dup', '$source', '$each', '$ordered_replacements', '$+', '$begin_pos', '$length', '$[]=', '$raise', '$class', '$warn_of_deprecation', '$insert_before', '$insert_after', '$join', '$extend', '$private', '$values', '$empty?', '$check_range_validity', '$<', '$>', '$end_pos', '$size', '$==', '$[]', '$trigger_policy', '$process']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'TreeRewriter');

        var $nesting = [self].concat($parent_nesting), $TreeRewriter_initialize$1, $TreeRewriter_replace$3, $TreeRewriter_wrap$4, $TreeRewriter_remove$5, $TreeRewriter_insert_before$6, $TreeRewriter_insert_after$7, $TreeRewriter_process$8, $TreeRewriter_transaction$10, $TreeRewriter_in_transaction$ques$11, $TreeRewriter_insert_before_multi$12, $TreeRewriter_insert_after_multi$13, $TreeRewriter_check_policy_validity$14, $TreeRewriter_combine$15, $TreeRewriter_check_range_validity$16, $TreeRewriter_enforce_policy$17, $TreeRewriter_trigger_policy$18;

        self.$$prototype.diagnostics = self.$$prototype.source_buffer = self.$$prototype.enforcer = self.$$prototype.action_root = self.$$prototype.in_transaction = self.$$prototype.policy = nil;
        
        self.$attr_reader("source_buffer");
        self.$attr_reader("diagnostics");
        
        Opal.def(self, '$initialize', $TreeRewriter_initialize$1 = function $$initialize(source_buffer, $kwargs) {
          var crossing_deletions, different_replacements, swallowed_insertions, $$2, self = this, $writer = nil, all_encompassing_range = nil;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          crossing_deletions = $kwargs.$$smap["crossing_deletions"];
          if (crossing_deletions == null) {
            crossing_deletions = "accept"
          };
          
          different_replacements = $kwargs.$$smap["different_replacements"];
          if (different_replacements == null) {
            different_replacements = "accept"
          };
          
          swallowed_insertions = $kwargs.$$smap["swallowed_insertions"];
          if (swallowed_insertions == null) {
            swallowed_insertions = "accept"
          };
          self.diagnostics = $$$($$($nesting, 'Diagnostic'), 'Engine').$new();
          
          $writer = [$lambda(($$2 = function(diag){var self = $$2.$$s || this;
            if ($gvars.stderr == null) $gvars.stderr = nil;

          
            
            if (diag == null) {
              diag = nil;
            };
            return $gvars.stderr.$puts(diag.$render());}, $$2.$$s = self, $$2.$$arity = 1, $$2))];
          $send(self.diagnostics, 'consumer=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          self.source_buffer = source_buffer;
          self.in_transaction = false;
          self.policy = $hash2(["crossing_deletions", "different_replacements", "swallowed_insertions"], {"crossing_deletions": crossing_deletions, "different_replacements": different_replacements, "swallowed_insertions": swallowed_insertions}).$freeze();
          self.$check_policy_validity();
          self.enforcer = self.$method("enforce_policy");
          all_encompassing_range = self.source_buffer.$source_range().$adjust($hash2(["begin_pos", "end_pos"], {"begin_pos": -1, "end_pos": 1}));
          return (self.action_root = $$$($$($nesting, 'TreeRewriter'), 'Action').$new(all_encompassing_range, self.enforcer));
        }, $TreeRewriter_initialize$1.$$arity = -2);
        
        Opal.def(self, '$replace', $TreeRewriter_replace$3 = function $$replace(range, content) {
          var self = this;

          return self.$combine(range, $hash2(["replacement"], {"replacement": content}))
        }, $TreeRewriter_replace$3.$$arity = 2);
        
        Opal.def(self, '$wrap', $TreeRewriter_wrap$4 = function $$wrap(range, insert_before, insert_after) {
          var self = this;

          return self.$combine(range, $hash2(["insert_before", "insert_after"], {"insert_before": insert_before.$to_s(), "insert_after": insert_after.$to_s()}))
        }, $TreeRewriter_wrap$4.$$arity = 3);
        
        Opal.def(self, '$remove', $TreeRewriter_remove$5 = function $$remove(range) {
          var self = this;

          return self.$replace(range, "".$freeze())
        }, $TreeRewriter_remove$5.$$arity = 1);
        
        Opal.def(self, '$insert_before', $TreeRewriter_insert_before$6 = function $$insert_before(range, content) {
          var self = this;

          return self.$wrap(range, content, nil)
        }, $TreeRewriter_insert_before$6.$$arity = 2);
        
        Opal.def(self, '$insert_after', $TreeRewriter_insert_after$7 = function $$insert_after(range, content) {
          var self = this;

          return self.$wrap(range, nil, content)
        }, $TreeRewriter_insert_after$7.$$arity = 2);
        
        Opal.def(self, '$process', $TreeRewriter_process$8 = function $$process() {
          var $$9, self = this, source = nil, adjustment = nil;

          
          source = self.source_buffer.$source().$dup();
          adjustment = 0;
          $send(self.action_root.$ordered_replacements(), 'each', [], ($$9 = function(range, replacement){var self = $$9.$$s || this, begin_pos = nil, end_pos = nil, $writer = nil;

          
            
            if (range == null) {
              range = nil;
            };
            
            if (replacement == null) {
              replacement = nil;
            };
            begin_pos = $rb_plus(range.$begin_pos(), adjustment);
            end_pos = $rb_plus(begin_pos, range.$length());
            
            $writer = [Opal.Range.$new(begin_pos,end_pos, true), replacement];
            $send(source, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return (adjustment = $rb_plus(adjustment, $rb_minus(replacement.$length(), range.$length())));}, $$9.$$s = self, $$9.$$arity = 2, $$9));
          return source;
        }, $TreeRewriter_process$8.$$arity = 0);
        
        Opal.def(self, '$transaction', $TreeRewriter_transaction$10 = function $$transaction() {
          var $iter = $TreeRewriter_transaction$10.$$p, $yield = $iter || nil, self = this, previous = nil, restore_root = nil;

          if ($iter) $TreeRewriter_transaction$10.$$p = null;
          return (function() { try {
          
          if (($yield !== nil)) {
          } else {
            self.$raise("" + (self.$class()) + "#" + ("transaction") + " requires block")
          };
          previous = self.in_transaction;
          self.in_transaction = true;
          restore_root = self.action_root;
          Opal.yieldX($yield, []);
          restore_root = nil;
          return self;
          } finally {
            ((function() {if ($truthy(restore_root)) {
              return (self.action_root = restore_root)
            } else {
              return nil
            }; return nil; })(), (self.in_transaction = previous))
          }; })()
        }, $TreeRewriter_transaction$10.$$arity = 0);
        
        Opal.def(self, '$in_transaction?', $TreeRewriter_in_transaction$ques$11 = function() {
          var self = this;

          return self.in_transaction
        }, $TreeRewriter_in_transaction$ques$11.$$arity = 0);
        
        Opal.def(self, '$insert_before_multi', $TreeRewriter_insert_before_multi$12 = function $$insert_before_multi(range, text) {
          var self = this;

          
          self.$class().$warn_of_deprecation();
          return self.$insert_before(range, text);
        }, $TreeRewriter_insert_before_multi$12.$$arity = 2);
        
        Opal.def(self, '$insert_after_multi', $TreeRewriter_insert_after_multi$13 = function $$insert_after_multi(range, text) {
          var self = this;

          
          self.$class().$warn_of_deprecation();
          return self.$insert_after(range, text);
        }, $TreeRewriter_insert_after_multi$13.$$arity = 2);
        Opal.const_set($nesting[0], 'DEPRECATION_WARNING', ["TreeRewriter#insert_before_multi and insert_before_multi exist only for legacy compatibility.", "Please update your code to use `wrap`, `insert_before` or `insert_after` instead."].$join("\n").$freeze());
        self.$extend($$($nesting, 'Deprecation'));
        self.$private();
        Opal.const_set($nesting[0], 'ACTIONS', ["accept", "warn", "raise"].$freeze());
        
        Opal.def(self, '$check_policy_validity', $TreeRewriter_check_policy_validity$14 = function $$check_policy_validity() {
          var self = this, invalid = nil;

          
          invalid = $rb_minus(self.policy.$values(), $$($nesting, 'ACTIONS'));
          if ($truthy(invalid['$empty?']())) {
            return nil
          } else {
            return self.$raise($$($nesting, 'ArgumentError'), "" + "Invalid policy: " + (invalid.$join(", ")))
          };
        }, $TreeRewriter_check_policy_validity$14.$$arity = 0);
        
        Opal.def(self, '$combine', $TreeRewriter_combine$15 = function $$combine(range, attributes) {
          var self = this, action = nil;

          
          range = self.$check_range_validity(range);
          action = $$$($$($nesting, 'TreeRewriter'), 'Action').$new(range, self.enforcer, attributes);
          self.action_root = self.action_root.$combine(action);
          return self;
        }, $TreeRewriter_combine$15.$$arity = 2);
        
        Opal.def(self, '$check_range_validity', $TreeRewriter_check_range_validity$16 = function $$check_range_validity(range) {
          var $a, self = this;

          
          if ($truthy(($truthy($a = $rb_lt(range.$begin_pos(), 0)) ? $a : $rb_gt(range.$end_pos(), self.source_buffer.$source().$size())))) {
            self.$raise($$($nesting, 'IndexError'), "" + "The range " + (range) + " is outside the bounds of the source")};
          return range;
        }, $TreeRewriter_check_range_validity$16.$$arity = 1);
        
        Opal.def(self, '$enforce_policy', $TreeRewriter_enforce_policy$17 = function $$enforce_policy(event) {
          var $iter = $TreeRewriter_enforce_policy$17.$$p, $yield = $iter || nil, self = this, values = nil;

          if ($iter) $TreeRewriter_enforce_policy$17.$$p = null;
          
          if (self.policy['$[]'](event)['$==']("accept")) {
            return nil};
          if ($truthy((values = Opal.yieldX($yield, [])))) {
          } else {
            return nil
          };
          return self.$trigger_policy(event, values);
        }, $TreeRewriter_enforce_policy$17.$$arity = 1);
        Opal.const_set($nesting[0], 'POLICY_TO_LEVEL', $hash2(["warn", "raise"], {"warn": "warning", "raise": "error"}).$freeze());
        return (Opal.def(self, '$trigger_policy', $TreeRewriter_trigger_policy$18 = function $$trigger_policy(event, $kwargs) {
          var range, conflict, arguments$, $a, $b, self = this, action = nil, diag = nil, highlights = nil;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          range = $kwargs.$$smap["range"];
          if (range == null) {
            range = self.$raise()
          };
          
          conflict = $kwargs.$$smap["conflict"];
          if (conflict == null) {
            conflict = nil
          };
          
          arguments$ = Opal.kwrestargs($kwargs, {'range': true,'conflict': true});;
          action = ($truthy($a = self.policy['$[]'](event)) ? $a : "raise");
          diag = $$$($$($nesting, 'Parser'), 'Diagnostic').$new($$($nesting, 'POLICY_TO_LEVEL')['$[]'](action), event, arguments$, range);
          self.diagnostics.$process(diag);
          if ($truthy(conflict)) {
            
            $b = conflict, $a = Opal.to_ary($b), (range = ($a[0] == null ? nil : $a[0])), (highlights = $slice.call($a, 1)), $b;
            diag = $$$($$($nesting, 'Parser'), 'Diagnostic').$new($$($nesting, 'POLICY_TO_LEVEL')['$[]'](action), "" + (event) + "_conflict", arguments$, range, highlights);
            self.diagnostics.$process(diag);};
          if (action['$==']("raise")) {
            return self.$raise($$$($$($nesting, 'Parser'), 'ClobberingError'), "Parser::Source::TreeRewriter detected clobbering")
          } else {
            return nil
          };
        }, $TreeRewriter_trigger_policy$18.$$arity = -2), nil) && 'trigger_policy';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/source/tree_rewriter/action"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$freeze', '$insertion?', '$replacement', '$do_combine', '$empty?', '$<<', '$begin', '$concat', '$flat_map', '$sort_by', '$to_proc', '$end', '$!', '$insert_before', '$insert_after', '$protected', '$swallow', '$new', '$class', '$==', '$range', '$merge', '$place_in_hierachy', '$group_by', '$relationship_with', '$[]', '$fuse_deletions', '$with', '$inject', '$map', '$contains?', '$contained?', '$disjoint?', '$call', '$call_enforcer_for_merge', '$!=', '$select']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Action');

        var $nesting = [self].concat($parent_nesting), $Action_initialize$1, $Action_combine$2, $Action_ordered_replacements$3, $Action_insertion$ques$4, $Action_with$5, $Action_do_combine$6, $Action_place_in_hierachy$7, $Action_fuse_deletions$9, $Action_relationship_with$10, $Action_merge$13, $Action_call_enforcer_for_merge$14, $Action_swallow$16;

        self.$$prototype.insert_before = self.$$prototype.range = self.$$prototype.replacement = self.$$prototype.children = self.$$prototype.insert_after = self.$$prototype.enforcer = nil;
        
        self.$attr_reader("range", "replacement", "insert_before", "insert_after");
        
        Opal.def(self, '$initialize', $Action_initialize$1 = function $$initialize(range, enforcer, $kwargs) {
          var insert_before, replacement, insert_after, children, $a, self = this;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          insert_before = $kwargs.$$smap["insert_before"];
          if (insert_before == null) {
            insert_before = ""
          };
          
          replacement = $kwargs.$$smap["replacement"];
          if (replacement == null) {
            replacement = nil
          };
          
          insert_after = $kwargs.$$smap["insert_after"];
          if (insert_after == null) {
            insert_after = ""
          };
          
          children = $kwargs.$$smap["children"];
          if (children == null) {
            children = []
          };
          $a = [range, enforcer, children.$freeze(), insert_before.$freeze(), replacement, insert_after.$freeze()], (self.range = $a[0]), (self.enforcer = $a[1]), (self.children = $a[2]), (self.insert_before = $a[3]), (self.replacement = $a[4]), (self.insert_after = $a[5]), $a;
          return self.$freeze();
        }, $Action_initialize$1.$$arity = -3);
        
        Opal.def(self, '$combine', $Action_combine$2 = function $$combine(action) {
          var $a, self = this;

          
          if ($truthy(($truthy($a = action['$insertion?']()) ? $a : action.$replacement()))) {
          } else {
            return self
          };
          return self.$do_combine(action);
        }, $Action_combine$2.$$arity = 1);
        
        Opal.def(self, '$ordered_replacements', $Action_ordered_replacements$3 = function $$ordered_replacements() {
          var self = this, reps = nil;

          
          reps = [];
          if ($truthy(self.insert_before['$empty?']())) {
          } else {
            reps['$<<']([self.range.$begin(), self.insert_before])
          };
          if ($truthy(self.replacement)) {
            reps['$<<']([self.range, self.replacement])};
          reps.$concat($send($send(self.children, 'sort_by', [], "range".$to_proc()), 'flat_map', [], "ordered_replacements".$to_proc()));
          if ($truthy(self.insert_after['$empty?']())) {
          } else {
            reps['$<<']([self.range.$end(), self.insert_after])
          };
          return reps;
        }, $Action_ordered_replacements$3.$$arity = 0);
        
        Opal.def(self, '$insertion?', $Action_insertion$ques$4 = function() {
          var $a, $b, self = this;

          return ($truthy($a = ($truthy($b = self.$insert_before()['$empty?']()['$!']()) ? $b : self.$insert_after()['$empty?']()['$!']())) ? $a : ($truthy($b = self.$replacement()) ? self.$replacement()['$empty?']()['$!']() : $b))
        }, $Action_insertion$ques$4.$$arity = 0);
        self.$protected();
        
        Opal.def(self, '$with', $Action_with$5 = function($kwargs) {
          var range, children, insert_before, replacement, insert_after, self = this;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          range = $kwargs.$$smap["range"];
          if (range == null) {
            range = self.range
          };
          
          children = $kwargs.$$smap["children"];
          if (children == null) {
            children = self.children
          };
          
          insert_before = $kwargs.$$smap["insert_before"];
          if (insert_before == null) {
            insert_before = self.insert_before
          };
          
          replacement = $kwargs.$$smap["replacement"];
          if (replacement == null) {
            replacement = self.replacement
          };
          
          insert_after = $kwargs.$$smap["insert_after"];
          if (insert_after == null) {
            insert_after = self.insert_after
          };
          if ($truthy(replacement)) {
            children = self.$swallow(children)};
          return self.$class().$new(range, self.enforcer, $hash2(["children", "insert_before", "replacement", "insert_after"], {"children": children, "insert_before": insert_before, "replacement": replacement, "insert_after": insert_after}));
        }, $Action_with$5.$$arity = -1);
        
        Opal.def(self, '$do_combine', $Action_do_combine$6 = function $$do_combine(action) {
          var self = this;

          if (action.$range()['$=='](self.range)) {
            return self.$merge(action)
          } else {
            return self.$place_in_hierachy(action)
          }
        }, $Action_do_combine$6.$$arity = 1);
        
        Opal.def(self, '$place_in_hierachy', $Action_place_in_hierachy$7 = function $$place_in_hierachy(action) {
          var $$8, self = this, family = nil, extra_sibbling = nil;

          
          family = $send(self.children, 'group_by', [], ($$8 = function(child){var self = $$8.$$s || this;

          
            
            if (child == null) {
              child = nil;
            };
            return child.$relationship_with(action);}, $$8.$$s = self, $$8.$$arity = 1, $$8));
          if ($truthy(family['$[]']("fusible"))) {
            return self.$fuse_deletions(action, family['$[]']("fusible"), [].concat(Opal.to_a(family['$[]']("sibbling"))).concat(Opal.to_a(family['$[]']("child"))))
          } else {
            
            extra_sibbling = (function() {if ($truthy(family['$[]']("parent"))) {
              return family['$[]']("parent")['$[]'](0).$do_combine(action)
            } else if ($truthy(family['$[]']("child"))) {
              return action.$with($hash2(["children"], {"children": family['$[]']("child")}))
            } else {
              return action
            }; return nil; })();
            return self.$with($hash2(["children"], {"children": [].concat(Opal.to_a(family['$[]']("sibbling"))).concat([extra_sibbling])}));
          };
        }, $Action_place_in_hierachy$7.$$arity = 1);
        
        Opal.def(self, '$fuse_deletions', $Action_fuse_deletions$9 = function $$fuse_deletions(action, fusible, other_sibblings) {
          var self = this, without_fusible = nil, fused_range = nil, fused_deletion = nil;

          
          without_fusible = self.$with($hash2(["children"], {"children": other_sibblings}));
          fused_range = $send([action].concat(Opal.to_a(fusible)), 'map', [], "range".$to_proc()).$inject("join");
          fused_deletion = action.$with($hash2(["range"], {"range": fused_range}));
          return without_fusible.$do_combine(fused_deletion);
        }, $Action_fuse_deletions$9.$$arity = 3);
        
        Opal.def(self, '$relationship_with', $Action_relationship_with$10 = function $$relationship_with(action) {
          var $a, $$11, $$12, self = this;

          if ($truthy(($truthy($a = action.$range()['$=='](self.range)) ? $a : self.range['$contains?'](action.$range())))) {
            return "parent"
          } else if ($truthy(self.range['$contained?'](action.$range()))) {
            return "child"
          } else if ($truthy(self.range['$disjoint?'](action.$range()))) {
            return "sibbling"
          } else if ($truthy(($truthy($a = action['$insertion?']()['$!']()) ? self['$insertion?']()['$!']() : $a))) {
            
            $send(self.enforcer, 'call', ["crossing_deletions"], ($$11 = function(){var self = $$11.$$s || this;
              if (self.range == null) self.range = nil;

            return $hash2(["range", "conflict"], {"range": action.$range(), "conflict": self.range})}, $$11.$$s = self, $$11.$$arity = 0, $$11));
            return "fusible";
          } else {
            return $send(self.enforcer, 'call', ["crossing_insertions"], ($$12 = function(){var self = $$12.$$s || this;
              if (self.range == null) self.range = nil;

            return $hash2(["range", "conflict"], {"range": action.$range(), "conflict": self.range})}, $$12.$$s = self, $$12.$$arity = 0, $$12))
          }
        }, $Action_relationship_with$10.$$arity = 1);
        
        Opal.def(self, '$merge', $Action_merge$13 = function $$merge(action) {
          var $a, self = this;

          
          self.$call_enforcer_for_merge(action);
          return self.$with($hash2(["insert_before", "replacement", "insert_after"], {"insert_before": "" + (action.$insert_before()) + (self.$insert_before()), "replacement": ($truthy($a = action.$replacement()) ? $a : self.replacement), "insert_after": "" + (self.$insert_after()) + (action.$insert_after())}));
        }, $Action_merge$13.$$arity = 1);
        
        Opal.def(self, '$call_enforcer_for_merge', $Action_call_enforcer_for_merge$14 = function $$call_enforcer_for_merge(action) {
          var $$15, self = this;

          return $send(self.enforcer, 'call', ["different_replacements"], ($$15 = function(){var self = $$15.$$s || this, $a, $b;
            if (self.replacement == null) self.replacement = nil;
            if (self.range == null) self.range = nil;

          if ($truthy(($truthy($a = ($truthy($b = self.replacement) ? action.$replacement() : $b)) ? self.replacement['$!='](action.$replacement()) : $a))) {
              return $hash2(["range", "replacement", "other_replacement"], {"range": self.range, "replacement": action.$replacement(), "other_replacement": self.replacement})
            } else {
              return nil
            }}, $$15.$$s = self, $$15.$$arity = 0, $$15))
        }, $Action_call_enforcer_for_merge$14.$$arity = 1);
        return (Opal.def(self, '$swallow', $Action_swallow$16 = function $$swallow(children) {
          var $$17, self = this;

          
          $send(self.enforcer, 'call', ["swallowed_insertions"], ($$17 = function(){var self = $$17.$$s || this, insertions = nil;
            if (self.range == null) self.range = nil;

          
            insertions = $send(children, 'select', [], "insertion?".$to_proc());
            if ($truthy(insertions['$empty?']())) {
              return nil
            } else {
              return $hash2(["range", "conflict"], {"range": self.range, "conflict": $send(insertions, 'map', [], "range".$to_proc())})
            };}, $$17.$$s = self, $$17.$$arity = 0, $$17));
          return [];
        }, $Action_swallow$16.$$arity = 1), nil) && 'swallow';
      })($$($nesting, 'TreeRewriter'), null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/source/map"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$attr_reader', '$freeze', '$line', '$alias_method', '$column', '$last_line', '$last_column', '$with', '$update_expression', '$==', '$class', '$reduce', '$map', '$instance_variables', '$instance_variable_get', '$send', '$inject', '$to_sym', '$[]', '$[]=', '$-', '$protected', '$tap', '$dup', '$to_proc']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Map');

        var $nesting = [self].concat($parent_nesting), $Map_initialize$1, $Map_initialize_copy$2, $Map_node$eq$3, $Map_line$4, $Map_column$5, $Map_last_line$6, $Map_last_column$7, $Map_with_expression$8, $Map_$eq_eq$10, $Map_to_hash$12, $Map_with$14, $Map_update_expression$15;

        self.$$prototype.node = self.$$prototype.expression = nil;
        
        self.$attr_reader("node");
        self.$attr_reader("expression");
        
        Opal.def(self, '$initialize', $Map_initialize$1 = function $$initialize(expression) {
          var self = this;

          return (self.expression = expression)
        }, $Map_initialize$1.$$arity = 1);
        
        Opal.def(self, '$initialize_copy', $Map_initialize_copy$2 = function $$initialize_copy(other) {
          var $iter = $Map_initialize_copy$2.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $Map_initialize_copy$2.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          $send(self, Opal.find_super_dispatcher(self, 'initialize_copy', $Map_initialize_copy$2, false), $zuper, $iter);
          return (self.node = nil);
        }, $Map_initialize_copy$2.$$arity = 1);
        
        Opal.def(self, '$node=', $Map_node$eq$3 = function(node) {
          var self = this;

          
          self.node = node;
          self.$freeze();
          return self.node;
        }, $Map_node$eq$3.$$arity = 1);
        
        Opal.def(self, '$line', $Map_line$4 = function $$line() {
          var self = this;

          return self.expression.$line()
        }, $Map_line$4.$$arity = 0);
        self.$alias_method("first_line", "line");
        
        Opal.def(self, '$column', $Map_column$5 = function $$column() {
          var self = this;

          return self.expression.$column()
        }, $Map_column$5.$$arity = 0);
        
        Opal.def(self, '$last_line', $Map_last_line$6 = function $$last_line() {
          var self = this;

          return self.expression.$last_line()
        }, $Map_last_line$6.$$arity = 0);
        
        Opal.def(self, '$last_column', $Map_last_column$7 = function $$last_column() {
          var self = this;

          return self.expression.$last_column()
        }, $Map_last_column$7.$$arity = 0);
        
        Opal.def(self, '$with_expression', $Map_with_expression$8 = function $$with_expression(expression_l) {
          var $$9, self = this;

          return $send(self, 'with', [], ($$9 = function(map){var self = $$9.$$s || this;

          
            
            if (map == null) {
              map = nil;
            };
            return map.$update_expression(expression_l);}, $$9.$$s = self, $$9.$$arity = 1, $$9))
        }, $Map_with_expression$8.$$arity = 1);
        
        Opal.def(self, '$==', $Map_$eq_eq$10 = function(other) {
          var $a, $$11, self = this;

          return (($a = other.$class()['$=='](self.$class())) ? $send(self.$instance_variables(), 'map', [], ($$11 = function(ivar){var self = $$11.$$s || this;

          
            
            if (ivar == null) {
              ivar = nil;
            };
            return self.$instance_variable_get(ivar)['$=='](other.$send("instance_variable_get", ivar));}, $$11.$$s = self, $$11.$$arity = 1, $$11)).$reduce("&") : other.$class()['$=='](self.$class()))
        }, $Map_$eq_eq$10.$$arity = 1);
        
        Opal.def(self, '$to_hash', $Map_to_hash$12 = function $$to_hash() {
          var $$13, self = this;

          return $send(self.$instance_variables(), 'inject', [$hash2([], {})], ($$13 = function(hash, ivar){var self = $$13.$$s || this, $writer = nil;

          
            
            if (hash == null) {
              hash = nil;
            };
            
            if (ivar == null) {
              ivar = nil;
            };
            if (ivar.$to_sym()['$==']("@node")) {
              return hash;};
            
            $writer = [ivar['$[]']($range(1, -1, false)).$to_sym(), self.$instance_variable_get(ivar)];
            $send(hash, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return hash;}, $$13.$$s = self, $$13.$$arity = 2, $$13))
        }, $Map_to_hash$12.$$arity = 0);
        self.$protected();
        
        Opal.def(self, '$with', $Map_with$14 = function() {
          var $iter = $Map_with$14.$$p, block = $iter || nil, self = this;

          if ($iter) $Map_with$14.$$p = null;
          
          
          if ($iter) $Map_with$14.$$p = null;;
          return $send(self.$dup(), 'tap', [], block.$to_proc());
        }, $Map_with$14.$$arity = 0);
        return (Opal.def(self, '$update_expression', $Map_update_expression$15 = function $$update_expression(expression_l) {
          var self = this;

          return (self.expression = expression_l)
        }, $Map_update_expression$15.$$arity = 1), nil) && 'update_expression';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/source/map/operator"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Operator');

        var $nesting = [self].concat($parent_nesting), $Operator_initialize$1;

        
        self.$attr_reader("operator");
        return (Opal.def(self, '$initialize', $Operator_initialize$1 = function $$initialize(operator, expression) {
          var $iter = $Operator_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Operator_initialize$1.$$p = null;
          
          self.operator = operator;
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', $Operator_initialize$1, false), [expression], null);
        }, $Operator_initialize$1.$$arity = 2), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/source/map/collection"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Collection');

        var $nesting = [self].concat($parent_nesting), $Collection_initialize$1;

        
        self.$attr_reader("begin");
        self.$attr_reader("end");
        return (Opal.def(self, '$initialize', $Collection_initialize$1 = function $$initialize(begin_l, end_l, expression_l) {
          var $a, $iter = $Collection_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Collection_initialize$1.$$p = null;
          
          $a = [begin_l, end_l], (self.begin = $a[0]), (self.end = $a[1]), $a;
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', $Collection_initialize$1, false), [expression_l], null);
        }, $Collection_initialize$1.$$arity = 3), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/source/map/constant"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$with', '$update_operator', '$protected']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Constant');

        var $nesting = [self].concat($parent_nesting), $Constant_initialize$1, $Constant_with_operator$2, $Constant_update_operator$4;

        
        self.$attr_reader("double_colon");
        self.$attr_reader("name");
        self.$attr_reader("operator");
        
        Opal.def(self, '$initialize', $Constant_initialize$1 = function $$initialize(double_colon, name, expression) {
          var $a, $iter = $Constant_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Constant_initialize$1.$$p = null;
          
          $a = [double_colon, name], (self.double_colon = $a[0]), (self.name = $a[1]), $a;
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', $Constant_initialize$1, false), [expression], null);
        }, $Constant_initialize$1.$$arity = 3);
        
        Opal.def(self, '$with_operator', $Constant_with_operator$2 = function $$with_operator(operator_l) {
          var $$3, self = this;

          return $send(self, 'with', [], ($$3 = function(map){var self = $$3.$$s || this;

          
            
            if (map == null) {
              map = nil;
            };
            return map.$update_operator(operator_l);}, $$3.$$s = self, $$3.$$arity = 1, $$3))
        }, $Constant_with_operator$2.$$arity = 1);
        self.$protected();
        return (Opal.def(self, '$update_operator', $Constant_update_operator$4 = function $$update_operator(operator_l) {
          var self = this;

          return (self.operator = operator_l)
        }, $Constant_update_operator$4.$$arity = 1), nil) && 'update_operator';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/source/map/variable"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$with', '$update_operator', '$protected']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Variable');

        var $nesting = [self].concat($parent_nesting), $Variable_initialize$1, $Variable_with_operator$2, $Variable_update_operator$4;

        
        self.$attr_reader("name");
        self.$attr_reader("operator");
        
        Opal.def(self, '$initialize', $Variable_initialize$1 = function $$initialize(name_l, expression_l) {
          var $iter = $Variable_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Variable_initialize$1.$$p = null;
          
          
          if (expression_l == null) {
            expression_l = name_l;
          };
          self.name = name_l;
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', $Variable_initialize$1, false), [expression_l], null);
        }, $Variable_initialize$1.$$arity = -2);
        
        Opal.def(self, '$with_operator', $Variable_with_operator$2 = function $$with_operator(operator_l) {
          var $$3, self = this;

          return $send(self, 'with', [], ($$3 = function(map){var self = $$3.$$s || this;

          
            
            if (map == null) {
              map = nil;
            };
            return map.$update_operator(operator_l);}, $$3.$$s = self, $$3.$$arity = 1, $$3))
        }, $Variable_with_operator$2.$$arity = 1);
        self.$protected();
        return (Opal.def(self, '$update_operator', $Variable_update_operator$4 = function $$update_operator(operator_l) {
          var self = this;

          return (self.operator = operator_l)
        }, $Variable_update_operator$4.$$arity = 1), nil) && 'update_operator';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/source/map/keyword"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Keyword');

        var $nesting = [self].concat($parent_nesting), $Keyword_initialize$1;

        
        self.$attr_reader("keyword");
        self.$attr_reader("begin");
        self.$attr_reader("end");
        return (Opal.def(self, '$initialize', $Keyword_initialize$1 = function $$initialize(keyword_l, begin_l, end_l, expression_l) {
          var $a, $iter = $Keyword_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Keyword_initialize$1.$$p = null;
          
          self.keyword = keyword_l;
          $a = [begin_l, end_l], (self.begin = $a[0]), (self.end = $a[1]), $a;
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', $Keyword_initialize$1, false), [expression_l], null);
        }, $Keyword_initialize$1.$$arity = 4), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/source/map/definition"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$join']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Definition');

        var $nesting = [self].concat($parent_nesting), $Definition_initialize$1;

        self.$$prototype.keyword = self.$$prototype.end = nil;
        
        self.$attr_reader("keyword");
        self.$attr_reader("operator");
        self.$attr_reader("name");
        self.$attr_reader("end");
        return (Opal.def(self, '$initialize', $Definition_initialize$1 = function $$initialize(keyword_l, operator_l, name_l, end_l) {
          var $iter = $Definition_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Definition_initialize$1.$$p = null;
          
          self.keyword = keyword_l;
          self.operator = operator_l;
          self.name = name_l;
          self.end = end_l;
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', $Definition_initialize$1, false), [self.keyword.$join(self.end)], null);
        }, $Definition_initialize$1.$$arity = 4), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/source/map/send"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$with', '$update_operator', '$protected']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Send');

        var $nesting = [self].concat($parent_nesting), $Send_initialize$1, $Send_with_operator$2, $Send_update_operator$4;

        
        self.$attr_reader("dot");
        self.$attr_reader("selector");
        self.$attr_reader("operator");
        self.$attr_reader("begin");
        self.$attr_reader("end");
        
        Opal.def(self, '$initialize', $Send_initialize$1 = function $$initialize(dot_l, selector_l, begin_l, end_l, expression_l) {
          var $a, $iter = $Send_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Send_initialize$1.$$p = null;
          
          self.dot = dot_l;
          self.selector = selector_l;
          $a = [begin_l, end_l], (self.begin = $a[0]), (self.end = $a[1]), $a;
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', $Send_initialize$1, false), [expression_l], null);
        }, $Send_initialize$1.$$arity = 5);
        
        Opal.def(self, '$with_operator', $Send_with_operator$2 = function $$with_operator(operator_l) {
          var $$3, self = this;

          return $send(self, 'with', [], ($$3 = function(map){var self = $$3.$$s || this;

          
            
            if (map == null) {
              map = nil;
            };
            return map.$update_operator(operator_l);}, $$3.$$s = self, $$3.$$arity = 1, $$3))
        }, $Send_with_operator$2.$$arity = 1);
        self.$protected();
        return (Opal.def(self, '$update_operator', $Send_update_operator$4 = function $$update_operator(operator_l) {
          var self = this;

          return (self.operator = operator_l)
        }, $Send_update_operator$4.$$arity = 1), nil) && 'update_operator';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/source/map/index"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$with', '$update_operator', '$protected']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Index');

        var $nesting = [self].concat($parent_nesting), $Index_initialize$1, $Index_with_operator$2, $Index_update_operator$4;

        
        self.$attr_reader("begin");
        self.$attr_reader("end");
        self.$attr_reader("operator");
        
        Opal.def(self, '$initialize', $Index_initialize$1 = function $$initialize(begin_l, end_l, expression_l) {
          var $a, $iter = $Index_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Index_initialize$1.$$p = null;
          
          $a = [begin_l, end_l], (self.begin = $a[0]), (self.end = $a[1]), $a;
          self.operator = nil;
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', $Index_initialize$1, false), [expression_l], null);
        }, $Index_initialize$1.$$arity = 3);
        
        Opal.def(self, '$with_operator', $Index_with_operator$2 = function $$with_operator(operator_l) {
          var $$3, self = this;

          return $send(self, 'with', [], ($$3 = function(map){var self = $$3.$$s || this;

          
            
            if (map == null) {
              map = nil;
            };
            return map.$update_operator(operator_l);}, $$3.$$s = self, $$3.$$arity = 1, $$3))
        }, $Index_with_operator$2.$$arity = 1);
        self.$protected();
        return (Opal.def(self, '$update_operator', $Index_update_operator$4 = function $$update_operator(operator_l) {
          var self = this;

          return (self.operator = operator_l)
        }, $Index_update_operator$4.$$arity = 1), nil) && 'update_operator';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/source/map/condition"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Condition');

        var $nesting = [self].concat($parent_nesting), $Condition_initialize$1;

        
        self.$attr_reader("keyword");
        self.$attr_reader("begin");
        self.$attr_reader("else");
        self.$attr_reader("end");
        return (Opal.def(self, '$initialize', $Condition_initialize$1 = function $$initialize(keyword_l, begin_l, else_l, end_l, expression_l) {
          var $a, $iter = $Condition_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Condition_initialize$1.$$p = null;
          
          self.keyword = keyword_l;
          $a = [begin_l, else_l, end_l], (self.begin = $a[0]), (self["else"] = $a[1]), (self.end = $a[2]), $a;
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', $Condition_initialize$1, false), [expression_l], null);
        }, $Condition_initialize$1.$$arity = 5), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/source/map/ternary"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Ternary');

        var $nesting = [self].concat($parent_nesting), $Ternary_initialize$1;

        
        self.$attr_reader("question");
        self.$attr_reader("colon");
        return (Opal.def(self, '$initialize', $Ternary_initialize$1 = function $$initialize(question_l, colon_l, expression_l) {
          var $a, $iter = $Ternary_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Ternary_initialize$1.$$p = null;
          
          $a = [question_l, colon_l], (self.question = $a[0]), (self.colon = $a[1]), $a;
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', $Ternary_initialize$1, false), [expression_l], null);
        }, $Ternary_initialize$1.$$arity = 3), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/source/map/for"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'For');

        var $nesting = [self].concat($parent_nesting), $For_initialize$1;

        
        self.$attr_reader("keyword", "in");
        self.$attr_reader("begin", "end");
        return (Opal.def(self, '$initialize', $For_initialize$1 = function $$initialize(keyword_l, in_l, begin_l, end_l, expression_l) {
          var $a, $iter = $For_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $For_initialize$1.$$p = null;
          
          $a = [keyword_l, in_l], (self.keyword = $a[0]), (self["in"] = $a[1]), $a;
          $a = [begin_l, end_l], (self.begin = $a[0]), (self.end = $a[1]), $a;
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', $For_initialize$1, false), [expression_l], null);
        }, $For_initialize$1.$$arity = 5), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/source/map/rescue_body"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RescueBody');

        var $nesting = [self].concat($parent_nesting), $RescueBody_initialize$1;

        
        self.$attr_reader("keyword");
        self.$attr_reader("assoc");
        self.$attr_reader("begin");
        return (Opal.def(self, '$initialize', $RescueBody_initialize$1 = function $$initialize(keyword_l, assoc_l, begin_l, expression_l) {
          var $iter = $RescueBody_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $RescueBody_initialize$1.$$p = null;
          
          self.keyword = keyword_l;
          self.assoc = assoc_l;
          self.begin = begin_l;
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', $RescueBody_initialize$1, false), [expression_l], null);
        }, $RescueBody_initialize$1.$$arity = 4), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/source/map/heredoc"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Heredoc');

        var $nesting = [self].concat($parent_nesting), $Heredoc_initialize$1;

        
        self.$attr_reader("heredoc_body");
        self.$attr_reader("heredoc_end");
        return (Opal.def(self, '$initialize', $Heredoc_initialize$1 = function $$initialize(begin_l, body_l, end_l) {
          var $iter = $Heredoc_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Heredoc_initialize$1.$$p = null;
          
          self.heredoc_body = body_l;
          self.heredoc_end = end_l;
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', $Heredoc_initialize$1, false), [begin_l], null);
        }, $Heredoc_initialize$1.$$arity = 3), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/source/map/objc_kwarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ObjcKwarg');

        var $nesting = [self].concat($parent_nesting), $ObjcKwarg_initialize$1;

        
        self.$attr_reader("keyword");
        self.$attr_reader("operator");
        self.$attr_reader("argument");
        return (Opal.def(self, '$initialize', $ObjcKwarg_initialize$1 = function $$initialize(keyword_l, operator_l, argument_l, expression_l) {
          var $a, $iter = $ObjcKwarg_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $ObjcKwarg_initialize$1.$$p = null;
          
          $a = [keyword_l, operator_l, argument_l], (self.keyword = $a[0]), (self.operator = $a[1]), (self.argument = $a[2]), $a;
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', $ObjcKwarg_initialize$1, false), [expression_l], null);
        }, $ObjcKwarg_initialize$1.$$arity = 4), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/syntax_error"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$message']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'SyntaxError');

      var $nesting = [self].concat($parent_nesting), $SyntaxError_initialize$1;

      
      self.$attr_reader("diagnostic");
      return (Opal.def(self, '$initialize', $SyntaxError_initialize$1 = function $$initialize(diagnostic) {
        var $iter = $SyntaxError_initialize$1.$$p, $yield = $iter || nil, self = this;

        if ($iter) $SyntaxError_initialize$1.$$p = null;
        
        self.diagnostic = diagnostic;
        return $send(self, Opal.find_super_dispatcher(self, 'initialize', $SyntaxError_initialize$1, false), [diagnostic.$message()], null);
      }, $SyntaxError_initialize$1.$$arity = 1), nil) && 'initialize';
    })($nesting[0], $$($nesting, 'StandardError'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/clobbering_error"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ClobberingError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'RuntimeError'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/diagnostic"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$freeze', '$attr_reader', '$include?', '$raise', '$join', '$inspect', '$dup', '$%', '$[]', '$==', '$line', '$last_line', '$is?', '$+', '$message', '$render_line', '$first_line_only', '$last_line_only', '$-', '$source_buffer', '$decompose_position', '$end_pos', '$>', '$private', '$source_line', '$*', '$length', '$each', '$line_range', '$intersect', '$column_range', '$size', '$[]=', '$!', '$>=', '$map', '$name', '$!=', '$resize', '$=~', '$source', '$adjust']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Diagnostic');

      var $nesting = [self].concat($parent_nesting), $Diagnostic_initialize$1, $Diagnostic_message$2, $Diagnostic_render$3, $Diagnostic_render_line$4, $Diagnostic_first_line_only$7, $Diagnostic_last_line_only$8;

      self.$$prototype.reason = self.$$prototype["arguments"] = self.$$prototype.location = self.$$prototype.level = self.$$prototype.highlights = nil;
      
      Opal.const_set($nesting[0], 'LEVELS', ["note", "warning", "error", "fatal"].$freeze());
      self.$attr_reader("level", "reason", "arguments");
      self.$attr_reader("location", "highlights");
      
      Opal.def(self, '$initialize', $Diagnostic_initialize$1 = function $$initialize(level, reason, arguments$, location, highlights) {
        var $a, self = this;

        
        
        if (highlights == null) {
          highlights = [];
        };
        if ($truthy($$($nesting, 'LEVELS')['$include?'](level))) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "" + ("" + "Diagnostic#level must be one of " + ($$($nesting, 'LEVELS').$join(", ")) + "; ") + ("" + (level.$inspect()) + " provided."))
        };
        if ($truthy(location)) {
        } else {
          self.$raise("Expected a location")
        };
        self.level = level;
        self.reason = reason;
        self["arguments"] = ($truthy($a = arguments$) ? $a : $hash2([], {})).$dup().$freeze();
        self.location = location;
        self.highlights = highlights.$dup().$freeze();
        return self.$freeze();
      }, $Diagnostic_initialize$1.$$arity = -5);
      
      Opal.def(self, '$message', $Diagnostic_message$2 = function $$message() {
        var self = this;

        return $$($nesting, 'MESSAGES')['$[]'](self.reason)['$%'](self["arguments"])
      }, $Diagnostic_message$2.$$arity = 0);
      
      Opal.def(self, '$render', $Diagnostic_render$3 = function $$render() {
        var $a, $b, self = this, first_line = nil, last_line = nil, num_lines = nil, buffer = nil, last_lineno = nil, last_column = nil;

        if ($truthy(($truthy($a = self.location.$line()['$=='](self.location.$last_line())) ? $a : self.location['$is?']("\n")))) {
          return $rb_plus(["" + (self.location) + ": " + (self.level) + ": " + (self.$message())], self.$render_line(self.location))
        } else {
          
          first_line = self.$first_line_only(self.location);
          last_line = self.$last_line_only(self.location);
          num_lines = $rb_plus($rb_minus(self.location.$last_line(), self.location.$line()), 1);
          buffer = self.location.$source_buffer();
          $b = buffer.$decompose_position(self.location.$end_pos()), $a = Opal.to_ary($b), (last_lineno = ($a[0] == null ? nil : $a[0])), (last_column = ($a[1] == null ? nil : $a[1])), $b;
          return $rb_plus($rb_plus(["" + (self.location) + "-" + (last_lineno) + ":" + (last_column) + ": " + (self.level) + ": " + (self.$message())], self.$render_line(first_line, $rb_gt(num_lines, 2), false)), self.$render_line(last_line, false, true));
        }
      }, $Diagnostic_render$3.$$arity = 0);
      self.$private();
      
      Opal.def(self, '$render_line', $Diagnostic_render_line$4 = function $$render_line(range, ellipsis, range_end) {
        var $$5, $a, $$6, self = this, source_line = nil, highlight_line = nil, $writer = nil;

        
        
        if (ellipsis == null) {
          ellipsis = false;
        };
        
        if (range_end == null) {
          range_end = false;
        };
        source_line = range.$source_line();
        highlight_line = $rb_times(" ", source_line.$length());
        $send(self.highlights, 'each', [], ($$5 = function(highlight){var self = $$5.$$s || this, line_range = nil, $writer = nil;

        
          
          if (highlight == null) {
            highlight = nil;
          };
          line_range = range.$source_buffer().$line_range(range.$line());
          if ($truthy((highlight = highlight.$intersect(line_range)))) {
            
            $writer = [highlight.$column_range(), $rb_times("~", highlight.$size())];
            $send(highlight_line, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            return nil
          };}, $$5.$$s = self, $$5.$$arity = 1, $$5));
        if ($truthy(range['$is?']("\n"))) {
          highlight_line = $rb_plus(highlight_line, "^")
        } else if ($truthy(($truthy($a = range_end['$!']()) ? $rb_ge(range.$size(), 1) : $a))) {
          
          $writer = [range.$column_range(), $rb_plus("^", $rb_times("~", $rb_minus(range.$size(), 1)))];
          $send(highlight_line, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        } else {
          
          $writer = [range.$column_range(), $rb_times("~", range.$size())];
          $send(highlight_line, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        if ($truthy(ellipsis)) {
          highlight_line = $rb_plus(highlight_line, "...")};
        return $send([source_line, highlight_line], 'map', [], ($$6 = function(line){var self = $$6.$$s || this;

        
          
          if (line == null) {
            line = nil;
          };
          return "" + (range.$source_buffer().$name()) + ":" + (range.$line()) + ": " + (line);}, $$6.$$s = self, $$6.$$arity = 1, $$6));
      }, $Diagnostic_render_line$4.$$arity = -2);
      
      Opal.def(self, '$first_line_only', $Diagnostic_first_line_only$7 = function $$first_line_only(range) {
        var self = this;

        if ($truthy(range.$line()['$!='](range.$last_line()))) {
          return range.$resize(range.$source()['$=~'](/\n/))
        } else {
          return range
        }
      }, $Diagnostic_first_line_only$7.$$arity = 1);
      return (Opal.def(self, '$last_line_only', $Diagnostic_last_line_only$8 = function $$last_line_only(range) {
        var self = this;

        if ($truthy(range.$line()['$!='](range.$last_line()))) {
          return range.$adjust($hash2(["begin_pos"], {"begin_pos": range.$source()['$=~'](/[^\n]*$/)}))
        } else {
          return range
        }
      }, $Diagnostic_last_line_only$8.$$arity = 1), nil) && 'last_line_only';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/diagnostic/engine"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_accessor', '$ignore?', '$call', '$raise?', '$raise', '$protected', '$==', '$level']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Engine');

      var $nesting = [self].concat($parent_nesting), $Engine_initialize$1, $Engine_process$2, $Engine_ignore$ques$3, $Engine_raise$ques$4;

      self.$$prototype.consumer = self.$$prototype.ignore_warnings = self.$$prototype.all_errors_are_fatal = nil;
      
      self.$attr_accessor("consumer");
      self.$attr_accessor("all_errors_are_fatal");
      self.$attr_accessor("ignore_warnings");
      
      Opal.def(self, '$initialize', $Engine_initialize$1 = function $$initialize(consumer) {
        var self = this;

        
        
        if (consumer == null) {
          consumer = nil;
        };
        self.consumer = consumer;
        self.all_errors_are_fatal = false;
        return (self.ignore_warnings = false);
      }, $Engine_initialize$1.$$arity = -1);
      
      Opal.def(self, '$process', $Engine_process$2 = function $$process(diagnostic) {
        var self = this;

        
        if ($truthy(self['$ignore?'](diagnostic))) {
        } else if ($truthy(self.consumer)) {
          self.consumer.$call(diagnostic)};
        if ($truthy(self['$raise?'](diagnostic))) {
          self.$raise($$$($$($nesting, 'Parser'), 'SyntaxError'), diagnostic)};
        return self;
      }, $Engine_process$2.$$arity = 1);
      self.$protected();
      
      Opal.def(self, '$ignore?', $Engine_ignore$ques$3 = function(diagnostic) {
        var $a, self = this;

        return ($truthy($a = self.ignore_warnings) ? diagnostic.$level()['$==']("warning") : $a)
      }, $Engine_ignore$ques$3.$$arity = 1);
      return (Opal.def(self, '$raise?', $Engine_raise$ques$4 = function(diagnostic) {
        var $a, $b, self = this;

        return ($truthy($a = ($truthy($b = self.all_errors_are_fatal) ? diagnostic.$level()['$==']("error") : $b)) ? $a : diagnostic.$level()['$==']("fatal"))
      }, $Engine_raise$ques$4.$$arity = 1), nil) && 'raise?';
    })($$($nesting, 'Diagnostic'), null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/static_environment"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$reset', '$[]', '$push', '$dup', '$pop', '$add', '$to_sym', '$include?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'StaticEnvironment');

      var $nesting = [self].concat($parent_nesting), $StaticEnvironment_initialize$1, $StaticEnvironment_reset$2, $StaticEnvironment_extend_static$3, $StaticEnvironment_extend_dynamic$4, $StaticEnvironment_unextend$5, $StaticEnvironment_declare$6, $StaticEnvironment_declared$ques$7;

      self.$$prototype.stack = self.$$prototype.variables = nil;
      
      
      Opal.def(self, '$initialize', $StaticEnvironment_initialize$1 = function $$initialize() {
        var self = this;

        return self.$reset()
      }, $StaticEnvironment_initialize$1.$$arity = 0);
      
      Opal.def(self, '$reset', $StaticEnvironment_reset$2 = function $$reset() {
        var self = this;

        
        self.variables = $$($nesting, 'Set')['$[]']();
        return (self.stack = []);
      }, $StaticEnvironment_reset$2.$$arity = 0);
      
      Opal.def(self, '$extend_static', $StaticEnvironment_extend_static$3 = function $$extend_static() {
        var self = this;

        
        self.stack.$push(self.variables);
        self.variables = $$($nesting, 'Set')['$[]']();
        return self;
      }, $StaticEnvironment_extend_static$3.$$arity = 0);
      
      Opal.def(self, '$extend_dynamic', $StaticEnvironment_extend_dynamic$4 = function $$extend_dynamic() {
        var self = this;

        
        self.stack.$push(self.variables);
        self.variables = self.variables.$dup();
        return self;
      }, $StaticEnvironment_extend_dynamic$4.$$arity = 0);
      
      Opal.def(self, '$unextend', $StaticEnvironment_unextend$5 = function $$unextend() {
        var self = this;

        
        self.variables = self.stack.$pop();
        return self;
      }, $StaticEnvironment_unextend$5.$$arity = 0);
      
      Opal.def(self, '$declare', $StaticEnvironment_declare$6 = function $$declare(name) {
        var self = this;

        
        self.variables.$add(name.$to_sym());
        return self;
      }, $StaticEnvironment_declare$6.$$arity = 1);
      return (Opal.def(self, '$declared?', $StaticEnvironment_declared$ques$7 = function(name) {
        var self = this;

        return self.variables['$include?'](name.$to_sym())
      }, $StaticEnvironment_declared$ques$7.$$arity = 1), nil) && 'declared?';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/lexer"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash = Opal.hash, $truthy = Opal.truthy, $hash2 = Opal.hash2, $range = Opal.range, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_accessor', '$private', '$_lex_trans_keys=', '$-', '$_lex_key_spans=', '$_lex_index_offsets=', '$_lex_indicies=', '$_lex_trans_targs=', '$_lex_trans_actions=', '$_lex_to_state_actions=', '$_lex_from_state_actions=', '$_lex_eof_trans=', '$lex_start=', '$lex_error=', '$lex_en_interp_words=', '$lex_en_interp_string=', '$lex_en_plain_words=', '$lex_en_plain_string=', '$lex_en_interp_backslash_delimited=', '$lex_en_plain_backslash_delimited=', '$lex_en_interp_backslash_delimited_words=', '$lex_en_plain_backslash_delimited_words=', '$lex_en_regexp_modifiers=', '$lex_en_expr_variable=', '$lex_en_expr_fname=', '$lex_en_expr_endfn=', '$lex_en_expr_dot=', '$lex_en_expr_arg=', '$lex_en_expr_cmdarg=', '$lex_en_expr_endarg=', '$lex_en_expr_mid=', '$lex_en_expr_beg=', '$lex_en_expr_labelarg=', '$lex_en_expr_value=', '$lex_en_expr_end=', '$lex_en_leading_dot=', '$lex_en_line_comment=', '$lex_en_line_begin=', '$freeze', '$ord', '$union', '$chars', '$attr_reader', '$reset', '$lex_en_line_begin', '$class', '$new', '$source', '$==', '$encoding', '$unpack', '$[]', '$lex_en_expr_dot', '$lex_en_expr_fname', '$lex_en_expr_value', '$lex_en_expr_beg', '$lex_en_expr_mid', '$lex_en_expr_arg', '$lex_en_expr_cmdarg', '$lex_en_expr_end', '$lex_en_expr_endarg', '$lex_en_expr_endfn', '$lex_en_expr_labelarg', '$lex_en_interp_string', '$lex_en_interp_words', '$lex_en_plain_string', '$fetch', '$invert', '$push', '$count', '$pop', '$any?', '$shift', '$send', '$+', '$size', '$<=', '$===', '$<<', '$>', '$!=', '$emit_comment', '$tok', '$literal', '$flush_string', '$extend_content', '$emit', '$heredoc?', '$saved_herebody_s=', '$start_interp_brace', '$[]=', '$diagnostic', '$range', '$str_s', '$gsub', '$version?', '$nest_and_try_closing', '$heredoc_e', '$pop_literal', '$infer_indent_level', '$words?', '$!', '$eof_codepoint?', '$extend_space', '$extend_string', '$>=', '$active?', '$slice', '$chr', '$munge_escape?', '$regexp?', '$match', '$squiggly_heredoc?', '$scan', '$join', '$=~', '$to_i', '$stack_pop', '$emit_table', '$push_literal', '$arg_or_cmdarg', '$emit_do', '$nil?', '$declared?', '$<', '$getbyte', '$lexpop', '$inspect', '$end_with?', '$empty?', '$index', '$call', '$Float', '$last', '$to_f', '$length', '$lambda', '$Rational', '$Complex', '$start_with?', '$each', '$encode_escape', '$%', '$end_interp_brace_and_try_closing', '$saved_herebody_s', '$next_state_for_literal', '$rstrip', '$&', '$|', '$lex_error', '$protected', '$include?', '$force_encoding', '$process', '$backslash_delimited?', '$interpolate?', '$lex_en_interp_backslash_delimited_words', '$lex_en_plain_backslash_delimited_words', '$lex_en_plain_words', '$lex_en_interp_backslash_delimited', '$lex_en_plain_backslash_delimited', '$dedent_level', '$type', '$lex_en_regexp_modifiers', '$upcase']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Lexer');

    var $nesting = [self].concat($parent_nesting), $Lexer_initialize$1, $Lexer_reset$2, $Lexer_source_buffer$eq$3, $Lexer_encoding$4, $Lexer_state$5, $Lexer_state$eq$6, $Lexer_push_cmdarg$7, $Lexer_pop_cmdarg$8, $Lexer_push_cond$9, $Lexer_pop_cond$10, $Lexer_dedent_level$11, $Lexer_advance$12, $Lexer_eof_codepoint$ques$42, $Lexer_version$ques$43, $Lexer_stack_pop$44, $Lexer_encode_escape$45, $Lexer_tok$46, $Lexer_range$47, $Lexer_emit$48, $Lexer_emit_table$49, $Lexer_emit_do$50, $Lexer_arg_or_cmdarg$51, $Lexer_emit_comment$52, $Lexer_diagnostic$53, $Lexer_push_literal$54, $Lexer_next_state_for_literal$55, $Lexer_literal$56, $Lexer_pop_literal$57, $Lexer$58, $writer = nil;

    self.$$prototype.source_buffer = self.$$prototype.source_pts = self.$$prototype.cs = self.$$prototype.cmdarg_stack = self.$$prototype.cmdarg = self.$$prototype.cond_stack = self.$$prototype.cond = self.$$prototype.dedent_level = self.$$prototype.token_queue = self.$$prototype.p = self.$$prototype.herebody_s = self.$$prototype.sharp_s = self.$$prototype.ts = self.$$prototype.te = self.$$prototype.top = self.$$prototype.stack = self.$$prototype.version = self.$$prototype.escape_s = self.$$prototype.escape = self.$$prototype.act = self.$$prototype.static_env = self.$$prototype.lambda_stack = self.$$prototype.paren_nest = self.$$prototype.num_digits_s = self.$$prototype.num_suffix_s = self.$$prototype.num_base = self.$$prototype.num_xfrm = self.$$prototype.newline_s = self.$$prototype.eq_begin_s = self.$$prototype.cs_before_block_comment = self.$$prototype.in_kwarg = self.$$prototype.tokens = self.$$prototype.command_state = self.$$prototype.comments = self.$$prototype.diagnostics = self.$$prototype.literal_stack = nil;
    
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_trans_keys");
      return self.$private("_lex_trans_keys", "_lex_trans_keys=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[0, 0, 101, 101, 103, 103, 105, 105, 110, 110, 69, 69, 78, 78, 68, 68, 95, 95, 95, 95, 0, 26, 0, 127, 0, 127, 0, 127, 0, 127, 0, 45, 0, 77, 0, 77, 0, 92, 0, 26, 0, 26, 0, 45, 0, 99, 0, 26, 67, 99, 45, 45, 0, 92, 0, 77, 0, 102, 0, 127, 0, 127, 0, 127, 0, 127, 0, 45, 0, 77, 0, 77, 0, 92, 0, 26, 0, 26, 0, 45, 0, 99, 0, 26, 67, 99, 45, 45, 0, 92, 0, 77, 0, 102, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 26, 0, 127, 58, 58, 58, 58, 0, 127, 58, 58, 60, 60, 62, 62, 10, 10, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 115, 115, 99, 99, 117, 117, 101, 101, 108, 116, 101, 101, 115, 115, 115, 115, 105, 105, 108, 108, 105, 105, 108, 108, 58, 58, 0, 127, 10, 10, 0, 127, 9, 92, 10, 10, 9, 92, 58, 58, 98, 98, 101, 101, 103, 103, 105, 105, 110, 110, 0, 122, 61, 61, 9, 92, 9, 92, 9, 92, 9, 92, 9, 92, 10, 10, 0, 127, 0, 127, 61, 126, 0, 127, 0, 127, 93, 93, 0, 127, 0, 127, 10, 10, 34, 34, 10, 10, 39, 39, 0, 127, 96, 96, 0, 45, 0, 77, 0, 77, 0, 92, 0, 26, 0, 26, 0, 45, 0, 99, 0, 26, 67, 99, 45, 45, 0, 92, 0, 77, 0, 102, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 58, 58, 58, 58, 0, 127, 43, 57, 48, 57, 48, 57, 48, 57, 48, 57, 115, 115, 99, 99, 117, 117, 101, 101, 99, 99, 117, 117, 101, 101, 0, 127, 58, 58, 9, 92, 9, 92, 9, 92, 9, 92, 9, 92, 9, 92, 60, 60, 10, 10, 9, 46, 46, 46, 0, 95, 9, 32, 0, 0, 10, 10, 10, 10, 98, 98, 9, 32, 10, 10, 95, 95, 0, 92, 9, 32, 36, 123, 0, 127, 48, 57, 0, 120, 0, 0, 0, 0, 48, 55, 48, 55, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 92, 45, 45, 0, 0, 0, 0, 0, 0, 0, 92, 0, 45, 0, 92, 0, 92, 0, 0, 0, 0, 0, 92, 0, 45, 10, 10, 0, 92, 48, 123, 48, 102, 48, 102, 48, 102, 0, 0, 0, 125, 0, 125, 0, 0, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 0, 48, 102, 0, 0, 0, 92, 36, 123, 0, 127, 48, 57, 0, 120, 0, 0, 0, 0, 48, 55, 48, 55, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 92, 45, 45, 0, 0, 0, 0, 0, 0, 0, 92, 0, 45, 0, 92, 0, 92, 0, 0, 0, 0, 0, 92, 0, 45, 10, 10, 0, 92, 48, 123, 48, 102, 48, 102, 48, 102, 0, 0, 0, 125, 0, 125, 0, 0, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 0, 48, 102, 0, 0, 0, 92, 9, 32, 0, 26, 0, 92, 0, 26, 0, 35, 36, 123, 0, 127, 48, 57, 0, 26, 0, 35, 9, 32, 36, 123, 0, 127, 48, 57, 0, 32, 9, 32, 65, 122, 65, 122, 36, 64, 0, 127, 48, 57, 0, 127, 0, 127, 0, 127, 0, 127, 9, 32, 0, 0, 61, 126, 10, 10, 10, 10, 0, 127, 0, 127, 48, 57, 115, 115, 38, 38, 42, 42, 64, 64, 58, 58, 60, 61, 62, 62, 61, 126, 61, 61, 61, 62, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 93, 93, 10, 10, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 124, 124, 0, 127, 0, 127, 9, 32, 10, 10, 10, 10, 10, 10, 0, 0, 0, 127, 0, 127, 61, 61, 0, 0, 9, 32, 0, 0, 61, 126, 10, 10, 10, 10, 38, 38, 42, 42, 64, 64, 60, 61, 62, 62, 61, 126, 61, 61, 61, 62, 0, 127, 93, 93, 10, 10, 124, 124, 0, 126, 0, 127, 0, 61, 9, 61, 9, 61, 0, 0, 9, 61, 9, 62, 46, 46, 46, 46, 58, 58, 9, 32, 0, 0, 0, 127, 0, 0, 9, 124, 0, 0, 10, 10, 10, 10, 0, 0, 9, 61, 58, 58, 60, 60, 62, 62, 9, 32, 10, 10, 0, 127, 102, 102, 101, 101, 110, 110, 104, 104, 0, 127, 0, 127, 0, 127, 0, 0, 0, 127, 10, 10, 0, 123, 9, 32, 10, 10, 10, 10, 10, 10, 0, 0, 111, 111, 0, 0, 0, 127, 0, 127, 9, 32, 0, 0, 10, 10, 10, 10, 10, 10, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 58, 61, 0, 0, 61, 126, 61, 61, 0, 0, 0, 0, 0, 0, 9, 32, 61, 61, 9, 32, 61, 126, 10, 10, 10, 10, 65, 122, 0, 122, 38, 61, 0, 0, 42, 61, 61, 61, 9, 92, 9, 92, 9, 92, 46, 46, 46, 46, 0, 26, 0, 127, 0, 127, 61, 61, 0, 0, 61, 126, 61, 62, 0, 0, 0, 0, 0, 0, 0, 0, 61, 126, 0, 127, 48, 57, 38, 38, 42, 42, 64, 64, 60, 61, 62, 62, 61, 61, 61, 62, 124, 124, 64, 64, 60, 61, 0, 0, 62, 62, 61, 126, 61, 62, 0, 122, 0, 0, 0, 127, 0, 127, 0, 120, 0, 0, 0, 0, 48, 55, 48, 55, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 92, 45, 45, 0, 0, 0, 0, 0, 0, 0, 92, 0, 45, 0, 92, 0, 92, 0, 0, 0, 0, 0, 92, 0, 45, 10, 10, 0, 92, 48, 123, 48, 102, 48, 102, 48, 102, 0, 0, 0, 125, 0, 125, 0, 0, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 0, 48, 102, 0, 0, 0, 127, 0, 127, 0, 127, 0, 0, 10, 10, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 61, 126, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 0, 61, 124, 0, 92, 9, 32, 0, 0, 10, 10, 10, 10, 10, 10, 0, 0, 0, 127, 0, 127, 9, 32, 0, 0, 10, 10, 10, 10, 10, 10, 0, 0, 0, 127, 0, 127, 61, 61, 0, 0, 9, 32, 0, 0, 61, 126, 10, 10, 10, 10, 0, 127, 0, 127, 48, 57, 61, 61, 38, 61, 0, 0, 0, 0, 42, 61, 61, 62, 46, 57, 46, 46, 48, 101, 48, 95, 46, 120, 48, 114, 43, 57, 48, 105, 102, 102, 0, 0, 101, 105, 0, 0, 0, 0, 48, 114, 48, 114, 48, 114, 48, 114, 105, 114, 102, 102, 0, 0, 101, 105, 115, 115, 0, 0, 0, 0, 48, 114, 48, 114, 48, 114, 48, 114, 48, 114, 48, 114, 48, 114, 48, 114, 46, 114, 48, 114, 46, 114, 48, 114, 58, 58, 60, 61, 62, 62, 61, 126, 61, 61, 61, 62, 0, 127, 0, 127, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 0, 10, 10, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 9, 92, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 0, 61, 124, 0, 0, 9, 46, 9, 46, 46, 46, 10, 61, 10, 10, 10, 101, 10, 110, 10, 100, 10, 10, 0]];
    $send(self, '_lex_trans_keys=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_key_spans");
      return self.$private("_lex_key_spans", "_lex_key_spans=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 27, 128, 128, 128, 128, 46, 78, 78, 93, 27, 27, 46, 100, 27, 33, 1, 93, 78, 103, 128, 128, 128, 128, 46, 78, 78, 93, 27, 27, 46, 100, 27, 33, 1, 93, 78, 103, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 27, 128, 1, 1, 128, 1, 1, 1, 1, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 128, 1, 128, 84, 1, 84, 1, 1, 1, 1, 1, 1, 123, 1, 84, 84, 84, 84, 84, 1, 128, 128, 66, 128, 128, 1, 128, 128, 1, 1, 1, 1, 128, 1, 46, 78, 78, 93, 27, 27, 46, 100, 27, 33, 1, 93, 78, 103, 128, 128, 128, 128, 128, 128, 1, 1, 128, 15, 10, 10, 10, 10, 1, 1, 1, 1, 1, 1, 1, 128, 1, 84, 84, 84, 84, 84, 84, 1, 1, 38, 1, 96, 24, 0, 1, 1, 1, 24, 1, 1, 93, 24, 88, 128, 10, 121, 0, 0, 8, 8, 0, 0, 93, 0, 0, 0, 93, 1, 0, 0, 0, 93, 46, 93, 93, 0, 0, 93, 46, 1, 93, 76, 55, 55, 55, 0, 126, 126, 0, 126, 0, 126, 126, 126, 126, 0, 126, 126, 126, 126, 126, 126, 0, 0, 55, 0, 93, 88, 128, 10, 121, 0, 0, 8, 8, 0, 0, 93, 0, 0, 0, 93, 1, 0, 0, 0, 93, 46, 93, 93, 0, 0, 93, 46, 1, 93, 76, 55, 55, 55, 0, 126, 126, 0, 126, 0, 126, 126, 126, 126, 0, 126, 126, 126, 126, 126, 126, 0, 0, 55, 0, 93, 24, 27, 93, 27, 36, 88, 128, 10, 27, 36, 24, 88, 128, 10, 33, 24, 58, 58, 29, 128, 10, 128, 128, 128, 128, 24, 0, 66, 1, 1, 128, 128, 10, 1, 1, 1, 1, 1, 2, 1, 66, 1, 2, 128, 128, 128, 128, 128, 128, 128, 1, 1, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 1, 128, 128, 24, 1, 1, 1, 0, 128, 128, 1, 0, 24, 0, 66, 1, 1, 1, 1, 1, 2, 1, 66, 1, 2, 128, 1, 1, 1, 127, 128, 62, 53, 53, 0, 53, 54, 1, 1, 1, 24, 0, 128, 0, 116, 0, 1, 1, 0, 53, 1, 1, 1, 24, 1, 128, 1, 1, 1, 1, 128, 128, 128, 0, 128, 1, 124, 24, 1, 1, 1, 0, 1, 0, 128, 128, 24, 0, 1, 1, 1, 0, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 4, 0, 66, 1, 0, 0, 0, 24, 1, 24, 66, 1, 1, 58, 123, 24, 0, 20, 1, 84, 84, 84, 1, 1, 27, 128, 128, 1, 0, 66, 2, 0, 0, 0, 0, 66, 128, 10, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 0, 1, 66, 2, 123, 0, 128, 128, 121, 0, 0, 8, 8, 0, 0, 93, 0, 0, 0, 93, 1, 0, 0, 0, 93, 46, 93, 93, 0, 0, 93, 46, 1, 93, 76, 55, 55, 55, 0, 126, 126, 0, 126, 0, 126, 126, 126, 126, 0, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 0, 0, 55, 0, 128, 128, 128, 0, 1, 0, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 0, 64, 93, 24, 0, 1, 1, 1, 0, 128, 128, 24, 0, 1, 1, 1, 0, 128, 128, 1, 0, 24, 0, 66, 1, 1, 128, 128, 10, 1, 24, 0, 0, 20, 2, 12, 1, 54, 48, 75, 67, 15, 58, 1, 0, 5, 0, 0, 67, 67, 67, 67, 10, 1, 0, 5, 1, 0, 0, 67, 67, 67, 67, 67, 67, 67, 67, 69, 67, 69, 67, 1, 2, 1, 66, 1, 2, 128, 128, 0, 128, 128, 128, 128, 128, 128, 0, 1, 0, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 84, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 0, 64, 0, 38, 38, 1, 52, 1, 92, 101, 91, 1]];
    $send(self, '_lex_key_spans=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_index_offsets");
      return self.$private("_lex_index_offsets", "_lex_index_offsets=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 46, 175, 304, 433, 562, 609, 688, 767, 861, 889, 917, 964, 1065, 1093, 1127, 1129, 1223, 1302, 1406, 1535, 1664, 1793, 1922, 1969, 2048, 2127, 2221, 2249, 2277, 2324, 2425, 2453, 2487, 2489, 2583, 2662, 2766, 2895, 3024, 3153, 3282, 3411, 3540, 3669, 3798, 3927, 4056, 4185, 4314, 4443, 4471, 4600, 4602, 4604, 4733, 4735, 4737, 4739, 4741, 4870, 4999, 5128, 5257, 5386, 5515, 5644, 5773, 5902, 6031, 6160, 6289, 6418, 6547, 6676, 6805, 6934, 7063, 7065, 7067, 7069, 7071, 7081, 7083, 7085, 7087, 7089, 7091, 7093, 7095, 7097, 7226, 7228, 7357, 7442, 7444, 7529, 7531, 7533, 7535, 7537, 7539, 7541, 7665, 7667, 7752, 7837, 7922, 8007, 8092, 8094, 8223, 8352, 8419, 8548, 8677, 8679, 8808, 8937, 8939, 8941, 8943, 8945, 9074, 9076, 9123, 9202, 9281, 9375, 9403, 9431, 9478, 9579, 9607, 9641, 9643, 9737, 9816, 9920, 10049, 10178, 10307, 10436, 10565, 10694, 10696, 10698, 10827, 10843, 10854, 10865, 10876, 10887, 10889, 10891, 10893, 10895, 10897, 10899, 10901, 11030, 11032, 11117, 11202, 11287, 11372, 11457, 11542, 11544, 11546, 11585, 11587, 11684, 11709, 11710, 11712, 11714, 11716, 11741, 11743, 11745, 11839, 11864, 11953, 12082, 12093, 12215, 12216, 12217, 12226, 12235, 12236, 12237, 12331, 12332, 12333, 12334, 12428, 12430, 12431, 12432, 12433, 12527, 12574, 12668, 12762, 12763, 12764, 12858, 12905, 12907, 13001, 13078, 13134, 13190, 13246, 13247, 13374, 13501, 13502, 13629, 13630, 13757, 13884, 14011, 14138, 14139, 14266, 14393, 14520, 14647, 14774, 14901, 14902, 14903, 14959, 14960, 15054, 15143, 15272, 15283, 15405, 15406, 15407, 15416, 15425, 15426, 15427, 15521, 15522, 15523, 15524, 15618, 15620, 15621, 15622, 15623, 15717, 15764, 15858, 15952, 15953, 15954, 16048, 16095, 16097, 16191, 16268, 16324, 16380, 16436, 16437, 16564, 16691, 16692, 16819, 16820, 16947, 17074, 17201, 17328, 17329, 17456, 17583, 17710, 17837, 17964, 18091, 18092, 18093, 18149, 18150, 18244, 18269, 18297, 18391, 18419, 18456, 18545, 18674, 18685, 18713, 18750, 18775, 18864, 18993, 19004, 19038, 19063, 19122, 19181, 19211, 19340, 19351, 19480, 19609, 19738, 19867, 19892, 19893, 19960, 19962, 19964, 20093, 20222, 20233, 20235, 20237, 20239, 20241, 20243, 20246, 20248, 20315, 20317, 20320, 20449, 20578, 20707, 20836, 20965, 21094, 21223, 21225, 21227, 21356, 21485, 21614, 21743, 21872, 22001, 22130, 22259, 22388, 22517, 22646, 22775, 22904, 23033, 23162, 23291, 23420, 23549, 23678, 23807, 23936, 24065, 24194, 24323, 24452, 24581, 24710, 24839, 24968, 25097, 25226, 25355, 25484, 25613, 25742, 25871, 26000, 26129, 26258, 26387, 26516, 26645, 26774, 26903, 27032, 27161, 27290, 27419, 27548, 27677, 27806, 27935, 28064, 28193, 28322, 28451, 28580, 28709, 28838, 28967, 29096, 29225, 29354, 29483, 29612, 29741, 29870, 29999, 30128, 30257, 30386, 30515, 30644, 30773, 30902, 31031, 31160, 31289, 31418, 31547, 31676, 31805, 31934, 31936, 32065, 32194, 32219, 32221, 32223, 32225, 32226, 32355, 32484, 32486, 32487, 32512, 32513, 32580, 32582, 32584, 32586, 32588, 32590, 32593, 32595, 32662, 32664, 32667, 32796, 32798, 32800, 32802, 32930, 33059, 33122, 33176, 33230, 33231, 33285, 33340, 33342, 33344, 33346, 33371, 33372, 33501, 33502, 33619, 33620, 33622, 33624, 33625, 33679, 33681, 33683, 33685, 33710, 33712, 33841, 33843, 33845, 33847, 33849, 33978, 34107, 34236, 34237, 34366, 34368, 34493, 34518, 34520, 34522, 34524, 34525, 34527, 34528, 34657, 34786, 34811, 34812, 34814, 34816, 34818, 34819, 34948, 35077, 35206, 35335, 35464, 35593, 35722, 35851, 35980, 36109, 36238, 36367, 36496, 36625, 36754, 36883, 37012, 37141, 37146, 37147, 37214, 37216, 37217, 37218, 37219, 37244, 37246, 37271, 37338, 37340, 37342, 37401, 37525, 37550, 37551, 37572, 37574, 37659, 37744, 37829, 37831, 37833, 37861, 37990, 38119, 38121, 38122, 38189, 38192, 38193, 38194, 38195, 38196, 38263, 38392, 38403, 38405, 38407, 38409, 38412, 38414, 38416, 38419, 38421, 38423, 38426, 38427, 38429, 38496, 38499, 38623, 38624, 38753, 38882, 39004, 39005, 39006, 39015, 39024, 39025, 39026, 39120, 39121, 39122, 39123, 39217, 39219, 39220, 39221, 39222, 39316, 39363, 39457, 39551, 39552, 39553, 39647, 39694, 39696, 39790, 39867, 39923, 39979, 40035, 40036, 40163, 40290, 40291, 40418, 40419, 40546, 40673, 40800, 40927, 40928, 41055, 41182, 41309, 41436, 41563, 41690, 41817, 41944, 42071, 42198, 42325, 42452, 42579, 42706, 42833, 42960, 43087, 43214, 43341, 43342, 43343, 43399, 43400, 43529, 43658, 43787, 43788, 43790, 43791, 43920, 44049, 44178, 44307, 44436, 44565, 44694, 44823, 44952, 45081, 45210, 45339, 45468, 45597, 45726, 45855, 45984, 46113, 46242, 46371, 46500, 46629, 46758, 46887, 47016, 47145, 47274, 47403, 47532, 47661, 47790, 47919, 48048, 48177, 48306, 48435, 48564, 48693, 48822, 48951, 49080, 49209, 49338, 49467, 49596, 49725, 49854, 49983, 50112, 50241, 50370, 50499, 50628, 50757, 50886, 51015, 51144, 51273, 51402, 51531, 51660, 51727, 51856, 51985, 52114, 52243, 52372, 52501, 52630, 52759, 52888, 53017, 53146, 53275, 53404, 53533, 53662, 53791, 53920, 54049, 54178, 54307, 54436, 54565, 54694, 54823, 54952, 54953, 55018, 55112, 55137, 55138, 55140, 55142, 55144, 55145, 55274, 55403, 55428, 55429, 55431, 55433, 55435, 55436, 55565, 55694, 55696, 55697, 55722, 55723, 55790, 55792, 55794, 55923, 56052, 56063, 56065, 56090, 56091, 56092, 56113, 56116, 56129, 56131, 56186, 56235, 56311, 56379, 56395, 56454, 56456, 56457, 56463, 56464, 56465, 56533, 56601, 56669, 56737, 56748, 56750, 56751, 56757, 56759, 56760, 56761, 56829, 56897, 56965, 57033, 57101, 57169, 57237, 57305, 57375, 57443, 57513, 57581, 57583, 57586, 57588, 57655, 57657, 57660, 57789, 57918, 57919, 58048, 58177, 58306, 58435, 58564, 58693, 58694, 58696, 58697, 58826, 58955, 59084, 59213, 59342, 59471, 59600, 59729, 59858, 59987, 60116, 60245, 60374, 60503, 60632, 60761, 60890, 61019, 61148, 61277, 61406, 61535, 61664, 61793, 61922, 62051, 62180, 62309, 62438, 62567, 62696, 62825, 62954, 63083, 63212, 63341, 63470, 63555, 63684, 63813, 63942, 64071, 64200, 64329, 64458, 64587, 64716, 64845, 64974, 65103, 65232, 65361, 65490, 65619, 65748, 65877, 66006, 66135, 66264, 66393, 66522, 66651, 66780, 66909, 67038, 67167, 67296, 67425, 67554, 67683, 67812, 67941, 68070, 68199, 68328, 68457, 68586, 68715, 68844, 68973, 69102, 69231, 69360, 69489, 69618, 69747, 69876, 70005, 70134, 70263, 70392, 70521, 70650, 70779, 70908, 71037, 71166, 71295, 71424, 71553, 71682, 71811, 71940, 71941, 72006, 72007, 72046, 72085, 72087, 72140, 72142, 72235, 72337, 72429]];
    $send(self, '_lex_index_offsets=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_indicies");
      return self.$private("_lex_indicies", "_lex_indicies=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 12, 14, 12, 14, 14, 12, 12, 14, 14, 14, 15, 14, 14, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 14, 12, 12, 13, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 14, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 14, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 17, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 13, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 13, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 13, 18, 19, 19, 19, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 19, 18, 21, 21, 21, 18, 21, 21, 21, 21, 21, 22, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 18, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 23, 21, 18, 21, 21, 21, 18, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 18, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 24, 21, 18, 25, 25, 25, 18, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 18, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 27, 25, 18, 28, 28, 28, 18, 28, 28, 28, 28, 28, 29, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 18, 28, 18, 28, 28, 28, 18, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 18, 28, 18, 19, 19, 19, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 30, 19, 18, 31, 31, 31, 18, 31, 31, 31, 31, 31, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 18, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 34, 31, 31, 31, 31, 31, 31, 35, 31, 18, 31, 31, 31, 18, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 18, 31, 36, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 37, 18, 37, 18, 18, 38, 38, 38, 18, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 18, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 40, 38, 18, 21, 21, 21, 18, 21, 21, 21, 21, 21, 22, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 18, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 24, 21, 18, 41, 41, 41, 18, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 18, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 41, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 45, 43, 45, 43, 45, 45, 43, 43, 45, 45, 45, 46, 45, 45, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 45, 45, 45, 45, 45, 45, 45, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43, 45, 43, 43, 44, 45, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43, 43, 43, 45, 43, 44, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 43, 43, 43, 43, 43, 43, 43, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 43, 43, 43, 43, 45, 43, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 43, 43, 43, 43, 43, 45, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43, 43, 43, 43, 43, 43, 48, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43, 43, 43, 43, 44, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43, 43, 43, 43, 43, 44, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43, 43, 43, 43, 44, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43, 43, 43, 43, 43, 44, 49, 50, 50, 50, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 50, 49, 52, 52, 52, 49, 52, 52, 52, 52, 52, 53, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 49, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 54, 52, 49, 52, 52, 52, 49, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 49, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 55, 52, 49, 56, 56, 56, 49, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 49, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 58, 56, 49, 59, 59, 59, 49, 59, 59, 59, 59, 59, 60, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 49, 59, 49, 59, 59, 59, 49, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 49, 59, 49, 50, 50, 50, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 61, 50, 49, 62, 62, 62, 49, 62, 62, 62, 62, 62, 63, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 49, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 64, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 65, 62, 62, 62, 62, 62, 62, 66, 62, 49, 62, 62, 62, 49, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 49, 62, 67, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 68, 49, 68, 49, 49, 69, 69, 69, 49, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 49, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 71, 69, 49, 52, 52, 52, 49, 52, 52, 52, 52, 52, 53, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 49, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 55, 52, 49, 72, 72, 72, 49, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 49, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 72, 72, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 73, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 73, 72, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 76, 76, 74, 76, 74, 76, 76, 74, 74, 76, 76, 76, 77, 76, 76, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 76, 76, 76, 76, 76, 76, 76, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 76, 74, 74, 75, 76, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 76, 74, 75, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 74, 74, 74, 74, 74, 74, 74, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 74, 74, 74, 74, 76, 74, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 74, 74, 74, 74, 74, 76, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 79, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 75, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 75, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 75, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 75, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 82, 82, 80, 82, 80, 82, 82, 80, 80, 82, 82, 82, 83, 82, 82, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 82, 82, 82, 82, 82, 82, 82, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 80, 82, 80, 80, 81, 82, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 80, 80, 80, 82, 80, 81, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 80, 80, 80, 80, 80, 80, 80, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 80, 80, 80, 80, 82, 80, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 80, 80, 80, 80, 80, 82, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 80, 80, 80, 80, 80, 80, 85, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 80, 80, 80, 80, 81, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 80, 80, 80, 80, 80, 81, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 80, 80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 80, 80, 80, 80, 81, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 80, 80, 80, 80, 80, 81, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 87, 87, 88, 87, 88, 87, 87, 88, 88, 87, 87, 87, 89, 87, 87, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 87, 87, 87, 87, 87, 87, 87, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 88, 87, 88, 88, 86, 87, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 88, 88, 88, 87, 88, 86, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 88, 88, 88, 88, 88, 88, 88, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 88, 88, 88, 88, 87, 88, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 88, 88, 88, 88, 88, 87, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 88, 88, 88, 88, 88, 88, 92, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 88, 88, 88, 88, 91, 88, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 88, 88, 88, 88, 88, 91, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 88, 88, 88, 88, 88, 88, 88, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 88, 88, 88, 88, 93, 88, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 88, 88, 88, 88, 88, 93, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 94, 94, 94, 94, 94, 94, 94, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 94, 94, 94, 94, 95, 94, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 94, 94, 94, 94, 94, 95, 96, 97, 97, 97, 96, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 96, 97, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 100, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 101, 98, 98, 98, 98, 100, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 98, 98, 98, 98, 99, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 98, 98, 98, 98, 98, 99, 101, 98, 98, 102, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 105, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 103, 103, 103, 103, 105, 103, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 103, 103, 103, 103, 104, 103, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 103, 103, 103, 103, 103, 104, 106, 103, 108, 107, 109, 107, 110, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 112, 107, 112, 112, 112, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 112, 107, 107, 107, 107, 113, 114, 107, 115, 107, 116, 117, 118, 119, 120, 113, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 121, 107, 122, 118, 123, 124, 107, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 125, 126, 118, 127, 111, 107, 111, 111, 111, 111, 111, 111, 111, 111, 128, 111, 111, 111, 111, 111, 111, 111, 111, 129, 111, 111, 130, 111, 131, 111, 111, 111, 132, 133, 107, 127, 107, 111, 107, 107, 107, 107, 107, 107, 107, 107, 107, 134, 107, 134, 134, 134, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 134, 107, 107, 107, 107, 135, 136, 107, 137, 107, 138, 139, 140, 141, 142, 135, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 143, 107, 144, 140, 145, 146, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 147, 148, 140, 109, 104, 107, 104, 104, 104, 104, 104, 104, 104, 104, 149, 104, 104, 104, 104, 104, 104, 104, 104, 150, 104, 104, 151, 104, 152, 104, 104, 104, 153, 154, 107, 109, 107, 104, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 105, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 107, 107, 107, 107, 105, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 104, 107, 104, 104, 104, 104, 104, 155, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 107, 104, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 105, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 107, 107, 107, 107, 105, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 104, 107, 104, 104, 104, 104, 156, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 107, 104, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 105, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 107, 107, 107, 107, 105, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 104, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 157, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 107, 104, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 105, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 107, 107, 107, 107, 105, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 104, 107, 104, 104, 158, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 107, 104, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 105, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 107, 107, 107, 107, 105, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 104, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 159, 104, 104, 104, 104, 104, 107, 107, 107, 107, 107, 104, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 105, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 107, 107, 107, 107, 105, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 104, 107, 104, 104, 104, 104, 155, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 107, 104, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 105, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 107, 107, 107, 107, 105, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 104, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 160, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 107, 104, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 105, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 107, 107, 107, 107, 105, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 104, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 161, 104, 104, 104, 104, 104, 104, 104, 162, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 107, 104, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 105, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 107, 107, 107, 107, 105, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 104, 107, 104, 104, 104, 104, 163, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 107, 104, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 105, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 107, 107, 107, 107, 105, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 104, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 164, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 107, 104, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 105, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 107, 107, 107, 107, 105, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 104, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 155, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 107, 104, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 105, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 107, 107, 107, 107, 105, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 104, 107, 104, 104, 104, 104, 104, 104, 104, 104, 165, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 107, 104, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 105, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 107, 107, 107, 107, 105, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 104, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 155, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 107, 104, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 105, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 107, 107, 107, 107, 105, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 104, 107, 104, 104, 104, 104, 104, 104, 104, 166, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 107, 104, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 105, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 107, 107, 107, 107, 105, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 104, 107, 104, 104, 104, 104, 104, 104, 104, 104, 167, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 107, 104, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 105, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 107, 107, 107, 107, 105, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 104, 107, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 159, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 107, 107, 107, 107, 107, 104, 169, 168, 170, 168, 171, 168, 140, 168, 172, 168, 168, 168, 168, 168, 168, 168, 173, 168, 174, 168, 175, 168, 140, 168, 176, 168, 140, 168, 177, 168, 171, 168, 179, 178, 180, 180, 180, 180, 180, 180, 180, 180, 180, 182, 180, 182, 182, 182, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 182, 180, 180, 180, 180, 180, 180, 180, 183, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 180, 184, 180, 180, 181, 180, 181, 181, 181, 185, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 180, 180, 180, 180, 180, 181, 186, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 188, 180, 188, 188, 188, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 188, 180, 180, 180, 180, 180, 180, 180, 189, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 180, 190, 180, 180, 187, 180, 187, 187, 187, 191, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 180, 180, 180, 180, 180, 187, 193, 192, 193, 193, 193, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 193, 192, 192, 192, 192, 192, 192, 192, 194, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 195, 192, 196, 192, 197, 192, 197, 197, 197, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 197, 192, 192, 192, 192, 192, 192, 192, 198, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 199, 192, 200, 201, 203, 202, 204, 202, 205, 202, 206, 202, 207, 202, 208, 209, 209, 209, 208, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 208, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 209, 209, 209, 209, 209, 209, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 209, 211, 200, 212, 213, 212, 212, 212, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 212, 200, 200, 214, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 216, 200, 217, 218, 217, 217, 217, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 217, 200, 200, 219, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 221, 200, 223, 224, 223, 223, 223, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 223, 222, 222, 225, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 227, 222, 229, 230, 229, 229, 229, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 229, 228, 228, 231, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 233, 228, 229, 234, 229, 229, 229, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 229, 228, 228, 231, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 233, 228, 213, 200, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 237, 237, 235, 237, 235, 237, 237, 235, 235, 237, 237, 237, 238, 237, 237, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 237, 237, 237, 237, 237, 237, 237, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 235, 237, 235, 235, 236, 237, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 235, 235, 235, 237, 235, 236, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 235, 235, 235, 235, 235, 235, 235, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 235, 235, 235, 235, 237, 235, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 235, 235, 235, 235, 235, 237, 240, 237, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 237, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 241, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 235, 235, 235, 235, 236, 235, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 235, 235, 235, 235, 235, 236, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 235, 235, 235, 235, 236, 235, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 235, 235, 235, 235, 235, 236, 240, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 243, 235, 235, 235, 235, 244, 235, 235, 235, 235, 235, 245, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 211, 235, 235, 235, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 235, 235, 235, 235, 242, 246, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 235, 235, 235, 245, 235, 242, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 249, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 248, 248, 248, 248, 248, 248, 248, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 248, 248, 248, 248, 247, 248, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 248, 248, 248, 248, 248, 247, 251, 250, 252, 243, 249, 248, 252, 244, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 243, 235, 235, 235, 235, 244, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 235, 235, 235, 235, 242, 246, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 235, 235, 235, 235, 235, 242, 252, 246, 253, 254, 254, 254, 253, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 253, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 255, 254, 253, 256, 256, 256, 253, 256, 256, 256, 256, 256, 257, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 253, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 258, 256, 253, 256, 256, 256, 253, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 253, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 259, 256, 253, 260, 260, 260, 253, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 253, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 261, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 262, 260, 253, 263, 263, 263, 253, 263, 263, 263, 263, 263, 264, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 253, 263, 253, 263, 263, 263, 253, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 253, 263, 253, 254, 254, 254, 253, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 253, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 265, 254, 253, 266, 266, 266, 253, 266, 266, 266, 266, 266, 267, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 253, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 268, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 269, 266, 266, 266, 266, 266, 266, 270, 266, 253, 266, 266, 266, 253, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 253, 266, 271, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 272, 253, 272, 253, 253, 273, 273, 273, 253, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 253, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 274, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 275, 273, 253, 256, 256, 256, 253, 256, 256, 256, 256, 256, 257, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 253, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 259, 256, 253, 276, 276, 276, 253, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 253, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 276, 276, 276, 276, 276, 276, 276, 277, 277, 277, 277, 277, 277, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 277, 277, 277, 277, 277, 277, 276, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 279, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 280, 200, 200, 281, 200, 279, 200, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 200, 200, 200, 200, 278, 200, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 200, 200, 200, 200, 200, 278, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 279, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 280, 235, 235, 281, 235, 279, 235, 278, 278, 278, 278, 278, 278, 282, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 235, 235, 235, 235, 278, 235, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 235, 235, 235, 235, 235, 278, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 279, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 280, 235, 235, 281, 235, 279, 235, 278, 278, 278, 278, 278, 278, 278, 278, 283, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 235, 235, 235, 235, 278, 235, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 235, 235, 235, 235, 235, 278, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 279, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 280, 235, 235, 281, 235, 279, 235, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 284, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 235, 235, 235, 235, 278, 235, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 235, 235, 235, 235, 235, 278, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 279, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 280, 235, 235, 281, 235, 279, 235, 278, 278, 278, 284, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 235, 235, 235, 235, 278, 235, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 235, 235, 235, 235, 235, 278, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 287, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 288, 285, 285, 285, 285, 287, 285, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 285, 285, 285, 285, 286, 285, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 285, 285, 285, 285, 285, 286, 288, 285, 285, 289, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 290, 290, 290, 290, 290, 290, 290, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 290, 290, 290, 290, 291, 290, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 290, 290, 290, 290, 290, 291, 293, 292, 293, 292, 292, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 292, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 292, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 292, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 296, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 296, 300, 299, 301, 299, 302, 299, 303, 299, 305, 304, 306, 304, 307, 304, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 290, 290, 290, 290, 290, 290, 290, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 290, 290, 290, 290, 308, 290, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 290, 290, 290, 290, 290, 308, 309, 296, 310, 311, 310, 310, 310, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 310, 296, 296, 312, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 313, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 314, 296, 315, 316, 315, 315, 315, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 315, 296, 296, 317, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 318, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 319, 296, 321, 322, 321, 321, 321, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 321, 320, 320, 323, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 324, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 320, 325, 320, 327, 328, 327, 327, 327, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 327, 326, 326, 329, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 330, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 331, 326, 327, 328, 327, 327, 327, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 327, 326, 326, 329, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 332, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 331, 326, 327, 333, 327, 327, 327, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 327, 326, 326, 329, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 330, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 331, 326, 334, 296, 311, 296, 336, 335, 336, 336, 336, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 336, 335, 335, 335, 335, 335, 337, 335, 335, 335, 335, 335, 335, 335, 338, 335, 339, 335, 341, 340, 340, 340, 341, 340, 340, 340, 340, 342, 343, 342, 342, 342, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 341, 340, 340, 340, 340, 340, 342, 340, 340, 344, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 345, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 340, 346, 340, 340, 347, 340, 342, 348, 342, 342, 342, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 342, 348, 349, 350, 351, 352, 353, 355, 354, 357, 358, 357, 357, 357, 356, 356, 356, 356, 356, 356, 356, 356, 356, 356, 356, 356, 356, 356, 356, 356, 356, 356, 357, 356, 343, 354, 359, 354, 361, 360, 360, 360, 361, 360, 360, 360, 360, 362, 363, 362, 362, 362, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 361, 360, 360, 360, 360, 360, 362, 360, 360, 364, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 365, 360, 362, 366, 362, 362, 362, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 362, 366, 368, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 369, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 370, 367, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 371, 371, 371, 371, 371, 371, 371, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 371, 371, 371, 371, 13, 371, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 371, 371, 371, 371, 371, 13, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 371, 374, 373, 373, 373, 374, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 374, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 375, 375, 375, 375, 375, 375, 375, 375, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 376, 373, 373, 373, 373, 373, 373, 373, 373, 373, 377, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 378, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 379, 373, 373, 380, 373, 381, 382, 384, 384, 384, 384, 384, 384, 384, 384, 383, 385, 385, 385, 385, 385, 385, 385, 385, 383, 383, 386, 386, 38, 38, 38, 386, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 386, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 387, 38, 388, 389, 390, 390, 38, 38, 38, 390, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 390, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 391, 38, 37, 390, 392, 393, 394, 394, 25, 25, 25, 394, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 394, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 395, 25, 390, 19, 19, 19, 390, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 390, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 396, 19, 386, 25, 25, 25, 386, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 386, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 27, 25, 386, 397, 397, 397, 386, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 386, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 398, 397, 399, 400, 400, 397, 397, 397, 400, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 400, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 401, 397, 400, 19, 19, 19, 400, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 400, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 396, 19, 402, 400, 400, 25, 25, 25, 400, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 400, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 27, 25, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 403, 403, 403, 403, 403, 403, 403, 404, 404, 404, 404, 404, 404, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 404, 404, 404, 404, 404, 404, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 405, 403, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 403, 403, 403, 403, 403, 403, 403, 406, 406, 406, 406, 406, 406, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 406, 406, 406, 406, 406, 406, 403, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 403, 403, 403, 403, 403, 403, 403, 407, 407, 407, 407, 407, 407, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 407, 407, 407, 407, 407, 407, 403, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 403, 403, 403, 403, 403, 403, 403, 408, 408, 408, 408, 408, 408, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 408, 408, 408, 408, 408, 408, 403, 409, 412, 411, 411, 411, 412, 411, 411, 411, 411, 413, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 412, 411, 411, 411, 411, 411, 413, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 411, 411, 411, 411, 411, 411, 411, 414, 414, 414, 414, 414, 414, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 414, 414, 414, 414, 414, 414, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 415, 411, 412, 411, 411, 411, 412, 411, 411, 411, 411, 410, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 412, 411, 411, 411, 411, 411, 410, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 411, 411, 411, 411, 411, 411, 411, 416, 416, 416, 416, 416, 416, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 416, 416, 416, 416, 416, 416, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 417, 411, 410, 412, 416, 416, 416, 412, 416, 416, 416, 416, 410, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 412, 416, 416, 416, 416, 416, 410, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 410, 416, 418, 412, 419, 419, 419, 412, 419, 419, 419, 419, 413, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 412, 419, 419, 419, 419, 419, 413, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 419, 419, 419, 419, 419, 419, 419, 414, 414, 414, 414, 414, 414, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 414, 414, 414, 414, 414, 414, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 410, 419, 412, 419, 419, 419, 412, 419, 419, 419, 419, 410, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 412, 419, 419, 419, 419, 419, 410, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 419, 419, 419, 419, 419, 419, 419, 416, 416, 416, 416, 416, 416, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 416, 416, 416, 416, 416, 416, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 412, 419, 412, 419, 419, 419, 412, 419, 419, 419, 419, 420, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 412, 419, 419, 419, 419, 419, 420, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 419, 419, 419, 419, 419, 419, 419, 421, 421, 421, 421, 421, 421, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 421, 421, 421, 421, 421, 421, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 422, 419, 412, 419, 419, 419, 412, 419, 419, 419, 419, 420, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 412, 419, 419, 419, 419, 419, 420, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 419, 419, 419, 419, 419, 419, 419, 414, 414, 414, 414, 414, 414, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 414, 414, 414, 414, 414, 414, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 422, 419, 423, 412, 419, 419, 419, 412, 419, 419, 419, 419, 420, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 412, 419, 419, 419, 419, 419, 420, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 419, 419, 419, 419, 419, 419, 419, 424, 424, 424, 424, 424, 424, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 424, 424, 424, 424, 424, 424, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 422, 419, 412, 419, 419, 419, 412, 419, 419, 419, 419, 420, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 412, 419, 419, 419, 419, 419, 420, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 419, 419, 419, 419, 419, 419, 419, 425, 425, 425, 425, 425, 425, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 425, 425, 425, 425, 425, 425, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 422, 419, 412, 419, 419, 419, 412, 419, 419, 419, 419, 420, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 412, 419, 419, 419, 419, 419, 420, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 426, 426, 426, 426, 426, 426, 426, 426, 426, 426, 419, 419, 419, 419, 419, 419, 419, 426, 426, 426, 426, 426, 426, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 426, 426, 426, 426, 426, 426, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 422, 419, 412, 419, 419, 419, 412, 419, 419, 419, 419, 420, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 412, 419, 419, 419, 419, 419, 420, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 419, 419, 419, 419, 419, 419, 419, 427, 427, 427, 427, 427, 427, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 427, 427, 427, 427, 427, 427, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 422, 419, 412, 419, 419, 419, 412, 419, 419, 419, 419, 420, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 412, 419, 419, 419, 419, 419, 420, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 419, 419, 419, 419, 419, 419, 419, 428, 428, 428, 428, 428, 428, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 428, 428, 428, 428, 428, 428, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 422, 419, 412, 419, 419, 419, 412, 419, 419, 419, 419, 410, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 412, 419, 419, 419, 419, 419, 410, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 419, 419, 419, 419, 419, 419, 419, 428, 428, 428, 428, 428, 428, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 428, 428, 428, 428, 428, 428, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 410, 419, 429, 430, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 431, 431, 431, 431, 431, 431, 431, 432, 432, 432, 432, 432, 432, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 432, 432, 432, 432, 432, 432, 431, 431, 434, 433, 433, 433, 434, 433, 433, 433, 433, 433, 435, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 434, 433, 433, 433, 433, 433, 433, 433, 433, 436, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 437, 433, 439, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 440, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 441, 438, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 442, 442, 442, 442, 442, 442, 442, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 442, 442, 442, 442, 44, 442, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 442, 442, 442, 442, 442, 44, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 442, 445, 444, 444, 444, 445, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 445, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 446, 446, 446, 446, 446, 446, 446, 446, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 447, 444, 444, 444, 444, 444, 444, 444, 444, 444, 448, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 449, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 444, 450, 444, 444, 451, 444, 452, 453, 455, 455, 455, 455, 455, 455, 455, 455, 454, 456, 456, 456, 456, 456, 456, 456, 456, 454, 454, 457, 457, 69, 69, 69, 457, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 457, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 458, 69, 459, 460, 461, 461, 69, 69, 69, 461, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 461, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 462, 69, 68, 461, 463, 464, 465, 465, 56, 56, 56, 465, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 465, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 466, 56, 461, 50, 50, 50, 461, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 461, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 467, 50, 457, 56, 56, 56, 457, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 457, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 58, 56, 457, 468, 468, 468, 457, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 457, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 469, 468, 470, 471, 471, 468, 468, 468, 471, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 471, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 472, 468, 471, 50, 50, 50, 471, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 471, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 467, 50, 473, 471, 471, 56, 56, 56, 471, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 471, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 58, 56, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 474, 474, 474, 474, 474, 474, 474, 475, 475, 475, 475, 475, 475, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 475, 475, 475, 475, 475, 475, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 476, 474, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 474, 474, 474, 474, 474, 474, 474, 477, 477, 477, 477, 477, 477, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 477, 477, 477, 477, 477, 477, 474, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 474, 474, 474, 474, 474, 474, 474, 478, 478, 478, 478, 478, 478, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 478, 478, 478, 478, 478, 478, 474, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 474, 474, 474, 474, 474, 474, 474, 479, 479, 479, 479, 479, 479, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 474, 479, 479, 479, 479, 479, 479, 474, 480, 483, 482, 482, 482, 483, 482, 482, 482, 482, 484, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 483, 482, 482, 482, 482, 482, 484, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 482, 482, 482, 482, 482, 482, 482, 485, 485, 485, 485, 485, 485, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 485, 485, 485, 485, 485, 485, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 486, 482, 483, 482, 482, 482, 483, 482, 482, 482, 482, 481, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 483, 482, 482, 482, 482, 482, 481, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 482, 482, 482, 482, 482, 482, 482, 487, 487, 487, 487, 487, 487, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 487, 487, 487, 487, 487, 487, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 488, 482, 481, 483, 487, 487, 487, 483, 487, 487, 487, 487, 481, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 483, 487, 487, 487, 487, 487, 481, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 481, 487, 489, 483, 490, 490, 490, 483, 490, 490, 490, 490, 484, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 483, 490, 490, 490, 490, 490, 484, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 490, 490, 490, 490, 490, 490, 490, 485, 485, 485, 485, 485, 485, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 485, 485, 485, 485, 485, 485, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 481, 490, 483, 490, 490, 490, 483, 490, 490, 490, 490, 481, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 483, 490, 490, 490, 490, 490, 481, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 490, 490, 490, 490, 490, 490, 490, 487, 487, 487, 487, 487, 487, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 487, 487, 487, 487, 487, 487, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 483, 490, 483, 490, 490, 490, 483, 490, 490, 490, 490, 491, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 483, 490, 490, 490, 490, 490, 491, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 490, 490, 490, 490, 490, 490, 490, 492, 492, 492, 492, 492, 492, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 492, 492, 492, 492, 492, 492, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 493, 490, 483, 490, 490, 490, 483, 490, 490, 490, 490, 491, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 483, 490, 490, 490, 490, 490, 491, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 490, 490, 490, 490, 490, 490, 490, 485, 485, 485, 485, 485, 485, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 485, 485, 485, 485, 485, 485, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 493, 490, 494, 483, 490, 490, 490, 483, 490, 490, 490, 490, 491, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 483, 490, 490, 490, 490, 490, 491, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 490, 490, 490, 490, 490, 490, 490, 495, 495, 495, 495, 495, 495, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 495, 495, 495, 495, 495, 495, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 493, 490, 483, 490, 490, 490, 483, 490, 490, 490, 490, 491, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 483, 490, 490, 490, 490, 490, 491, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 490, 490, 490, 490, 490, 490, 490, 496, 496, 496, 496, 496, 496, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 496, 496, 496, 496, 496, 496, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 493, 490, 483, 490, 490, 490, 483, 490, 490, 490, 490, 491, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 483, 490, 490, 490, 490, 490, 491, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 490, 490, 490, 490, 490, 490, 490, 497, 497, 497, 497, 497, 497, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 497, 497, 497, 497, 497, 497, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 493, 490, 483, 490, 490, 490, 483, 490, 490, 490, 490, 491, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 483, 490, 490, 490, 490, 490, 491, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 490, 490, 490, 490, 490, 490, 490, 498, 498, 498, 498, 498, 498, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 498, 498, 498, 498, 498, 498, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 493, 490, 483, 490, 490, 490, 483, 490, 490, 490, 490, 491, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 483, 490, 490, 490, 490, 490, 491, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 490, 490, 490, 490, 490, 490, 490, 499, 499, 499, 499, 499, 499, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 499, 499, 499, 499, 499, 499, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 493, 490, 483, 490, 490, 490, 483, 490, 490, 490, 490, 481, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 483, 490, 490, 490, 490, 490, 481, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 490, 490, 490, 490, 490, 490, 490, 499, 499, 499, 499, 499, 499, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 499, 499, 499, 499, 499, 499, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 481, 490, 500, 501, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 502, 502, 502, 502, 502, 502, 502, 503, 503, 503, 503, 503, 503, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 503, 503, 503, 503, 503, 503, 502, 502, 505, 504, 504, 504, 505, 504, 504, 504, 504, 506, 507, 506, 506, 506, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 505, 504, 504, 504, 504, 504, 506, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 508, 504, 506, 509, 506, 506, 506, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 506, 509, 510, 511, 511, 511, 510, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 510, 511, 513, 512, 512, 512, 513, 512, 512, 512, 512, 512, 514, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 515, 512, 516, 517, 517, 517, 516, 517, 517, 517, 517, 517, 518, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 516, 517, 520, 519, 519, 519, 520, 519, 519, 519, 519, 519, 521, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 520, 519, 519, 519, 519, 519, 519, 519, 519, 522, 519, 524, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 525, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 526, 523, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 527, 527, 527, 527, 527, 527, 527, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 527, 527, 527, 527, 75, 527, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 527, 527, 527, 527, 527, 75, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 527, 529, 528, 528, 528, 529, 528, 528, 528, 528, 528, 530, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 529, 528, 532, 531, 531, 531, 532, 531, 531, 531, 531, 533, 534, 533, 533, 533, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 532, 531, 531, 531, 531, 531, 533, 531, 531, 535, 531, 533, 536, 533, 533, 533, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 533, 536, 538, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 539, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 540, 537, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 541, 541, 541, 541, 541, 541, 541, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 541, 541, 541, 541, 81, 541, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 541, 541, 541, 541, 541, 81, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 541, 543, 542, 542, 542, 543, 542, 542, 542, 542, 544, 545, 544, 544, 544, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 543, 542, 542, 542, 542, 542, 544, 542, 544, 546, 544, 544, 544, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 544, 546, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 547, 547, 547, 547, 547, 547, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 547, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 549, 549, 549, 549, 549, 549, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 549, 550, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 551, 88, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 552, 552, 552, 552, 552, 552, 552, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 552, 552, 552, 552, 86, 552, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 552, 552, 552, 552, 552, 86, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 552, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 553, 553, 553, 553, 553, 553, 553, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 553, 553, 553, 553, 91, 553, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 553, 553, 553, 553, 553, 91, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 554, 554, 554, 554, 554, 554, 554, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 554, 554, 554, 554, 93, 554, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 554, 554, 554, 554, 554, 93, 556, 557, 557, 557, 556, 557, 557, 557, 557, 558, 559, 558, 558, 558, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 556, 557, 557, 557, 557, 557, 558, 560, 557, 561, 562, 563, 564, 557, 557, 557, 565, 566, 557, 566, 557, 567, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 568, 557, 569, 570, 571, 557, 557, 572, 573, 572, 572, 574, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 575, 576, 557, 567, 577, 567, 578, 579, 580, 581, 582, 583, 555, 555, 584, 555, 555, 555, 585, 586, 587, 555, 555, 588, 589, 590, 591, 555, 592, 555, 593, 555, 557, 594, 557, 566, 557, 555, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 596, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 595, 595, 595, 596, 595, 596, 595, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 595, 595, 595, 595, 555, 595, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 595, 595, 595, 595, 595, 555, 558, 597, 558, 558, 558, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 558, 597, 598, 567, 599, 599, 567, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 567, 599, 600, 601, 602, 603, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 95, 95, 604, 95, 604, 95, 95, 604, 604, 95, 95, 95, 606, 95, 95, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 95, 95, 95, 95, 95, 95, 95, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 604, 95, 604, 604, 605, 95, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 604, 604, 604, 95, 604, 605, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 608, 608, 608, 608, 608, 608, 608, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 608, 608, 608, 608, 605, 608, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 608, 608, 608, 608, 608, 605, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 608, 609, 599, 567, 599, 567, 599, 567, 599, 611, 610, 567, 612, 599, 567, 599, 613, 567, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 567, 604, 567, 599, 567, 567, 599, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 596, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 595, 595, 595, 596, 595, 596, 595, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 595, 595, 595, 595, 572, 595, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 595, 595, 595, 595, 595, 572, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 596, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 614, 614, 614, 596, 614, 596, 614, 572, 572, 572, 572, 615, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 614, 614, 614, 614, 572, 614, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 614, 614, 614, 614, 614, 572, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 596, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 614, 614, 614, 596, 614, 596, 614, 572, 572, 572, 572, 572, 572, 616, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 614, 614, 614, 614, 572, 614, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 614, 614, 614, 614, 614, 572, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 596, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 614, 614, 614, 596, 614, 596, 614, 572, 572, 572, 572, 572, 572, 572, 572, 617, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 614, 614, 614, 614, 572, 614, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 614, 614, 614, 614, 614, 572, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 596, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 614, 614, 614, 596, 614, 596, 614, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 618, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 614, 614, 614, 614, 572, 614, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 614, 614, 614, 614, 614, 572, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 596, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 614, 614, 614, 596, 614, 596, 614, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 619, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 614, 614, 614, 614, 572, 614, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 614, 614, 614, 614, 614, 572, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 596, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 614, 614, 614, 596, 614, 596, 614, 572, 572, 572, 618, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 614, 614, 614, 614, 572, 614, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 614, 614, 614, 614, 614, 572, 613, 604, 559, 604, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 621, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 622, 623, 555, 555, 555, 555, 555, 624, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 625, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 626, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 627, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 628, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 629, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 630, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 631, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 632, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 633, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 634, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 635, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 631, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 636, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 635, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 637, 555, 638, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 639, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 640, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 633, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 633, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 641, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 642, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 643, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 644, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 633, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 645, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 646, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 633, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 647, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 648, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 649, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 633, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 650, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 640, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 651, 555, 555, 555, 555, 555, 555, 555, 555, 555, 633, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 652, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 596, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 653, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 653, 653, 653, 596, 653, 596, 653, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 653, 653, 653, 653, 555, 653, 555, 555, 555, 555, 555, 555, 555, 555, 654, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 653, 653, 653, 653, 653, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 655, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 656, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 657, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 658, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 659, 555, 660, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 661, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 633, 555, 555, 555, 662, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 633, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 633, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 663, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 664, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 649, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 665, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 587, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 647, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 633, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 633, 555, 555, 555, 555, 555, 555, 555, 633, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 666, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 667, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 668, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 649, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 669, 555, 555, 555, 670, 555, 555, 555, 555, 555, 671, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 671, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 633, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 633, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 672, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 673, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 674, 675, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 633, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 676, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 649, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 677, 555, 555, 678, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 633, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 644, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 679, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 680, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 662, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 681, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 587, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 682, 555, 555, 555, 555, 555, 555, 555, 555, 555, 676, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 644, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 683, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 684, 555, 555, 555, 555, 555, 555, 555, 685, 555, 555, 555, 555, 555, 555, 555, 686, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 662, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 650, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 670, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 687, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 644, 555, 555, 555, 668, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 688, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 689, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 596, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 596, 620, 596, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 555, 620, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 638, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 620, 620, 620, 620, 620, 555, 567, 599, 691, 692, 692, 692, 691, 692, 692, 692, 692, 693, 692, 693, 693, 693, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 691, 692, 692, 692, 692, 692, 693, 692, 692, 694, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 692, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 692, 695, 692, 692, 690, 692, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 692, 692, 692, 692, 692, 690, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 100, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 696, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 101, 696, 696, 696, 696, 100, 696, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 696, 696, 696, 696, 99, 696, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 696, 696, 696, 696, 696, 99, 693, 697, 693, 693, 693, 697, 697, 697, 697, 697, 697, 697, 697, 697, 697, 697, 697, 697, 697, 697, 697, 697, 697, 693, 697, 698, 699, 700, 701, 702, 696, 703, 705, 706, 706, 706, 705, 706, 706, 706, 706, 707, 708, 707, 707, 707, 706, 706, 706, 706, 706, 706, 706, 706, 706, 706, 706, 706, 705, 706, 706, 706, 706, 706, 707, 709, 706, 710, 706, 711, 712, 706, 706, 706, 713, 714, 706, 714, 706, 711, 706, 706, 706, 706, 706, 706, 706, 706, 706, 706, 706, 706, 715, 716, 717, 706, 706, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 719, 720, 706, 711, 704, 711, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 706, 721, 706, 714, 706, 704, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 723, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 722, 722, 722, 722, 722, 723, 722, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 722, 722, 722, 722, 704, 722, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 722, 722, 722, 722, 722, 704, 725, 724, 726, 707, 727, 707, 707, 707, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 727, 707, 727, 728, 711, 729, 729, 711, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 729, 711, 729, 730, 731, 732, 733, 711, 729, 711, 729, 711, 729, 711, 734, 729, 711, 729, 736, 711, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 711, 735, 711, 729, 711, 711, 729, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 723, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 737, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 737, 737, 737, 737, 737, 723, 737, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 737, 737, 737, 737, 718, 737, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 718, 737, 737, 737, 737, 737, 718, 736, 735, 708, 735, 711, 729, 739, 738, 738, 738, 739, 738, 738, 738, 738, 740, 741, 740, 740, 740, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 739, 738, 738, 738, 738, 738, 740, 738, 738, 742, 738, 109, 743, 738, 744, 738, 745, 109, 140, 746, 142, 109, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 747, 738, 748, 140, 749, 750, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 140, 751, 140, 109, 738, 738, 738, 738, 738, 738, 738, 738, 738, 738, 752, 738, 738, 738, 738, 738, 738, 738, 738, 753, 738, 738, 754, 738, 755, 738, 738, 738, 153, 154, 738, 109, 738, 756, 756, 756, 756, 756, 756, 756, 756, 756, 740, 756, 740, 740, 740, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 740, 756, 756, 756, 756, 135, 136, 756, 137, 756, 138, 139, 140, 141, 142, 135, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 143, 756, 144, 140, 145, 146, 756, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 147, 148, 140, 109, 104, 756, 104, 104, 104, 104, 104, 104, 104, 104, 149, 104, 104, 104, 104, 104, 104, 104, 104, 150, 104, 104, 151, 104, 152, 104, 104, 104, 153, 154, 756, 109, 756, 104, 757, 758, 758, 758, 757, 758, 758, 758, 758, 140, 759, 140, 140, 140, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 757, 758, 758, 758, 758, 758, 140, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 758, 140, 758, 140, 759, 140, 140, 140, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 140, 103, 103, 103, 103, 103, 109, 103, 103, 103, 103, 103, 103, 103, 140, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 140, 103, 140, 759, 140, 140, 140, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 140, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 140, 103, 760, 140, 759, 140, 140, 140, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 140, 761, 761, 761, 761, 761, 761, 761, 761, 761, 762, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 140, 761, 140, 759, 140, 140, 140, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 140, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 140, 140, 103, 763, 757, 140, 757, 765, 764, 767, 768, 767, 767, 767, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 767, 766, 769, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 105, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 106, 757, 757, 757, 757, 105, 757, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 757, 757, 757, 757, 104, 757, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 757, 757, 757, 757, 757, 104, 770, 140, 759, 140, 140, 140, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 140, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 140, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 109, 757, 771, 772, 773, 774, 775, 776, 140, 759, 140, 140, 140, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 140, 757, 757, 757, 757, 757, 757, 757, 757, 757, 109, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 140, 757, 140, 764, 109, 777, 109, 777, 778, 779, 778, 778, 778, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 766, 778, 766, 780, 777, 781, 781, 781, 781, 781, 781, 781, 781, 781, 112, 781, 112, 112, 112, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 112, 781, 781, 781, 781, 113, 114, 781, 115, 781, 116, 117, 118, 119, 120, 113, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 121, 781, 122, 118, 123, 124, 781, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 125, 126, 118, 127, 111, 781, 111, 111, 111, 111, 111, 111, 111, 111, 128, 111, 111, 111, 111, 111, 111, 111, 111, 129, 111, 111, 130, 111, 131, 111, 111, 111, 132, 133, 781, 127, 781, 111, 140, 777, 782, 777, 783, 777, 784, 777, 785, 179, 179, 179, 785, 179, 179, 179, 179, 786, 179, 786, 786, 786, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 785, 179, 179, 179, 179, 179, 786, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 179, 787, 179, 179, 181, 179, 181, 181, 181, 185, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 179, 179, 179, 179, 179, 181, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 788, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 179, 178, 178, 178, 178, 788, 178, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 178, 178, 178, 178, 181, 178, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 178, 178, 178, 178, 178, 181, 789, 789, 789, 789, 789, 789, 789, 789, 789, 182, 789, 182, 182, 182, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 182, 789, 789, 789, 789, 789, 789, 789, 183, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 789, 184, 789, 789, 181, 789, 181, 181, 181, 185, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 789, 789, 789, 789, 789, 181, 790, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 788, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 789, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 179, 789, 789, 789, 789, 788, 789, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 789, 789, 789, 789, 181, 789, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 791, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 789, 789, 789, 789, 789, 181, 186, 789, 793, 792, 792, 792, 793, 792, 792, 792, 792, 794, 792, 794, 794, 794, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 793, 792, 792, 792, 792, 792, 794, 792, 792, 795, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 796, 792, 792, 792, 792, 792, 792, 792, 797, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 792, 798, 792, 794, 799, 794, 794, 794, 799, 799, 799, 799, 799, 799, 799, 799, 799, 799, 799, 799, 799, 799, 799, 799, 799, 799, 794, 799, 800, 801, 802, 803, 805, 804, 806, 807, 804, 808, 810, 811, 811, 811, 810, 811, 811, 811, 811, 812, 813, 812, 812, 812, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 810, 811, 811, 811, 811, 811, 812, 811, 811, 814, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 811, 815, 811, 811, 809, 811, 809, 809, 809, 809, 809, 809, 809, 809, 816, 809, 809, 809, 809, 809, 809, 809, 809, 817, 809, 809, 818, 809, 819, 809, 809, 809, 811, 811, 811, 811, 811, 809, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 820, 820, 820, 820, 820, 820, 820, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 820, 820, 820, 820, 809, 820, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 820, 820, 820, 820, 820, 809, 812, 821, 812, 812, 812, 821, 821, 821, 821, 821, 821, 821, 821, 821, 821, 821, 821, 821, 821, 821, 821, 821, 821, 812, 821, 822, 823, 824, 825, 826, 828, 827, 829, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 809, 830, 809, 809, 809, 809, 809, 831, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 809, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 809, 830, 809, 809, 809, 809, 832, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 809, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 809, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 833, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 809, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 809, 830, 809, 809, 834, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 809, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 809, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 835, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 809, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 809, 830, 809, 809, 809, 809, 831, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 809, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 809, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 836, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 809, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 809, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 837, 809, 809, 809, 809, 809, 809, 809, 838, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 809, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 809, 830, 809, 809, 809, 809, 839, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 809, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 809, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 840, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 809, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 809, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 831, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 809, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 809, 830, 809, 809, 809, 809, 809, 809, 809, 809, 841, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 809, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 809, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 831, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 809, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 809, 830, 809, 809, 809, 809, 809, 809, 809, 842, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 809, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 809, 830, 809, 809, 809, 809, 809, 809, 809, 809, 843, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 809, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 830, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 809, 830, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 835, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 830, 830, 830, 830, 830, 809, 845, 211, 211, 211, 845, 211, 211, 211, 211, 846, 847, 846, 846, 846, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 845, 211, 211, 211, 211, 211, 846, 848, 211, 849, 211, 850, 851, 211, 852, 211, 853, 854, 211, 855, 856, 857, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 858, 211, 859, 860, 861, 862, 211, 863, 864, 863, 863, 865, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 863, 866, 867, 211, 868, 869, 211, 870, 871, 872, 873, 874, 875, 844, 844, 876, 844, 844, 844, 877, 878, 879, 844, 844, 880, 881, 882, 883, 844, 884, 844, 885, 844, 886, 887, 211, 868, 211, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 892, 891, 891, 893, 891, 894, 896, 897, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 898, 895, 900, 899, 901, 902, 903, 846, 904, 846, 846, 846, 904, 904, 904, 904, 904, 904, 904, 904, 904, 904, 904, 904, 904, 904, 904, 904, 904, 904, 846, 904, 906, 905, 908, 909, 908, 908, 908, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 908, 907, 211, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 211, 910, 911, 912, 913, 914, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 916, 916, 916, 916, 916, 916, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 917, 916, 918, 209, 209, 209, 918, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 918, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 209, 209, 209, 209, 209, 209, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 209, 920, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 211, 919, 921, 923, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 211, 922, 211, 200, 212, 213, 212, 212, 212, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 212, 919, 919, 214, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 919, 919, 919, 211, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 216, 919, 229, 230, 229, 229, 229, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 229, 228, 228, 231, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 233, 228, 212, 213, 212, 212, 212, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 212, 919, 919, 214, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 919, 919, 919, 211, 211, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 216, 919, 925, 910, 211, 910, 910, 926, 926, 926, 910, 926, 926, 926, 926, 926, 926, 926, 926, 926, 926, 926, 926, 926, 926, 926, 926, 926, 926, 926, 926, 926, 910, 926, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 928, 929, 910, 930, 237, 931, 929, 910, 910, 932, 933, 910, 933, 910, 237, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 934, 910, 935, 936, 937, 910, 938, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 939, 910, 910, 237, 927, 237, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 910, 940, 910, 941, 910, 927, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 942, 942, 942, 944, 942, 943, 942, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 942, 942, 942, 942, 927, 942, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 927, 942, 942, 942, 942, 942, 927, 946, 945, 947, 949, 950, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 951, 948, 953, 954, 952, 955, 956, 957, 958, 237, 942, 942, 959, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 237, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 942, 942, 942, 942, 942, 942, 942, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 942, 942, 942, 942, 236, 942, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 942, 942, 942, 942, 942, 236, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 942, 960, 942, 237, 942, 237, 942, 237, 961, 942, 237, 942, 237, 942, 237, 237, 942, 960, 942, 959, 942, 962, 963, 910, 964, 211, 910, 868, 211, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 211, 910, 211, 920, 910, 967, 966, 966, 966, 967, 966, 966, 966, 966, 968, 969, 968, 968, 968, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 967, 966, 966, 966, 966, 966, 968, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 966, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 966, 971, 966, 966, 970, 966, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 966, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 972, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 972, 972, 972, 972, 973, 972, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 973, 972, 972, 972, 972, 972, 973, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 974, 974, 974, 974, 974, 974, 974, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 974, 974, 974, 974, 975, 974, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 974, 974, 974, 974, 974, 975, 978, 977, 977, 977, 978, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 978, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 979, 979, 979, 979, 979, 979, 979, 979, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 980, 977, 977, 977, 977, 977, 977, 977, 977, 977, 981, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 982, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 983, 977, 977, 984, 977, 985, 986, 988, 988, 988, 988, 988, 988, 988, 988, 987, 989, 989, 989, 989, 989, 989, 989, 989, 987, 987, 990, 990, 273, 273, 273, 990, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 990, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 274, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 991, 273, 992, 993, 994, 994, 273, 273, 273, 994, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 994, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 274, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 995, 273, 272, 994, 996, 997, 998, 998, 260, 260, 260, 998, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 998, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 261, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 999, 260, 994, 254, 254, 254, 994, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 994, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 1000, 254, 990, 260, 260, 260, 990, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 990, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 261, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 262, 260, 990, 1001, 1001, 1001, 990, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 990, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1002, 1001, 1003, 1004, 1004, 1001, 1001, 1001, 1004, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1004, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1005, 1001, 1004, 254, 254, 254, 1004, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 1004, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 1000, 254, 1006, 1004, 1004, 260, 260, 260, 1004, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 1004, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 261, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 262, 260, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1008, 1008, 1008, 1008, 1008, 1008, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1008, 1008, 1008, 1008, 1008, 1008, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1009, 1007, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1010, 1010, 1010, 1010, 1010, 1010, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1010, 1010, 1010, 1010, 1010, 1010, 1007, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1011, 1011, 1011, 1011, 1011, 1011, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1011, 1011, 1011, 1011, 1011, 1011, 1007, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1012, 1012, 1012, 1012, 1012, 1012, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1012, 1012, 1012, 1012, 1012, 1012, 1007, 1013, 1016, 1015, 1015, 1015, 1016, 1015, 1015, 1015, 1015, 1017, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1016, 1015, 1015, 1015, 1015, 1015, 1017, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1018, 1018, 1018, 1018, 1018, 1018, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1018, 1018, 1018, 1018, 1018, 1018, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1019, 1015, 1016, 1015, 1015, 1015, 1016, 1015, 1015, 1015, 1015, 1014, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1016, 1015, 1015, 1015, 1015, 1015, 1014, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1020, 1020, 1020, 1020, 1020, 1020, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1020, 1020, 1020, 1020, 1020, 1020, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1021, 1015, 1014, 1016, 1020, 1020, 1020, 1016, 1020, 1020, 1020, 1020, 1014, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1016, 1020, 1020, 1020, 1020, 1020, 1014, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1014, 1020, 1022, 1016, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1017, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1023, 1017, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1024, 1024, 1024, 1024, 1024, 1024, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1024, 1024, 1024, 1024, 1024, 1024, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1014, 1023, 1016, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1014, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1023, 1014, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1020, 1020, 1020, 1020, 1020, 1020, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1020, 1020, 1020, 1020, 1020, 1020, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1016, 1023, 1016, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1025, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1023, 1025, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1026, 1026, 1026, 1026, 1026, 1026, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1026, 1026, 1026, 1026, 1026, 1026, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1027, 1023, 1016, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1025, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1023, 1025, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1024, 1024, 1024, 1024, 1024, 1024, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1024, 1024, 1024, 1024, 1024, 1024, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1027, 1023, 1028, 1016, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1025, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1023, 1025, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1029, 1029, 1029, 1029, 1029, 1029, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1029, 1029, 1029, 1029, 1029, 1029, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1027, 1023, 1016, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1025, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1023, 1025, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1030, 1030, 1030, 1030, 1030, 1030, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1030, 1030, 1030, 1030, 1030, 1030, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1027, 1023, 1016, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1025, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1023, 1025, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1031, 1031, 1031, 1031, 1031, 1031, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1031, 1031, 1031, 1031, 1031, 1031, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1027, 1023, 1016, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1025, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1023, 1025, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1032, 1032, 1032, 1032, 1032, 1032, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1032, 1032, 1032, 1032, 1032, 1032, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1027, 1023, 1016, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1025, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1023, 1025, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1033, 1033, 1033, 1033, 1033, 1033, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1033, 1033, 1033, 1033, 1033, 1033, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1027, 1023, 1016, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1014, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1023, 1014, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1033, 1033, 1033, 1033, 1033, 1033, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1033, 1033, 1033, 1033, 1033, 1033, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1014, 1023, 1016, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1035, 1035, 1035, 1035, 1035, 1035, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1035, 1035, 1035, 1035, 1035, 1035, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1027, 1023, 1016, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1036, 1036, 1036, 1036, 1036, 1036, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1036, 1036, 1036, 1036, 1036, 1036, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1027, 1023, 1016, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1037, 1037, 1037, 1037, 1037, 1037, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1037, 1037, 1037, 1037, 1037, 1037, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1014, 1023, 1016, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1038, 1038, 1038, 1038, 1038, 1038, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1038, 1038, 1038, 1038, 1038, 1038, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1014, 1023, 1016, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1039, 1039, 1039, 1039, 1039, 1039, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1039, 1039, 1039, 1039, 1039, 1039, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1014, 1023, 1016, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1040, 1040, 1040, 1040, 1040, 1040, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1040, 1040, 1040, 1040, 1040, 1040, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1014, 1023, 1016, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1041, 1041, 1041, 1041, 1041, 1041, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1041, 1041, 1041, 1041, 1041, 1041, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1014, 1023, 1016, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1033, 1033, 1033, 1033, 1033, 1033, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1033, 1033, 1033, 1033, 1033, 1033, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1014, 1023, 1016, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1042, 1042, 1042, 1042, 1042, 1042, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1042, 1042, 1042, 1042, 1042, 1042, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1027, 1023, 1016, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1043, 1043, 1043, 1043, 1043, 1043, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1043, 1043, 1043, 1043, 1043, 1043, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1027, 1023, 1016, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1044, 1044, 1044, 1044, 1044, 1044, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1044, 1044, 1044, 1044, 1044, 1044, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1027, 1023, 1016, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1045, 1045, 1045, 1045, 1045, 1045, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1045, 1045, 1045, 1045, 1045, 1045, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1027, 1023, 1016, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1016, 1023, 1023, 1023, 1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1033, 1033, 1033, 1033, 1033, 1033, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1033, 1033, 1033, 1033, 1033, 1033, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1027, 1023, 1046, 1047, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1049, 1049, 1049, 1049, 1049, 1049, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1049, 1049, 1049, 1049, 1049, 1049, 1048, 1048, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 279, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 280, 200, 200, 281, 200, 279, 200, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 200, 200, 200, 200, 278, 200, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 200, 200, 200, 200, 200, 278, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 279, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 280, 910, 910, 281, 910, 279, 910, 278, 278, 278, 278, 1050, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 910, 910, 910, 910, 278, 910, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 910, 910, 910, 910, 910, 278, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 279, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 280, 910, 910, 281, 910, 279, 910, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 1051, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 910, 910, 910, 910, 278, 910, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 910, 910, 910, 910, 910, 278, 1052, 1053, 910, 905, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 1054, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 1055, 1056, 844, 844, 844, 844, 844, 1057, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1058, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 1059, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1060, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 1061, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 1062, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1063, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 1064, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 1065, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 1066, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 279, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 200, 200, 281, 200, 279, 200, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 200, 200, 200, 200, 844, 200, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 200, 200, 200, 200, 200, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 1067, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1068, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 1064, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 1069, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1068, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1070, 844, 1071, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 1072, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 1073, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1066, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 1066, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 1074, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1075, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 1076, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 1077, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1066, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 1078, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 1079, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1066, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 1080, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1081, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1082, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 1066, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 1083, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1073, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 1084, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1066, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 1066, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1085, 844, 1086, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1087, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 1066, 844, 844, 844, 1084, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 1066, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1088, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1089, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1082, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 1090, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 879, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1080, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1066, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 1091, 844, 844, 844, 844, 844, 844, 844, 1066, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1092, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 1093, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1094, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1082, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 1095, 844, 844, 844, 1096, 844, 844, 844, 844, 844, 1097, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1097, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1066, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1066, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 1098, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 1099, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1100, 1101, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1066, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 1102, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1103, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 1104, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1107, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1108, 1105, 1105, 1109, 1105, 1107, 1105, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1105, 1105, 1105, 1105, 1106, 1105, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1105, 1105, 1105, 1105, 1105, 1106, 896, 1110, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 895, 898, 895, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1111, 844, 844, 1112, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1066, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1077, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 1113, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1114, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1084, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1115, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 879, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 1116, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1117, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 1077, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1082, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1118, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 1119, 844, 844, 844, 844, 844, 844, 844, 1120, 844, 844, 844, 844, 844, 844, 844, 1121, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 1084, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 1122, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1123, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1091, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 1124, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1091, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 1125, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 1077, 844, 844, 844, 1126, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1127, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 1091, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 1128, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 1129, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 888, 889, 889, 889, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 889, 279, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 280, 888, 888, 281, 888, 279, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 890, 888, 888, 844, 888, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 1071, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 888, 888, 888, 888, 888, 844, 1130, 211, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 910, 920, 910, 1132, 1131, 1131, 1131, 1132, 1131, 1131, 1131, 1131, 1133, 1134, 1133, 1133, 1133, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1132, 1131, 1131, 1131, 1131, 1131, 1133, 1131, 1131, 1135, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1136, 1131, 1133, 1137, 1133, 1133, 1133, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1133, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1143, 1145, 1147, 1148, 1148, 1148, 1147, 1148, 1148, 1148, 1148, 1149, 1150, 1149, 1149, 1149, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1147, 1148, 1148, 1148, 1148, 1148, 1149, 1148, 1151, 1152, 1148, 1148, 1148, 1151, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1148, 1153, 1148, 1148, 1146, 1148, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1148, 1148, 1148, 1148, 1148, 1146, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 287, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 288, 1154, 1154, 1154, 1154, 287, 1154, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 1154, 1154, 1154, 1154, 286, 1154, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 1154, 1154, 1154, 1154, 1154, 286, 1149, 1155, 1149, 1149, 1149, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1149, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1154, 1162, 1164, 1165, 1165, 1165, 1164, 1165, 1165, 1165, 1165, 1166, 1167, 1166, 1166, 1166, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1164, 1165, 1165, 1165, 1165, 1165, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1169, 1174, 1175, 1176, 1172, 1177, 1178, 1179, 1172, 1180, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1189, 1189, 1191, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1192, 1193, 1194, 1172, 1195, 1169, 1196, 1197, 1198, 1199, 1200, 1201, 1163, 1163, 1202, 1163, 1163, 1163, 1203, 1204, 1205, 1163, 1163, 1206, 1207, 1208, 1209, 1163, 1210, 1163, 1211, 1163, 1212, 1213, 1214, 1215, 1165, 1163, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 1216, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 296, 296, 296, 296, 296, 1216, 296, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 296, 296, 296, 296, 1163, 296, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 296, 296, 296, 296, 296, 1163, 1218, 1217, 1219, 1166, 1220, 1166, 1166, 1166, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1166, 1220, 1221, 1223, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1223, 1222, 1224, 1225, 1226, 1227, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 291, 291, 1228, 291, 1228, 291, 291, 1228, 1228, 291, 291, 291, 1229, 291, 291, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 291, 291, 291, 291, 291, 291, 291, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 1228, 291, 1228, 1228, 308, 291, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 1228, 1228, 1228, 291, 1228, 308, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 1231, 1231, 1231, 1231, 308, 1231, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 1231, 1231, 1231, 1231, 1231, 308, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1231, 1232, 296, 1172, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1234, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1232, 1233, 1235, 1236, 1172, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1232, 1237, 1232, 1238, 1233, 1240, 1239, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 1239, 1177, 1241, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1243, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1244, 1242, 1242, 1242, 1242, 1242, 1243, 1242, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 293, 1242, 1246, 1245, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1248, 1245, 1249, 1250, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1251, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1252, 1245, 1245, 1245, 1245, 1245, 1245, 1253, 1245, 1245, 1248, 1245, 1249, 1250, 1245, 1245, 1245, 1254, 1245, 1245, 1245, 1245, 1245, 1251, 1245, 1245, 1255, 1245, 1245, 1245, 1245, 1245, 1252, 1245, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1257, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1258, 1256, 1256, 1256, 1256, 1256, 1257, 1256, 1256, 1256, 1259, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1260, 1256, 1261, 296, 1261, 296, 296, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 296, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1261, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1263, 1262, 1265, 1264, 1266, 1268, 1267, 1267, 1267, 1269, 1267, 1270, 1271, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1253, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1254, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1255, 1245, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1273, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1254, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1255, 1245, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1276, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1277, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1278, 1274, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1279, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1277, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1278, 1274, 1277, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1278, 1274, 1281, 1280, 1282, 1284, 1283, 1283, 1283, 1285, 1283, 1287, 1286, 1288, 1289, 1291, 1291, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1292, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1293, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1294, 1290, 1295, 1295, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1296, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1277, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1278, 1274, 1295, 1295, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1279, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1277, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1278, 1274, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1299, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1300, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1301, 1297, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1304, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1305, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1306, 1302, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1308, 1308, 1308, 1308, 1308, 1308, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1309, 1307, 1308, 1308, 1308, 1308, 1308, 1308, 1307, 1307, 1310, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1311, 1307, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1312, 1312, 1312, 1312, 1312, 1312, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1313, 1274, 1312, 1312, 1312, 1312, 1312, 1312, 1274, 1274, 1277, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1278, 1274, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1312, 1312, 1312, 1312, 1312, 1312, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1279, 1274, 1312, 1312, 1312, 1312, 1312, 1312, 1274, 1274, 1277, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1278, 1274, 1315, 1314, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1317, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1318, 1314, 1314, 1314, 1314, 1314, 1317, 1314, 1314, 1314, 1319, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1320, 1314, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1322, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1319, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1320, 1314, 1323, 1274, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1325, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1326, 1274, 1274, 1274, 1274, 1274, 1325, 1274, 1274, 1274, 1277, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1278, 1274, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1279, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1277, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1278, 1274, 1234, 1241, 1172, 1327, 1233, 1223, 1233, 1328, 1329, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1223, 1241, 1223, 1233, 1223, 1172, 1233, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 1228, 1228, 1228, 1228, 1228, 1228, 1330, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 1228, 1228, 1228, 1228, 308, 1228, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 1228, 1228, 1228, 1228, 1228, 308, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 1216, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1331, 296, 296, 296, 296, 1216, 296, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 296, 296, 296, 296, 1189, 296, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 296, 296, 296, 296, 296, 1189, 1332, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1216, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1331, 1333, 1333, 1333, 1333, 1216, 1333, 1189, 1189, 1189, 1189, 1334, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1333, 1333, 1333, 1333, 1189, 1333, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1333, 1333, 1333, 1333, 1333, 1189, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1216, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1331, 1333, 1333, 1333, 1333, 1216, 1333, 1189, 1189, 1189, 1189, 1189, 1189, 1335, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1333, 1333, 1333, 1333, 1189, 1333, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1333, 1333, 1333, 1333, 1333, 1189, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1216, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1331, 1333, 1333, 1333, 1333, 1216, 1333, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1336, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1333, 1333, 1333, 1333, 1189, 1333, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1333, 1333, 1333, 1333, 1333, 1189, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1216, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1331, 1333, 1333, 1333, 1333, 1216, 1333, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1337, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1333, 1333, 1333, 1333, 1189, 1333, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1333, 1333, 1333, 1333, 1333, 1189, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1216, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1331, 1333, 1333, 1333, 1333, 1216, 1333, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1338, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1333, 1333, 1333, 1333, 1189, 1333, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1333, 1333, 1333, 1333, 1333, 1189, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1216, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1331, 1333, 1333, 1333, 1333, 1216, 1333, 1189, 1189, 1189, 1337, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1333, 1333, 1333, 1333, 1189, 1333, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1333, 1333, 1333, 1333, 1333, 1189, 1339, 1341, 1340, 1342, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1344, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1345, 1346, 1163, 1163, 1163, 1163, 1163, 1347, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1348, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1349, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1350, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1351, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1352, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1353, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1354, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1355, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1356, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1357, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1358, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1359, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1360, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1361, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1362, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1358, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1363, 1163, 1364, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1365, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1366, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1367, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1368, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1369, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1370, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1371, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1372, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1368, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1373, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1374, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1375, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1376, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1377, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1378, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1368, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1379, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1380, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1381, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 310, 311, 310, 310, 310, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 310, 1216, 1382, 312, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1382, 1382, 313, 1382, 1382, 1216, 1382, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1382, 314, 1382, 1382, 1163, 1382, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1382, 1382, 1382, 1382, 1382, 1163, 327, 328, 327, 327, 327, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 327, 326, 326, 329, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 332, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 331, 326, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1384, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1385, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1386, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1216, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1387, 1387, 1387, 1387, 1387, 1216, 1387, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1387, 1387, 1387, 1387, 1163, 1387, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1388, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1387, 1387, 1387, 1387, 1387, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1389, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1390, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1391, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1392, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1393, 1163, 1394, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1395, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1368, 1163, 1163, 1163, 1396, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1368, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1361, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1397, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1398, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1378, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1399, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1205, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1400, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1401, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1361, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1368, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1402, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1368, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1403, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1404, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1405, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1378, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1406, 1163, 1163, 1163, 1407, 1163, 1163, 1163, 1163, 1163, 1408, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1409, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1375, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1361, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1410, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1411, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1412, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1413, 1414, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1361, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1415, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1416, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1402, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1417, 1163, 1163, 1418, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1361, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1419, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1375, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1420, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1421, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1422, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1361, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1423, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1424, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1410, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1425, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1426, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1372, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1401, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1427, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1428, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1429, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1430, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1431, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1367, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1432, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1433, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1402, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1434, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1402, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1435, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1372, 1163, 1163, 1163, 1436, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1437, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1402, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1438, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1439, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1440, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1216, 1343, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1163, 1343, 1163, 1163, 1163, 1410, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1343, 1343, 1343, 1343, 1343, 1163, 1441, 1232, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1172, 1222, 1442, 1444, 1443, 1444, 1444, 1444, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1444, 1443, 1443, 1443, 1443, 1443, 1445, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 338, 1443, 336, 1446, 336, 336, 336, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 336, 1446, 1446, 1446, 1446, 1446, 337, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 338, 1446, 339, 1446, 1448, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1449, 1447, 1448, 1447, 1448, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1451, 1447, 1448, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1452, 1447, 1448, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1453, 1447, 1455, 1453, 0]];
    $send(self, '_lex_indicies=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_trans_targs");
      return self.$private("_lex_trans_targs", "_lex_trans_targs=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[181, 2, 3, 4, 187, 6, 7, 8, 9, 10, 181, 181, 190, 193, 190, 12, 194, 14, 190, 201, 202, 205, 206, 212, 207, 208, 209, 19, 210, 211, 214, 216, 217, 218, 219, 220, 25, 18, 203, 204, 27, 243, 244, 246, 248, 246, 30, 249, 32, 246, 256, 257, 260, 261, 267, 262, 263, 264, 37, 265, 266, 269, 271, 272, 273, 274, 275, 43, 36, 258, 259, 45, 298, 299, 306, 308, 306, 48, 309, 50, 311, 314, 311, 52, 315, 54, 321, 320, 0, 56, 322, 323, 58, 324, 325, 325, 325, 325, 438, 61, 62, 63, 438, 466, 64, 65, 466, 466, 470, 470, 69, 64, 70, 468, 469, 471, 472, 470, 466, 473, 474, 476, 66, 67, 477, 478, 68, 470, 71, 72, 77, 84, 480, 481, 70, 468, 469, 471, 472, 470, 466, 473, 474, 476, 66, 67, 477, 478, 68, 71, 72, 77, 84, 480, 481, 479, 73, 74, 75, 76, 78, 79, 82, 80, 81, 83, 85, 86, 466, 88, 89, 90, 92, 95, 93, 94, 96, 98, 497, 497, 497, 498, 100, 500, 101, 501, 102, 498, 100, 500, 101, 501, 535, 103, 535, 104, 105, 103, 535, 104, 535, 535, 535, 108, 109, 110, 111, 546, 535, 535, 551, 535, 114, 115, 116, 535, 119, 114, 115, 116, 535, 119, 117, 117, 115, 116, 557, 118, 117, 117, 115, 116, 557, 118, 115, 535, 573, 535, 121, 574, 580, 124, 127, 129, 131, 132, 133, 127, 128, 585, 128, 585, 130, 535, 599, 600, 603, 604, 610, 605, 606, 607, 138, 608, 609, 612, 614, 615, 616, 617, 618, 144, 137, 601, 602, 146, 654, 655, 148, 537, 106, 539, 150, 151, 657, 759, 153, 154, 155, 759, 767, 767, 767, 158, 788, 787, 767, 790, 792, 767, 163, 164, 165, 796, 767, 167, 168, 807, 777, 829, 171, 172, 173, 177, 178, 171, 172, 173, 177, 178, 174, 174, 172, 173, 175, 176, 174, 174, 172, 173, 175, 176, 876, 172, 767, 945, 179, 180, 945, 945, 181, 181, 182, 183, 184, 186, 188, 189, 181, 181, 181, 185, 181, 185, 181, 1, 181, 181, 181, 5, 190, 190, 191, 190, 192, 195, 190, 190, 11, 13, 190, 190, 190, 196, 197, 198, 15, 21, 26, 221, 28, 190, 190, 190, 199, 200, 190, 16, 190, 190, 190, 17, 190, 190, 190, 20, 213, 215, 22, 190, 190, 23, 24, 190, 222, 226, 223, 224, 225, 190, 190, 227, 228, 231, 233, 242, 229, 230, 190, 232, 234, 236, 235, 190, 237, 238, 239, 240, 241, 190, 190, 190, 245, 246, 246, 246, 247, 250, 246, 29, 31, 246, 246, 246, 251, 252, 253, 33, 39, 44, 276, 46, 246, 246, 246, 254, 255, 246, 34, 246, 246, 246, 35, 246, 246, 246, 38, 268, 270, 40, 246, 246, 41, 42, 246, 277, 281, 278, 279, 280, 246, 246, 282, 283, 286, 288, 297, 284, 285, 246, 287, 289, 291, 290, 246, 292, 293, 294, 295, 296, 246, 246, 246, 300, 301, 301, 302, 301, 303, 301, 301, 301, 304, 304, 304, 305, 304, 304, 304, 306, 306, 306, 307, 306, 47, 49, 306, 306, 310, 310, 310, 311, 311, 312, 311, 313, 311, 311, 51, 53, 311, 311, 316, 316, 317, 316, 316, 318, 319, 318, 55, 57, 320, 320, 320, 326, 325, 325, 327, 328, 329, 330, 332, 335, 336, 337, 338, 325, 339, 340, 342, 344, 345, 346, 350, 352, 353, 354, 370, 375, 382, 387, 394, 401, 404, 405, 409, 403, 413, 421, 425, 427, 432, 434, 437, 325, 325, 325, 325, 325, 325, 331, 325, 331, 325, 333, 59, 334, 325, 60, 325, 325, 341, 343, 325, 347, 348, 349, 345, 351, 325, 355, 356, 365, 368, 357, 358, 359, 360, 361, 362, 363, 364, 326, 366, 367, 369, 371, 374, 372, 373, 376, 379, 377, 378, 380, 381, 383, 385, 384, 386, 388, 389, 325, 390, 391, 392, 393, 325, 395, 398, 396, 397, 399, 400, 402, 406, 407, 408, 410, 412, 411, 414, 415, 416, 418, 417, 419, 420, 422, 423, 424, 426, 428, 429, 430, 431, 433, 435, 436, 439, 438, 438, 440, 441, 443, 438, 438, 438, 442, 438, 442, 444, 438, 446, 445, 445, 449, 450, 451, 452, 445, 454, 455, 456, 457, 459, 461, 462, 463, 464, 465, 445, 447, 445, 448, 445, 445, 445, 445, 445, 453, 445, 453, 458, 445, 460, 445, 466, 466, 467, 482, 483, 469, 485, 486, 473, 487, 488, 489, 490, 491, 493, 494, 495, 496, 466, 466, 466, 466, 466, 466, 470, 475, 466, 466, 466, 466, 466, 466, 466, 466, 466, 484, 466, 484, 466, 466, 466, 466, 492, 466, 87, 91, 97, 497, 499, 502, 99, 497, 497, 498, 503, 503, 504, 505, 507, 509, 510, 503, 503, 506, 503, 506, 503, 508, 503, 503, 503, 512, 511, 511, 513, 514, 515, 517, 519, 520, 525, 532, 511, 511, 511, 511, 516, 511, 516, 511, 518, 511, 511, 512, 521, 522, 523, 524, 526, 527, 530, 528, 529, 531, 533, 534, 536, 535, 544, 545, 547, 548, 550, 552, 553, 554, 556, 558, 559, 561, 562, 584, 587, 588, 589, 657, 658, 659, 660, 661, 555, 663, 680, 685, 692, 697, 699, 705, 708, 709, 713, 707, 717, 728, 732, 735, 743, 747, 750, 751, 535, 103, 104, 535, 106, 538, 535, 535, 540, 542, 543, 535, 541, 535, 535, 535, 535, 535, 107, 535, 535, 535, 535, 535, 549, 535, 549, 535, 535, 112, 535, 535, 113, 535, 535, 555, 535, 560, 535, 563, 572, 535, 120, 575, 576, 577, 535, 578, 122, 581, 123, 125, 582, 583, 535, 564, 566, 535, 565, 535, 535, 567, 570, 571, 535, 568, 569, 535, 535, 535, 535, 535, 535, 579, 126, 586, 535, 535, 590, 535, 535, 535, 591, 593, 535, 592, 535, 592, 535, 594, 595, 596, 134, 140, 145, 619, 147, 535, 535, 535, 597, 598, 535, 135, 535, 535, 535, 136, 535, 535, 535, 139, 611, 613, 141, 535, 535, 142, 143, 535, 620, 624, 621, 622, 623, 535, 535, 625, 626, 629, 640, 653, 627, 628, 535, 630, 631, 632, 634, 633, 535, 635, 636, 637, 638, 639, 641, 648, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 535, 535, 535, 656, 149, 152, 535, 662, 664, 665, 675, 678, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 679, 681, 684, 682, 683, 686, 689, 687, 688, 690, 691, 693, 695, 694, 696, 698, 700, 702, 701, 703, 704, 706, 674, 710, 711, 712, 714, 716, 715, 718, 719, 720, 725, 721, 722, 723, 535, 536, 537, 106, 724, 542, 726, 727, 729, 730, 731, 733, 734, 736, 737, 738, 741, 739, 740, 742, 744, 745, 746, 748, 749, 535, 752, 752, 753, 754, 755, 757, 752, 752, 752, 756, 752, 756, 752, 758, 752, 760, 759, 759, 761, 762, 759, 763, 765, 759, 759, 759, 759, 764, 759, 764, 766, 759, 768, 767, 767, 771, 772, 773, 767, 774, 776, 779, 780, 781, 782, 783, 767, 784, 785, 789, 817, 821, 767, 822, 824, 826, 767, 827, 828, 830, 834, 836, 837, 767, 839, 857, 862, 869, 877, 884, 891, 896, 897, 901, 895, 906, 916, 922, 925, 934, 938, 942, 943, 944, 779, 769, 767, 770, 767, 767, 767, 767, 767, 767, 775, 767, 775, 767, 156, 778, 767, 767, 767, 767, 767, 767, 767, 767, 767, 786, 767, 767, 157, 159, 767, 160, 798, 809, 812, 791, 813, 814, 799, 803, 805, 767, 791, 160, 793, 795, 161, 767, 793, 767, 794, 767, 767, 162, 797, 767, 767, 800, 802, 767, 800, 801, 803, 805, 802, 767, 804, 767, 767, 806, 808, 767, 166, 767, 767, 767, 810, 802, 803, 805, 810, 811, 767, 800, 802, 803, 805, 767, 800, 802, 803, 805, 767, 815, 802, 803, 805, 815, 816, 767, 160, 817, 791, 818, 803, 805, 819, 802, 160, 819, 791, 820, 823, 825, 767, 169, 170, 767, 767, 831, 832, 833, 828, 835, 767, 767, 838, 767, 767, 840, 841, 850, 855, 842, 843, 844, 845, 846, 847, 848, 849, 768, 851, 852, 853, 854, 768, 856, 858, 861, 859, 860, 768, 768, 863, 866, 864, 865, 867, 868, 768, 870, 872, 871, 873, 874, 875, 767, 767, 878, 768, 879, 767, 880, 881, 882, 883, 769, 885, 888, 886, 887, 889, 890, 892, 893, 894, 768, 898, 899, 900, 902, 904, 905, 903, 768, 907, 908, 909, 912, 910, 911, 913, 914, 915, 917, 919, 918, 920, 921, 923, 924, 926, 927, 929, 932, 928, 930, 931, 933, 935, 936, 937, 939, 940, 941, 767, 767, 945, 946, 947, 945, 949, 948, 950, 948, 951, 952, 953, 948, 948]];
    $send(self, '_lex_trans_targs=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_trans_actions");
      return self.$private("_lex_trans_actions", "_lex_trans_actions=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 7, 0, 8, 0, 7, 0, 0, 0, 0, 8, 7, 0, 8, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 9, 0, 10, 0, 0, 0, 11, 0, 7, 0, 8, 0, 7, 0, 0, 0, 0, 8, 7, 0, 8, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 12, 0, 13, 0, 0, 0, 14, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 17, 18, 19, 20, 21, 0, 0, 0, 22, 23, 0, 0, 24, 25, 26, 27, 28, 29, 29, 30, 31, 29, 32, 31, 33, 31, 29, 29, 30, 29, 34, 29, 29, 35, 29, 29, 29, 29, 29, 29, 0, 36, 37, 0, 38, 37, 39, 37, 0, 0, 36, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 43, 44, 45, 0, 0, 0, 45, 28, 46, 29, 29, 29, 46, 47, 0, 48, 0, 28, 29, 49, 29, 50, 51, 52, 0, 0, 0, 0, 0, 53, 54, 0, 55, 0, 28, 0, 56, 0, 29, 57, 29, 58, 29, 59, 60, 61, 60, 62, 60, 0, 63, 64, 63, 65, 63, 66, 67, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 69, 70, 0, 28, 0, 71, 0, 7, 0, 8, 0, 7, 0, 0, 0, 0, 8, 7, 0, 8, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 72, 73, 0, 0, 0, 74, 75, 76, 77, 0, 7, 7, 78, 79, 79, 80, 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 29, 57, 29, 29, 29, 59, 60, 61, 60, 60, 60, 0, 63, 64, 63, 63, 63, 82, 66, 83, 84, 0, 85, 86, 87, 90, 91, 0, 28, 0, 7, 0, 7, 92, 93, 94, 59, 95, 0, 96, 0, 97, 98, 99, 0, 100, 101, 0, 102, 7, 7, 103, 104, 0, 0, 105, 106, 107, 108, 108, 108, 108, 108, 108, 108, 108, 109, 110, 111, 0, 0, 112, 0, 113, 114, 115, 0, 116, 117, 118, 0, 7, 0, 0, 119, 120, 0, 28, 121, 0, 0, 0, 0, 0, 122, 123, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 126, 127, 128, 0, 129, 130, 131, 7, 7, 132, 0, 0, 133, 134, 135, 108, 108, 108, 108, 108, 108, 108, 108, 136, 137, 138, 0, 0, 139, 0, 140, 141, 142, 0, 143, 144, 145, 0, 7, 0, 0, 146, 147, 0, 28, 148, 0, 0, 0, 0, 0, 149, 150, 0, 0, 0, 0, 0, 0, 0, 151, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 153, 154, 155, 0, 156, 157, 0, 158, 0, 159, 160, 161, 162, 163, 164, 0, 165, 166, 167, 168, 169, 170, 7, 171, 0, 0, 172, 173, 174, 175, 176, 177, 178, 0, 179, 7, 180, 181, 0, 0, 182, 183, 184, 185, 0, 186, 187, 188, 0, 189, 0, 0, 190, 191, 192, 193, 194, 195, 0, 28, 0, 0, 7, 7, 0, 0, 0, 196, 0, 0, 0, 0, 197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 198, 199, 200, 201, 202, 203, 59, 204, 0, 205, 0, 0, 0, 206, 0, 207, 208, 0, 0, 209, 0, 0, 0, 210, 0, 211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212, 0, 0, 0, 0, 213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 214, 215, 0, 0, 0, 216, 217, 218, 59, 219, 0, 28, 220, 0, 221, 222, 0, 28, 0, 0, 223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 0, 225, 0, 226, 227, 228, 229, 230, 59, 231, 0, 0, 232, 0, 233, 234, 235, 236, 28, 0, 27, 0, 0, 27, 0, 0, 0, 0, 0, 0, 7, 7, 7, 237, 238, 239, 240, 241, 242, 243, 0, 244, 245, 246, 247, 248, 249, 250, 251, 252, 59, 253, 0, 254, 255, 256, 257, 258, 259, 0, 0, 0, 260, 7, 7, 0, 261, 262, 263, 264, 265, 0, 0, 0, 0, 0, 266, 267, 59, 268, 0, 269, 28, 270, 271, 272, 273, 274, 275, 0, 28, 0, 0, 0, 0, 0, 0, 276, 277, 278, 279, 59, 280, 0, 281, 28, 282, 283, 284, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 285, 286, 0, 8, 0, 0, 7, 287, 0, 0, 287, 287, 0, 0, 7, 7, 0, 288, 0, 288, 288, 288, 0, 0, 288, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 0, 288, 289, 290, 290, 291, 292, 0, 293, 294, 0, 72, 0, 295, 0, 296, 297, 298, 299, 300, 29, 301, 302, 303, 304, 305, 59, 306, 0, 307, 308, 0, 309, 310, 0, 311, 312, 287, 313, 0, 314, 0, 0, 315, 0, 0, 0, 0, 316, 0, 0, 0, 0, 0, 0, 0, 317, 0, 0, 318, 0, 319, 320, 0, 0, 0, 321, 0, 0, 322, 323, 324, 325, 326, 327, 0, 0, 0, 328, 329, 0, 330, 331, 332, 0, 7, 333, 334, 335, 0, 336, 108, 108, 108, 108, 108, 108, 108, 108, 337, 338, 339, 0, 0, 340, 0, 341, 342, 343, 0, 344, 345, 346, 0, 7, 0, 0, 347, 348, 0, 28, 349, 0, 0, 0, 0, 0, 350, 351, 0, 0, 0, 0, 0, 0, 0, 352, 0, 0, 0, 0, 0, 353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 354, 355, 356, 0, 0, 0, 357, 28, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 72, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 358, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 359, 360, 361, 362, 363, 363, 359, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 364, 365, 366, 0, 28, 0, 0, 367, 368, 369, 59, 370, 0, 371, 28, 372, 7, 373, 374, 0, 28, 375, 0, 0, 376, 377, 378, 379, 59, 380, 0, 28, 381, 382, 383, 384, 0, 28, 0, 385, 0, 7, 386, 0, 0, 0, 0, 387, 0, 0, 388, 388, 0, 389, 0, 0, 0, 390, 7, 391, 391, 391, 0, 0, 392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 393, 394, 395, 0, 396, 397, 398, 399, 400, 401, 59, 402, 0, 403, 0, 0, 404, 405, 406, 407, 408, 409, 410, 411, 412, 0, 413, 414, 0, 0, 415, 416, 417, 0, 0, 418, 0, 0, 417, 419, 419, 420, 421, 0, 422, 423, 0, 424, 425, 426, 0, 427, 428, 0, 0, 429, 430, 417, 417, 431, 0, 0, 432, 432, 0, 433, 0, 434, 435, 7, 0, 436, 0, 437, 438, 439, 440, 440, 441, 441, 0, 0, 442, 443, 443, 444, 444, 445, 446, 446, 447, 447, 448, 449, 449, 450, 450, 0, 0, 451, 452, 453, 454, 455, 456, 456, 453, 455, 457, 388, 458, 0, 0, 0, 459, 0, 0, 460, 461, 391, 391, 391, 462, 391, 463, 464, 28, 465, 466, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 467, 0, 0, 0, 0, 462, 0, 0, 0, 0, 0, 468, 469, 0, 0, 0, 0, 0, 0, 470, 0, 0, 0, 0, 0, 469, 471, 472, 0, 473, 0, 474, 0, 0, 0, 0, 475, 0, 0, 0, 0, 0, 0, 0, 0, 0, 476, 0, 0, 0, 0, 0, 0, 0, 475, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 477, 478, 479, 7, 85, 480, 0, 481, 0, 482, 0, 0, 0, 483, 484]];
    $send(self, '_lex_trans_actions=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_to_state_actions");
      return self.$private("_lex_to_state_actions", "_lex_to_state_actions=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer
    $send(self, '_lex_to_state_actions=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_from_state_actions");
      return self.$private("_lex_from_state_actions", "_lex_from_state_actions=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer
    $send(self, '_lex_from_state_actions=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_eof_trans");
      return self.$private("_lex_eof_trans", "_lex_eof_trans=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 13, 13, 13, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 44, 44, 44, 44, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 75, 75, 75, 75, 81, 81, 81, 81, 0, 0, 0, 0, 95, 97, 99, 99, 99, 104, 104, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 179, 181, 181, 181, 193, 193, 193, 201, 203, 203, 203, 203, 203, 209, 201, 201, 201, 201, 201, 201, 201, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 201, 236, 236, 236, 236, 286, 286, 286, 291, 293, 293, 293, 297, 297, 300, 300, 300, 300, 305, 305, 305, 291, 297, 297, 297, 297, 297, 297, 297, 297, 297, 336, 336, 0, 349, 350, 351, 353, 355, 357, 355, 355, 0, 367, 368, 372, 372, 373, 382, 383, 384, 384, 384, 387, 387, 389, 390, 391, 391, 391, 393, 394, 395, 395, 391, 387, 387, 400, 401, 401, 401, 401, 401, 404, 404, 404, 404, 410, 411, 411, 411, 411, 419, 411, 411, 411, 411, 424, 411, 411, 411, 411, 411, 411, 430, 431, 432, 432, 0, 439, 443, 443, 444, 453, 454, 455, 455, 455, 458, 458, 460, 461, 462, 462, 462, 464, 465, 466, 466, 462, 458, 458, 471, 472, 472, 472, 472, 472, 475, 475, 475, 475, 481, 482, 482, 482, 482, 490, 482, 482, 482, 482, 495, 482, 482, 482, 482, 482, 482, 501, 502, 503, 503, 0, 510, 511, 0, 517, 0, 524, 528, 528, 0, 0, 537, 538, 542, 542, 0, 547, 0, 550, 0, 553, 553, 554, 555, 0, 596, 598, 599, 600, 601, 603, 605, 609, 609, 600, 600, 600, 600, 611, 600, 600, 605, 600, 600, 596, 615, 615, 615, 615, 615, 615, 605, 605, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 654, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 600, 0, 697, 698, 699, 701, 697, 704, 0, 723, 725, 727, 728, 729, 730, 731, 733, 730, 730, 730, 730, 730, 736, 730, 730, 738, 736, 736, 730, 0, 757, 758, 104, 104, 761, 762, 104, 758, 758, 765, 767, 770, 758, 771, 758, 772, 773, 775, 777, 758, 765, 778, 778, 767, 778, 782, 778, 778, 778, 778, 0, 179, 790, 791, 790, 790, 0, 800, 801, 803, 805, 807, 805, 809, 0, 821, 822, 823, 824, 826, 828, 830, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 831, 0, 889, 892, 895, 896, 900, 902, 903, 904, 905, 906, 908, 911, 912, 914, 916, 919, 920, 922, 923, 201, 920, 925, 920, 911, 911, 911, 911, 943, 946, 948, 949, 953, 956, 957, 958, 959, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 911, 965, 911, 911, 911, 966, 973, 973, 975, 977, 986, 987, 988, 988, 988, 991, 991, 993, 994, 995, 995, 995, 997, 998, 999, 999, 995, 991, 991, 1004, 1005, 1005, 1005, 1005, 1005, 1008, 1008, 1008, 1008, 1014, 1015, 1015, 1015, 1015, 1023, 1015, 1015, 1015, 1015, 1029, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1047, 1048, 1049, 1049, 201, 911, 911, 1053, 911, 906, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 201, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 1106, 896, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 889, 1131, 911, 0, 1138, 1139, 1140, 1142, 1144, 1146, 0, 1155, 1156, 1157, 1158, 1160, 1155, 1163, 0, 297, 1218, 1220, 1221, 1222, 1223, 1225, 1227, 1229, 1232, 1232, 297, 1234, 1236, 1237, 1238, 1234, 1240, 1242, 1243, 1243, 1246, 1257, 297, 1263, 1265, 1267, 1268, 1271, 1272, 1246, 1246, 1275, 1275, 1275, 1281, 1283, 1284, 1287, 1289, 1290, 1291, 1275, 1275, 1298, 1303, 1308, 1275, 1275, 1315, 1315, 1275, 1275, 1242, 1234, 1234, 1242, 1234, 1234, 1229, 297, 1333, 1334, 1334, 1334, 1334, 1334, 1334, 1340, 1229, 1343, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1383, 1384, 1344, 1344, 1388, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1442, 1223, 1443, 0, 1447, 1447, 0, 1451, 1451, 1451, 1451, 1455]];
    $send(self, '_lex_eof_trans=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_start")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [181];
    $send(self, 'lex_start=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_error")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [0];
    $send(self, 'lex_error=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_interp_words")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [190];
    $send(self, 'lex_en_interp_words=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_interp_string")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [246];
    $send(self, 'lex_en_interp_string=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_plain_words")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [301];
    $send(self, 'lex_en_plain_words=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_plain_string")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [304];
    $send(self, 'lex_en_plain_string=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_interp_backslash_delimited")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [306];
    $send(self, 'lex_en_interp_backslash_delimited=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_plain_backslash_delimited")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [310];
    $send(self, 'lex_en_plain_backslash_delimited=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_interp_backslash_delimited_words")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [311];
    $send(self, 'lex_en_interp_backslash_delimited_words=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_plain_backslash_delimited_words")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [316];
    $send(self, 'lex_en_plain_backslash_delimited_words=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_regexp_modifiers")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [318];
    $send(self, 'lex_en_regexp_modifiers=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_variable")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [320];
    $send(self, 'lex_en_expr_variable=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_fname")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [325];
    $send(self, 'lex_en_expr_fname=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_endfn")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [438];
    $send(self, 'lex_en_expr_endfn=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_dot")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [445];
    $send(self, 'lex_en_expr_dot=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_arg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [466];
    $send(self, 'lex_en_expr_arg=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_cmdarg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [497];
    $send(self, 'lex_en_expr_cmdarg=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_endarg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [503];
    $send(self, 'lex_en_expr_endarg=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_mid")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [511];
    $send(self, 'lex_en_expr_mid=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_beg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [535];
    $send(self, 'lex_en_expr_beg=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_labelarg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [752];
    $send(self, 'lex_en_expr_labelarg=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_value")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [759];
    $send(self, 'lex_en_expr_value=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_end")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [767];
    $send(self, 'lex_en_expr_end=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_leading_dot")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [945];
    $send(self, 'lex_en_leading_dot=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_line_comment")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [948];
    $send(self, 'lex_en_line_comment=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_line_begin")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [181];
    $send(self, 'lex_en_line_begin=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    Opal.const_set($nesting[0], 'ESCAPES', $hash("a".$ord(), "\u0007", "b".$ord(), "\b", "e".$ord(), "\u001b", "f".$ord(), "\f", "n".$ord(), "\n", "r".$ord(), "\r", "s".$ord(), " ", "t".$ord(), "\t", "v".$ord(), "\v", "\\".$ord(), "\\").$freeze());
    Opal.const_set($nesting[0], 'REGEXP_META_CHARACTERS', $send($$($nesting, 'Regexp'), 'union', Opal.to_a("\\$()*+.<>?[]^{|}".$chars())).$freeze());
    self.$attr_reader("source_buffer");
    self.$attr_accessor("diagnostics");
    self.$attr_accessor("static_env");
    self.$attr_accessor("force_utf32");
    self.$attr_accessor("cond", "cmdarg", "in_kwarg");
    self.$attr_accessor("tokens", "comments");
    
    Opal.def(self, '$initialize', $Lexer_initialize$1 = function $$initialize(version) {
      var self = this;

      
      self.version = version;
      self.static_env = nil;
      self.tokens = nil;
      self.comments = nil;
      return self.$reset();
    }, $Lexer_initialize$1.$$arity = 1);
    
    Opal.def(self, '$reset', $Lexer_reset$2 = function $$reset(reset_state) {
      var self = this;

      
      
      if (reset_state == null) {
        reset_state = true;
      };
      if ($truthy(reset_state)) {
        
        self.cs = self.$class().$lex_en_line_begin();
        self.cond = $$($nesting, 'StackState').$new("cond");
        self.cmdarg = $$($nesting, 'StackState').$new("cmdarg");
        self.cond_stack = [];
        self.cmdarg_stack = [];};
      self.force_utf32 = false;
      self.source_pts = nil;
      self.p = 0;
      self.ts = nil;
      self.te = nil;
      self.act = 0;
      self.stack = [];
      self.top = 0;
      self.token_queue = [];
      self.literal_stack = [];
      self.eq_begin_s = nil;
      self.sharp_s = nil;
      self.newline_s = nil;
      self.num_base = nil;
      self.num_digits_s = nil;
      self.num_suffix_s = nil;
      self.num_xfrm = nil;
      self.escape_s = nil;
      self.escape = nil;
      self.herebody_s = nil;
      self.paren_nest = 0;
      self.lambda_stack = [];
      self.dedent_level = nil;
      self.command_state = false;
      self.in_kwarg = false;
      return (self.cs_before_block_comment = self.$class().$lex_en_line_begin());
    }, $Lexer_reset$2.$$arity = -1);
    
    Opal.def(self, '$source_buffer=', $Lexer_source_buffer$eq$3 = function(source_buffer) {
      var self = this, source = nil;

      
      self.source_buffer = source_buffer;
      if ($truthy(self.source_buffer)) {
        
        source = self.source_buffer.$source();
        if (source.$encoding()['$==']($$$($$($nesting, 'Encoding'), 'UTF_8'))) {
          self.source_pts = source.$unpack("U*")
        } else {
          self.source_pts = source.$unpack("C*")
        };
        if (self.source_pts['$[]'](0)['$=='](65279)) {
          return (self.p = 1)
        } else {
          return nil
        };
      } else {
        return (self.source_pts = nil)
      };
    }, $Lexer_source_buffer$eq$3.$$arity = 1);
    
    Opal.def(self, '$encoding', $Lexer_encoding$4 = function $$encoding() {
      var self = this;

      return self.source_buffer.$source().$encoding()
    }, $Lexer_encoding$4.$$arity = 0);
    Opal.const_set($nesting[0], 'LEX_STATES', $hash2(["line_begin", "expr_dot", "expr_fname", "expr_value", "expr_beg", "expr_mid", "expr_arg", "expr_cmdarg", "expr_end", "expr_endarg", "expr_endfn", "expr_labelarg", "interp_string", "interp_words", "plain_string", "plain_words"], {"line_begin": self.$lex_en_line_begin(), "expr_dot": self.$lex_en_expr_dot(), "expr_fname": self.$lex_en_expr_fname(), "expr_value": self.$lex_en_expr_value(), "expr_beg": self.$lex_en_expr_beg(), "expr_mid": self.$lex_en_expr_mid(), "expr_arg": self.$lex_en_expr_arg(), "expr_cmdarg": self.$lex_en_expr_cmdarg(), "expr_end": self.$lex_en_expr_end(), "expr_endarg": self.$lex_en_expr_endarg(), "expr_endfn": self.$lex_en_expr_endfn(), "expr_labelarg": self.$lex_en_expr_labelarg(), "interp_string": self.$lex_en_interp_string(), "interp_words": self.$lex_en_interp_words(), "plain_string": self.$lex_en_plain_string(), "plain_words": self.$lex_en_plain_string()}));
    
    Opal.def(self, '$state', $Lexer_state$5 = function $$state() {
      var self = this;

      return $$($nesting, 'LEX_STATES').$invert().$fetch(self.cs, self.cs)
    }, $Lexer_state$5.$$arity = 0);
    
    Opal.def(self, '$state=', $Lexer_state$eq$6 = function(state) {
      var self = this;

      return (self.cs = $$($nesting, 'LEX_STATES').$fetch(state))
    }, $Lexer_state$eq$6.$$arity = 1);
    
    Opal.def(self, '$push_cmdarg', $Lexer_push_cmdarg$7 = function $$push_cmdarg() {
      var self = this;

      
      self.cmdarg_stack.$push(self.cmdarg);
      return (self.cmdarg = $$($nesting, 'StackState').$new("" + "cmdarg." + (self.cmdarg_stack.$count())));
    }, $Lexer_push_cmdarg$7.$$arity = 0);
    
    Opal.def(self, '$pop_cmdarg', $Lexer_pop_cmdarg$8 = function $$pop_cmdarg() {
      var self = this;

      return (self.cmdarg = self.cmdarg_stack.$pop())
    }, $Lexer_pop_cmdarg$8.$$arity = 0);
    
    Opal.def(self, '$push_cond', $Lexer_push_cond$9 = function $$push_cond() {
      var self = this;

      
      self.cond_stack.$push(self.cond);
      return (self.cond = $$($nesting, 'StackState').$new("" + "cond." + (self.cond_stack.$count())));
    }, $Lexer_push_cond$9.$$arity = 0);
    
    Opal.def(self, '$pop_cond', $Lexer_pop_cond$10 = function $$pop_cond() {
      var self = this;

      return (self.cond = self.cond_stack.$pop())
    }, $Lexer_pop_cond$10.$$arity = 0);
    
    Opal.def(self, '$dedent_level', $Lexer_dedent_level$11 = function $$dedent_level() {
      var $a, self = this, dedent_level = nil;

      
      $a = [self.dedent_level, nil], (dedent_level = $a[0]), (self.dedent_level = $a[1]), $a;
      return dedent_level;
    }, $Lexer_dedent_level$11.$$arity = 0);
    
    Opal.def(self, '$advance', $Lexer_advance$12 = function $$advance() {
      var $a, $b, $c, $$13, $$14, $$15, $$16, $$17, $$18, $$19, $$20, $$21, $$22, $$23, $$24, $$25, $$26, $$27, $$28, $$29, $$30, $$31, $$32, $$33, $$34, $$35, $$36, $$37, $$38, $$39, $$40, $$41, self = this, klass = nil, _lex_trans_keys = nil, _lex_key_spans = nil, _lex_index_offsets = nil, _lex_indicies = nil, _lex_trans_targs = nil, _lex_trans_actions = nil, _lex_to_state_actions = nil, _lex_from_state_actions = nil, _lex_eof_trans = nil, pe = nil, p = nil, eof = nil, testEof = nil, _slen = nil, _trans = nil, _keys = nil, _inds = nil, _acts = nil, _nacts = nil, _goto_level = nil, _resume = nil, _eof_trans = nil, _again = nil, _test_eof = nil, _out = nil, $case = nil, _wide = nil, tm = nil, heredoc_e = nil, ident_tok = nil, ident_ts = nil, ident_te = nil, current_literal = nil, $writer = nil, line = nil, string = nil, lookahead = nil, token = nil, escaped_char = nil, unknown_options = nil, type = nil, delimiter = nil, escape = nil, ident = nil, value = nil, digits = nil, invalid_idx = nil, invalid_s = nil, codepoints = nil, codepoint_s = nil, spaces_p = nil, codepoint = nil, new_herebody_s = nil, indent = nil, dedent_body = nil;

      
      if ($truthy(self.token_queue['$any?']())) {
        return self.token_queue.$shift()};
      klass = self.$class();
      _lex_trans_keys = klass.$send("_lex_trans_keys");
      _lex_key_spans = klass.$send("_lex_key_spans");
      _lex_index_offsets = klass.$send("_lex_index_offsets");
      _lex_indicies = klass.$send("_lex_indicies");
      _lex_trans_targs = klass.$send("_lex_trans_targs");
      _lex_trans_actions = klass.$send("_lex_trans_actions");
      _lex_to_state_actions = klass.$send("_lex_to_state_actions");
      _lex_from_state_actions = klass.$send("_lex_from_state_actions");
      _lex_eof_trans = klass.$send("_lex_eof_trans");
      pe = $rb_plus(self.source_pts.$size(), 2);
      $a = [self.p, pe], (p = $a[0]), (eof = $a[1]), $a;
      self.command_state = ($truthy($a = self.cs['$=='](klass.$lex_en_expr_value())) ? $a : self.cs['$=='](klass.$lex_en_line_begin()));
      
      testEof = false;
      $b = nil, $a = Opal.to_ary($b), (_slen = ($a[0] == null ? nil : $a[0])), (_trans = ($a[1] == null ? nil : $a[1])), (_keys = ($a[2] == null ? nil : $a[2])), (_inds = ($a[3] == null ? nil : $a[3])), (_acts = ($a[4] == null ? nil : $a[4])), (_nacts = ($a[5] == null ? nil : $a[5])), $b;
      _goto_level = 0;
      _resume = 10;
      _eof_trans = 15;
      _again = 20;
      _test_eof = 30;
      _out = 40;
      while ($truthy(true)) {
        
        if ($truthy($rb_le(_goto_level, 0))) {
          
          if (p['$=='](pe)) {
            
            _goto_level = _test_eof;
            continue;;};
          if (self.cs['$=='](0)) {
            
            _goto_level = _out;
            continue;;};};
        if ($truthy($rb_le(_goto_level, _resume))) {
          
          $case = _lex_from_state_actions['$[]'](self.cs);
          if ((89)['$===']($case)) {
          self.ts = p;};
          _keys = self.cs['$<<'](1);
          _inds = _lex_index_offsets['$[]'](self.cs);
          _slen = _lex_key_spans['$[]'](self.cs);
          _wide = ($truthy($b = self.source_pts['$[]'](p)) ? $b : 0);
          _trans = (function() {if ($truthy(($truthy($b = ($truthy($c = $rb_gt(_slen, 0)) ? $rb_le(_lex_trans_keys['$[]'](_keys), _wide) : $c)) ? $rb_le(_wide, _lex_trans_keys['$[]']($rb_plus(_keys, 1))) : $b))) {
            return _lex_indicies['$[]']($rb_minus($rb_plus(_inds, _wide), _lex_trans_keys['$[]'](_keys)))
          } else {
            return _lex_indicies['$[]']($rb_plus(_inds, _slen))
          }; return nil; })();};
        if ($truthy($rb_le(_goto_level, _eof_trans))) {
          
          self.cs = _lex_trans_targs['$[]'](_trans);
          if ($truthy(_lex_trans_actions['$[]'](_trans)['$!='](0))) {
            $case = _lex_trans_actions['$[]'](_trans);
            if ((28)['$===']($case)) {
            self.newline_s = p;}
            else if ((108)['$===']($case)) {
            self.escape_s = p;
            self.escape = nil;}
            else if ((29)['$===']($case)) {
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};}
            else if ((59)['$===']($case)) {
            self.sharp_s = $rb_minus(p, 1);}
            else if ((63)['$===']($case)) {
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());}
            else if ((292)['$===']($case)) {
            tm = p;}
            else if ((36)['$===']($case)) {
            tm = p;}
            else if ((38)['$===']($case)) {
            tm = p;}
            else if ((40)['$===']($case)) {
            tm = p;}
            else if ((69)['$===']($case)) {
            heredoc_e = p;}
            else if ((334)['$===']($case)) {
            self.escape = nil;}
            else if ((363)['$===']($case)) {
            tm = p;}
            else if ((290)['$===']($case)) {
            ident_tok = self.$tok();
            ident_ts = self.ts;
            ident_te = self.te;}
            else if ((449)['$===']($case)) {
            self.num_base = 16;
            self.num_digits_s = p;}
            else if ((443)['$===']($case)) {
            self.num_base = 10;
            self.num_digits_s = p;}
            else if ((446)['$===']($case)) {
            self.num_base = 8;
            self.num_digits_s = p;}
            else if ((440)['$===']($case)) {
            self.num_base = 2;
            self.num_digits_s = p;}
            else if ((455)['$===']($case)) {
            self.num_base = 10;
            self.num_digits_s = self.ts;}
            else if ((417)['$===']($case)) {
            self.num_base = 8;
            self.num_digits_s = self.ts;}
            else if ((432)['$===']($case)) {
            self.num_suffix_s = p;}
            else if ((425)['$===']($case)) {
            self.num_suffix_s = p;}
            else if ((422)['$===']($case)) {
            self.num_suffix_s = p;}
            else if ((85)['$===']($case)) {
            tm = p;}
            else if ((7)['$===']($case)) {
            self.te = $rb_plus(p, 1);}
            else if ((105)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DBEG", "\#{".$freeze());
            if ($truthy(current_literal['$heredoc?']())) {
              
              
              $writer = [self.herebody_s];
              $send(current_literal, 'saved_herebody_s=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.herebody_s = nil;};
            current_literal.$start_interp_brace();
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((5)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 320;
            _goto_level = _again;
            continue;;;;}
            else if ((101)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((100)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 752;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((106)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 320;
            _goto_level = _again;
            continue;;;;}
            else if ((103)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$literal().$extend_space(self.ts, self.te);;}
            else if ((104)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 752;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((6)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;}
            else if ((4)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 752;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((133)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DBEG", "\#{".$freeze());
            if ($truthy(current_literal['$heredoc?']())) {
              
              
              $writer = [self.herebody_s];
              $send(current_literal, 'saved_herebody_s=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.herebody_s = nil;};
            current_literal.$start_interp_brace();
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((10)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 320;
            _goto_level = _again;
            continue;;;;}
            else if ((130)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((129)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 752;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((134)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 320;
            _goto_level = _again;
            continue;;;;}
            else if ((132)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 752;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((11)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;}
            else if ((9)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 752;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((157)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((156)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 752;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((159)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$literal().$extend_space(self.ts, self.te);;}
            else if ((160)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 752;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((163)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((162)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 752;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((165)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 752;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((172)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DBEG", "\#{".$freeze());
            if ($truthy(current_literal['$heredoc?']())) {
              
              
              $writer = [self.herebody_s];
              $send(current_literal, 'saved_herebody_s=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.herebody_s = nil;};
            current_literal.$start_interp_brace();
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((13)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 320;
            _goto_level = _again;
            continue;;;;}
            else if ((169)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((168)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 752;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((173)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 320;
            _goto_level = _again;
            continue;;;;}
            else if ((171)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 752;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((12)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 752;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((175)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((174)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 752;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((182)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DBEG", "\#{".$freeze());
            if ($truthy(current_literal['$heredoc?']())) {
              
              
              $writer = [self.herebody_s];
              $send(current_literal, 'saved_herebody_s=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.herebody_s = nil;};
            current_literal.$start_interp_brace();
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((15)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 320;
            _goto_level = _again;
            continue;;;;}
            else if ((178)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((177)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 752;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((183)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 320;
            _goto_level = _again;
            continue;;;;}
            else if ((180)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$literal().$extend_space(self.ts, self.te);;}
            else if ((181)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 752;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((14)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 752;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((185)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((184)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 752;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((187)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$literal().$extend_space(self.ts, self.te);;}
            else if ((188)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tREGEXP_OPT", self.$tok(self.ts, $rb_minus(self.te, 1)), self.ts, $rb_minus(self.te, 1));
            p = $rb_minus(p, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;}
            else if ((189)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            unknown_options = self.$tok().$scan(/[^imxouesn]/);
            if ($truthy(unknown_options['$any?']())) {
              self.$diagnostic("error", "regexp_options", $hash2(["options"], {"options": unknown_options.$join()}))};
            self.$emit("tREGEXP_OPT");
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((16)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            if ($truthy(self.$tok()['$=~'](/^\$([1-9][0-9]*)$/))) {
              self.$emit("tNTH_REF", self.$tok($rb_plus(self.ts, 1)).$to_i())
            } else if ($truthy(self.$tok()['$=~'](/^\$([&`'+])$/))) {
              self.$emit("tBACK_REF")
            } else {
              self.$emit("tGVAR")
            };
            self.cs = self.$stack_pop();
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((190)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy(self.$tok()['$=~'](/^\$([1-9][0-9]*)$/))) {
              self.$emit("tNTH_REF", self.$tok($rb_plus(self.ts, 1)).$to_i())
            } else if ($truthy(self.$tok()['$=~'](/^\$([&`'+])$/))) {
              self.$emit("tBACK_REF")
            } else {
              self.$emit("tGVAR")
            };
            self.cs = self.$stack_pop();
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((192)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy(self.$tok()['$=~'](/^@@[0-9]/))) {
              self.$diagnostic("error", "cvar_name", $hash2(["name"], {"name": self.$tok()}))};
            self.$emit("tCVAR");
            self.cs = self.$stack_pop();
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((191)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy(self.$tok()['$=~'](/^@[0-9]/))) {
              self.$diagnostic("error", "ivar_name", $hash2(["name"], {"name": self.$tok()}))};
            self.$emit("tIVAR");
            self.cs = self.$stack_pop();
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((213)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'KEYWORDS_BEGIN'));
            self.cs = 438;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((199)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tIDENTIFIER");
            self.cs = 438;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((18)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            self.cs = 767;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 320;
            _goto_level = _again;
            continue;;;;}
            else if ((196)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 438;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((208)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            p = $rb_minus(p, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;}
            else if ((20)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            if ($truthy(self['$version?'](23))) {
              
              $b = [self.$tok()['$[]']($range(0, -2, false)), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
              
              self.cs = self.$push_literal(type, delimiter, self.ts);
              _goto_level = _again;
              continue;;;
            } else {
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 767;
              _goto_level = _again;
              continue;;;
            };;}
            else if ((195)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;}
            else if ((194)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((212)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'KEYWORDS_BEGIN'));
            self.cs = 438;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((209)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tCONSTANT");
            self.cs = 438;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((211)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tIDENTIFIER");
            self.cs = 438;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((206)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            self.cs = 767;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 320;
            _goto_level = _again;
            continue;;;;}
            else if ((202)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 438;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((207)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 535;
            _goto_level = _again;
            continue;;;;}
            else if ((200)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((205)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;}
            else if ((19)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 438;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((17)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(p, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;}
            else if ((198)['$===']($case)) {
            $case = self.act;
            if ((39)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS_BEGIN'));
            self.cs = 438;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((40)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tCONSTANT");
            self.cs = 438;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((41)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tIDENTIFIER");
            self.cs = 438;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;};}
            else if ((22)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tLABEL", self.$tok(self.ts, $rb_minus(self.te, 2)), self.ts, $rb_minus(self.te, 1));
            p = $rb_minus(p, 1);
            self.cs = 752;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((215)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;}
            else if ((214)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((217)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((216)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;}
            else if ((21)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(p, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;}
            else if ((223)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 466;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((222)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;}
            else if ((221)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((233)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tCONSTANT");
            self.cs = self.$arg_or_cmdarg();
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((224)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tIDENTIFIER");
            self.cs = self.$arg_or_cmdarg();
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((229)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 466;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((227)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((232)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;}
            else if ((256)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;}
            else if ((239)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            if (self.$tok(tm, $rb_plus(tm, 1))['$==']("/".$freeze())) {
              self.$diagnostic("warning", "ambiguous_literal", nil, self.$range(tm, $rb_plus(tm, 1)))};
            p = $rb_minus(tm, 1);
            
            self.cs = 535;
            _goto_level = _again;
            continue;;;;}
            else if ((245)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            p = $rb_minus(p, 1);
            
            self.cs = 535;
            _goto_level = _again;
            continue;;;;}
            else if ((24)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 535;
            _goto_level = _again;
            continue;;;;}
            else if ((247)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(tm, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;}
            else if ((39)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;}
            else if ((234)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 535;
            _goto_level = _again;
            continue;;;;}
            else if ((235)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((246)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 535;
            _goto_level = _again;
            continue;;;;}
            else if ((242)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("warning", "ambiguous_prefix", $hash2(["prefix"], {"prefix": self.$tok(tm, self.te)}), self.$range(tm, self.te));
            p = $rb_minus(tm, 1);
            
            self.cs = 535;
            _goto_level = _again;
            continue;;;;}
            else if ((244)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 535;
            _goto_level = _again;
            continue;;;;}
            else if ((238)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;}
            else if ((237)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((255)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 535;
            _goto_level = _again;
            continue;;;;}
            else if ((25)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;}
            else if ((41)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(p, 1);
            
            self.cs = 535;
            _goto_level = _again;
            continue;;;;}
            else if ((23)['$===']($case)) {
            $case = self.act;
            if ((67)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if (self.$tok(tm, $rb_plus(tm, 1))['$==']("/".$freeze())) {
              self.$diagnostic("warning", "ambiguous_literal", nil, self.$range(tm, $rb_plus(tm, 1)))};
            p = $rb_minus(tm, 1);
            
            self.cs = 535;
            _goto_level = _again;
            continue;;;}
            else if ((68)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$diagnostic("warning", "ambiguous_prefix", $hash2(["prefix"], {"prefix": self.$tok(tm, self.te)}), self.$range(tm, self.te));
            p = $rb_minus(tm, 1);
            
            self.cs = 535;
            _goto_level = _again;
            continue;;;}
            else if ((73)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;}
            else {
            
            p = $rb_minus(self.te, 1);;};}
            else if ((43)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 466;
            _goto_level = _again;
            continue;;;;}
            else if ((260)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((261)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 466;
            _goto_level = _again;
            continue;;;;}
            else if ((44)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 466;
            _goto_level = _again;
            continue;;;;}
            else if ((42)['$===']($case)) {
            $case = self.act;
            if ((80)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self.cond['$active?']())) {
              self.$emit("kDO_COND", "do".$freeze(), $rb_minus(self.te, 2), self.te)
            } else {
              self.$emit("kDO", "do".$freeze(), $rb_minus(self.te, 2), self.te)
            };
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((81)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 466;
            _goto_level = _again;
            continue;;;};}
            else if ((271)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_do(true);
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((264)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;}
            else if ((265)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((266)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((269)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;}
            else if ((275)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 535;
            _goto_level = _again;
            continue;;;;}
            else if ((274)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((283)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 535;
            _goto_level = _again;
            continue;;;;}
            else if ((277)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((281)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 535;
            _goto_level = _again;
            continue;;;;}
            else if ((276)['$===']($case)) {
            $case = self.act;
            if ((88)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 535;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((89)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 535;
            _goto_level = _again;
            continue;;;};}
            else if ((56)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
            p = $rb_minus(p, 1);
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((314)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            type = (delimiter = self.$tok()['$[]'](0).$chr());
            p = $rb_minus(p, 1);
            
            self.cs = self.$push_literal(type, delimiter, self.ts);
            _goto_level = _again;
            continue;;;;}
            else if ((308)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            $b = [self.source_buffer.$slice(self.ts).$chr(), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
            
            self.cs = self.$push_literal(type, delimiter, self.ts);
            _goto_level = _again;
            continue;;;;}
            else if ((54)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            $b = [self.$tok()['$[]']($range(0, -2, false)), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
            
            self.cs = self.$push_literal(type, delimiter, self.ts);
            _goto_level = _again;
            continue;;;;}
            else if ((327)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            p = $rb_minus(p, 1);
            self.$emit("tSYMBEG", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
            
            self.cs = 325;
            _goto_level = _again;
            continue;;;;}
            else if ((315)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            $b = [self.$tok(), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
            
            self.cs = self.$push_literal(type, delimiter, self.ts);
            _goto_level = _again;
            continue;;;;}
            else if ((326)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), $rb_plus(self.ts, 2)));
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((68)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1)), self.ts);
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((331)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            escape = $hash2([" ", "\r", "\n", "\t", "\v", "\f"], {" ": "\\s", "\r": "\\r", "\n": "\\n", "\t": "\\t", "\v": "\\v", "\f": "\\f"})['$[]'](self.source_buffer.$slice($rb_plus(self.ts, 1)));
            self.$diagnostic("warning", "invalid_escape_use", $hash2(["escape"], {"escape": escape}), self.$range());
            p = $rb_minus(self.ts, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;}
            else if ((330)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$diagnostic("fatal", "incomplete_escape", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;}
            else if ((316)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION_BEGIN'));
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((51)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            if ($truthy(self['$version?'](18))) {
              
              ident = self.$tok(self.ts, $rb_minus(self.te, 2));
              self.$emit((function() {if ($truthy(self.source_buffer.$slice(self.ts)['$=~'](/[A-Z]/))) {
                return "tCONSTANT"
              } else {
                return "tIDENTIFIER"
              }; return nil; })(), ident, self.ts, $rb_minus(self.te, 2));
              p = $rb_minus(p, 1);
              if ($truthy(($truthy($b = self.static_env['$nil?']()['$!']()) ? self.static_env['$declared?'](ident) : $b))) {
                self.cs = 767
              } else {
                self.cs = self.$arg_or_cmdarg()
              };
            } else {
              
              self.$emit("tLABEL", self.$tok(self.ts, $rb_minus(self.te, 2)), self.ts, $rb_minus(self.te, 1));
              self.cs = 752;
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((48)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tIDENTIFIER", ident_tok, ident_ts, ident_te);
            p = $rb_minus(ident_te, 1);
            if ($truthy(($truthy($b = ($truthy($c = self.static_env['$nil?']()['$!']()) ? self.static_env['$declared?'](ident_tok) : $c)) ? $rb_lt(self.version, 25) : $b))) {
              self.cs = 438
            } else {
              self.cs = 497
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((302)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            self.cs_before_block_comment = self.cs;
            
            self.cs = 181;
            _goto_level = _again;
            continue;;;;}
            else if ((55)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;}
            else if ((286)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((313)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
            p = $rb_minus(p, 1);
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((312)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSTAR", "*".$freeze());
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((309)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            $b = [self.$tok()['$[]']($range(0, -2, false)), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
            
            self.cs = self.$push_literal(type, delimiter, self.ts);
            _goto_level = _again;
            continue;;;;}
            else if ((307)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("fatal", "string_eof", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;}
            else if ((317)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1)), self.ts);
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((329)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("fatal", "incomplete_escape", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;}
            else if ((335)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;}
            else if ((310)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION_BEGIN'));
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((289)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tIDENTIFIER");
            if ($truthy(($truthy($b = self.static_env['$nil?']()['$!']()) ? self.static_env['$declared?'](self.$tok()) : $b))) {
              
              self.cs = 438;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg();
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };;}
            else if ((299)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((301)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            self.cs_before_block_comment = self.cs;
            
            self.cs = 181;
            _goto_level = _again;
            continue;;;;}
            else if ((304)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;}
            else if ((53)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$diagnostic("fatal", "string_eof", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;}
            else if ((71)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((47)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$emit("tIDENTIFIER");
            if ($truthy(($truthy($b = self.static_env['$nil?']()['$!']()) ? self.static_env['$declared?'](self.$tok()) : $b))) {
              
              self.cs = 438;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg();
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };;}
            else if ((52)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;}
            else if ((67)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;}
            else if ((50)['$===']($case)) {
            $case = self.act;
            if ((94)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
            p = $rb_minus(p, 1);
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((113)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'PUNCTUATION_BEGIN'));
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((114)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("kRESCUE", "rescue".$freeze(), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 511;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((115)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS_BEGIN'));
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((117)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;}
            else if ((118)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tIDENTIFIER");
            if ($truthy(($truthy($b = self.static_env['$nil?']()['$!']()) ? self.static_env['$declared?'](self.$tok()) : $b))) {
              
              self.cs = 438;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg();
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((122)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;};}
            else if ((365)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 535;
            _goto_level = _again;
            continue;;;;}
            else if ((366)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((367)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((371)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 535;
            _goto_level = _again;
            continue;;;;}
            else if ((74)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;}
            else if ((375)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            
            self.cs = self.$push_literal(self.$tok(), self.$tok(), self.ts);
            _goto_level = _again;
            continue;;;;}
            else if ((374)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 535;
            _goto_level = _again;
            continue;;;;}
            else if ((373)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((377)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((376)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 535;
            _goto_level = _again;
            continue;;;;}
            else if ((73)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(p, 1);
            
            self.cs = 535;
            _goto_level = _again;
            continue;;;;}
            else if ((411)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tLAMBDA", "->".$freeze(), self.ts, $rb_plus(self.ts, 2));
            self.lambda_stack.$push(self.paren_nest);
            self.cs = 438;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((83)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("kCLASS", "class".$freeze(), self.ts, $rb_plus(self.ts, 5));
            self.$emit("tLSHFT", "<<".$freeze(), $rb_minus(self.te, 2), self.te);
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((385)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            $b = [self.$tok(), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
            
            self.cs = self.$push_literal(type, delimiter, self.ts, nil, false, false, true);
            _goto_level = _again;
            continue;;;;}
            else if ((76)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 320;
            _goto_level = _again;
            continue;;;;}
            else if ((407)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 445;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((459)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            
            self.cs = 759;
            _goto_level = _again;
            continue;;;;}
            else if ((400)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((392)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            if ($truthy($rb_lt(self.version, 24))) {
              
              self.cond.$lexpop();
              self.cmdarg.$lexpop();
            } else {
              
              self.cond.$pop();
              self.cmdarg.$pop();
            };
            if ($truthy(($truthy($b = self.$tok()['$==']("}".$freeze())) ? $b : self.$tok()['$==']("]".$freeze())))) {
              if ($truthy($rb_ge(self.version, 25))) {
                self.cs = 767
              } else {
                self.cs = 503
              }};
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((405)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tOP_ASGN", self.$tok(self.ts, $rb_minus(self.te, 1)));
            self.cs = 535;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((390)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tEH", "?".$freeze());
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((387)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 535;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((389)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tSEMI", ";".$freeze());
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((464)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$diagnostic("error", "bare_backslash", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));
            p = $rb_minus(p, 1);;}
            else if ((384)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$diagnostic("fatal", "unexpected", $hash2(["character"], {"character": self.$tok().$inspect()['$[]']($range(1, -2, false))}));;}
            else if ((383)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((474)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 325;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((472)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("kCLASS", "class".$freeze(), self.ts, $rb_plus(self.ts, 5));
            self.$emit("tLSHFT", "<<".$freeze(), $rb_minus(self.te, 2), self.te);
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((471)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((414)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("error", "no_dot_digit_literal");;}
            else if ((461)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tCONSTANT");
            self.cs = self.$arg_or_cmdarg();
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((404)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 320;
            _goto_level = _again;
            continue;;;;}
            else if ((412)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 445;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((466)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tIDENTIFIER");
            if ($truthy(($truthy($b = self.static_env['$nil?']()['$!']()) ? self.static_env['$declared?'](self.$tok()) : $b))) {
              
              self.cs = 438;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg();
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };;}
            else if ((410)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            
            self.cs = 759;
            _goto_level = _again;
            continue;;;;}
            else if ((406)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((399)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 535;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((413)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 535;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((397)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((403)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("fatal", "unexpected", $hash2(["character"], {"character": self.$tok().$inspect()['$[]']($range(1, -2, false))}));;}
            else if ((81)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((77)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$diagnostic("error", "no_dot_digit_literal");;}
            else if ((80)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((75)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$diagnostic("fatal", "unexpected", $hash2(["character"], {"character": self.$tok().$inspect()['$[]']($range(1, -2, false))}));;}
            else if ((78)['$===']($case)) {
            $case = self.act;
            if ((135)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
              
              self.lambda_stack.$pop();
              if (self.$tok()['$==']("{".$freeze())) {
                self.$emit("tLAMBEG", "{".$freeze())
              } else {
                self.$emit("kDO_LAMBDA", "do".$freeze())
              };
            } else if (self.$tok()['$==']("{".$freeze())) {
              self.$emit("tLCURLY", "{".$freeze())
            } else {
              self.$emit_do()
            };
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((136)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 325;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((137)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("kCLASS", "class".$freeze(), self.ts, $rb_plus(self.ts, 5));
            self.$emit("tLSHFT", "<<".$freeze(), $rb_minus(self.te, 2), self.te);
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((138)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 535;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((139)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((140)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 511;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((141)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            if ($truthy(($truthy($b = self['$version?'](18)) ? self.$tok()['$==']("not".$freeze()) : $b))) {
              
              self.cs = 535;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = 466;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((142)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self['$version?'](18))) {
              
              self.$emit("tIDENTIFIER");
              if ($truthy(($truthy($b = self.static_env['$nil?']()['$!']()) ? self.static_env['$declared?'](self.$tok()) : $b))) {
              } else {
                self.cs = self.$arg_or_cmdarg()
              };
            } else {
              self.$emit("k__ENCODING__", "__ENCODING__".$freeze())
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((143)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((144)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((146)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self['$version?'](18, 19, 20))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": self.$tok($rb_minus(self.te, 1), self.te)}), self.$range($rb_minus(self.te, 1), self.te))
            } else {
              
              self.$emit("tINTEGER", self.$tok(self.ts, $rb_minus(self.te, 1)).$to_i(), self.ts, $rb_minus(self.te, 1));
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((147)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self['$version?'](18, 19, 20))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": self.$tok($rb_minus(self.te, 1), self.te)}), self.$range($rb_minus(self.te, 1), self.te))
            } else {
              
              self.$emit("tFLOAT", self.$tok(self.ts, $rb_minus(self.te, 1)).$to_f(), self.ts, $rb_minus(self.te, 1));
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((148)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((150)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tCONSTANT");
            self.cs = self.$arg_or_cmdarg();
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((154)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tIDENTIFIER");
            if ($truthy(($truthy($b = self.static_env['$nil?']()['$!']()) ? self.static_env['$declared?'](self.$tok()) : $b))) {
              
              self.cs = 438;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg();
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((155)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if (tm['$=='](self.te)) {
              self.$emit("tFID")
            } else {
              
              self.$emit("tIDENTIFIER", self.$tok(self.ts, tm), self.ts, tm);
              p = $rb_minus(tm, 1);
            };
            self.cs = 466;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((157)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((158)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 535;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;};}
            else if ((87)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(tm, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;}
            else if ((479)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
            p = $rb_minus(p, 1);
            self.cs = 181;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((480)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
            p = $rb_minus(p, 1);
            self.cs = 181;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((84)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
            p = $rb_minus(p, 1);
            self.cs = 181;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((483)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_comment(self.eq_begin_s, self.te);
            
            self.cs = self.cs_before_block_comment;
            _goto_level = _again;
            continue;;;;}
            else if ((482)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("fatal", "embedded_document", nil, self.$range(self.eq_begin_s, $rb_plus(self.eq_begin_s, "=begin".$length())));;}
            else if ((98)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.eq_begin_s = self.ts;
            
            self.cs = 948;
            _goto_level = _again;
            continue;;;;}
            else if ((2)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(pe, 3);;}
            else if ((90)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 759;
            _goto_level = _again;
            continue;;;;}
            else if ((91)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((92)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((97)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.eq_begin_s = self.ts;
            
            self.cs = 948;
            _goto_level = _again;
            continue;;;;}
            else if ((96)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 759;
            _goto_level = _again;
            continue;;;;}
            else if ((1)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(p, 1);
            
            self.cs = 759;
            _goto_level = _again;
            continue;;;;}
            else if ((66)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;}
            else if ((102)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((131)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((158)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((164)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((170)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((176)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((179)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((186)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((257)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;;}
            else if ((248)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(tm, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;;}
            else if ((240)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;;}
            else if ((332)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            escape = $hash2([" ", "\r", "\n", "\t", "\v", "\f"], {" ": "\\s", "\r": "\\r", "\n": "\\n", "\t": "\\t", "\v": "\\v", "\f": "\\f"})['$[]'](self.source_buffer.$slice($rb_plus(self.ts, 1)));
            self.$diagnostic("warning", "invalid_escape_use", $hash2(["escape"], {"escape": escape}), self.$range());
            p = $rb_minus(self.ts, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;;}
            else if ((303)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            self.cs_before_block_comment = self.cs;
            
            self.cs = 181;
            _goto_level = _again;
            continue;;;;;}
            else if ((484)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            self.$emit_comment(self.eq_begin_s, self.te);
            
            self.cs = self.cs_before_block_comment;
            _goto_level = _again;
            continue;;;;;}
            else if ((481)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);;}
            else if ((99)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            self.eq_begin_s = self.ts;
            
            self.cs = 948;
            _goto_level = _again;
            continue;;;;;}
            else if ((3)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(pe, 3);;;}
            else if ((435)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$13 = function(chars){var self = $$13.$$s || this;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tRATIONAL", self.$Rational(chars));}, $$13.$$s = self, $$13.$$arity = 1, $$13));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((433)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$14 = function(chars){var self = $$14.$$s || this;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tIMAGINARY", self.$Complex(0, chars));}, $$14.$$s = self, $$14.$$arity = 1, $$14));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((438)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$15 = function(chars){var self = $$15.$$s || this;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tIMAGINARY", self.$Complex(0, self.$Rational(chars)));}, $$15.$$s = self, $$15.$$arity = 1, $$15));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((436)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$16 = function(chars){var self = $$16.$$s || this;
              if (self.ts == null) self.ts = nil;
              if (self.te == null) self.te = nil;

            
              
              if (chars == null) {
                chars = nil;
              };
              self.$emit("tINTEGER", chars, self.ts, $rb_minus(self.te, 2));
              return (p = $rb_minus(p, 2));}, $$16.$$s = self, $$16.$$arity = 1, $$16));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((434)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$17 = function(chars){var self = $$17.$$s || this;
              if (self.ts == null) self.ts = nil;
              if (self.te == null) self.te = nil;

            
              
              if (chars == null) {
                chars = nil;
              };
              self.$emit("tINTEGER", chars, self.ts, $rb_minus(self.te, 2));
              return (p = $rb_minus(p, 2));}, $$17.$$s = self, $$17.$$arity = 1, $$17));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((437)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$18 = function(chars){var self = $$18.$$s || this;
              if (self.ts == null) self.ts = nil;
              if (self.te == null) self.te = nil;

            
              
              if (chars == null) {
                chars = nil;
              };
              self.$emit("tINTEGER", chars, self.ts, $rb_minus(self.te, 6));
              return (p = $rb_minus(p, 6));}, $$18.$$s = self, $$18.$$arity = 1, $$18));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((426)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$19 = function(chars){var self = $$19.$$s || this;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tIMAGINARY", self.$Complex(0, self.$Float(chars)));}, $$19.$$s = self, $$19.$$arity = 1, $$19));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((427)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$20 = function(chars){var self = $$20.$$s || this;
              if (self.ts == null) self.ts = nil;
              if (self.te == null) self.te = nil;

            
              
              if (chars == null) {
                chars = nil;
              };
              self.$emit("tFLOAT", self.$Float(chars), self.ts, $rb_minus(self.te, 2));
              return (p = $rb_minus(p, 2));}, $$20.$$s = self, $$20.$$arity = 1, $$20));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((428)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$21 = function(chars){var self = $$21.$$s || this;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tRATIONAL", self.$Rational(chars));}, $$21.$$s = self, $$21.$$arity = 1, $$21));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((430)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$22 = function(chars){var self = $$22.$$s || this;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tIMAGINARY", self.$Complex(0, self.$Rational(chars)));}, $$22.$$s = self, $$22.$$arity = 1, $$22));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((429)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$23 = function(chars){var self = $$23.$$s || this;
              if (self.ts == null) self.ts = nil;
              if (self.te == null) self.te = nil;

            
              
              if (chars == null) {
                chars = nil;
              };
              self.$emit("tFLOAT", self.$Float(chars), self.ts, $rb_minus(self.te, 6));
              return (p = $rb_minus(p, 6));}, $$23.$$s = self, $$23.$$arity = 1, $$23));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((125)['$===']($case)) {
            
            self.escape = "";
            codepoints = self.$tok($rb_plus(self.escape_s, 2), $rb_minus(p, 1));
            codepoint_s = $rb_plus(self.escape_s, 2);
            if ($truthy($rb_lt(self.version, 24))) {
              
              if ($truthy(($truthy($b = codepoints['$start_with?'](" ")) ? $b : codepoints['$start_with?']("\t")))) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus(self.escape_s, 2), $rb_plus(self.escape_s, 3)))};
              if ($truthy((spaces_p = codepoints.$index(/[ \t]{2}/)))) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus($rb_plus(codepoint_s, spaces_p), 1), $rb_plus($rb_plus(codepoint_s, spaces_p), 2)))};
              if ($truthy(($truthy($b = codepoints['$end_with?'](" ")) ? $b : codepoints['$end_with?']("\t")))) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(p, 1), p))};};
            (function(){var $brk = Opal.new_brk(); try {return $send(codepoints.$scan(/([0-9a-fA-F]+)|([ \t]+)/), 'each', [], ($$24 = function($mlhs_tmp1){var self = $$24.$$s || this, $d, $e, codepoint_str = nil, spaces = nil, codepoint = nil;
              if (self.escape == null) self.escape = nil;

            
              
              if ($mlhs_tmp1 == null) {
                $mlhs_tmp1 = nil;
              };
              $e = $mlhs_tmp1, $d = Opal.to_ary($e), (codepoint_str = ($d[0] == null ? nil : $d[0])), (spaces = ($d[1] == null ? nil : $d[1])), $e;
              if ($truthy(spaces)) {
                return (codepoint_s = $rb_plus(codepoint_s, spaces.$length()))
              } else {
                
                codepoint = codepoint_str.$to_i(16);
                if ($truthy($rb_ge(codepoint, 1114112))) {
                  
                  self.$diagnostic("error", "unicode_point_too_large", nil, self.$range(codepoint_s, $rb_plus(codepoint_s, codepoint_str.$length())));
                  
                  Opal.brk(nil, $brk);};
                self.escape = $rb_plus(self.escape, codepoint.$chr($$$($$($nesting, 'Encoding'), 'UTF_8')));
                return (codepoint_s = $rb_plus(codepoint_s, codepoint_str.$length()));
              };}, $$24.$$s = self, $$24.$$brk = $brk, $$24.$$arity = 1, $$24.$$has_top_level_mlhs_arg = true, $$24))
            } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((152)['$===']($case)) {
            
            self.escape = "";
            codepoints = self.$tok($rb_plus(self.escape_s, 2), $rb_minus(p, 1));
            codepoint_s = $rb_plus(self.escape_s, 2);
            if ($truthy($rb_lt(self.version, 24))) {
              
              if ($truthy(($truthy($b = codepoints['$start_with?'](" ")) ? $b : codepoints['$start_with?']("\t")))) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus(self.escape_s, 2), $rb_plus(self.escape_s, 3)))};
              if ($truthy((spaces_p = codepoints.$index(/[ \t]{2}/)))) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus($rb_plus(codepoint_s, spaces_p), 1), $rb_plus($rb_plus(codepoint_s, spaces_p), 2)))};
              if ($truthy(($truthy($b = codepoints['$end_with?'](" ")) ? $b : codepoints['$end_with?']("\t")))) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(p, 1), p))};};
            (function(){var $brk = Opal.new_brk(); try {return $send(codepoints.$scan(/([0-9a-fA-F]+)|([ \t]+)/), 'each', [], ($$25 = function($mlhs_tmp1){var self = $$25.$$s || this, $d, $e, codepoint_str = nil, spaces = nil, codepoint = nil;
              if (self.escape == null) self.escape = nil;

            
              
              if ($mlhs_tmp1 == null) {
                $mlhs_tmp1 = nil;
              };
              $e = $mlhs_tmp1, $d = Opal.to_ary($e), (codepoint_str = ($d[0] == null ? nil : $d[0])), (spaces = ($d[1] == null ? nil : $d[1])), $e;
              if ($truthy(spaces)) {
                return (codepoint_s = $rb_plus(codepoint_s, spaces.$length()))
              } else {
                
                codepoint = codepoint_str.$to_i(16);
                if ($truthy($rb_ge(codepoint, 1114112))) {
                  
                  self.$diagnostic("error", "unicode_point_too_large", nil, self.$range(codepoint_s, $rb_plus(codepoint_s, codepoint_str.$length())));
                  
                  Opal.brk(nil, $brk);};
                self.escape = $rb_plus(self.escape, codepoint.$chr($$$($$($nesting, 'Encoding'), 'UTF_8')));
                return (codepoint_s = $rb_plus(codepoint_s, codepoint_str.$length()));
              };}, $$25.$$s = self, $$25.$$brk = $brk, $$25.$$arity = 1, $$25.$$has_top_level_mlhs_arg = true, $$25))
            } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((353)['$===']($case)) {
            
            self.escape = "";
            codepoints = self.$tok($rb_plus(self.escape_s, 2), $rb_minus(p, 1));
            codepoint_s = $rb_plus(self.escape_s, 2);
            if ($truthy($rb_lt(self.version, 24))) {
              
              if ($truthy(($truthy($b = codepoints['$start_with?'](" ")) ? $b : codepoints['$start_with?']("\t")))) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus(self.escape_s, 2), $rb_plus(self.escape_s, 3)))};
              if ($truthy((spaces_p = codepoints.$index(/[ \t]{2}/)))) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus($rb_plus(codepoint_s, spaces_p), 1), $rb_plus($rb_plus(codepoint_s, spaces_p), 2)))};
              if ($truthy(($truthy($b = codepoints['$end_with?'](" ")) ? $b : codepoints['$end_with?']("\t")))) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(p, 1), p))};};
            (function(){var $brk = Opal.new_brk(); try {return $send(codepoints.$scan(/([0-9a-fA-F]+)|([ \t]+)/), 'each', [], ($$26 = function($mlhs_tmp1){var self = $$26.$$s || this, $d, $e, codepoint_str = nil, spaces = nil, codepoint = nil;
              if (self.escape == null) self.escape = nil;

            
              
              if ($mlhs_tmp1 == null) {
                $mlhs_tmp1 = nil;
              };
              $e = $mlhs_tmp1, $d = Opal.to_ary($e), (codepoint_str = ($d[0] == null ? nil : $d[0])), (spaces = ($d[1] == null ? nil : $d[1])), $e;
              if ($truthy(spaces)) {
                return (codepoint_s = $rb_plus(codepoint_s, spaces.$length()))
              } else {
                
                codepoint = codepoint_str.$to_i(16);
                if ($truthy($rb_ge(codepoint, 1114112))) {
                  
                  self.$diagnostic("error", "unicode_point_too_large", nil, self.$range(codepoint_s, $rb_plus(codepoint_s, codepoint_str.$length())));
                  
                  Opal.brk(nil, $brk);};
                self.escape = $rb_plus(self.escape, codepoint.$chr($$$($$($nesting, 'Encoding'), 'UTF_8')));
                return (codepoint_s = $rb_plus(codepoint_s, codepoint_str.$length()));
              };}, $$26.$$s = self, $$26.$$brk = $brk, $$26.$$arity = 1, $$26.$$has_top_level_mlhs_arg = true, $$26))
            } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((109)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((136)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((337)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((112)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_escape");;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((139)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_escape");;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((340)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_escape");;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((114)['$===']($case)) {
            
            self.escape = "\u007F";;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((141)['$===']($case)) {
            
            self.escape = "\u007F";;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((342)['$===']($case)) {
            
            self.escape = "\u007F";;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((111)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok(self.escape_s, p).$to_i(8)['$%'](256));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((138)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok(self.escape_s, p).$to_i(8)['$%'](256));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((339)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok(self.escape_s, p).$to_i(8)['$%'](256));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((128)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((155)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((356)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((127)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_hex_escape", nil, self.$range($rb_minus(self.escape_s, 1), $rb_plus(p, 2)));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((154)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_hex_escape", nil, self.$range($rb_minus(self.escape_s, 1), $rb_plus(p, 2)));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((355)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_hex_escape", nil, self.$range($rb_minus(self.escape_s, 1), $rb_plus(p, 2)));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((122)['$===']($case)) {
            
            self.escape = self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16).$chr($$$($$($nesting, 'Encoding'), 'UTF_8'));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((149)['$===']($case)) {
            
            self.escape = self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16).$chr($$$($$($nesting, 'Encoding'), 'UTF_8'));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((350)['$===']($case)) {
            
            self.escape = self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16).$chr($$$($$($nesting, 'Encoding'), 'UTF_8'));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((121)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((148)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((349)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((126)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((153)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((354)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((123)['$===']($case)) {
            
            self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((150)['$===']($case)) {
            
            self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((351)['$===']($case)) {
            
            self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((110)['$===']($case)) {
            
            self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((137)['$===']($case)) {
            
            self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((338)['$===']($case)) {
            
            self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((161)['$===']($case)) {
            
            self.escape_s = p;
            self.escape = nil;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((166)['$===']($case)) {
            
            self.escape_s = p;
            self.escape = nil;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((57)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.newline_s = p;;}
            else if ((30)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            tm = p;;}
            else if ((32)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            tm = p;;}
            else if ((34)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            tm = p;;}
            else if ((201)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((220)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((228)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((33)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;;}
            else if ((259)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((251)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;;}
            else if ((270)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((282)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((278)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;;}
            else if ((58)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = $rb_plus(p, 1);
            
            self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
            p = $rb_minus(p, 1);
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((49)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = $rb_plus(p, 1);
            
            self.$emit("tIDENTIFIER", ident_tok, ident_ts, ident_te);
            p = $rb_minus(ident_te, 1);
            if ($truthy(($truthy($b = ($truthy($c = self.static_env['$nil?']()['$!']()) ? self.static_env['$declared?'](ident_tok) : $c)) ? $rb_lt(self.version, 25) : $b))) {
              self.cs = 438
            } else {
              self.cs = 497
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((300)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((372)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((368)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy(self.in_kwarg)) {
              
              p = $rb_minus(p, 1);
              
              self.cs = 767;
              _goto_level = _again;
              continue;;;
            } else {
              
              self.cs = 181;
              _goto_level = _again;
              continue;;
            };;;}
            else if ((381)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((378)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            
            self.cs = 181;
            _goto_level = _again;
            continue;;;;;}
            else if ((465)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((398)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            
            self.cs = 945;
            _goto_level = _again;
            continue;;;;;}
            else if ((93)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((250)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            current_literal = self.$literal();
            if ($truthy(current_literal)) {
              current_literal.$start_interp_brace()};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
              
              self.lambda_stack.$pop();
              self.$emit("tLAMBEG", "{".$freeze(), $rb_minus(self.te, 1), self.te);
            } else {
              self.$emit("tLCURLY", "{".$freeze(), $rb_minus(self.te, 1), self.te)
            };
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((272)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            current_literal = self.$literal();
            if ($truthy(current_literal)) {
              current_literal.$start_interp_brace()};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
              
              self.lambda_stack.$pop();
              self.$emit("tLAMBEG", "{".$freeze());
            } else {
              self.$emit("tLBRACE_ARG", "{".$freeze())
            };
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((364)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            current_literal = self.$literal();
            if ($truthy(current_literal)) {
              current_literal.$start_interp_brace()};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
              
              self.lambda_stack.$pop();
              self.$emit("tLAMBEG", "{".$freeze());
            } else {
              self.$emit("tLBRACE", "{".$freeze())
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((477)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            current_literal = self.$literal();
            if ($truthy(current_literal)) {
              current_literal.$start_interp_brace()};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
              
              self.lambda_stack.$pop();
              if (self.$tok()['$==']("{".$freeze())) {
                self.$emit("tLAMBEG", "{".$freeze())
              } else {
                self.$emit("kDO_LAMBDA", "do".$freeze())
              };
            } else if (self.$tok()['$==']("{".$freeze())) {
              self.$emit("tLCURLY", "{".$freeze())
            } else {
              self.$emit_do()
            };
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((478)['$===']($case)) {
            
            current_literal = self.$literal();
            if ($truthy(current_literal)) {
              if ($truthy(current_literal.$end_interp_brace_and_try_closing())) {
                
                if ($truthy(self['$version?'](18, 19))) {
                  
                  self.$emit("tRCURLY", "}".$freeze(), $rb_minus(p, 1), p);
                  if ($truthy($rb_lt(self.version, 24))) {
                    
                    self.cond.$lexpop();
                    self.cmdarg.$lexpop();
                  } else {
                    
                    self.cond.$pop();
                    self.cmdarg.$pop();
                  };
                } else {
                  self.$emit("tSTRING_DEND", "}".$freeze(), $rb_minus(p, 1), p)
                };
                if ($truthy(current_literal.$saved_herebody_s())) {
                  self.herebody_s = current_literal.$saved_herebody_s()};
                p = $rb_minus(p, 1);
                self.cs = self.$next_state_for_literal(current_literal);
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;}};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            if ($truthy($rb_lt(self.version, 24))) {
              
              self.cond.$lexpop();
              self.cmdarg.$lexpop();
            } else {
              
              self.cond.$pop();
              self.cmdarg.$pop();
            };
            if ($truthy(($truthy($b = self.$tok()['$==']("}".$freeze())) ? $b : self.$tok()['$==']("]".$freeze())))) {
              if ($truthy($rb_ge(self.version, 25))) {
                self.cs = 767
              } else {
                self.cs = 503
              }};
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((60)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;}
            else if ((64)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.newline_s = p;;}
            else if ((204)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((219)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((231)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((253)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;;}
            else if ((268)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((280)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((306)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((370)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((380)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((402)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((95)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((225)['$===']($case)) {
            
            tm = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tFID", self.$tok(self.ts, tm), self.ts, tm);
            self.cs = self.$arg_or_cmdarg();
            p = $rb_minus(tm, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((318)['$===']($case)) {
            
            tm = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((291)['$===']($case)) {
            
            tm = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;;}
            else if ((395)['$===']($case)) {
            
            tm = p;;
            
            $case = self.act;
            if ((135)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
              
              self.lambda_stack.$pop();
              if (self.$tok()['$==']("{".$freeze())) {
                self.$emit("tLAMBEG", "{".$freeze())
              } else {
                self.$emit("kDO_LAMBDA", "do".$freeze())
              };
            } else if (self.$tok()['$==']("{".$freeze())) {
              self.$emit("tLCURLY", "{".$freeze())
            } else {
              self.$emit_do()
            };
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((136)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 325;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((137)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("kCLASS", "class".$freeze(), self.ts, $rb_plus(self.ts, 5));
            self.$emit("tLSHFT", "<<".$freeze(), $rb_minus(self.te, 2), self.te);
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((138)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 535;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((139)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((140)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 511;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((141)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            if ($truthy(($truthy($b = self['$version?'](18)) ? self.$tok()['$==']("not".$freeze()) : $b))) {
              
              self.cs = 535;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = 466;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((142)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self['$version?'](18))) {
              
              self.$emit("tIDENTIFIER");
              if ($truthy(($truthy($b = self.static_env['$nil?']()['$!']()) ? self.static_env['$declared?'](self.$tok()) : $b))) {
              } else {
                self.cs = self.$arg_or_cmdarg()
              };
            } else {
              self.$emit("k__ENCODING__", "__ENCODING__".$freeze())
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((143)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((144)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((146)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self['$version?'](18, 19, 20))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": self.$tok($rb_minus(self.te, 1), self.te)}), self.$range($rb_minus(self.te, 1), self.te))
            } else {
              
              self.$emit("tINTEGER", self.$tok(self.ts, $rb_minus(self.te, 1)).$to_i(), self.ts, $rb_minus(self.te, 1));
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((147)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self['$version?'](18, 19, 20))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": self.$tok($rb_minus(self.te, 1), self.te)}), self.$range($rb_minus(self.te, 1), self.te))
            } else {
              
              self.$emit("tFLOAT", self.$tok(self.ts, $rb_minus(self.te, 1)).$to_f(), self.ts, $rb_minus(self.te, 1));
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((148)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((150)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tCONSTANT");
            self.cs = self.$arg_or_cmdarg();
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((154)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tIDENTIFIER");
            if ($truthy(($truthy($b = self.static_env['$nil?']()['$!']()) ? self.static_env['$declared?'](self.$tok()) : $b))) {
              
              self.cs = 438;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg();
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((155)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if (tm['$=='](self.te)) {
              self.$emit("tFID")
            } else {
              
              self.$emit("tIDENTIFIER", self.$tok(self.ts, tm), self.ts, tm);
              p = $rb_minus(tm, 1);
            };
            self.cs = 466;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((157)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((158)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 535;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;};;}
            else if ((226)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tFID", self.$tok(self.ts, tm), self.ts, tm);
            self.cs = self.$arg_or_cmdarg();
            p = $rb_minus(tm, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((319)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((293)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;;}
            else if ((396)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if (tm['$=='](self.te)) {
              self.$emit("tFID")
            } else {
              
              self.$emit("tIDENTIFIER", self.$tok(self.ts, tm), self.ts, tm);
              p = $rb_minus(tm, 1);
            };
            self.cs = 466;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((320)['$===']($case)) {
            
            tm = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((294)['$===']($case)) {
            
            tm = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;;}
            else if ((321)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((295)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;;}
            else if ((325)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((298)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;;}
            else if ((324)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((297)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            $case = self.act;
            if ((94)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
            p = $rb_minus(p, 1);
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((113)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'PUNCTUATION_BEGIN'));
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((114)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("kRESCUE", "rescue".$freeze(), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 511;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((115)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS_BEGIN'));
            self.cs = 759;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((117)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;}
            else if ((118)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tIDENTIFIER");
            if ($truthy(($truthy($b = self.static_env['$nil?']()['$!']()) ? self.static_env['$declared?'](self.$tok()) : $b))) {
              
              self.cs = 438;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg();
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((122)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;};;}
            else if ((322)['$===']($case)) {
            
            tm = $rb_minus(p, 3);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((296)['$===']($case)) {
            
            tm = $rb_minus(p, 3);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;;}
            else if ((323)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((460)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tCONSTANT", self.$tok(self.ts, tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((249)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tLBRACK", "[".$freeze(), $rb_minus(self.te, 1), self.te);
            self.cs = 535;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((357)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tLBRACK", "[".$freeze());
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((463)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tLBRACK2", "[".$freeze());
            self.cs = 535;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((241)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy(self['$version?'](18))) {
              
              self.$emit("tLPAREN2", "(".$freeze(), $rb_minus(self.te, 1), self.te);
              self.cs = 759;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.$emit("tLPAREN_ARG", "(".$freeze(), $rb_minus(self.te, 1), self.te);
              self.cs = 535;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };;;}
            else if ((254)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tLPAREN2", "(".$freeze());
            self.cs = 535;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((262)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tLPAREN_ARG", "(".$freeze(), $rb_minus(self.te, 1), self.te);
            if ($truthy(self['$version?'](18))) {
              
              self.cs = 759;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = 535;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };;;}
            else if ((311)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tLPAREN", "(".$freeze());
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((408)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 535;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((409)['$===']($case)) {
            
            self.paren_nest = $rb_minus(self.paren_nest, 1);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            if ($truthy($rb_lt(self.version, 24))) {
              
              self.cond.$lexpop();
              self.cmdarg.$lexpop();
            } else {
              
              self.cond.$pop();
              self.cmdarg.$pop();
            };
            if ($truthy(($truthy($b = self.$tok()['$==']("}".$freeze())) ? $b : self.$tok()['$==']("]".$freeze())))) {
              if ($truthy($rb_ge(self.version, 25))) {
                self.cs = 767
              } else {
                self.cs = 503
              }};
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((70)['$===']($case)) {
            
            heredoc_e = p;;
            
            self.newline_s = p;;}
            else if ((328)['$===']($case)) {
            
            new_herebody_s = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$tok(self.ts, heredoc_e)['$=~'](/^<<(-?)(~?)(["'`]?)(.*)\3$/m);
            indent = ($truthy($b = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1))['$empty?']()['$!']()) ? $b : (($c = $gvars['~']) === nil ? nil : $c['$[]'](2))['$empty?']()['$!']());
            dedent_body = (($b = $gvars['~']) === nil ? nil : $b['$[]'](2))['$empty?']()['$!']();
            type = (function() {if ($truthy((($b = $gvars['~']) === nil ? nil : $b['$[]'](3))['$empty?']())) {
              return "<<\"".$freeze()
            } else {
              
              return $rb_plus("<<".$freeze(), (($b = $gvars['~']) === nil ? nil : $b['$[]'](3)));
            }; return nil; })();
            delimiter = (($b = $gvars['~']) === nil ? nil : $b['$[]'](4));
            if ($truthy($rb_ge(self.version, 24))) {
              if ($truthy($rb_gt(delimiter.$count("\n"), 0))) {
                if ($truthy(delimiter['$end_with?']("\n"))) {
                  
                  self.$diagnostic("warning", "heredoc_id_ends_with_nl", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));
                  delimiter = delimiter.$rstrip();
                } else {
                  self.$diagnostic("fatal", "heredoc_id_has_newline", nil, self.$range(self.ts, $rb_plus(self.ts, 1)))
                }}};
            if ($truthy(($truthy($b = dedent_body) ? self['$version?'](18, 19, 20, 21, 22) : $b))) {
              
              self.$emit("tLSHFT", "<<".$freeze(), self.ts, $rb_plus(self.ts, 2));
              p = $rb_plus(self.ts, 1);
              self.cs = 535;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$push_literal(type, delimiter, self.ts, heredoc_e, indent, dedent_body);
              self.herebody_s = ($truthy($b = self.herebody_s) ? $b : new_herebody_s);
              p = $rb_minus(self.herebody_s, 1);
            };;;}
            else if ((333)['$===']($case)) {
            
            self.escape = nil;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((360)['$===']($case)) {
            
            tm = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("kRESCUE", "rescue".$freeze(), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 511;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((450)['$===']($case)) {
            
            self.num_base = 16;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;}
            else if ((444)['$===']($case)) {
            
            self.num_base = 10;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;}
            else if ((447)['$===']($case)) {
            
            self.num_base = 8;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;}
            else if ((441)['$===']($case)) {
            
            self.num_base = 2;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;}
            else if ((456)['$===']($case)) {
            
            self.num_base = 10;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;}
            else if ((419)['$===']($case)) {
            
            self.num_base = 8;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;}
            else if ((457)['$===']($case)) {
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$27 = function(chars){var self = $$27.$$s || this;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$27.$$s = self, $$27.$$arity = 1, $$27));;}
            else if ((86)['$===']($case)) {
            
            tm = p;;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(tm, 1);
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;;}
            else if ((8)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.newline_s = p;;}
            else if ((423)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.num_suffix_s = p;;}
            else if ((210)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 39;;}
            else if ((197)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 40;;}
            else if ((193)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 41;;}
            else if ((26)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 67;;}
            else if ((243)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 68;;}
            else if ((27)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 73;;}
            else if ((236)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 74;;}
            else if ((263)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 80;;}
            else if ((45)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 81;;}
            else if ((284)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 88;;}
            else if ((273)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 89;;}
            else if ((287)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 113;;}
            else if ((359)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 114;;}
            else if ((358)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 115;;}
            else if ((72)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 117;;}
            else if ((285)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 118;;}
            else if ((288)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 122;;}
            else if ((473)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 135;;}
            else if ((468)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 136;;}
            else if ((476)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 138;;}
            else if ((469)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 139;;}
            else if ((470)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 140;;}
            else if ((475)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 141;;}
            else if ((467)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 142;;}
            else if ((462)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 143;;}
            else if ((388)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 144;;}
            else if ((421)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 147;;}
            else if ((79)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 148;;}
            else if ((391)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 150;;}
            else if ((382)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 154;;}
            else if ((394)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 155;;}
            else if ((386)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 157;;}
            else if ((393)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 158;;}
            else if ((167)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;
            
            self.escape_s = p;
            self.escape = nil;;}
            else if ((115)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((142)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((343)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((120)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((147)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((348)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((119)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((146)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((347)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((117)['$===']($case)) {
            
            self.escape = "\u007F";;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((144)['$===']($case)) {
            
            self.escape = "\u007F";;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((345)['$===']($case)) {
            
            self.escape = "\u007F";;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((113)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((140)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((341)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((124)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((151)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((352)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((107)['$===']($case)) {
            
            self.escape_s = p;
            self.escape = nil;;
            
            self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((135)['$===']($case)) {
            
            self.escape_s = p;
            self.escape = nil;;
            
            self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((336)['$===']($case)) {
            
            self.escape_s = p;
            self.escape = nil;;
            
            self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((61)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.newline_s = p;;}
            else if ((203)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((218)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((230)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((252)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            
            self.cs = 767;
            _goto_level = _again;
            continue;;;;;}
            else if ((267)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((279)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((305)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((369)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((379)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((401)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((94)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((452)['$===']($case)) {
            
            self.num_base = 10;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$28 = function(chars){var self = $$28.$$s || this;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$28.$$s = self, $$28.$$arity = 1, $$28));;}
            else if ((416)['$===']($case)) {
            
            self.num_base = 8;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$29 = function(chars){var self = $$29.$$s || this;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$29.$$s = self, $$29.$$arity = 1, $$29));;}
            else if ((431)['$===']($case)) {
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$30 = function(chars){var self = $$30.$$s || this;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$30.$$s = self, $$30.$$arity = 1, $$30));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((424)['$===']($case)) {
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$31 = function(chars){var self = $$31.$$s || this;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tFLOAT", self.$Float(chars));}, $$31.$$s = self, $$31.$$arity = 1, $$31));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((420)['$===']($case)) {
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$32 = function(chars){var self = $$32.$$s || this;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tFLOAT", self.$Float(chars));}, $$32.$$s = self, $$32.$$arity = 1, $$32));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((258)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.newline_s = p;;
            
            self.act = 74;;}
            else if ((35)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.act = 73;;}
            else if ((46)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.act = 81;;}
            else if ((65)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.act = 94;;}
            else if ((82)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.act = 137;;}
            else if ((37)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            tm = p;;
            
            self.act = 68;;}
            else if ((362)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            tm = p;;
            
            self.act = 117;;}
            else if ((361)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            tm = p;;
            
            self.act = 118;;}
            else if ((453)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.num_base = 10;
            self.num_digits_s = self.ts;;
            
            self.act = 144;;}
            else if ((118)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((145)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((346)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((116)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((143)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              if ($truthy(current_literal['$squiggly_heredoc?']())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
              }
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((344)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 767;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((448)['$===']($case)) {
            
            self.num_base = 16;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$33 = function(chars){var self = $$33.$$s || this;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$33.$$s = self, $$33.$$arity = 1, $$33));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((442)['$===']($case)) {
            
            self.num_base = 10;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$34 = function(chars){var self = $$34.$$s || this;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$34.$$s = self, $$34.$$arity = 1, $$34));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((445)['$===']($case)) {
            
            self.num_base = 8;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$35 = function(chars){var self = $$35.$$s || this;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$35.$$s = self, $$35.$$arity = 1, $$35));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((439)['$===']($case)) {
            
            self.num_base = 2;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$36 = function(chars){var self = $$36.$$s || this;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$36.$$s = self, $$36.$$arity = 1, $$36));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((451)['$===']($case)) {
            
            self.num_base = 10;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$37 = function(chars){var self = $$37.$$s || this;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$37.$$s = self, $$37.$$arity = 1, $$37));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((415)['$===']($case)) {
            
            self.num_base = 8;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$38 = function(chars){var self = $$38.$$s || this;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$38.$$s = self, $$38.$$arity = 1, $$38));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((31)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            tm = p;;
            
            self.act = 68;;}
            else if ((62)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.act = 94;;}
            else if ((458)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$39 = function(chars){var self = $$39.$$s || this;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$39.$$s = self, $$39.$$arity = 1, $$39));;
            
            self.act = 146;;}
            else if ((454)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.num_base = 10;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$40 = function(chars){var self = $$40.$$s || this;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$40.$$s = self, $$40.$$arity = 1, $$40));;
            
            self.act = 146;;}
            else if ((418)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.num_base = 8;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$41 = function(chars){var self = $$41.$$s || this;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$41.$$s = self, $$41.$$arity = 1, $$41));;
            
            self.act = 146;;}};};
        if ($truthy($rb_le(_goto_level, _again))) {
          
          $case = _lex_to_state_actions['$[]'](self.cs);
          if ((88)['$===']($case)) {
          self.ts = nil;};
          if (self.cs['$=='](0)) {
            
            _goto_level = _out;
            continue;;};
          p = $rb_plus(p, 1);
          if ($truthy(p['$!='](pe))) {
            
            _goto_level = _resume;
            continue;;};};
        if ($truthy($rb_le(_goto_level, _test_eof))) {
          if (p['$=='](eof)) {
            if ($truthy($rb_gt(_lex_eof_trans['$[]'](self.cs), 0))) {
              
              _trans = $rb_minus(_lex_eof_trans['$[]'](self.cs), 1);
              _goto_level = _eof_trans;
              continue;;}}};
        if ($truthy($rb_le(_goto_level, _out))) {
          break;};
      };;
      self.p = p;
      if ($truthy(self.token_queue['$any?']())) {
        return self.token_queue.$shift()
      } else if (self.cs['$=='](klass.$lex_error())) {
        return [false, ["$error".$freeze(), self.$range($rb_minus(p, 1), p)]]
      } else {
        
        eof = self.source_pts.$size();
        return [false, ["$eof".$freeze(), self.$range(eof, eof)]];
      };
    }, $Lexer_advance$12.$$arity = 0);
    self.$protected();
    
    Opal.def(self, '$eof_codepoint?', $Lexer_eof_codepoint$ques$42 = function(point) {
      var self = this;

      return [4, 26, 0]['$include?'](point)
    }, $Lexer_eof_codepoint$ques$42.$$arity = 1);
    
    Opal.def(self, '$version?', $Lexer_version$ques$43 = function($a) {
      var $post_args, versions, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      versions = $post_args;;
      return versions['$include?'](self.version);
    }, $Lexer_version$ques$43.$$arity = -1);
    
    Opal.def(self, '$stack_pop', $Lexer_stack_pop$44 = function $$stack_pop() {
      var self = this;

      
      self.top = $rb_minus(self.top, 1);
      return self.stack['$[]'](self.top);
    }, $Lexer_stack_pop$44.$$arity = 0);
    
    Opal.def(self, '$encode_escape', $Lexer_encode_escape$45 = function $$encode_escape(ord) {
      var self = this;

      return ord.$chr().$force_encoding(self.source_buffer.$source().$encoding())
    }, $Lexer_encode_escape$45.$$arity = 1);
    
    Opal.def(self, '$tok', $Lexer_tok$46 = function $$tok(s, e) {
      var self = this;

      
      
      if (s == null) {
        s = self.ts;
      };
      
      if (e == null) {
        e = self.te;
      };
      return self.source_buffer.$slice(Opal.Range.$new(s,e, true));
    }, $Lexer_tok$46.$$arity = -1);
    
    Opal.def(self, '$range', $Lexer_range$47 = function $$range(s, e) {
      var self = this;

      
      
      if (s == null) {
        s = self.ts;
      };
      
      if (e == null) {
        e = self.te;
      };
      return $$$($$$($$($nesting, 'Parser'), 'Source'), 'Range').$new(self.source_buffer, s, e);
    }, $Lexer_range$47.$$arity = -1);
    
    Opal.def(self, '$emit', $Lexer_emit$48 = function $$emit(type, value, s, e) {
      var self = this, token = nil;

      
      
      if (value == null) {
        value = self.$tok();
      };
      
      if (s == null) {
        s = self.ts;
      };
      
      if (e == null) {
        e = self.te;
      };
      token = [type, [value, self.$range(s, e)]];
      self.token_queue.$push(token);
      if ($truthy(self.tokens)) {
        self.tokens.$push(token)};
      return token;
    }, $Lexer_emit$48.$$arity = -2);
    
    Opal.def(self, '$emit_table', $Lexer_emit_table$49 = function $$emit_table(table, s, e) {
      var self = this, value = nil;

      
      
      if (s == null) {
        s = self.ts;
      };
      
      if (e == null) {
        e = self.te;
      };
      value = self.$tok(s, e);
      return self.$emit(table['$[]'](value), value, s, e);
    }, $Lexer_emit_table$49.$$arity = -2);
    
    Opal.def(self, '$emit_do', $Lexer_emit_do$50 = function $$emit_do(do_block) {
      var $a, self = this;

      
      
      if (do_block == null) {
        do_block = false;
      };
      if ($truthy(self.cond['$active?']())) {
        return self.$emit("kDO_COND", "do".$freeze())
      } else if ($truthy(($truthy($a = self.cmdarg['$active?']()) ? $a : do_block))) {
        return self.$emit("kDO_BLOCK", "do".$freeze())
      } else {
        return self.$emit("kDO", "do".$freeze())
      };
    }, $Lexer_emit_do$50.$$arity = -1);
    
    Opal.def(self, '$arg_or_cmdarg', $Lexer_arg_or_cmdarg$51 = function $$arg_or_cmdarg() {
      var self = this;

      if ($truthy(self.command_state)) {
        return self.$class().$lex_en_expr_cmdarg()
      } else {
        return self.$class().$lex_en_expr_arg()
      }
    }, $Lexer_arg_or_cmdarg$51.$$arity = 0);
    
    Opal.def(self, '$emit_comment', $Lexer_emit_comment$52 = function $$emit_comment(s, e) {
      var self = this;

      
      
      if (s == null) {
        s = self.ts;
      };
      
      if (e == null) {
        e = self.te;
      };
      if ($truthy(self.comments)) {
        self.comments.$push($$$($$$($$($nesting, 'Parser'), 'Source'), 'Comment').$new(self.$range(s, e)))};
      if ($truthy(self.tokens)) {
        self.tokens.$push(["tCOMMENT", [self.$tok(s, e), self.$range(s, e)]])};
      return nil;
    }, $Lexer_emit_comment$52.$$arity = -1);
    
    Opal.def(self, '$diagnostic', $Lexer_diagnostic$53 = function $$diagnostic(type, reason, arguments$, location, highlights) {
      var self = this;

      
      
      if (arguments$ == null) {
        arguments$ = nil;
      };
      
      if (location == null) {
        location = self.$range();
      };
      
      if (highlights == null) {
        highlights = [];
      };
      return self.diagnostics.$process($$$($$($nesting, 'Parser'), 'Diagnostic').$new(type, reason, arguments$, location, highlights));
    }, $Lexer_diagnostic$53.$$arity = -3);
    
    Opal.def(self, '$push_literal', $Lexer_push_literal$54 = function $$push_literal($a) {
      var $post_args, args, self = this, new_literal = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      new_literal = $send($$($nesting, 'Literal'), 'new', [self].concat(Opal.to_a(args)));
      self.literal_stack.$push(new_literal);
      return self.$next_state_for_literal(new_literal);
    }, $Lexer_push_literal$54.$$arity = -1);
    
    Opal.def(self, '$next_state_for_literal', $Lexer_next_state_for_literal$55 = function $$next_state_for_literal(literal) {
      var $a, self = this;

      if ($truthy(($truthy($a = literal['$words?']()) ? literal['$backslash_delimited?']() : $a))) {
        if ($truthy(literal['$interpolate?']())) {
          return self.$class().$lex_en_interp_backslash_delimited_words()
        } else {
          return self.$class().$lex_en_plain_backslash_delimited_words()
        }
      } else if ($truthy(($truthy($a = literal['$words?']()) ? literal['$backslash_delimited?']()['$!']() : $a))) {
        if ($truthy(literal['$interpolate?']())) {
          return self.$class().$lex_en_interp_words()
        } else {
          return self.$class().$lex_en_plain_words()
        }
      } else if ($truthy(($truthy($a = literal['$words?']()['$!']()) ? literal['$backslash_delimited?']() : $a))) {
        if ($truthy(literal['$interpolate?']())) {
          return self.$class().$lex_en_interp_backslash_delimited()
        } else {
          return self.$class().$lex_en_plain_backslash_delimited()
        }
      } else if ($truthy(literal['$interpolate?']())) {
        return self.$class().$lex_en_interp_string()
      } else {
        return self.$class().$lex_en_plain_string()
      }
    }, $Lexer_next_state_for_literal$55.$$arity = 1);
    
    Opal.def(self, '$literal', $Lexer_literal$56 = function $$literal() {
      var self = this;

      return self.literal_stack.$last()
    }, $Lexer_literal$56.$$arity = 0);
    
    Opal.def(self, '$pop_literal', $Lexer_pop_literal$57 = function $$pop_literal() {
      var self = this, old_literal = nil;

      
      old_literal = self.literal_stack.$pop();
      self.dedent_level = old_literal.$dedent_level();
      if (old_literal.$type()['$==']("tREGEXP_BEG")) {
        return self.$class().$lex_en_regexp_modifiers()
      } else {
        return self.$class().$lex_en_expr_end()
      };
    }, $Lexer_pop_literal$57.$$arity = 0);
    Opal.const_set($nesting[0], 'PUNCTUATION', $hash2(["=", "&", "|", "!", "^", "+", "-", "*", "/", "%", "~", ",", ";", ".", "..", "...", "[", "]", "(", ")", "?", ":", "&&", "||", "-@", "+@", "~@", "**", "->", "=~", "!~", "==", "!=", ">", ">>", ">=", "<", "<<", "<=", "=>", "::", "===", "<=>", "[]", "[]=", "{", "}", "`", "!@", "&."], {"=": "tEQL", "&": "tAMPER2", "|": "tPIPE", "!": "tBANG", "^": "tCARET", "+": "tPLUS", "-": "tMINUS", "*": "tSTAR2", "/": "tDIVIDE", "%": "tPERCENT", "~": "tTILDE", ",": "tCOMMA", ";": "tSEMI", ".": "tDOT", "..": "tDOT2", "...": "tDOT3", "[": "tLBRACK2", "]": "tRBRACK", "(": "tLPAREN2", ")": "tRPAREN", "?": "tEH", ":": "tCOLON", "&&": "tANDOP", "||": "tOROP", "-@": "tUMINUS", "+@": "tUPLUS", "~@": "tTILDE", "**": "tPOW", "->": "tLAMBDA", "=~": "tMATCH", "!~": "tNMATCH", "==": "tEQ", "!=": "tNEQ", ">": "tGT", ">>": "tRSHFT", ">=": "tGEQ", "<": "tLT", "<<": "tLSHFT", "<=": "tLEQ", "=>": "tASSOC", "::": "tCOLON2", "===": "tEQQ", "<=>": "tCMP", "[]": "tAREF", "[]=": "tASET", "{": "tLCURLY", "}": "tRCURLY", "`": "tBACK_REF2", "!@": "tBANG", "&.": "tANDDOT"}));
    Opal.const_set($nesting[0], 'PUNCTUATION_BEGIN', $hash2(["&", "*", "**", "+", "-", "::", "(", "{", "["], {"&": "tAMPER", "*": "tSTAR", "**": "tDSTAR", "+": "tUPLUS", "-": "tUMINUS", "::": "tCOLON3", "(": "tLPAREN", "{": "tLBRACE", "[": "tLBRACK"}));
    Opal.const_set($nesting[0], 'KEYWORDS', $hash2(["if", "unless", "while", "until", "rescue", "defined?", "BEGIN", "END"], {"if": "kIF_MOD", "unless": "kUNLESS_MOD", "while": "kWHILE_MOD", "until": "kUNTIL_MOD", "rescue": "kRESCUE_MOD", "defined?": "kDEFINED", "BEGIN": "klBEGIN", "END": "klEND"}));
    Opal.const_set($nesting[0], 'KEYWORDS_BEGIN', $hash2(["if", "unless", "while", "until", "rescue", "defined?", "BEGIN", "END"], {"if": "kIF", "unless": "kUNLESS", "while": "kWHILE", "until": "kUNTIL", "rescue": "kRESCUE", "defined?": "kDEFINED", "BEGIN": "klBEGIN", "END": "klEND"}));
    return $send(["class", "module", "def", "undef", "begin", "end", "then", "elsif", "else", "ensure", "case", "when", "for", "break", "next", "redo", "retry", "in", "do", "return", "yield", "super", "self", "nil", "true", "false", "and", "or", "not", "alias", "__FILE__", "__LINE__", "__ENCODING__"], 'each', [], ($Lexer$58 = function(keyword){var self = $Lexer$58.$$s || this;

    
      
      if (keyword == null) {
        keyword = nil;
      };
      $writer = [keyword, (($writer = [keyword, "" + "k" + (keyword.$upcase())]), $send($$($nesting, 'KEYWORDS'), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])];
      $send($$($nesting, 'KEYWORDS_BEGIN'), '[]=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];}, $Lexer$58.$$s = self, $Lexer$58.$$arity = 1, $Lexer$58));
  })($$($nesting, 'Parser'), null, $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/lexer/literal"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$attr_accessor', '$coerce_encoding', '$include?', '$send', '$+', '$[]', '$fetch', '$==', '$!', '$heredoc?', '$start_with?', '$freeze', '$clear_buffer', '$emit_start_tok', '$type', '$words?', '$=~', '$delimiter?', '$-', '$extend_space', '$!=', '$flush_string', '$emit', '$each_char', '$===', '$%', '$nil?', '$>', '$<<', '$empty?', '$extend_content', '$protected', '$lstrip', '$b', '$dup', '$force_encoding', '$encoding', '$source', '$source_buffer', '$length']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Literal');

      var $nesting = [self].concat($parent_nesting), $Literal_initialize$1, $Literal_interpolate$ques$2, $Literal_words$ques$3, $Literal_regexp$ques$4, $Literal_heredoc$ques$5, $Literal_plain_heredoc$ques$6, $Literal_squiggly_heredoc$ques$7, $Literal_backslash_delimited$ques$8, $Literal_type$9, $Literal_munge_escape$ques$10, $Literal_nest_and_try_closing$11, $Literal_infer_indent_level$12, $Literal_start_interp_brace$14, $Literal_end_interp_brace_and_try_closing$15, $Literal_extend_string$16, $Literal_flush_string$17, $Literal_extend_content$18, $Literal_extend_space$19, $Literal_delimiter$ques$20, $Literal_coerce_encoding$21, $Literal_clear_buffer$22, $Literal_emit_start_tok$23, $Literal_emit$24;

      self.$$prototype.lexer = self.$$prototype.start_tok = self.$$prototype.str_type = self.$$prototype.monolithic = self.$$prototype.interpolate = self.$$prototype.heredoc_e = self.$$prototype.dedent_body = self.$$prototype.end_delim = self.$$prototype.start_delim = self.$$prototype.nesting = self.$$prototype.label_allowed = self.$$prototype.buffer = self.$$prototype.str_s = self.$$prototype.interp_braces = self.$$prototype.buffer_s = self.$$prototype.buffer_e = self.$$prototype.space_emitted = self.$$prototype.indent = nil;
      
      Opal.const_set($nesting[0], 'DELIMITERS', $hash2(["(", "[", "{", "<"], {"(": ")".$force_encoding("ASCII-8BIT"), "[": "]".$force_encoding("ASCII-8BIT"), "{": "}".$force_encoding("ASCII-8BIT"), "<": ">".$force_encoding("ASCII-8BIT")}));
      Opal.const_set($nesting[0], 'TYPES', $hash2(["'", "<<'", "%q", "\"", "<<\"", "%", "%Q", "%w", "%W", "%i", "%I", ":'", "%s", ":\"", "/", "%r", "%x", "`", "<<`"], {"'": ["tSTRING_BEG", false], "<<'": ["tSTRING_BEG", false], "%q": ["tSTRING_BEG", false], "\"": ["tSTRING_BEG", true], "<<\"": ["tSTRING_BEG", true], "%": ["tSTRING_BEG", true], "%Q": ["tSTRING_BEG", true], "%w": ["tQWORDS_BEG", false], "%W": ["tWORDS_BEG", true], "%i": ["tQSYMBOLS_BEG", false], "%I": ["tSYMBOLS_BEG", true], ":'": ["tSYMBEG", false], "%s": ["tSYMBEG", false], ":\"": ["tSYMBEG", true], "/": ["tREGEXP_BEG", true], "%r": ["tREGEXP_BEG", true], "%x": ["tXSTRING_BEG", true], "`": ["tXSTRING_BEG", true], "<<`": ["tXSTRING_BEG", true]}));
      self.$attr_reader("heredoc_e", "str_s", "dedent_level");
      self.$attr_accessor("saved_herebody_s");
      
      Opal.def(self, '$initialize', $Literal_initialize$1 = function $$initialize(lexer, str_type, delimiter, str_s, heredoc_e, indent, dedent_body, label_allowed) {
        var $a, $b, self = this;

        
        
        if (heredoc_e == null) {
          heredoc_e = nil;
        };
        
        if (indent == null) {
          indent = false;
        };
        
        if (dedent_body == null) {
          dedent_body = false;
        };
        
        if (label_allowed == null) {
          label_allowed = false;
        };
        self.lexer = lexer;
        self.nesting = 1;
        str_type = self.$coerce_encoding(str_type);
        delimiter = self.$coerce_encoding(delimiter);
        if ($truthy($$($nesting, 'TYPES')['$include?'](str_type))) {
        } else {
          lexer.$send("diagnostic", "error", "unexpected_percent_str", $hash2(["type"], {"type": str_type}), self.lexer.$send("range", str_s, $rb_plus(str_s, 2)))
        };
        self.str_type = str_type;
        self.str_s = str_s;
        $b = $$($nesting, 'TYPES')['$[]'](str_type), $a = Opal.to_ary($b), (self.start_tok = ($a[0] == null ? nil : $a[0])), (self.interpolate = ($a[1] == null ? nil : $a[1])), $b;
        self.start_delim = (function() {if ($truthy($$($nesting, 'DELIMITERS')['$include?'](delimiter))) {
          return delimiter
        } else {
          return nil
        }; return nil; })();
        self.end_delim = $$($nesting, 'DELIMITERS').$fetch(delimiter, delimiter);
        self.heredoc_e = heredoc_e;
        self.indent = indent;
        self.label_allowed = label_allowed;
        self.dedent_body = dedent_body;
        self.dedent_level = nil;
        self.interp_braces = 0;
        self.space_emitted = true;
        self.monolithic = ($truthy($a = (($b = self.start_tok['$==']("tSTRING_BEG")) ? ["'".$force_encoding("ASCII-8BIT"), "\"".$force_encoding("ASCII-8BIT")]['$include?'](str_type) : self.start_tok['$==']("tSTRING_BEG"))) ? self['$heredoc?']()['$!']() : $a);
        if ($truthy(self.str_type['$start_with?']("%".$force_encoding("ASCII-8BIT").$freeze()))) {
          self.str_type = $rb_plus(self.str_type, delimiter)};
        self.$clear_buffer();
        if ($truthy(self.monolithic)) {
          return nil
        } else {
          return self.$emit_start_tok()
        };
      }, $Literal_initialize$1.$$arity = -5);
      
      Opal.def(self, '$interpolate?', $Literal_interpolate$ques$2 = function() {
        var self = this;

        return self.interpolate
      }, $Literal_interpolate$ques$2.$$arity = 0);
      
      Opal.def(self, '$words?', $Literal_words$ques$3 = function() {
        var $a, $b, $c, self = this;

        return ($truthy($a = ($truthy($b = ($truthy($c = self.$type()['$==']("tWORDS_BEG")) ? $c : self.$type()['$==']("tQWORDS_BEG"))) ? $b : self.$type()['$==']("tSYMBOLS_BEG"))) ? $a : self.$type()['$==']("tQSYMBOLS_BEG"))
      }, $Literal_words$ques$3.$$arity = 0);
      
      Opal.def(self, '$regexp?', $Literal_regexp$ques$4 = function() {
        var self = this;

        return self.$type()['$==']("tREGEXP_BEG")
      }, $Literal_regexp$ques$4.$$arity = 0);
      
      Opal.def(self, '$heredoc?', $Literal_heredoc$ques$5 = function() {
        var self = this;

        return self.heredoc_e['$!']()['$!']()
      }, $Literal_heredoc$ques$5.$$arity = 0);
      
      Opal.def(self, '$plain_heredoc?', $Literal_plain_heredoc$ques$6 = function() {
        var $a, self = this;

        return ($truthy($a = self['$heredoc?']()) ? self.dedent_body['$!']() : $a)
      }, $Literal_plain_heredoc$ques$6.$$arity = 0);
      
      Opal.def(self, '$squiggly_heredoc?', $Literal_squiggly_heredoc$ques$7 = function() {
        var $a, self = this;

        return ($truthy($a = self['$heredoc?']()) ? self.dedent_body : $a)
      }, $Literal_squiggly_heredoc$ques$7.$$arity = 0);
      
      Opal.def(self, '$backslash_delimited?', $Literal_backslash_delimited$ques$8 = function() {
        var self = this;

        return self.end_delim['$==']("\\".$force_encoding("ASCII-8BIT").$freeze())
      }, $Literal_backslash_delimited$ques$8.$$arity = 0);
      
      Opal.def(self, '$type', $Literal_type$9 = function $$type() {
        var self = this;

        return self.start_tok
      }, $Literal_type$9.$$arity = 0);
      
      Opal.def(self, '$munge_escape?', $Literal_munge_escape$ques$10 = function(character) {
        var $a, self = this;

        
        character = self.$coerce_encoding(character);
        if ($truthy(($truthy($a = self['$words?']()) ? character['$=~'](/[ \t\v\r\f\n]/) : $a))) {
          return true
        } else {
          return ["\\".$force_encoding("ASCII-8BIT").$freeze(), self.start_delim, self.end_delim]['$include?'](character)
        };
      }, $Literal_munge_escape$ques$10.$$arity = 1);
      
      Opal.def(self, '$nest_and_try_closing', $Literal_nest_and_try_closing$11 = function $$nest_and_try_closing(delimiter, ts, te, lookahead) {
        var $a, $b, $c, $d, self = this;

        
        
        if (lookahead == null) {
          lookahead = nil;
        };
        delimiter = self.$coerce_encoding(delimiter);
        if ($truthy(($truthy($a = self.start_delim) ? self.start_delim['$=='](delimiter) : $a))) {
          self.nesting = $rb_plus(self.nesting, 1)
        } else if ($truthy(self['$delimiter?'](delimiter))) {
          self.nesting = $rb_minus(self.nesting, 1)};
        if (self.nesting['$=='](0)) {
          
          if ($truthy(self['$words?']())) {
            self.$extend_space(ts, ts)};
          if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = lookahead) ? self.label_allowed : $d)) ? lookahead['$[]'](0)['$=='](":".$force_encoding("ASCII-8BIT")) : $c)) ? lookahead['$[]'](1)['$!='](":".$force_encoding("ASCII-8BIT")) : $b)) ? self.start_tok['$==']("tSTRING_BEG") : $a))) {
            
            self.$flush_string();
            return self.$emit("tLABEL_END", self.end_delim, ts, $rb_plus(te, 1));
          } else if ($truthy(self.monolithic)) {
            return self.$emit("tSTRING", self.buffer, self.str_s, te)
          } else {
            
            if ($truthy(self['$heredoc?']())) {
            } else {
              self.$flush_string()
            };
            return self.$emit("tSTRING_END", self.end_delim, ts, te);
          };
        } else {
          return nil
        };
      }, $Literal_nest_and_try_closing$11.$$arity = -4);
      
      Opal.def(self, '$infer_indent_level', $Literal_infer_indent_level$12 = function $$infer_indent_level(line) {
        var $$13, self = this, indent_level = nil;

        
        if ($truthy(self.dedent_body['$!']())) {
          return nil};
        indent_level = 0;
        return (function(){var $brk = Opal.new_brk(); try {return $send(line, 'each_char', [], ($$13 = function(char$){var self = $$13.$$s || this, $a, $case = nil;
          if (self.dedent_level == null) self.dedent_level = nil;

        
          
          if (char$ == null) {
            char$ = nil;
          };
          return (function() {$case = char$;
          if (" "['$===']($case)) {return (indent_level = $rb_plus(indent_level, 1))}
          else if ("\t"['$===']($case)) {return (indent_level = $rb_plus(indent_level, $rb_minus(8, indent_level['$%'](8))))}
          else {
          if ($truthy(($truthy($a = self.dedent_level['$nil?']()) ? $a : $rb_gt(self.dedent_level, indent_level)))) {
            self.dedent_level = indent_level};
          
          Opal.brk(nil, $brk);}})();}, $$13.$$s = self, $$13.$$brk = $brk, $$13.$$arity = 1, $$13))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      }, $Literal_infer_indent_level$12.$$arity = 1);
      
      Opal.def(self, '$start_interp_brace', $Literal_start_interp_brace$14 = function $$start_interp_brace() {
        var self = this;

        return (self.interp_braces = $rb_plus(self.interp_braces, 1))
      }, $Literal_start_interp_brace$14.$$arity = 0);
      
      Opal.def(self, '$end_interp_brace_and_try_closing', $Literal_end_interp_brace_and_try_closing$15 = function $$end_interp_brace_and_try_closing() {
        var self = this;

        
        self.interp_braces = $rb_minus(self.interp_braces, 1);
        
        return self.interp_braces['$=='](0);;
      }, $Literal_end_interp_brace_and_try_closing$15.$$arity = 0);
      
      Opal.def(self, '$extend_string', $Literal_extend_string$16 = function $$extend_string(string, ts, te) {
        var $a, self = this;

        
        self.buffer_s = ($truthy($a = self.buffer_s) ? $a : ts);
        self.buffer_e = te;
        return self.buffer['$<<'](string);
      }, $Literal_extend_string$16.$$arity = 3);
      
      Opal.def(self, '$flush_string', $Literal_flush_string$17 = function $$flush_string() {
        var self = this;

        
        if ($truthy(self.monolithic)) {
          
          self.$emit_start_tok();
          self.monolithic = false;};
        if ($truthy(self.buffer['$empty?']())) {
          return nil
        } else {
          
          self.$emit("tSTRING_CONTENT", self.buffer, self.buffer_s, self.buffer_e);
          self.$clear_buffer();
          return self.$extend_content();
        };
      }, $Literal_flush_string$17.$$arity = 0);
      
      Opal.def(self, '$extend_content', $Literal_extend_content$18 = function $$extend_content() {
        var self = this;

        return (self.space_emitted = false)
      }, $Literal_extend_content$18.$$arity = 0);
      
      Opal.def(self, '$extend_space', $Literal_extend_space$19 = function $$extend_space(ts, te) {
        var self = this;

        
        self.$flush_string();
        if ($truthy(self.space_emitted)) {
          return nil
        } else {
          
          self.$emit("tSPACE", nil, ts, te);
          return (self.space_emitted = true);
        };
      }, $Literal_extend_space$19.$$arity = 2);
      self.$protected();
      
      Opal.def(self, '$delimiter?', $Literal_delimiter$ques$20 = function(delimiter) {
        var self = this;

        if ($truthy(self.indent)) {
          return self.end_delim['$=='](delimiter.$lstrip())
        } else {
          return self.end_delim['$=='](delimiter)
        }
      }, $Literal_delimiter$ques$20.$$arity = 1);
      
      Opal.def(self, '$coerce_encoding', $Literal_coerce_encoding$21 = function $$coerce_encoding(string) {
        var self = this;

        return string.$b()
      }, $Literal_coerce_encoding$21.$$arity = 1);
      
      Opal.def(self, '$clear_buffer', $Literal_clear_buffer$22 = function $$clear_buffer() {
        var self = this;

        
        self.buffer = "".$force_encoding("ASCII-8BIT").$dup();
        self.buffer.$force_encoding(self.lexer.$source_buffer().$source().$encoding());
        self.buffer_s = nil;
        return (self.buffer_e = nil);
      }, $Literal_clear_buffer$22.$$arity = 0);
      
      Opal.def(self, '$emit_start_tok', $Literal_emit_start_tok$23 = function $$emit_start_tok() {
        var $a, self = this, str_e = nil;

        
        str_e = ($truthy($a = self.heredoc_e) ? $a : $rb_plus(self.str_s, self.str_type.$length()));
        return self.$emit(self.start_tok, self.str_type, self.str_s, str_e);
      }, $Literal_emit_start_tok$23.$$arity = 0);
      return (Opal.def(self, '$emit', $Literal_emit$24 = function $$emit(token, type, s, e) {
        var self = this;

        return self.lexer.$send("emit", token, type, s, e)
      }, $Literal_emit$24.$$arity = 4), nil) && 'emit';
    })($$($nesting, 'Lexer'), null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/lexer/stack_state"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$freeze', '$clear', '$|', '$<<', '$&', '$>>', '$==', '$[]', '$to_s']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'StackState');

      var $nesting = [self].concat($parent_nesting), $StackState_initialize$1, $StackState_clear$2, $StackState_push$3, $StackState_pop$4, $StackState_lexpop$5, $StackState_active$ques$6, $StackState_empty$ques$7, $StackState_to_s$8;

      self.$$prototype.stack = self.$$prototype.name = nil;
      
      
      Opal.def(self, '$initialize', $StackState_initialize$1 = function $$initialize(name) {
        var self = this;

        
        self.name = name.$freeze();
        return self.$clear();
      }, $StackState_initialize$1.$$arity = 1);
      
      Opal.def(self, '$clear', $StackState_clear$2 = function $$clear() {
        var self = this;

        return (self.stack = 0)
      }, $StackState_clear$2.$$arity = 0);
      
      Opal.def(self, '$push', $StackState_push$3 = function $$push(bit) {
        var self = this, bit_value = nil;

        
        bit_value = (function() {if ($truthy(bit)) {
          return 1
        } else {
          return 0
        }; return nil; })();
        self.stack = self.stack['$<<'](1)['$|'](bit_value);
        return bit;
      }, $StackState_push$3.$$arity = 1);
      
      Opal.def(self, '$pop', $StackState_pop$4 = function $$pop() {
        var self = this, bit_value = nil;

        
        bit_value = self.stack['$&'](1);
        self.stack = self.stack['$>>'](1);
        return bit_value['$=='](1);
      }, $StackState_pop$4.$$arity = 0);
      
      Opal.def(self, '$lexpop', $StackState_lexpop$5 = function $$lexpop() {
        var self = this;

        
        self.stack = self.stack['$>>'](1)['$|'](self.stack['$&'](1));
        return self.stack['$[]'](0)['$=='](1);
      }, $StackState_lexpop$5.$$arity = 0);
      
      Opal.def(self, '$active?', $StackState_active$ques$6 = function() {
        var self = this;

        return self.stack['$[]'](0)['$=='](1)
      }, $StackState_active$ques$6.$$arity = 0);
      
      Opal.def(self, '$empty?', $StackState_empty$ques$7 = function() {
        var self = this;

        return self.stack['$=='](0)
      }, $StackState_empty$ques$7.$$arity = 0);
      
      Opal.def(self, '$to_s', $StackState_to_s$8 = function $$to_s() {
        var self = this;

        return "" + "[" + (self.stack.$to_s(2)) + " <= " + (self.name) + "]"
      }, $StackState_to_s$8.$$arity = 0);
      return Opal.alias(self, "inspect", "to_s");
    })($$($nesting, 'Lexer'), null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/lexer/dedenter"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$-', '$length', '$each_with_index', '$chars', '$==', '$slice!', '$+', '$insert', '$>=', '$===', '$%']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Dedenter');

      var $nesting = [self].concat($parent_nesting), $Dedenter_initialize$1, $Dedenter_dedent$2, $Dedenter_interrupt$4;

      self.$$prototype.at_line_begin = nil;
      
      
      Opal.def(self, '$initialize', $Dedenter_initialize$1 = function $$initialize(dedent_level) {
        var self = this;

        
        self.dedent_level = dedent_level;
        self.at_line_begin = true;
        return (self.indent_level = 0);
      }, $Dedenter_initialize$1.$$arity = 1);
      
      Opal.def(self, '$dedent', $Dedenter_dedent$2 = function $$dedent(string) {
        var $$3, self = this, space_begin = nil, space_end = nil, offset = nil, last_index = nil, escape = nil, _at_line_begin = nil;

        
        space_begin = (space_end = (offset = 0));
        last_index = $rb_minus(string.$length(), 1);
        escape = false;
        _at_line_begin = nil;
        $send(string.$chars(), 'each_with_index', [], ($$3 = function(char$, index){var self = $$3.$$s || this, $a, $case = nil;
          if (self.at_line_begin == null) self.at_line_begin = nil;
          if (self.indent_level == null) self.indent_level = nil;
          if (self.dedent_level == null) self.dedent_level = nil;

        
          
          if (char$ == null) {
            char$ = nil;
          };
          
          if (index == null) {
            index = nil;
          };
          if (char$['$==']("\\")) {
            
            escape = true;
            string['$slice!']($rb_minus(index, offset));
            offset = $rb_plus(offset, 1);
            _at_line_begin = self.at_line_begin;
            return (self.at_line_begin = false);
          } else if ($truthy(escape)) {
            
            if (char$['$==']("\n")) {
              
              string['$slice!']($rb_minus(index, offset));
              offset = $rb_plus(offset, 1);
              self.at_line_begin = true;
              space_begin = (space_end = $rb_minus(index, offset));
              self.indent_level = 0;
            } else if (char$['$==']("n")) {
              
              string['$slice!']($rb_minus(index, offset));
              string.$insert($rb_minus(index, offset), "\n");
            } else {
              
              self.at_line_begin = _at_line_begin;
              escape = false;
              return $$3.apply(null, $slice.call(arguments));
            };
            return (escape = false);
          } else if ($truthy(self.at_line_begin)) {
            
            if ($truthy(($truthy($a = char$['$==']("\n")) ? $a : $rb_ge(self.indent_level, self.dedent_level)))) {
              
              string['$slice!'](Opal.Range.$new(space_begin,space_end, true));
              offset = $rb_plus(offset, $rb_minus(space_end, space_begin));
              self.at_line_begin = false;};
            return (function() {$case = char$;
            if (" "['$===']($case)) {
            self.indent_level = $rb_plus(self.indent_level, 1);
            return (space_end = $rb_plus(space_end, 1));}
            else if ("\t"['$===']($case)) {
            self.indent_level = $rb_plus(self.indent_level, $rb_minus(8, self.indent_level['$%'](8)));
            return (space_end = $rb_plus(space_end, 1));}
            else { return nil }})();
          } else if ($truthy((($a = char$['$==']("\n")) ? index['$=='](last_index) : char$['$==']("\n")))) {
            
            self.at_line_begin = true;
            self.indent_level = 0;
            return (space_begin = (space_end = $rb_plus($rb_minus(index, offset), 1)));
          } else {
            return nil
          };}, $$3.$$s = self, $$3.$$arity = 2, $$3));
        if ($truthy(self.at_line_begin)) {
          string['$slice!'](Opal.Range.$new(space_begin, space_end, false))};
        return nil;
      }, $Dedenter_dedent$2.$$arity = 1);
      return (Opal.def(self, '$interrupt', $Dedenter_interrupt$4 = function $$interrupt() {
        var self = this;

        return (self.at_line_begin = false)
      }, $Dedenter_interrupt$4.$$arity = 0), nil) && 'interrupt';
    })($$($nesting, 'Lexer'), null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/builders/default"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$attr_accessor', '$n0', '$token_map', '$numeric', '$n', '$value', '$new', '$loc', '$private', '$===', '$+@', '$-@', '$updated', '$join', '$expression', '$string_value', '$delimited_string_map', '$unquoted_map', '$collapse_string_parts?', '$nil?', '$first', '$children', '$string_map', '$prefix_string_map', '$to_sym', '$collection_map', '$==', '$version', '$empty?', '$diagnostic', '$!', '$type', '$dedent', '$each', '$interrupt', '$map', '$uniq', '$sort', '$each_char', '$to_proc', '$static_regexp', '$message', '$<<', '$regexp_map', '$unary_op_map', '$binary_op_map', '$!=', '$%', '$size', '$last', '$each_slice', '$pair_keyword_map', '$pair_quoted_map', '$symbol_compose', '$range_map', '$variable_map', '$name', '$source_buffer', '$dup', '$line', '$emit_encoding', '$class', '$declared?', '$static_env', '$var_send_map', '$constant_map', '$dynamic_const_definition_allowed?', '$context', '$declare', '$with_expression', '$with_operator', '$join_exprs', '$[]', '$module_definition_map', '$definition_map', '$keyword_map', '$check_duplicate_args', '$arg_prefix_map', '$kwarg_map', '$emit_procarg0', '$resize', '$-', '$end', '$call_type_for_dot', '$send_map', '$emit_lambda', '$expr_map', '$keyword', '$include?', '$block_map', '$array', '$+', '$emit_index', '$index_map', '$send_index_map', '$send_binary_op_map', '$static_regexp_node', '$names', '$send_unary_op_map', '$check_condition', '$condition_map', '$keyword_mod_map', '$ternary_map', '$for_map', '$>', '$count', '$rescue_body_map', '$any?', '$eh_keyword_map', '$push', '$none?', '$one?', '$begin', '$<=', '$[]=', '$arg_name_collides?', '$with', '$begin_pos', '$end_pos', '$adjust', '$start_with?', '$static_string', '$encode', '$valid_encoding?', '$process', '$diagnostics', '$send']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Default');

      var $nesting = [self].concat($parent_nesting), $Default_initialize$2, $Default_nil$3, $Default_true$4, $Default_false$5, $Default_integer$6, $Default_float$7, $Default_rational$8, $Default_complex$9, $Default_numeric$10, $Default_unary_num$11, $Default___LINE__$12, $Default_string$13, $Default_string_internal$14, $Default_string_compose$15, $Default_character$16, $Default___FILE__$17, $Default_symbol$18, $Default_symbol_internal$19, $Default_symbol_compose$20, $Default_xstring_compose$21, $Default_dedent_string$22, $Default_regexp_options$24, $Default_regexp_compose$25, $Default_array$26, $Default_splat$27, $Default_word$28, $Default_words_compose$29, $Default_symbols_compose$30, $Default_pair$32, $Default_pair_list_18$33, $Default_pair_keyword$35, $Default_pair_quoted$36, $Default_kwsplat$37, $Default_associate$38, $Default_range_inclusive$39, $Default_range_exclusive$40, $Default_self$41, $Default_ident$42, $Default_ivar$43, $Default_gvar$44, $Default_cvar$45, $Default_back_ref$46, $Default_nth_ref$47, $Default_accessible$48, $Default_const$49, $Default_const_global$50, $Default_const_fetch$51, $Default___ENCODING__$52, $Default_assignable$53, $Default_const_op_assignable$54, $Default_assign$55, $Default_op_assign$56, $Default_multi_lhs$57, $Default_multi_assign$58, $Default_def_class$59, $Default_def_sclass$60, $Default_def_module$61, $Default_def_method$62, $Default_def_singleton$63, $Default_undef_method$64, $Default_alias$65, $Default_args$66, $Default_arg$67, $Default_optarg$68, $Default_restarg$69, $Default_kwarg$70, $Default_kwoptarg$71, $Default_kwrestarg$72, $Default_shadowarg$73, $Default_blockarg$74, $Default_procarg0$75, $Default_arg_expr$76, $Default_restarg_expr$77, $Default_blockarg_expr$78, $Default_objc_kwarg$79, $Default_objc_restarg$80, $Default_call_type_for_dot$81, $Default_call_method$82, $Default_call_lambda$83, $Default_block$84, $Default_block_pass$85, $Default_objc_varargs$86, $Default_attr_asgn$87, $Default_index$88, $Default_index_asgn$89, $Default_binary_op$90, $Default_match_op$91, $Default_unary_op$93, $Default_not_op$94, $Default_logical_op$95, $Default_condition$96, $Default_condition_mod$97, $Default_ternary$98, $Default_when$99, $Default_case$100, $Default_loop$101, $Default_loop_mod$102, $Default_for$103, $Default_keyword_cmd$104, $Default_preexe$105, $Default_postexe$106, $Default_rescue_body$107, $Default_begin_body$108, $Default_compstmt$109, $Default_begin$110, $Default_begin_keyword$111, $Default_check_condition$112, $Default_check_duplicate_args$113, $Default_arg_name_collides$ques$115, $Default_n$116, $Default_n0$117, $Default_join_exprs$118, $Default_token_map$119, $Default_delimited_string_map$120, $Default_prefix_string_map$121, $Default_unquoted_map$122, $Default_pair_keyword_map$123, $Default_pair_quoted_map$124, $Default_expr_map$125, $Default_collection_map$126, $Default_string_map$127, $Default_regexp_map$128, $Default_constant_map$129, $Default_variable_map$130, $Default_binary_op_map$131, $Default_unary_op_map$132, $Default_range_map$133, $Default_arg_prefix_map$134, $Default_kwarg_map$135, $Default_module_definition_map$136, $Default_definition_map$137, $Default_send_map$138, $Default_var_send_map$139, $Default_send_binary_op_map$140, $Default_send_unary_op_map$141, $Default_index_map$142, $Default_send_index_map$143, $Default_block_map$144, $Default_keyword_map$145, $Default_keyword_mod_map$146, $Default_condition_map$147, $Default_ternary_map$148, $Default_for_map$149, $Default_rescue_body_map$150, $Default_eh_keyword_map$151, $Default_static_string$152, $Default_static_regexp$154, $Default_static_regexp_node$155, $Default_collapse_string_parts$ques$156, $Default_value$157, $Default_string_value$158, $Default_loc$159, $Default_diagnostic$160;

      self.$$prototype.parser = self.$$prototype.emit_file_line_as_literals = nil;
      
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_lambda")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_lambda = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_procarg0")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_procarg0 = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_encoding")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_encoding = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_index")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_index = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting), $modernize$1;

        return (Opal.def(self, '$modernize', $modernize$1 = function $$modernize() {
          var self = this;

          
          self.emit_lambda = true;
          self.emit_procarg0 = true;
          self.emit_encoding = true;
          return (self.emit_index = true);
        }, $modernize$1.$$arity = 0), nil) && 'modernize'
      })(Opal.get_singleton_class(self), $nesting);
      self.$attr_accessor("parser");
      self.$attr_accessor("emit_file_line_as_literals");
      
      Opal.def(self, '$initialize', $Default_initialize$2 = function $$initialize() {
        var self = this;

        return (self.emit_file_line_as_literals = true)
      }, $Default_initialize$2.$$arity = 0);
      
      Opal.def(self, '$nil', $Default_nil$3 = function $$nil(nil_t) {
        var self = this;

        return self.$n0("nil", self.$token_map(nil_t))
      }, $Default_nil$3.$$arity = 1);
      
      Opal.def(self, '$true', $Default_true$4 = function(true_t) {
        var self = this;

        return self.$n0("true", self.$token_map(true_t))
      }, $Default_true$4.$$arity = 1);
      
      Opal.def(self, '$false', $Default_false$5 = function(false_t) {
        var self = this;

        return self.$n0("false", self.$token_map(false_t))
      }, $Default_false$5.$$arity = 1);
      
      Opal.def(self, '$integer', $Default_integer$6 = function $$integer(integer_t) {
        var self = this;

        return self.$numeric("int", integer_t)
      }, $Default_integer$6.$$arity = 1);
      
      Opal.def(self, '$float', $Default_float$7 = function(float_t) {
        var self = this;

        return self.$numeric("float", float_t)
      }, $Default_float$7.$$arity = 1);
      
      Opal.def(self, '$rational', $Default_rational$8 = function $$rational(rational_t) {
        var self = this;

        return self.$numeric("rational", rational_t)
      }, $Default_rational$8.$$arity = 1);
      
      Opal.def(self, '$complex', $Default_complex$9 = function $$complex(complex_t) {
        var self = this;

        return self.$numeric("complex", complex_t)
      }, $Default_complex$9.$$arity = 1);
      
      Opal.def(self, '$numeric', $Default_numeric$10 = function $$numeric(kind, token) {
        var self = this;

        return self.$n(kind, [self.$value(token)], $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(nil, self.$loc(token)))
      }, $Default_numeric$10.$$arity = 2);
      self.$private("numeric");
      
      Opal.def(self, '$unary_num', $Default_unary_num$11 = function $$unary_num(unary_t, numeric) {
        var $a, self = this, value = nil, operator_loc = nil, $case = nil;

        
        $a = [].concat(Opal.to_a(numeric)), (value = ($a[0] == null ? nil : $a[0])), $a;
        operator_loc = self.$loc(unary_t);
        $case = self.$value(unary_t);
        if ("+"['$===']($case)) {value = value['$+@']()}
        else if ("-"['$===']($case)) {value = value['$-@']()};
        return numeric.$updated(nil, [value], $hash2(["location"], {"location": $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(operator_loc, operator_loc.$join(numeric.$loc().$expression()))}));
      }, $Default_unary_num$11.$$arity = 2);
      
      Opal.def(self, '$__LINE__', $Default___LINE__$12 = function $$__LINE__(__LINE__t) {
        var self = this;

        return self.$n0("__LINE__", self.$token_map(__LINE__t))
      }, $Default___LINE__$12.$$arity = 1);
      
      Opal.def(self, '$string', $Default_string$13 = function $$string(string_t) {
        var self = this;

        return self.$n("str", [self.$string_value(string_t)], self.$delimited_string_map(string_t))
      }, $Default_string$13.$$arity = 1);
      
      Opal.def(self, '$string_internal', $Default_string_internal$14 = function $$string_internal(string_t) {
        var self = this;

        return self.$n("str", [self.$string_value(string_t)], self.$unquoted_map(string_t))
      }, $Default_string_internal$14.$$arity = 1);
      
      Opal.def(self, '$string_compose', $Default_string_compose$15 = function $$string_compose(begin_t, parts, end_t) {
        var $a, self = this;

        if ($truthy(self['$collapse_string_parts?'](parts))) {
          if ($truthy(($truthy($a = begin_t['$nil?']()) ? end_t['$nil?']() : $a))) {
            return parts.$first()
          } else {
            return self.$n("str", parts.$first().$children(), self.$string_map(begin_t, parts, end_t))
          }
        } else {
          return self.$n("dstr", [].concat(Opal.to_a(parts)), self.$string_map(begin_t, parts, end_t))
        }
      }, $Default_string_compose$15.$$arity = 3);
      
      Opal.def(self, '$character', $Default_character$16 = function $$character(char_t) {
        var self = this;

        return self.$n("str", [self.$string_value(char_t)], self.$prefix_string_map(char_t))
      }, $Default_character$16.$$arity = 1);
      
      Opal.def(self, '$__FILE__', $Default___FILE__$17 = function $$__FILE__(__FILE__t) {
        var self = this;

        return self.$n0("__FILE__", self.$token_map(__FILE__t))
      }, $Default___FILE__$17.$$arity = 1);
      
      Opal.def(self, '$symbol', $Default_symbol$18 = function $$symbol(symbol_t) {
        var self = this;

        return self.$n("sym", [self.$string_value(symbol_t).$to_sym()], self.$prefix_string_map(symbol_t))
      }, $Default_symbol$18.$$arity = 1);
      
      Opal.def(self, '$symbol_internal', $Default_symbol_internal$19 = function $$symbol_internal(symbol_t) {
        var self = this;

        return self.$n("sym", [self.$string_value(symbol_t).$to_sym()], self.$unquoted_map(symbol_t))
      }, $Default_symbol_internal$19.$$arity = 1);
      
      Opal.def(self, '$symbol_compose', $Default_symbol_compose$20 = function $$symbol_compose(begin_t, parts, end_t) {
        var $a, self = this, str = nil;

        if ($truthy(self['$collapse_string_parts?'](parts))) {
          
          str = parts.$first();
          return self.$n("sym", [str.$children().$first().$to_sym()], self.$collection_map(begin_t, str.$loc().$expression(), end_t));
        } else if ($truthy((($a = self.parser.$version()['$=='](18)) ? parts['$empty?']() : self.parser.$version()['$=='](18)))) {
          return self.$diagnostic("error", "empty_symbol", nil, self.$loc(begin_t).$join(self.$loc(end_t)))
        } else {
          return self.$n("dsym", [].concat(Opal.to_a(parts)), self.$collection_map(begin_t, parts, end_t))
        }
      }, $Default_symbol_compose$20.$$arity = 3);
      
      Opal.def(self, '$xstring_compose', $Default_xstring_compose$21 = function $$xstring_compose(begin_t, parts, end_t) {
        var self = this;

        return self.$n("xstr", [].concat(Opal.to_a(parts)), self.$string_map(begin_t, parts, end_t))
      }, $Default_xstring_compose$21.$$arity = 3);
      
      Opal.def(self, '$dedent_string', $Default_dedent_string$22 = function $$dedent_string(node, dedent_level) {
        var $a, $$23, self = this, dedenter = nil, str = nil;

        
        if ($truthy(dedent_level['$nil?']()['$!']())) {
          
          dedenter = $$$($$($nesting, 'Lexer'), 'Dedenter').$new(dedent_level);
          if (node.$type()['$==']("str")) {
            
            str = node.$children().$first();
            dedenter.$dedent(str);
          } else if ($truthy(($truthy($a = node.$type()['$==']("dstr")) ? $a : node.$type()['$==']("xstr")))) {
            $send(node.$children(), 'each', [], ($$23 = function(str_node){var self = $$23.$$s || this;

            
              
              if (str_node == null) {
                str_node = nil;
              };
              if (str_node.$type()['$==']("str")) {
                
                str = str_node.$children().$first();
                return dedenter.$dedent(str);
              } else {
                return dedenter.$interrupt()
              };}, $$23.$$s = self, $$23.$$arity = 1, $$23))};};
        return node;
      }, $Default_dedent_string$22.$$arity = 2);
      
      Opal.def(self, '$regexp_options', $Default_regexp_options$24 = function $$regexp_options(regopt_t) {
        var self = this, options = nil;

        
        options = $send(self.$value(regopt_t).$each_char().$sort().$uniq(), 'map', [], "to_sym".$to_proc());
        return self.$n("regopt", options, self.$token_map(regopt_t));
      }, $Default_regexp_options$24.$$arity = 1);
      
      Opal.def(self, '$regexp_compose', $Default_regexp_compose$25 = function $$regexp_compose(begin_t, parts, end_t, options) {
        var self = this, e = nil;

        
        
        try {
          self.$static_regexp(parts, options)
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'RegexpError')])) {e = $err;
            try {
              self.$diagnostic("error", "invalid_regexp", $hash2(["message"], {"message": e.$message()}), self.$loc(begin_t).$join(self.$loc(end_t)))
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };;
        return self.$n("regexp", parts['$<<'](options), self.$regexp_map(begin_t, end_t, options));
      }, $Default_regexp_compose$25.$$arity = 4);
      
      Opal.def(self, '$array', $Default_array$26 = function $$array(begin_t, elements, end_t) {
        var self = this;

        return self.$n("array", elements, self.$collection_map(begin_t, elements, end_t))
      }, $Default_array$26.$$arity = 3);
      
      Opal.def(self, '$splat', $Default_splat$27 = function $$splat(star_t, arg) {
        var self = this;

        
        
        if (arg == null) {
          arg = nil;
        };
        if ($truthy(arg['$nil?']())) {
          return self.$n0("splat", self.$unary_op_map(star_t))
        } else {
          return self.$n("splat", [arg], self.$unary_op_map(star_t, arg))
        };
      }, $Default_splat$27.$$arity = -2);
      
      Opal.def(self, '$word', $Default_word$28 = function $$word(parts) {
        var self = this;

        if ($truthy(self['$collapse_string_parts?'](parts))) {
          return parts.$first()
        } else {
          return self.$n("dstr", [].concat(Opal.to_a(parts)), self.$collection_map(nil, parts, nil))
        }
      }, $Default_word$28.$$arity = 1);
      
      Opal.def(self, '$words_compose', $Default_words_compose$29 = function $$words_compose(begin_t, parts, end_t) {
        var self = this;

        return self.$n("array", [].concat(Opal.to_a(parts)), self.$collection_map(begin_t, parts, end_t))
      }, $Default_words_compose$29.$$arity = 3);
      
      Opal.def(self, '$symbols_compose', $Default_symbols_compose$30 = function $$symbols_compose(begin_t, parts, end_t) {
        var $$31, self = this;

        
        parts = $send(parts, 'map', [], ($$31 = function(part){var self = $$31.$$s || this, $a, $case = nil, value = nil;

        
          
          if (part == null) {
            part = nil;
          };
          return (function() {$case = part.$type();
          if ("str"['$===']($case)) {
          $a = [].concat(Opal.to_a(part)), (value = ($a[0] == null ? nil : $a[0])), $a;
          return part.$updated("sym", [value.$to_sym()]);}
          else if ("dstr"['$===']($case)) {return part.$updated("dsym")}
          else {return part}})();}, $$31.$$s = self, $$31.$$arity = 1, $$31));
        return self.$n("array", [].concat(Opal.to_a(parts)), self.$collection_map(begin_t, parts, end_t));
      }, $Default_symbols_compose$30.$$arity = 3);
      
      Opal.def(self, '$pair', $Default_pair$32 = function $$pair(key, assoc_t, value) {
        var self = this;

        return self.$n("pair", [key, value], self.$binary_op_map(key, assoc_t, value))
      }, $Default_pair$32.$$arity = 3);
      
      Opal.def(self, '$pair_list_18', $Default_pair_list_18$33 = function $$pair_list_18(list) {
        var $$34, self = this;

        if ($truthy(list.$size()['$%'](2)['$!='](0))) {
          return self.$diagnostic("error", "odd_hash", nil, list.$last().$loc().$expression())
        } else {
          return $send(list.$each_slice(2), 'map', [], ($$34 = function(key, value){var self = $$34.$$s || this;

          
            
            if (key == null) {
              key = nil;
            };
            
            if (value == null) {
              value = nil;
            };
            return self.$n("pair", [key, value], self.$binary_op_map(key, nil, value));}, $$34.$$s = self, $$34.$$arity = 2, $$34))
        }
      }, $Default_pair_list_18$33.$$arity = 1);
      
      Opal.def(self, '$pair_keyword', $Default_pair_keyword$35 = function $$pair_keyword(key_t, value) {
        var $a, $b, self = this, key_map = nil, pair_map = nil, key = nil;

        
        $b = self.$pair_keyword_map(key_t, value), $a = Opal.to_ary($b), (key_map = ($a[0] == null ? nil : $a[0])), (pair_map = ($a[1] == null ? nil : $a[1])), $b;
        key = self.$n("sym", [self.$value(key_t).$to_sym()], key_map);
        return self.$n("pair", [key, value], pair_map);
      }, $Default_pair_keyword$35.$$arity = 2);
      
      Opal.def(self, '$pair_quoted', $Default_pair_quoted$36 = function $$pair_quoted(begin_t, parts, end_t, value) {
        var $a, $b, self = this, pair_map = nil, key = nil;

        
        $b = self.$pair_quoted_map(begin_t, end_t, value), $a = Opal.to_ary($b), (end_t = ($a[0] == null ? nil : $a[0])), (pair_map = ($a[1] == null ? nil : $a[1])), $b;
        key = self.$symbol_compose(begin_t, parts, end_t);
        return self.$n("pair", [key, value], pair_map);
      }, $Default_pair_quoted$36.$$arity = 4);
      
      Opal.def(self, '$kwsplat', $Default_kwsplat$37 = function $$kwsplat(dstar_t, arg) {
        var self = this;

        return self.$n("kwsplat", [arg], self.$unary_op_map(dstar_t, arg))
      }, $Default_kwsplat$37.$$arity = 2);
      
      Opal.def(self, '$associate', $Default_associate$38 = function $$associate(begin_t, pairs, end_t) {
        var self = this;

        return self.$n("hash", [].concat(Opal.to_a(pairs)), self.$collection_map(begin_t, pairs, end_t))
      }, $Default_associate$38.$$arity = 3);
      
      Opal.def(self, '$range_inclusive', $Default_range_inclusive$39 = function $$range_inclusive(lhs, dot2_t, rhs) {
        var self = this;

        return self.$n("irange", [lhs, rhs], self.$range_map(lhs, dot2_t, rhs))
      }, $Default_range_inclusive$39.$$arity = 3);
      
      Opal.def(self, '$range_exclusive', $Default_range_exclusive$40 = function $$range_exclusive(lhs, dot3_t, rhs) {
        var self = this;

        return self.$n("erange", [lhs, rhs], self.$range_map(lhs, dot3_t, rhs))
      }, $Default_range_exclusive$40.$$arity = 3);
      
      Opal.def(self, '$self', $Default_self$41 = function $$self(token) {
        var self = this;

        return self.$n0("self", self.$token_map(token))
      }, $Default_self$41.$$arity = 1);
      
      Opal.def(self, '$ident', $Default_ident$42 = function $$ident(token) {
        var self = this;

        return self.$n("ident", [self.$value(token).$to_sym()], self.$variable_map(token))
      }, $Default_ident$42.$$arity = 1);
      
      Opal.def(self, '$ivar', $Default_ivar$43 = function $$ivar(token) {
        var self = this;

        return self.$n("ivar", [self.$value(token).$to_sym()], self.$variable_map(token))
      }, $Default_ivar$43.$$arity = 1);
      
      Opal.def(self, '$gvar', $Default_gvar$44 = function $$gvar(token) {
        var self = this;

        return self.$n("gvar", [self.$value(token).$to_sym()], self.$variable_map(token))
      }, $Default_gvar$44.$$arity = 1);
      
      Opal.def(self, '$cvar', $Default_cvar$45 = function $$cvar(token) {
        var self = this;

        return self.$n("cvar", [self.$value(token).$to_sym()], self.$variable_map(token))
      }, $Default_cvar$45.$$arity = 1);
      
      Opal.def(self, '$back_ref', $Default_back_ref$46 = function $$back_ref(token) {
        var self = this;

        return self.$n("back_ref", [self.$value(token).$to_sym()], self.$token_map(token))
      }, $Default_back_ref$46.$$arity = 1);
      
      Opal.def(self, '$nth_ref', $Default_nth_ref$47 = function $$nth_ref(token) {
        var self = this;

        return self.$n("nth_ref", [self.$value(token)], self.$token_map(token))
      }, $Default_nth_ref$47.$$arity = 1);
      
      Opal.def(self, '$accessible', $Default_accessible$48 = function $$accessible(node) {
        var $a, self = this, $case = nil, name = nil;

        return (function() {$case = node.$type();
        if ("__FILE__"['$===']($case)) {if ($truthy(self.emit_file_line_as_literals)) {
          return self.$n("str", [node.$loc().$expression().$source_buffer().$name()], node.$loc().$dup())
        } else {
          return node
        }}
        else if ("__LINE__"['$===']($case)) {if ($truthy(self.emit_file_line_as_literals)) {
          return self.$n("int", [node.$loc().$expression().$line()], node.$loc().$dup())
        } else {
          return node
        }}
        else if ("__ENCODING__"['$===']($case)) {if ($truthy(self.$class().$emit_encoding()['$!']())) {
          return self.$n("const", [self.$n("const", [nil, "Encoding"], nil), "UTF_8"], node.$loc().$dup())
        } else {
          return node
        }}
        else if ("ident"['$===']($case)) {
        $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), $a;
        if ($truthy(self.parser.$static_env()['$declared?'](name))) {
          return node.$updated("lvar")
        } else {
          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), $a;
          return self.$n("send", [nil, name], self.$var_send_map(node));
        };}
        else {return node}})()
      }, $Default_accessible$48.$$arity = 1);
      
      Opal.def(self, '$const', $Default_const$49 = function(name_t) {
        var self = this;

        return self.$n("const", [nil, self.$value(name_t).$to_sym()], self.$constant_map(nil, nil, name_t))
      }, $Default_const$49.$$arity = 1);
      
      Opal.def(self, '$const_global', $Default_const_global$50 = function $$const_global(t_colon3, name_t) {
        var self = this, cbase = nil;

        
        cbase = self.$n0("cbase", self.$token_map(t_colon3));
        return self.$n("const", [cbase, self.$value(name_t).$to_sym()], self.$constant_map(cbase, t_colon3, name_t));
      }, $Default_const_global$50.$$arity = 2);
      
      Opal.def(self, '$const_fetch', $Default_const_fetch$51 = function $$const_fetch(scope, t_colon2, name_t) {
        var self = this;

        return self.$n("const", [scope, self.$value(name_t).$to_sym()], self.$constant_map(scope, t_colon2, name_t))
      }, $Default_const_fetch$51.$$arity = 3);
      
      Opal.def(self, '$__ENCODING__', $Default___ENCODING__$52 = function $$__ENCODING__(__ENCODING__t) {
        var self = this;

        return self.$n0("__ENCODING__", self.$token_map(__ENCODING__t))
      }, $Default___ENCODING__$52.$$arity = 1);
      
      Opal.def(self, '$assignable', $Default_assignable$53 = function $$assignable(node) {
        var $a, self = this, $case = nil, name = nil;

        return (function() {$case = node.$type();
        if ("cvar"['$===']($case)) {return node.$updated("cvasgn")}
        else if ("ivar"['$===']($case)) {return node.$updated("ivasgn")}
        else if ("gvar"['$===']($case)) {return node.$updated("gvasgn")}
        else if ("const"['$===']($case)) {
        if ($truthy(self.parser.$context()['$dynamic_const_definition_allowed?']())) {
        } else {
          self.$diagnostic("error", "dynamic_const", nil, node.$loc().$expression())
        };
        return node.$updated("casgn");}
        else if ("ident"['$===']($case)) {
        $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), $a;
        self.parser.$static_env().$declare(name);
        return node.$updated("lvasgn");}
        else if ("nil"['$===']($case) || "self"['$===']($case) || "true"['$===']($case) || "false"['$===']($case) || "__FILE__"['$===']($case) || "__LINE__"['$===']($case) || "__ENCODING__"['$===']($case)) {return self.$diagnostic("error", "invalid_assignment", nil, node.$loc().$expression())}
        else if ("back_ref"['$===']($case) || "nth_ref"['$===']($case)) {return self.$diagnostic("error", "backref_assignment", nil, node.$loc().$expression())}
        else { return nil }})()
      }, $Default_assignable$53.$$arity = 1);
      
      Opal.def(self, '$const_op_assignable', $Default_const_op_assignable$54 = function $$const_op_assignable(node) {
        var self = this;

        return node.$updated("casgn")
      }, $Default_const_op_assignable$54.$$arity = 1);
      
      Opal.def(self, '$assign', $Default_assign$55 = function $$assign(lhs, eql_t, rhs) {
        var self = this;

        return lhs['$<<'](rhs).$updated(nil, nil, $hash2(["location"], {"location": lhs.$loc().$with_operator(self.$loc(eql_t)).$with_expression(self.$join_exprs(lhs, rhs))}))
      }, $Default_assign$55.$$arity = 3);
      
      Opal.def(self, '$op_assign', $Default_op_assign$56 = function $$op_assign(lhs, op_t, rhs) {
        var self = this, $case = nil, operator = nil, source_map = nil;

        return (function() {$case = lhs.$type();
        if ("gvasgn"['$===']($case) || "ivasgn"['$===']($case) || "lvasgn"['$===']($case) || "cvasgn"['$===']($case) || "casgn"['$===']($case) || "send"['$===']($case) || "csend"['$===']($case) || "index"['$===']($case)) {
        operator = self.$value(op_t)['$[]']($range(0, -1, false)).$to_sym();
        source_map = lhs.$loc().$with_operator(self.$loc(op_t)).$with_expression(self.$join_exprs(lhs, rhs));
        if (lhs.$type()['$==']("index")) {
          lhs = lhs.$updated("indexasgn")};
        return (function() {$case = operator;
        if ("&&"['$===']($case)) {return self.$n("and_asgn", [lhs, rhs], source_map)}
        else if ("||"['$===']($case)) {return self.$n("or_asgn", [lhs, rhs], source_map)}
        else {return self.$n("op_asgn", [lhs, operator, rhs], source_map)}})();}
        else if ("back_ref"['$===']($case) || "nth_ref"['$===']($case)) {return self.$diagnostic("error", "backref_assignment", nil, lhs.$loc().$expression())}
        else { return nil }})()
      }, $Default_op_assign$56.$$arity = 3);
      
      Opal.def(self, '$multi_lhs', $Default_multi_lhs$57 = function $$multi_lhs(begin_t, items, end_t) {
        var self = this;

        return self.$n("mlhs", [].concat(Opal.to_a(items)), self.$collection_map(begin_t, items, end_t))
      }, $Default_multi_lhs$57.$$arity = 3);
      
      Opal.def(self, '$multi_assign', $Default_multi_assign$58 = function $$multi_assign(lhs, eql_t, rhs) {
        var self = this;

        return self.$n("masgn", [lhs, rhs], self.$binary_op_map(lhs, eql_t, rhs))
      }, $Default_multi_assign$58.$$arity = 3);
      
      Opal.def(self, '$def_class', $Default_def_class$59 = function $$def_class(class_t, name, lt_t, superclass, body, end_t) {
        var self = this;

        return self.$n("class", [name, superclass, body], self.$module_definition_map(class_t, name, lt_t, end_t))
      }, $Default_def_class$59.$$arity = 6);
      
      Opal.def(self, '$def_sclass', $Default_def_sclass$60 = function $$def_sclass(class_t, lshft_t, expr, body, end_t) {
        var self = this;

        return self.$n("sclass", [expr, body], self.$module_definition_map(class_t, nil, lshft_t, end_t))
      }, $Default_def_sclass$60.$$arity = 5);
      
      Opal.def(self, '$def_module', $Default_def_module$61 = function $$def_module(module_t, name, body, end_t) {
        var self = this;

        return self.$n("module", [name, body], self.$module_definition_map(module_t, name, nil, end_t))
      }, $Default_def_module$61.$$arity = 4);
      
      Opal.def(self, '$def_method', $Default_def_method$62 = function $$def_method(def_t, name_t, args, body, end_t) {
        var self = this;

        return self.$n("def", [self.$value(name_t).$to_sym(), args, body], self.$definition_map(def_t, nil, name_t, end_t))
      }, $Default_def_method$62.$$arity = 5);
      
      Opal.def(self, '$def_singleton', $Default_def_singleton$63 = function $$def_singleton(def_t, definee, dot_t, name_t, args, body, end_t) {
        var self = this, $case = nil;

        return (function() {$case = definee.$type();
        if ("int"['$===']($case) || "str"['$===']($case) || "dstr"['$===']($case) || "sym"['$===']($case) || "dsym"['$===']($case) || "regexp"['$===']($case) || "array"['$===']($case) || "hash"['$===']($case)) {return self.$diagnostic("error", "singleton_literal", nil, definee.$loc().$expression())}
        else {return self.$n("defs", [definee, self.$value(name_t).$to_sym(), args, body], self.$definition_map(def_t, dot_t, name_t, end_t))}})()
      }, $Default_def_singleton$63.$$arity = 7);
      
      Opal.def(self, '$undef_method', $Default_undef_method$64 = function $$undef_method(undef_t, names) {
        var self = this;

        return self.$n("undef", [].concat(Opal.to_a(names)), self.$keyword_map(undef_t, nil, names, nil))
      }, $Default_undef_method$64.$$arity = 2);
      
      Opal.def(self, '$alias', $Default_alias$65 = function $$alias(alias_t, to, from) {
        var self = this;

        return self.$n("alias", [to, from], self.$keyword_map(alias_t, nil, [to, from], nil))
      }, $Default_alias$65.$$arity = 3);
      
      Opal.def(self, '$args', $Default_args$66 = function $$args(begin_t, args, end_t, check_args) {
        var self = this;

        
        
        if (check_args == null) {
          check_args = true;
        };
        if ($truthy(check_args)) {
          args = self.$check_duplicate_args(args)};
        return self.$n("args", args, self.$collection_map(begin_t, args, end_t));
      }, $Default_args$66.$$arity = -4);
      
      Opal.def(self, '$arg', $Default_arg$67 = function $$arg(name_t) {
        var self = this;

        return self.$n("arg", [self.$value(name_t).$to_sym()], self.$variable_map(name_t))
      }, $Default_arg$67.$$arity = 1);
      
      Opal.def(self, '$optarg', $Default_optarg$68 = function $$optarg(name_t, eql_t, value) {
        var self = this;

        return self.$n("optarg", [self.$value(name_t).$to_sym(), value], self.$variable_map(name_t).$with_operator(self.$loc(eql_t)).$with_expression(self.$loc(name_t).$join(value.$loc().$expression())))
      }, $Default_optarg$68.$$arity = 3);
      
      Opal.def(self, '$restarg', $Default_restarg$69 = function $$restarg(star_t, name_t) {
        var self = this;

        
        
        if (name_t == null) {
          name_t = nil;
        };
        if ($truthy(name_t)) {
          return self.$n("restarg", [self.$value(name_t).$to_sym()], self.$arg_prefix_map(star_t, name_t))
        } else {
          return self.$n0("restarg", self.$arg_prefix_map(star_t))
        };
      }, $Default_restarg$69.$$arity = -2);
      
      Opal.def(self, '$kwarg', $Default_kwarg$70 = function $$kwarg(name_t) {
        var self = this;

        return self.$n("kwarg", [self.$value(name_t).$to_sym()], self.$kwarg_map(name_t))
      }, $Default_kwarg$70.$$arity = 1);
      
      Opal.def(self, '$kwoptarg', $Default_kwoptarg$71 = function $$kwoptarg(name_t, value) {
        var self = this;

        return self.$n("kwoptarg", [self.$value(name_t).$to_sym(), value], self.$kwarg_map(name_t, value))
      }, $Default_kwoptarg$71.$$arity = 2);
      
      Opal.def(self, '$kwrestarg', $Default_kwrestarg$72 = function $$kwrestarg(dstar_t, name_t) {
        var self = this;

        
        
        if (name_t == null) {
          name_t = nil;
        };
        if ($truthy(name_t)) {
          return self.$n("kwrestarg", [self.$value(name_t).$to_sym()], self.$arg_prefix_map(dstar_t, name_t))
        } else {
          return self.$n0("kwrestarg", self.$arg_prefix_map(dstar_t))
        };
      }, $Default_kwrestarg$72.$$arity = -2);
      
      Opal.def(self, '$shadowarg', $Default_shadowarg$73 = function $$shadowarg(name_t) {
        var self = this;

        return self.$n("shadowarg", [self.$value(name_t).$to_sym()], self.$variable_map(name_t))
      }, $Default_shadowarg$73.$$arity = 1);
      
      Opal.def(self, '$blockarg', $Default_blockarg$74 = function $$blockarg(amper_t, name_t) {
        var self = this;

        return self.$n("blockarg", [self.$value(name_t).$to_sym()], self.$arg_prefix_map(amper_t, name_t))
      }, $Default_blockarg$74.$$arity = 2);
      
      Opal.def(self, '$procarg0', $Default_procarg0$75 = function $$procarg0(arg) {
        var self = this;

        if ($truthy(self.$class().$emit_procarg0())) {
          return arg.$updated("procarg0")
        } else {
          return arg
        }
      }, $Default_procarg0$75.$$arity = 1);
      
      Opal.def(self, '$arg_expr', $Default_arg_expr$76 = function $$arg_expr(expr) {
        var self = this;

        if (expr.$type()['$==']("lvasgn")) {
          return expr.$updated("arg")
        } else {
          return self.$n("arg_expr", [expr], expr.$loc().$dup())
        }
      }, $Default_arg_expr$76.$$arity = 1);
      
      Opal.def(self, '$restarg_expr', $Default_restarg_expr$77 = function $$restarg_expr(star_t, expr) {
        var self = this;

        
        
        if (expr == null) {
          expr = nil;
        };
        if ($truthy(expr['$nil?']())) {
          return self.$n0("restarg", self.$token_map(star_t))
        } else if (expr.$type()['$==']("lvasgn")) {
          return expr.$updated("restarg")
        } else {
          return self.$n("restarg_expr", [expr], expr.$loc().$dup())
        };
      }, $Default_restarg_expr$77.$$arity = -2);
      
      Opal.def(self, '$blockarg_expr', $Default_blockarg_expr$78 = function $$blockarg_expr(amper_t, expr) {
        var self = this;

        if (expr.$type()['$==']("lvasgn")) {
          return expr.$updated("blockarg")
        } else {
          return self.$n("blockarg_expr", [expr], expr.$loc().$dup())
        }
      }, $Default_blockarg_expr$78.$$arity = 2);
      
      Opal.def(self, '$objc_kwarg', $Default_objc_kwarg$79 = function $$objc_kwarg(kwname_t, assoc_t, name_t) {
        var self = this, kwname_l = nil, operator_l = nil;

        
        kwname_l = self.$loc(kwname_t);
        if ($truthy(assoc_t['$nil?']())) {
          
          kwname_l = kwname_l.$resize($rb_minus(kwname_l.$size(), 1));
          operator_l = kwname_l.$end().$resize(1);
        } else {
          operator_l = self.$loc(assoc_t)
        };
        return self.$n("objc_kwarg", [self.$value(kwname_t).$to_sym(), self.$value(name_t).$to_sym()], $$$($$$($$($nesting, 'Source'), 'Map'), 'ObjcKwarg').$new(kwname_l, operator_l, self.$loc(name_t), kwname_l.$join(self.$loc(name_t))));
      }, $Default_objc_kwarg$79.$$arity = 3);
      
      Opal.def(self, '$objc_restarg', $Default_objc_restarg$80 = function $$objc_restarg(star_t, name) {
        var self = this;

        
        
        if (name == null) {
          name = nil;
        };
        if ($truthy(name['$nil?']())) {
          return self.$n0("restarg", self.$arg_prefix_map(star_t))
        } else if (name.$type()['$==']("arg")) {
          return name.$updated("restarg", nil, $hash2(["location"], {"location": name.$loc().$with_operator(self.$loc(star_t))}))
        } else {
          return self.$n("objc_restarg", [name], self.$unary_op_map(star_t, name))
        };
      }, $Default_objc_restarg$80.$$arity = -2);
      
      Opal.def(self, '$call_type_for_dot', $Default_call_type_for_dot$81 = function $$call_type_for_dot(dot_t) {
        var $a, self = this;

        if ($truthy(($truthy($a = dot_t['$nil?']()['$!']()) ? self.$value(dot_t)['$==']("anddot") : $a))) {
          return "csend"
        } else {
          return "send"
        }
      }, $Default_call_type_for_dot$81.$$arity = 1);
      
      Opal.def(self, '$call_method', $Default_call_method$82 = function $$call_method(receiver, dot_t, selector_t, lparen_t, args, rparen_t) {
        var self = this, type = nil;

        
        
        if (lparen_t == null) {
          lparen_t = nil;
        };
        
        if (args == null) {
          args = [];
        };
        
        if (rparen_t == null) {
          rparen_t = nil;
        };
        type = self.$call_type_for_dot(dot_t);
        if ($truthy(selector_t['$nil?']())) {
          return self.$n(type, [receiver, "call"].concat(Opal.to_a(args)), self.$send_map(receiver, dot_t, nil, lparen_t, args, rparen_t))
        } else {
          return self.$n(type, [receiver, self.$value(selector_t).$to_sym()].concat(Opal.to_a(args)), self.$send_map(receiver, dot_t, selector_t, lparen_t, args, rparen_t))
        };
      }, $Default_call_method$82.$$arity = -4);
      
      Opal.def(self, '$call_lambda', $Default_call_lambda$83 = function $$call_lambda(lambda_t) {
        var self = this;

        if ($truthy(self.$class().$emit_lambda())) {
          return self.$n0("lambda", self.$expr_map(self.$loc(lambda_t)))
        } else {
          return self.$n("send", [nil, "lambda"], self.$send_map(nil, nil, lambda_t))
        }
      }, $Default_call_lambda$83.$$arity = 1);
      
      Opal.def(self, '$block', $Default_block$84 = function $$block(method_call, begin_t, args, body, end_t) {
        var $a, self = this, _receiver = nil, _selector = nil, call_args = nil, last_arg = nil, actual_send = nil, block = nil;

        
        $a = [].concat(Opal.to_a(method_call)), (_receiver = ($a[0] == null ? nil : $a[0])), (_selector = ($a[1] == null ? nil : $a[1])), (call_args = $slice.call($a, 2)), $a;
        if (method_call.$type()['$==']("yield")) {
          self.$diagnostic("error", "block_given_to_yield", nil, method_call.$loc().$keyword(), [self.$loc(begin_t)])};
        last_arg = call_args.$last();
        if ($truthy(($truthy($a = last_arg) ? last_arg.$type()['$==']("block_pass") : $a))) {
          self.$diagnostic("error", "block_and_blockarg", nil, last_arg.$loc().$expression(), [self.$loc(begin_t)])};
        if ($truthy(["send", "csend", "index", "super", "zsuper", "lambda"]['$include?'](method_call.$type()))) {
          return self.$n("block", [method_call, args, body], self.$block_map(method_call.$loc().$expression(), begin_t, end_t))
        } else {
          
          $a = [].concat(Opal.to_a(method_call)), (actual_send = ($a[0] == null ? nil : $a[0])), $a;
          block = self.$n("block", [actual_send, args, body], self.$block_map(actual_send.$loc().$expression(), begin_t, end_t));
          return self.$n(method_call.$type(), [block], method_call.$loc().$with_expression(self.$join_exprs(method_call, block)));
        };
      }, $Default_block$84.$$arity = 5);
      
      Opal.def(self, '$block_pass', $Default_block_pass$85 = function $$block_pass(amper_t, arg) {
        var self = this;

        return self.$n("block_pass", [arg], self.$unary_op_map(amper_t, arg))
      }, $Default_block_pass$85.$$arity = 2);
      
      Opal.def(self, '$objc_varargs', $Default_objc_varargs$86 = function $$objc_varargs(pair, rest_of_varargs) {
        var $a, self = this, value = nil, first_vararg = nil, vararg_array = nil;

        
        $a = [].concat(Opal.to_a(pair)), (value = ($a[0] == null ? nil : $a[0])), (first_vararg = ($a[1] == null ? nil : $a[1])), $a;
        vararg_array = self.$array(nil, [first_vararg].concat(Opal.to_a(rest_of_varargs)), nil).$updated("objc_varargs");
        return pair.$updated(nil, [value, vararg_array], $hash2(["location"], {"location": pair.$loc().$with_expression(pair.$loc().$expression().$join(vararg_array.$loc().$expression()))}));
      }, $Default_objc_varargs$86.$$arity = 2);
      
      Opal.def(self, '$attr_asgn', $Default_attr_asgn$87 = function $$attr_asgn(receiver, dot_t, selector_t) {
        var self = this, method_name = nil, type = nil;

        
        method_name = $rb_plus(self.$value(selector_t), "=").$to_sym();
        type = self.$call_type_for_dot(dot_t);
        return self.$n(type, [receiver, method_name], self.$send_map(receiver, dot_t, selector_t));
      }, $Default_attr_asgn$87.$$arity = 3);
      
      Opal.def(self, '$index', $Default_index$88 = function $$index(receiver, lbrack_t, indexes, rbrack_t) {
        var self = this;

        if ($truthy(self.$class().$emit_index())) {
          return self.$n("index", [receiver].concat(Opal.to_a(indexes)), self.$index_map(receiver, lbrack_t, rbrack_t))
        } else {
          return self.$n("send", [receiver, "[]"].concat(Opal.to_a(indexes)), self.$send_index_map(receiver, lbrack_t, rbrack_t))
        }
      }, $Default_index$88.$$arity = 4);
      
      Opal.def(self, '$index_asgn', $Default_index_asgn$89 = function $$index_asgn(receiver, lbrack_t, indexes, rbrack_t) {
        var self = this;

        if ($truthy(self.$class().$emit_index())) {
          return self.$n("indexasgn", [receiver].concat(Opal.to_a(indexes)), self.$index_map(receiver, lbrack_t, rbrack_t))
        } else {
          return self.$n("send", [receiver, "[]="].concat(Opal.to_a(indexes)), self.$send_index_map(receiver, lbrack_t, rbrack_t))
        }
      }, $Default_index_asgn$89.$$arity = 4);
      
      Opal.def(self, '$binary_op', $Default_binary_op$90 = function $$binary_op(receiver, operator_t, arg) {
        var self = this, source_map = nil, operator = nil, method_call = nil;

        
        source_map = self.$send_binary_op_map(receiver, operator_t, arg);
        if (self.parser.$version()['$=='](18)) {
          
          operator = self.$value(operator_t);
          if (operator['$==']("!=")) {
            method_call = self.$n("send", [receiver, "==", arg], source_map)
          } else if (operator['$==']("!~")) {
            method_call = self.$n("send", [receiver, "=~", arg], source_map)};
          if ($truthy(["!=", "!~"]['$include?'](operator))) {
            return self.$n("not", [method_call], self.$expr_map(source_map.$expression()))};};
        return self.$n("send", [receiver, self.$value(operator_t).$to_sym(), arg], source_map);
      }, $Default_binary_op$90.$$arity = 3);
      
      Opal.def(self, '$match_op', $Default_match_op$91 = function $$match_op(receiver, match_t, arg) {
        var $$92, self = this, source_map = nil, regexp = nil;

        
        source_map = self.$send_binary_op_map(receiver, match_t, arg);
        if ($truthy((regexp = self.$static_regexp_node(receiver)))) {
          
          $send(regexp.$names(), 'each', [], ($$92 = function(name){var self = $$92.$$s || this;
            if (self.parser == null) self.parser = nil;

          
            
            if (name == null) {
              name = nil;
            };
            return self.parser.$static_env().$declare(name);}, $$92.$$s = self, $$92.$$arity = 1, $$92));
          return self.$n("match_with_lvasgn", [receiver, arg], source_map);
        } else {
          return self.$n("send", [receiver, "=~", arg], source_map)
        };
      }, $Default_match_op$91.$$arity = 3);
      
      Opal.def(self, '$unary_op', $Default_unary_op$93 = function $$unary_op(op_t, receiver) {
        var self = this, $case = nil, method = nil;

        
        $case = self.$value(op_t);
        if ("+"['$===']($case) || "-"['$===']($case)) {method = $rb_plus(self.$value(op_t), "@")}
        else {method = self.$value(op_t)};
        return self.$n("send", [receiver, method.$to_sym()], self.$send_unary_op_map(op_t, receiver));
      }, $Default_unary_op$93.$$arity = 2);
      
      Opal.def(self, '$not_op', $Default_not_op$94 = function $$not_op(not_t, begin_t, receiver, end_t) {
        var self = this, nil_node = nil;

        
        
        if (begin_t == null) {
          begin_t = nil;
        };
        
        if (receiver == null) {
          receiver = nil;
        };
        
        if (end_t == null) {
          end_t = nil;
        };
        if (self.parser.$version()['$=='](18)) {
          return self.$n("not", [self.$check_condition(receiver)], self.$unary_op_map(not_t, receiver))
        } else if ($truthy(receiver['$nil?']())) {
          
          nil_node = self.$n0("begin", self.$collection_map(begin_t, nil, end_t));
          return self.$n("send", [nil_node, "!"], self.$send_unary_op_map(not_t, nil_node));
        } else {
          return self.$n("send", [self.$check_condition(receiver), "!"], self.$send_map(nil, nil, not_t, begin_t, [receiver], end_t))
        };
      }, $Default_not_op$94.$$arity = -2);
      
      Opal.def(self, '$logical_op', $Default_logical_op$95 = function $$logical_op(type, lhs, op_t, rhs) {
        var self = this;

        return self.$n(type, [lhs, rhs], self.$binary_op_map(lhs, op_t, rhs))
      }, $Default_logical_op$95.$$arity = 4);
      
      Opal.def(self, '$condition', $Default_condition$96 = function $$condition(cond_t, cond, then_t, if_true, else_t, if_false, end_t) {
        var self = this;

        return self.$n("if", [self.$check_condition(cond), if_true, if_false], self.$condition_map(cond_t, cond, then_t, if_true, else_t, if_false, end_t))
      }, $Default_condition$96.$$arity = 7);
      
      Opal.def(self, '$condition_mod', $Default_condition_mod$97 = function $$condition_mod(if_true, if_false, cond_t, cond) {
        var $a, self = this;

        return self.$n("if", [self.$check_condition(cond), if_true, if_false], self.$keyword_mod_map(($truthy($a = if_true) ? $a : if_false), cond_t, cond))
      }, $Default_condition_mod$97.$$arity = 4);
      
      Opal.def(self, '$ternary', $Default_ternary$98 = function $$ternary(cond, question_t, if_true, colon_t, if_false) {
        var self = this;

        return self.$n("if", [self.$check_condition(cond), if_true, if_false], self.$ternary_map(cond, question_t, if_true, colon_t, if_false))
      }, $Default_ternary$98.$$arity = 5);
      
      Opal.def(self, '$when', $Default_when$99 = function $$when(when_t, patterns, then_t, body) {
        var self = this, children = nil;

        
        children = patterns['$<<'](body);
        return self.$n("when", children, self.$keyword_map(when_t, then_t, children, nil));
      }, $Default_when$99.$$arity = 4);
      
      Opal.def(self, '$case', $Default_case$100 = function(case_t, expr, when_bodies, else_t, else_body, end_t) {
        var self = this;

        return self.$n("case", [expr].concat(Opal.to_a(when_bodies['$<<'](else_body))), self.$condition_map(case_t, expr, nil, nil, else_t, else_body, end_t))
      }, $Default_case$100.$$arity = 6);
      
      Opal.def(self, '$loop', $Default_loop$101 = function $$loop(type, keyword_t, cond, do_t, body, end_t) {
        var self = this;

        return self.$n(type, [self.$check_condition(cond), body], self.$keyword_map(keyword_t, do_t, nil, end_t))
      }, $Default_loop$101.$$arity = 6);
      
      Opal.def(self, '$loop_mod', $Default_loop_mod$102 = function $$loop_mod(type, body, keyword_t, cond) {
        var self = this;

        
        if (body.$type()['$==']("kwbegin")) {
          type = "" + (type) + "_post"};
        return self.$n(type, [self.$check_condition(cond), body], self.$keyword_mod_map(body, keyword_t, cond));
      }, $Default_loop_mod$102.$$arity = 4);
      
      Opal.def(self, '$for', $Default_for$103 = function(for_t, iterator, in_t, iteratee, do_t, body, end_t) {
        var self = this;

        return self.$n("for", [iterator, iteratee, body], self.$for_map(for_t, in_t, do_t, end_t))
      }, $Default_for$103.$$arity = 7);
      
      Opal.def(self, '$keyword_cmd', $Default_keyword_cmd$104 = function $$keyword_cmd(type, keyword_t, lparen_t, args, rparen_t) {
        var $a, self = this, last_arg = nil;

        
        
        if (lparen_t == null) {
          lparen_t = nil;
        };
        
        if (args == null) {
          args = [];
        };
        
        if (rparen_t == null) {
          rparen_t = nil;
        };
        if ($truthy((($a = type['$==']("yield")) ? $rb_gt(args.$count(), 0) : type['$==']("yield")))) {
          
          last_arg = args.$last();
          if (last_arg.$type()['$==']("block_pass")) {
            self.$diagnostic("error", "block_given_to_yield", nil, self.$loc(keyword_t), [last_arg.$loc().$expression()])};};
        return self.$n(type, args, self.$keyword_map(keyword_t, lparen_t, args, rparen_t));
      }, $Default_keyword_cmd$104.$$arity = -3);
      
      Opal.def(self, '$preexe', $Default_preexe$105 = function $$preexe(preexe_t, lbrace_t, compstmt, rbrace_t) {
        var self = this;

        return self.$n("preexe", [compstmt], self.$keyword_map(preexe_t, lbrace_t, [], rbrace_t))
      }, $Default_preexe$105.$$arity = 4);
      
      Opal.def(self, '$postexe', $Default_postexe$106 = function $$postexe(postexe_t, lbrace_t, compstmt, rbrace_t) {
        var self = this;

        return self.$n("postexe", [compstmt], self.$keyword_map(postexe_t, lbrace_t, [], rbrace_t))
      }, $Default_postexe$106.$$arity = 4);
      
      Opal.def(self, '$rescue_body', $Default_rescue_body$107 = function $$rescue_body(rescue_t, exc_list, assoc_t, exc_var, then_t, compound_stmt) {
        var self = this;

        return self.$n("resbody", [exc_list, exc_var, compound_stmt], self.$rescue_body_map(rescue_t, exc_list, assoc_t, exc_var, then_t, compound_stmt))
      }, $Default_rescue_body$107.$$arity = 6);
      
      Opal.def(self, '$begin_body', $Default_begin_body$108 = function $$begin_body(compound_stmt, rescue_bodies, else_t, else_, ensure_t, ensure_) {
        var self = this, statements = nil;

        
        
        if (rescue_bodies == null) {
          rescue_bodies = [];
        };
        
        if (else_t == null) {
          else_t = nil;
        };
        
        if (else_ == null) {
          else_ = nil;
        };
        
        if (ensure_t == null) {
          ensure_t = nil;
        };
        
        if (ensure_ == null) {
          ensure_ = nil;
        };
        if ($truthy(rescue_bodies['$any?']())) {
          if ($truthy(else_t)) {
            compound_stmt = self.$n("rescue", [compound_stmt].concat(Opal.to_a($rb_plus(rescue_bodies, [else_]))), self.$eh_keyword_map(compound_stmt, nil, rescue_bodies, else_t, else_))
          } else {
            compound_stmt = self.$n("rescue", [compound_stmt].concat(Opal.to_a($rb_plus(rescue_bodies, [nil]))), self.$eh_keyword_map(compound_stmt, nil, rescue_bodies, nil, nil))
          }
        } else if ($truthy(else_t)) {
          
          statements = [];
          if ($truthy(compound_stmt['$nil?']()['$!']())) {
            if (compound_stmt.$type()['$==']("begin")) {
              statements = $rb_plus(statements, compound_stmt.$children())
            } else {
              statements.$push(compound_stmt)
            }};
          statements.$push(self.$n("begin", [else_], self.$collection_map(else_t, [else_], nil)));
          compound_stmt = self.$n("begin", statements, self.$collection_map(nil, statements, nil));};
        if ($truthy(ensure_t)) {
          compound_stmt = self.$n("ensure", [compound_stmt, ensure_], self.$eh_keyword_map(compound_stmt, ensure_t, [ensure_], nil, nil))};
        return compound_stmt;
      }, $Default_begin_body$108.$$arity = -2);
      
      Opal.def(self, '$compstmt', $Default_compstmt$109 = function $$compstmt(statements) {
        var self = this;

        return (function() {
        if ($truthy(statements['$none?']())) {return nil}
        else if ($truthy(statements['$one?']())) {return statements.$first()}
        else {return self.$n("begin", statements, self.$collection_map(nil, statements, nil))}})()
      }, $Default_compstmt$109.$$arity = 1);
      
      Opal.def(self, '$begin', $Default_begin$110 = function $$begin(begin_t, body, end_t) {
        var $a, $b, $c, self = this;

        if ($truthy(body['$nil?']())) {
          return self.$n0("begin", self.$collection_map(begin_t, nil, end_t))
        } else if ($truthy(($truthy($a = body.$type()['$==']("mlhs")) ? $a : ($truthy($b = (($c = body.$type()['$==']("begin")) ? body.$loc().$begin()['$nil?']() : body.$type()['$==']("begin"))) ? body.$loc().$end()['$nil?']() : $b)))) {
          return self.$n(body.$type(), body.$children(), self.$collection_map(begin_t, body.$children(), end_t))
        } else {
          return self.$n("begin", [body], self.$collection_map(begin_t, [body], end_t))
        }
      }, $Default_begin$110.$$arity = 3);
      
      Opal.def(self, '$begin_keyword', $Default_begin_keyword$111 = function $$begin_keyword(begin_t, body, end_t) {
        var $a, $b, self = this;

        if ($truthy(body['$nil?']())) {
          return self.$n0("kwbegin", self.$collection_map(begin_t, nil, end_t))
        } else if ($truthy(($truthy($a = (($b = body.$type()['$==']("begin")) ? body.$loc().$begin()['$nil?']() : body.$type()['$==']("begin"))) ? body.$loc().$end()['$nil?']() : $a))) {
          return self.$n("kwbegin", body.$children(), self.$collection_map(begin_t, body.$children(), end_t))
        } else {
          return self.$n("kwbegin", [body], self.$collection_map(begin_t, [body], end_t))
        }
      }, $Default_begin_keyword$111.$$arity = 3);
      self.$private();
      
      Opal.def(self, '$check_condition', $Default_check_condition$112 = function $$check_condition(cond) {
        var $a, self = this, $case = nil, lhs = nil, rhs = nil, type = nil;

        return (function() {$case = cond.$type();
        if ("masgn"['$===']($case)) {if ($truthy($rb_le(self.parser.$version(), 23))) {
          return self.$diagnostic("error", "masgn_as_condition", nil, cond.$loc().$expression())
        } else {
          return cond
        }}
        else if ("begin"['$===']($case)) {if (cond.$children().$count()['$=='](1)) {
          return cond.$updated(nil, [self.$check_condition(cond.$children().$last())])
        } else {
          return cond
        }}
        else if ("and"['$===']($case) || "or"['$===']($case) || "irange"['$===']($case) || "erange"['$===']($case)) {
        $a = [].concat(Opal.to_a(cond)), (lhs = ($a[0] == null ? nil : $a[0])), (rhs = ($a[1] == null ? nil : $a[1])), $a;
        type = (function() {$case = cond.$type();
        if ("irange"['$===']($case)) {return "iflipflop"}
        else if ("erange"['$===']($case)) {return "eflipflop"}
        else { return nil }})();
        if ($truthy(($truthy($a = ["and", "or"]['$include?'](cond.$type())) ? self.parser.$version()['$=='](18) : $a))) {
          return cond
        } else {
          return cond.$updated(type, [self.$check_condition(lhs), self.$check_condition(rhs)])
        };}
        else if ("regexp"['$===']($case)) {return self.$n("match_current_line", [cond], self.$expr_map(cond.$loc().$expression()))}
        else {return cond}})()
      }, $Default_check_condition$112.$$arity = 1);
      
      Opal.def(self, '$check_duplicate_args', $Default_check_duplicate_args$113 = function $$check_duplicate_args(args, map) {
        var $$114, self = this;

        
        
        if (map == null) {
          map = $hash2([], {});
        };
        return $send(args, 'each', [], ($$114 = function(this_arg){var self = $$114.$$s || this, $a, $case = nil, this_name = nil, that_arg = nil, that_name = nil, $writer = nil;

        
          
          if (this_arg == null) {
            this_arg = nil;
          };
          return (function() {$case = this_arg.$type();
          if ("arg"['$===']($case) || "optarg"['$===']($case) || "restarg"['$===']($case) || "blockarg"['$===']($case) || "kwarg"['$===']($case) || "kwoptarg"['$===']($case) || "kwrestarg"['$===']($case) || "shadowarg"['$===']($case) || "procarg0"['$===']($case)) {
          $a = [].concat(Opal.to_a(this_arg)), (this_name = ($a[0] == null ? nil : $a[0])), $a;
          that_arg = map['$[]'](this_name);
          $a = [].concat(Opal.to_a(that_arg)), (that_name = ($a[0] == null ? nil : $a[0])), $a;
          if ($truthy(that_arg['$nil?']())) {
            
            $writer = [this_name, this_arg];
            $send(map, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else if ($truthy(self['$arg_name_collides?'](this_name, that_name))) {
            return self.$diagnostic("error", "duplicate_argument", nil, this_arg.$loc().$name(), [that_arg.$loc().$name()])
          } else {
            return nil
          };}
          else if ("mlhs"['$===']($case)) {return self.$check_duplicate_args(this_arg.$children(), map)}
          else { return nil }})();}, $$114.$$s = self, $$114.$$arity = 1, $$114));
      }, $Default_check_duplicate_args$113.$$arity = -2);
      
      Opal.def(self, '$arg_name_collides?', $Default_arg_name_collides$ques$115 = function(this_name, that_name) {
        var $a, $b, self = this, $case = nil;

        return (function() {$case = self.parser.$version();
        if ((18)['$===']($case)) {return this_name['$=='](that_name)}
        else if ((19)['$===']($case)) {return ($truthy($a = this_name['$!=']("_")) ? this_name['$=='](that_name) : $a)}
        else {return ($truthy($a = ($truthy($b = this_name) ? this_name['$[]'](0)['$!=']("_") : $b)) ? this_name['$=='](that_name) : $a)}})()
      }, $Default_arg_name_collides$ques$115.$$arity = 2);
      
      Opal.def(self, '$n', $Default_n$116 = function $$n(type, children, source_map) {
        var self = this;

        return $$$($$($nesting, 'AST'), 'Node').$new(type, children, $hash2(["location"], {"location": source_map}))
      }, $Default_n$116.$$arity = 3);
      
      Opal.def(self, '$n0', $Default_n0$117 = function $$n0(type, source_map) {
        var self = this;

        return self.$n(type, [], source_map)
      }, $Default_n0$117.$$arity = 2);
      
      Opal.def(self, '$join_exprs', $Default_join_exprs$118 = function $$join_exprs(left_expr, right_expr) {
        var self = this;

        return left_expr.$loc().$expression().$join(right_expr.$loc().$expression())
      }, $Default_join_exprs$118.$$arity = 2);
      
      Opal.def(self, '$token_map', $Default_token_map$119 = function $$token_map(token) {
        var self = this;

        return $$$($$($nesting, 'Source'), 'Map').$new(self.$loc(token))
      }, $Default_token_map$119.$$arity = 1);
      
      Opal.def(self, '$delimited_string_map', $Default_delimited_string_map$120 = function $$delimited_string_map(string_t) {
        var self = this, str_range = nil, begin_l = nil, end_l = nil;

        
        str_range = self.$loc(string_t);
        begin_l = str_range.$with($hash2(["end_pos"], {"end_pos": $rb_plus(str_range.$begin_pos(), 1)}));
        end_l = str_range.$with($hash2(["begin_pos"], {"begin_pos": $rb_minus(str_range.$end_pos(), 1)}));
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(begin_l, end_l, self.$loc(string_t));
      }, $Default_delimited_string_map$120.$$arity = 1);
      
      Opal.def(self, '$prefix_string_map', $Default_prefix_string_map$121 = function $$prefix_string_map(symbol) {
        var self = this, str_range = nil, begin_l = nil;

        
        str_range = self.$loc(symbol);
        begin_l = str_range.$with($hash2(["end_pos"], {"end_pos": $rb_plus(str_range.$begin_pos(), 1)}));
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(begin_l, nil, self.$loc(symbol));
      }, $Default_prefix_string_map$121.$$arity = 1);
      
      Opal.def(self, '$unquoted_map', $Default_unquoted_map$122 = function $$unquoted_map(token) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(nil, nil, self.$loc(token))
      }, $Default_unquoted_map$122.$$arity = 1);
      
      Opal.def(self, '$pair_keyword_map', $Default_pair_keyword_map$123 = function $$pair_keyword_map(key_t, value_e) {
        var self = this, key_range = nil, key_l = nil, colon_l = nil;

        
        key_range = self.$loc(key_t);
        key_l = key_range.$adjust($hash2(["end_pos"], {"end_pos": -1}));
        colon_l = key_range.$with($hash2(["begin_pos"], {"begin_pos": $rb_minus(key_range.$end_pos(), 1)}));
        return [$$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(nil, nil, key_l), $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(colon_l, key_range.$join(value_e.$loc().$expression()))];
      }, $Default_pair_keyword_map$123.$$arity = 2);
      
      Opal.def(self, '$pair_quoted_map', $Default_pair_quoted_map$124 = function $$pair_quoted_map(begin_t, end_t, value_e) {
        var self = this, end_l = nil, quote_l = nil, colon_l = nil;

        
        end_l = self.$loc(end_t);
        quote_l = end_l.$with($hash2(["begin_pos", "end_pos"], {"begin_pos": $rb_minus(end_l.$end_pos(), 2), "end_pos": $rb_minus(end_l.$end_pos(), 1)}));
        colon_l = end_l.$with($hash2(["begin_pos"], {"begin_pos": $rb_minus(end_l.$end_pos(), 1)}));
        return [[self.$value(end_t), quote_l], $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(colon_l, self.$loc(begin_t).$join(value_e.$loc().$expression()))];
      }, $Default_pair_quoted_map$124.$$arity = 3);
      
      Opal.def(self, '$expr_map', $Default_expr_map$125 = function $$expr_map(loc) {
        var self = this;

        return $$$($$($nesting, 'Source'), 'Map').$new(loc)
      }, $Default_expr_map$125.$$arity = 1);
      
      Opal.def(self, '$collection_map', $Default_collection_map$126 = function $$collection_map(begin_t, parts, end_t) {
        var $a, self = this, expr_l = nil;

        
        if ($truthy(($truthy($a = begin_t['$nil?']()) ? $a : end_t['$nil?']()))) {
          if ($truthy(parts['$any?']())) {
            expr_l = self.$join_exprs(parts.$first(), parts.$last())
          } else if ($truthy(begin_t['$nil?']()['$!']())) {
            expr_l = self.$loc(begin_t)
          } else if ($truthy(end_t['$nil?']()['$!']())) {
            expr_l = self.$loc(end_t)}
        } else {
          expr_l = self.$loc(begin_t).$join(self.$loc(end_t))
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(self.$loc(begin_t), self.$loc(end_t), expr_l);
      }, $Default_collection_map$126.$$arity = 3);
      
      Opal.def(self, '$string_map', $Default_string_map$127 = function $$string_map(begin_t, parts, end_t) {
        var $a, self = this, expr_l = nil;

        if ($truthy(($truthy($a = begin_t) ? self.$value(begin_t)['$start_with?']("<<") : $a))) {
          
          if ($truthy(parts['$any?']())) {
            expr_l = self.$join_exprs(parts.$first(), parts.$last())
          } else {
            expr_l = self.$loc(end_t).$begin()
          };
          return $$$($$$($$($nesting, 'Source'), 'Map'), 'Heredoc').$new(self.$loc(begin_t), expr_l, self.$loc(end_t));
        } else {
          return self.$collection_map(begin_t, parts, end_t)
        }
      }, $Default_string_map$127.$$arity = 3);
      
      Opal.def(self, '$regexp_map', $Default_regexp_map$128 = function $$regexp_map(begin_t, end_t, options_e) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(self.$loc(begin_t), self.$loc(end_t), self.$loc(begin_t).$join(options_e.$loc().$expression()))
      }, $Default_regexp_map$128.$$arity = 3);
      
      Opal.def(self, '$constant_map', $Default_constant_map$129 = function $$constant_map(scope, colon2_t, name_t) {
        var self = this, expr_l = nil;

        
        if ($truthy(scope['$nil?']())) {
          expr_l = self.$loc(name_t)
        } else {
          expr_l = scope.$loc().$expression().$join(self.$loc(name_t))
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Constant').$new(self.$loc(colon2_t), self.$loc(name_t), expr_l);
      }, $Default_constant_map$129.$$arity = 3);
      
      Opal.def(self, '$variable_map', $Default_variable_map$130 = function $$variable_map(name_t) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Variable').$new(self.$loc(name_t))
      }, $Default_variable_map$130.$$arity = 1);
      
      Opal.def(self, '$binary_op_map', $Default_binary_op_map$131 = function $$binary_op_map(left_e, op_t, right_e) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(self.$loc(op_t), self.$join_exprs(left_e, right_e))
      }, $Default_binary_op_map$131.$$arity = 3);
      
      Opal.def(self, '$unary_op_map', $Default_unary_op_map$132 = function $$unary_op_map(op_t, arg_e) {
        var self = this, expr_l = nil;

        
        
        if (arg_e == null) {
          arg_e = nil;
        };
        if ($truthy(arg_e['$nil?']())) {
          expr_l = self.$loc(op_t)
        } else {
          expr_l = self.$loc(op_t).$join(arg_e.$loc().$expression())
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(self.$loc(op_t), expr_l);
      }, $Default_unary_op_map$132.$$arity = -2);
      
      Opal.def(self, '$range_map', $Default_range_map$133 = function $$range_map(start_e, op_t, end_e) {
        var self = this, expr_l = nil;

        
        if ($truthy(end_e)) {
          expr_l = self.$join_exprs(start_e, end_e)
        } else {
          expr_l = start_e.$loc().$expression().$join(self.$loc(op_t))
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(self.$loc(op_t), expr_l);
      }, $Default_range_map$133.$$arity = 3);
      
      Opal.def(self, '$arg_prefix_map', $Default_arg_prefix_map$134 = function $$arg_prefix_map(op_t, name_t) {
        var self = this, expr_l = nil;

        
        
        if (name_t == null) {
          name_t = nil;
        };
        if ($truthy(name_t['$nil?']())) {
          expr_l = self.$loc(op_t)
        } else {
          expr_l = self.$loc(op_t).$join(self.$loc(name_t))
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Variable').$new(self.$loc(name_t), expr_l);
      }, $Default_arg_prefix_map$134.$$arity = -2);
      
      Opal.def(self, '$kwarg_map', $Default_kwarg_map$135 = function $$kwarg_map(name_t, value_e) {
        var self = this, label_range = nil, name_range = nil, expr_l = nil;

        
        
        if (value_e == null) {
          value_e = nil;
        };
        label_range = self.$loc(name_t);
        name_range = label_range.$adjust($hash2(["end_pos"], {"end_pos": -1}));
        if ($truthy(value_e)) {
          expr_l = self.$loc(name_t).$join(value_e.$loc().$expression())
        } else {
          expr_l = self.$loc(name_t)
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Variable').$new(name_range, expr_l);
      }, $Default_kwarg_map$135.$$arity = -2);
      
      Opal.def(self, '$module_definition_map', $Default_module_definition_map$136 = function $$module_definition_map(keyword_t, name_e, operator_t, end_t) {
        var self = this, name_l = nil;

        
        if ($truthy(name_e)) {
          name_l = name_e.$loc().$expression()};
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Definition').$new(self.$loc(keyword_t), self.$loc(operator_t), name_l, self.$loc(end_t));
      }, $Default_module_definition_map$136.$$arity = 4);
      
      Opal.def(self, '$definition_map', $Default_definition_map$137 = function $$definition_map(keyword_t, operator_t, name_t, end_t) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Definition').$new(self.$loc(keyword_t), self.$loc(operator_t), self.$loc(name_t), self.$loc(end_t))
      }, $Default_definition_map$137.$$arity = 4);
      
      Opal.def(self, '$send_map', $Default_send_map$138 = function $$send_map(receiver_e, dot_t, selector_t, begin_t, args, end_t) {
        var self = this, begin_l = nil, end_l = nil;

        
        
        if (begin_t == null) {
          begin_t = nil;
        };
        
        if (args == null) {
          args = [];
        };
        
        if (end_t == null) {
          end_t = nil;
        };
        if ($truthy(receiver_e)) {
          begin_l = receiver_e.$loc().$expression()
        } else if ($truthy(selector_t)) {
          begin_l = self.$loc(selector_t)};
        if ($truthy(end_t)) {
          end_l = self.$loc(end_t)
        } else if ($truthy(args['$any?']())) {
          end_l = args.$last().$loc().$expression()
        } else if ($truthy(selector_t)) {
          end_l = self.$loc(selector_t)};
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Send').$new(self.$loc(dot_t), self.$loc(selector_t), self.$loc(begin_t), self.$loc(end_t), begin_l.$join(end_l));
      }, $Default_send_map$138.$$arity = -4);
      
      Opal.def(self, '$var_send_map', $Default_var_send_map$139 = function $$var_send_map(variable_e) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Send').$new(nil, variable_e.$loc().$expression(), nil, nil, variable_e.$loc().$expression())
      }, $Default_var_send_map$139.$$arity = 1);
      
      Opal.def(self, '$send_binary_op_map', $Default_send_binary_op_map$140 = function $$send_binary_op_map(lhs_e, selector_t, rhs_e) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Send').$new(nil, self.$loc(selector_t), nil, nil, self.$join_exprs(lhs_e, rhs_e))
      }, $Default_send_binary_op_map$140.$$arity = 3);
      
      Opal.def(self, '$send_unary_op_map', $Default_send_unary_op_map$141 = function $$send_unary_op_map(selector_t, arg_e) {
        var self = this, expr_l = nil;

        
        if ($truthy(arg_e['$nil?']())) {
          expr_l = self.$loc(selector_t)
        } else {
          expr_l = self.$loc(selector_t).$join(arg_e.$loc().$expression())
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Send').$new(nil, self.$loc(selector_t), nil, nil, expr_l);
      }, $Default_send_unary_op_map$141.$$arity = 2);
      
      Opal.def(self, '$index_map', $Default_index_map$142 = function $$index_map(receiver_e, lbrack_t, rbrack_t) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Index').$new(self.$loc(lbrack_t), self.$loc(rbrack_t), receiver_e.$loc().$expression().$join(self.$loc(rbrack_t)))
      }, $Default_index_map$142.$$arity = 3);
      
      Opal.def(self, '$send_index_map', $Default_send_index_map$143 = function $$send_index_map(receiver_e, lbrack_t, rbrack_t) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Send').$new(nil, self.$loc(lbrack_t).$join(self.$loc(rbrack_t)), nil, nil, receiver_e.$loc().$expression().$join(self.$loc(rbrack_t)))
      }, $Default_send_index_map$143.$$arity = 3);
      
      Opal.def(self, '$block_map', $Default_block_map$144 = function $$block_map(receiver_l, begin_t, end_t) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(self.$loc(begin_t), self.$loc(end_t), receiver_l.$join(self.$loc(end_t)))
      }, $Default_block_map$144.$$arity = 3);
      
      Opal.def(self, '$keyword_map', $Default_keyword_map$145 = function $$keyword_map(keyword_t, begin_t, args, end_t) {
        var $a, self = this, end_l = nil;

        
        args = ($truthy($a = args) ? $a : []);
        if ($truthy(end_t)) {
          end_l = self.$loc(end_t)
        } else if ($truthy(($truthy($a = args['$any?']()) ? args.$last()['$nil?']()['$!']() : $a))) {
          end_l = args.$last().$loc().$expression()
        } else if ($truthy(($truthy($a = args['$any?']()) ? $rb_gt(args.$count(), 1) : $a))) {
          end_l = args['$[]'](-2).$loc().$expression()
        } else {
          end_l = self.$loc(keyword_t)
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Keyword').$new(self.$loc(keyword_t), self.$loc(begin_t), self.$loc(end_t), self.$loc(keyword_t).$join(end_l));
      }, $Default_keyword_map$145.$$arity = 4);
      
      Opal.def(self, '$keyword_mod_map', $Default_keyword_mod_map$146 = function $$keyword_mod_map(pre_e, keyword_t, post_e) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Keyword').$new(self.$loc(keyword_t), nil, nil, self.$join_exprs(pre_e, post_e))
      }, $Default_keyword_mod_map$146.$$arity = 3);
      
      Opal.def(self, '$condition_map', $Default_condition_map$147 = function $$condition_map(keyword_t, cond_e, begin_t, body_e, else_t, else_e, end_t) {
        var $a, self = this, end_l = nil;

        
        if ($truthy(end_t)) {
          end_l = self.$loc(end_t)
        } else if ($truthy(($truthy($a = else_e) ? else_e.$loc().$expression() : $a))) {
          end_l = else_e.$loc().$expression()
        } else if ($truthy(self.$loc(else_t))) {
          end_l = self.$loc(else_t)
        } else if ($truthy(($truthy($a = body_e) ? body_e.$loc().$expression() : $a))) {
          end_l = body_e.$loc().$expression()
        } else if ($truthy(self.$loc(begin_t))) {
          end_l = self.$loc(begin_t)
        } else {
          end_l = cond_e.$loc().$expression()
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Condition').$new(self.$loc(keyword_t), self.$loc(begin_t), self.$loc(else_t), self.$loc(end_t), self.$loc(keyword_t).$join(end_l));
      }, $Default_condition_map$147.$$arity = 7);
      
      Opal.def(self, '$ternary_map', $Default_ternary_map$148 = function $$ternary_map(begin_e, question_t, mid_e, colon_t, end_e) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Ternary').$new(self.$loc(question_t), self.$loc(colon_t), self.$join_exprs(begin_e, end_e))
      }, $Default_ternary_map$148.$$arity = 5);
      
      Opal.def(self, '$for_map', $Default_for_map$149 = function $$for_map(keyword_t, in_t, begin_t, end_t) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'For').$new(self.$loc(keyword_t), self.$loc(in_t), self.$loc(begin_t), self.$loc(end_t), self.$loc(keyword_t).$join(self.$loc(end_t)))
      }, $Default_for_map$149.$$arity = 4);
      
      Opal.def(self, '$rescue_body_map', $Default_rescue_body_map$150 = function $$rescue_body_map(keyword_t, exc_list_e, assoc_t, exc_var_e, then_t, compstmt_e) {
        var $a, self = this, end_l = nil;

        
        if ($truthy(compstmt_e)) {
          end_l = compstmt_e.$loc().$expression()};
        if ($truthy(($truthy($a = end_l['$nil?']()) ? then_t : $a))) {
          end_l = self.$loc(then_t)};
        if ($truthy(($truthy($a = end_l['$nil?']()) ? exc_var_e : $a))) {
          end_l = exc_var_e.$loc().$expression()};
        if ($truthy(($truthy($a = end_l['$nil?']()) ? exc_list_e : $a))) {
          end_l = exc_list_e.$loc().$expression()};
        if ($truthy(end_l['$nil?']())) {
          end_l = self.$loc(keyword_t)};
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'RescueBody').$new(self.$loc(keyword_t), self.$loc(assoc_t), self.$loc(then_t), self.$loc(keyword_t).$join(end_l));
      }, $Default_rescue_body_map$150.$$arity = 6);
      
      Opal.def(self, '$eh_keyword_map', $Default_eh_keyword_map$151 = function $$eh_keyword_map(compstmt_e, keyword_t, body_es, else_t, else_e) {
        var self = this, begin_l = nil, end_l = nil;

        
        if ($truthy(compstmt_e['$nil?']())) {
          if ($truthy(keyword_t['$nil?']())) {
            begin_l = body_es.$first().$loc().$expression()
          } else {
            begin_l = self.$loc(keyword_t)
          }
        } else {
          begin_l = compstmt_e.$loc().$expression()
        };
        if ($truthy(else_t)) {
          if ($truthy(else_e['$nil?']())) {
            end_l = self.$loc(else_t)
          } else {
            end_l = else_e.$loc().$expression()
          }
        } else if ($truthy(body_es.$last()['$nil?']()['$!']())) {
          end_l = body_es.$last().$loc().$expression()
        } else {
          end_l = self.$loc(keyword_t)
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Condition').$new(self.$loc(keyword_t), nil, self.$loc(else_t), nil, begin_l.$join(end_l));
      }, $Default_eh_keyword_map$151.$$arity = 5);
      
      Opal.def(self, '$static_string', $Default_static_string$152 = function $$static_string(nodes) {try {

        var $$153, self = this;

        return $send(nodes, 'map', [], ($$153 = function(node){var self = $$153.$$s || this, $case = nil, string = nil;

        
          
          if (node == null) {
            node = nil;
          };
          return (function() {$case = node.$type();
          if ("str"['$===']($case)) {return node.$children()['$[]'](0)}
          else if ("begin"['$===']($case)) {if ($truthy((string = self.$static_string(node.$children())))) {
            return string
          } else {
            Opal.ret(nil)
          }}
          else {Opal.ret(nil)}})();}, $$153.$$s = self, $$153.$$arity = 1, $$153)).$join()
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, $Default_static_string$152.$$arity = 1);
      
      Opal.def(self, '$static_regexp', $Default_static_regexp$154 = function $$static_regexp(parts, options) {
        var self = this, source = nil;

        
        source = self.$static_string(parts);
        if ($truthy(source['$nil?']())) {
          return nil};
        source = (function() {
        if ($truthy(options.$children()['$include?']("u"))) {return source.$encode($$$($$($nesting, 'Encoding'), 'UTF_8'))}
        else if ($truthy(options.$children()['$include?']("e"))) {return source.$encode($$$($$($nesting, 'Encoding'), 'EUC_JP'))}
        else if ($truthy(options.$children()['$include?']("s"))) {return source.$encode($$$($$($nesting, 'Encoding'), 'WINDOWS_31J'))}
        else if ($truthy(options.$children()['$include?']("n"))) {return source.$encode($$$($$($nesting, 'Encoding'), 'BINARY'))}
        else {return source}})();
        return $$($nesting, 'Regexp').$new(source, (function() {if ($truthy(options.$children()['$include?']("x"))) {
          return $$$($$($nesting, 'Regexp'), 'EXTENDED')
        } else {
          return nil
        }; return nil; })());
      }, $Default_static_regexp$154.$$arity = 2);
      
      Opal.def(self, '$static_regexp_node', $Default_static_regexp_node$155 = function $$static_regexp_node(node) {
        var $a, self = this, parts = nil, options = nil;

        if (node.$type()['$==']("regexp")) {
          
          $a = [node.$children()['$[]']($range(0, -2, false)), node.$children()['$[]'](-1)], (parts = $a[0]), (options = $a[1]), $a;
          return self.$static_regexp(parts, options);
        } else {
          return nil
        }
      }, $Default_static_regexp_node$155.$$arity = 1);
      
      Opal.def(self, '$collapse_string_parts?', $Default_collapse_string_parts$ques$156 = function(parts) {
        var $a, self = this;

        return ($truthy($a = parts['$one?']()) ? ["str", "dstr"]['$include?'](parts.$first().$type()) : $a)
      }, $Default_collapse_string_parts$ques$156.$$arity = 1);
      
      Opal.def(self, '$value', $Default_value$157 = function $$value(token) {
        var self = this;

        return token['$[]'](0)
      }, $Default_value$157.$$arity = 1);
      
      Opal.def(self, '$string_value', $Default_string_value$158 = function $$string_value(token) {
        var self = this;

        
        if ($truthy(token['$[]'](0)['$valid_encoding?']())) {
        } else {
          self.$diagnostic("error", "invalid_encoding", nil, token['$[]'](1))
        };
        return token['$[]'](0);
      }, $Default_string_value$158.$$arity = 1);
      
      Opal.def(self, '$loc', $Default_loc$159 = function $$loc(token) {
        var $a, self = this;

        if ($truthy(($truthy($a = token) ? token['$[]'](0) : $a))) {
          return token['$[]'](1)
        } else {
          return nil
        }
      }, $Default_loc$159.$$arity = 1);
      return (Opal.def(self, '$diagnostic', $Default_diagnostic$160 = function $$diagnostic(type, reason, arguments$, location, highlights) {
        var self = this;

        
        
        if (highlights == null) {
          highlights = [];
        };
        self.parser.$diagnostics().$process($$($nesting, 'Diagnostic').$new(type, reason, arguments$, location, highlights));
        if (type['$==']("error")) {
          return self.parser.$send("yyerror")
        } else {
          return nil
        };
      }, $Default_diagnostic$160.$$arity = -5), nil) && 'diagnostic';
    })($$($nesting, 'Builders'), null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/context"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$freeze', '$<<', '$pop', '$clear', '$==', '$last', '$include?', '$rindex', '$stack', '$nil?', '$!', '$>']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Context');

      var $nesting = [self].concat($parent_nesting), $Context_initialize$1, $Context_push$2, $Context_pop$3, $Context_reset$4, $Context_in_class$ques$5, $Context_indirectly_in_def$ques$6, $Context_class_definition_allowed$ques$7;

      self.$$prototype.stack = nil;
      
      self.$attr_reader("stack");
      
      Opal.def(self, '$initialize', $Context_initialize$1 = function $$initialize() {
        var self = this;

        
        self.stack = [];
        return self.$freeze();
      }, $Context_initialize$1.$$arity = 0);
      
      Opal.def(self, '$push', $Context_push$2 = function $$push(state) {
        var self = this;

        return self.stack['$<<'](state)
      }, $Context_push$2.$$arity = 1);
      
      Opal.def(self, '$pop', $Context_pop$3 = function $$pop() {
        var self = this;

        return self.stack.$pop()
      }, $Context_pop$3.$$arity = 0);
      
      Opal.def(self, '$reset', $Context_reset$4 = function $$reset() {
        var self = this;

        return self.stack.$clear()
      }, $Context_reset$4.$$arity = 0);
      
      Opal.def(self, '$in_class?', $Context_in_class$ques$5 = function() {
        var self = this;

        return self.stack.$last()['$==']("class")
      }, $Context_in_class$ques$5.$$arity = 0);
      
      Opal.def(self, '$indirectly_in_def?', $Context_indirectly_in_def$ques$6 = function() {
        var $a, self = this;

        return ($truthy($a = self.stack['$include?']("def")) ? $a : self.stack['$include?']("defs"))
      }, $Context_indirectly_in_def$ques$6.$$arity = 0);
      
      Opal.def(self, '$class_definition_allowed?', $Context_class_definition_allowed$ques$7 = function() {
        var $$8, $a, $b, self = this, def_index = nil, sclass_index = nil;

        
        def_index = $send(self.$stack(), 'rindex', [], ($$8 = function(item){var self = $$8.$$s || this;

        
          
          if (item == null) {
            item = nil;
          };
          return ["def", "defs"]['$include?'](item);}, $$8.$$s = self, $$8.$$arity = 1, $$8));
        sclass_index = self.$stack().$rindex("sclass");
        return ($truthy($a = def_index['$nil?']()) ? $a : ($truthy($b = sclass_index['$nil?']()['$!']()) ? $rb_gt(sclass_index, def_index) : $b));
      }, $Context_class_definition_allowed$ques$7.$$arity = 0);
      Opal.alias(self, "module_definition_allowed?", "class_definition_allowed?");
      return Opal.alias(self, "dynamic_const_definition_allowed?", "class_definition_allowed?");
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/base"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $gvars = Opal.gvars, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$default_parser', '$setup_source_buffer', '$default_encoding', '$parse', '$parse_with_comments', '$read', '$new', '$all_errors_are_fatal=', '$diagnostics', '$-', '$ignore_warnings=', '$lambda', '$puts', '$render', '$consumer=', '$force_encoding', '$dup', '$==', '$name', '$raw_source=', '$source=', '$private_class_method', '$attr_reader', '$version', '$diagnostics=', '$static_env=', '$parser=', '$class', '$[]', '$reset', '$source_buffer=', '$do_parse', '$comments=', '$comments', '$tokens=', '$!', '$raise', '$tokens', '$private', '$advance', '$===', '$diagnostic', '$map', '$process', '$yyerror', '$token_to_str']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Base');

      var $nesting = [self].concat($parent_nesting), $Base_parse$1, $Base_parse_with_comments$2, $Base_parse_file$3, $Base_parse_file_with_comments$4, $Base_default_parser$5, $Base_setup_source_buffer$7, $Base_initialize$8, $Base_reset$9, $Base_parse$10, $Base_parse_with_comments$11, $Base_tokenize$12, $Base_next_token$13, $Base_check_kwarg_name$14, $Base_diagnostic$15, $Base_on_error$17;

      self.$$prototype.diagnostics = self.$$prototype.lexer = self.$$prototype.static_env = self.$$prototype.builder = self.$$prototype.context = nil;
      
      Opal.defs(self, '$parse', $Base_parse$1 = function $$parse(string, file, line) {
        var self = this, parser = nil, source_buffer = nil;

        
        
        if (file == null) {
          file = "(string)";
        };
        
        if (line == null) {
          line = 1;
        };
        parser = self.$default_parser();
        source_buffer = self.$setup_source_buffer(file, line, string, parser.$default_encoding());
        return parser.$parse(source_buffer);
      }, $Base_parse$1.$$arity = -2);
      Opal.defs(self, '$parse_with_comments', $Base_parse_with_comments$2 = function $$parse_with_comments(string, file, line) {
        var self = this, parser = nil, source_buffer = nil;

        
        
        if (file == null) {
          file = "(string)";
        };
        
        if (line == null) {
          line = 1;
        };
        parser = self.$default_parser();
        source_buffer = self.$setup_source_buffer(file, line, string, parser.$default_encoding());
        return parser.$parse_with_comments(source_buffer);
      }, $Base_parse_with_comments$2.$$arity = -2);
      Opal.defs(self, '$parse_file', $Base_parse_file$3 = function $$parse_file(filename) {
        var self = this;

        return self.$parse($$($nesting, 'File').$read(filename), filename)
      }, $Base_parse_file$3.$$arity = 1);
      Opal.defs(self, '$parse_file_with_comments', $Base_parse_file_with_comments$4 = function $$parse_file_with_comments(filename) {
        var self = this;

        return self.$parse_with_comments($$($nesting, 'File').$read(filename), filename)
      }, $Base_parse_file_with_comments$4.$$arity = 1);
      Opal.defs(self, '$default_parser', $Base_default_parser$5 = function $$default_parser() {
        var $$6, self = this, parser = nil, $writer = nil;

        
        parser = self.$new();
        
        $writer = [true];
        $send(parser.$diagnostics(), 'all_errors_are_fatal=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [true];
        $send(parser.$diagnostics(), 'ignore_warnings=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [$send(self, 'lambda', [], ($$6 = function(diagnostic){var self = $$6.$$s || this;
          if ($gvars.stderr == null) $gvars.stderr = nil;

        
          
          if (diagnostic == null) {
            diagnostic = nil;
          };
          return $gvars.stderr.$puts(diagnostic.$render());}, $$6.$$s = self, $$6.$$arity = 1, $$6))];
        $send(parser.$diagnostics(), 'consumer=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return parser;
      }, $Base_default_parser$5.$$arity = 0);
      Opal.defs(self, '$setup_source_buffer', $Base_setup_source_buffer$7 = function $$setup_source_buffer(file, line, string, encoding) {
        var self = this, source_buffer = nil, $writer = nil;

        
        string = string.$dup().$force_encoding(encoding);
        source_buffer = $$$($$($nesting, 'Source'), 'Buffer').$new(file, line);
        if (self.$name()['$==']("Parser::Ruby18")) {
          
          $writer = [string];
          $send(source_buffer, 'raw_source=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        } else {
          
          $writer = [string];
          $send(source_buffer, 'source=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        return source_buffer;
      }, $Base_setup_source_buffer$7.$$arity = 4);
      self.$private_class_method("setup_source_buffer");
      self.$attr_reader("diagnostics");
      self.$attr_reader("builder");
      self.$attr_reader("static_env");
      self.$attr_reader("source_buffer");
      self.$attr_reader("context");
      
      Opal.def(self, '$initialize', $Base_initialize$8 = function $$initialize(builder) {
        var $a, self = this, $writer = nil;

        
        
        if (builder == null) {
          builder = $$$($$$($$($nesting, 'Parser'), 'Builders'), 'Default').$new();
        };
        self.diagnostics = $$$($$($nesting, 'Diagnostic'), 'Engine').$new();
        self.static_env = $$($nesting, 'StaticEnvironment').$new();
        self.lexer = $$($nesting, 'Lexer').$new(self.$version());
        
        $writer = [self.diagnostics];
        $send(self.lexer, 'diagnostics=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [self.static_env];
        $send(self.lexer, 'static_env=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.builder = builder;
        
        $writer = [self];
        $send(self.builder, 'parser=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.context = $$($nesting, 'Context').$new();
        self.last_token = nil;
        if ($truthy(($truthy($a = $$$(self.$class(), 'Racc_debug_parser')) ? $$($nesting, 'ENV')['$[]']("RACC_DEBUG") : $a))) {
          self.yydebug = true};
        return self.$reset();
      }, $Base_initialize$8.$$arity = -1);
      
      Opal.def(self, '$reset', $Base_reset$9 = function $$reset() {
        var self = this;

        
        self.source_buffer = nil;
        self.lexer.$reset();
        self.static_env.$reset();
        self.context.$reset();
        return self;
      }, $Base_reset$9.$$arity = 0);
      
      Opal.def(self, '$parse', $Base_parse$10 = function $$parse(source_buffer) {
        var self = this, $writer = nil;

        return (function() { try {
        
        
        $writer = [source_buffer];
        $send(self.lexer, 'source_buffer=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.source_buffer = source_buffer;
        return self.$do_parse();
        } finally {
          ((self.source_buffer = nil), (($writer = [nil]), $send(self.lexer, 'source_buffer=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
        }; })()
      }, $Base_parse$10.$$arity = 1);
      
      Opal.def(self, '$parse_with_comments', $Base_parse_with_comments$11 = function $$parse_with_comments(source_buffer) {
        var self = this, $writer = nil;

        return (function() { try {
        
        
        $writer = [[]];
        $send(self.lexer, 'comments=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return [self.$parse(source_buffer), self.lexer.$comments()];
        } finally {
          (($writer = [nil]), $send(self.lexer, 'comments=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])
        }; })()
      }, $Base_parse_with_comments$11.$$arity = 1);
      
      Opal.def(self, '$tokenize', $Base_tokenize$12 = function $$tokenize(source_buffer, recover) {
        var self = this, $writer = nil, ast = nil;

        
        
        if (recover == null) {
          recover = false;
        };
        return (function() { try {
        
        
        $writer = [[]];
        $send(self.lexer, 'tokens=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [[]];
        $send(self.lexer, 'comments=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        try {
          ast = self.$parse(source_buffer)
        } catch ($err) {
          if (Opal.rescue($err, [$$$($$($nesting, 'Parser'), 'SyntaxError')])) {
            try {
              if ($truthy(recover['$!']())) {
                self.$raise()}
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };;
        return [ast, self.lexer.$comments(), self.lexer.$tokens()];
        } finally {
          ((($writer = [nil]), $send(self.lexer, 'tokens=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]), (($writer = [nil]), $send(self.lexer, 'comments=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
        }; })();
      }, $Base_tokenize$12.$$arity = -2);
      self.$private();
      
      Opal.def(self, '$next_token', $Base_next_token$13 = function $$next_token() {
        var self = this, token = nil;

        
        token = self.lexer.$advance();
        self.last_token = token;
        return token;
      }, $Base_next_token$13.$$arity = 0);
      
      Opal.def(self, '$check_kwarg_name', $Base_check_kwarg_name$14 = function $$check_kwarg_name(name_t) {
        var self = this, $case = nil;

        return (function() {$case = name_t['$[]'](0);
        if (/^[a-z_]/['$===']($case)) {return nil}
        else if (/^[A-Z]/['$===']($case)) {return self.$diagnostic("error", "argument_const", nil, name_t)}
        else { return nil }})()
      }, $Base_check_kwarg_name$14.$$arity = 1);
      
      Opal.def(self, '$diagnostic', $Base_diagnostic$15 = function $$diagnostic(level, reason, arguments$, location_t, highlights_ts) {
        var $a, $b, $$16, self = this, _ = nil, location = nil, highlights = nil;

        
        
        if (highlights_ts == null) {
          highlights_ts = [];
        };
        $b = location_t, $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (location = ($a[1] == null ? nil : $a[1])), $b;
        highlights = $send(highlights_ts, 'map', [], ($$16 = function(token){var self = $$16.$$s || this, $c, $d, range = nil;

        
          
          if (token == null) {
            token = nil;
          };
          $d = token, $c = Opal.to_ary($d), (_ = ($c[0] == null ? nil : $c[0])), (range = ($c[1] == null ? nil : $c[1])), $d;
          return range;}, $$16.$$s = self, $$16.$$arity = 1, $$16));
        self.diagnostics.$process($$($nesting, 'Diagnostic').$new(level, reason, arguments$, location, highlights));
        if (level['$==']("error")) {
          return self.$yyerror()
        } else {
          return nil
        };
      }, $Base_diagnostic$15.$$arity = -5);
      return (Opal.def(self, '$on_error', $Base_on_error$17 = function $$on_error(error_token_id, error_value, value_stack) {
        var $a, $b, self = this, token_name = nil, _ = nil, location = nil;

        
        token_name = self.$token_to_str(error_token_id);
        $b = error_value, $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (location = ($a[1] == null ? nil : $a[1])), $b;
        return self.diagnostics.$process($$($nesting, 'Diagnostic').$new("error", "unexpected_token", $hash2(["token"], {"token": token_name}), location));
      }, $Base_on_error$17.$$arity = 3), nil) && 'on_error';
    })($nesting[0], $$$($$($nesting, 'Racc'), 'Parser'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/rewriter"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$new', '$process', '$include?', '$type', '$remove', '$wrap', '$insert_before', '$insert_after', '$replace', '$freeze', '$join', '$extend', '$warn_of_deprecation', '$class', '$warned_of_deprecation=', '$-']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Rewriter');

      var $nesting = [self].concat($parent_nesting), $Rewriter_rewrite$1, $Rewriter_assignment$ques$2, $Rewriter_remove$3, $Rewriter_wrap$4, $Rewriter_insert_before$5, $Rewriter_insert_after$6, $Rewriter_replace$7, $Rewriter_initialize$8;

      self.$$prototype.source_rewriter = nil;
      
      
      Opal.def(self, '$rewrite', $Rewriter_rewrite$1 = function $$rewrite(source_buffer, ast) {
        var self = this;

        
        self.source_rewriter = $$$($$($nesting, 'Source'), 'Rewriter').$new(source_buffer);
        self.$process(ast);
        return self.source_rewriter.$process();
      }, $Rewriter_rewrite$1.$$arity = 2);
      
      Opal.def(self, '$assignment?', $Rewriter_assignment$ques$2 = function(node) {
        var self = this;

        return ["lvasgn", "ivasgn", "gvasgn", "cvasgn", "casgn"]['$include?'](node.$type())
      }, $Rewriter_assignment$ques$2.$$arity = 1);
      
      Opal.def(self, '$remove', $Rewriter_remove$3 = function $$remove(range) {
        var self = this;

        return self.source_rewriter.$remove(range)
      }, $Rewriter_remove$3.$$arity = 1);
      
      Opal.def(self, '$wrap', $Rewriter_wrap$4 = function $$wrap(range, before, after) {
        var self = this;

        return self.source_rewriter.$wrap(range, before, after)
      }, $Rewriter_wrap$4.$$arity = 3);
      
      Opal.def(self, '$insert_before', $Rewriter_insert_before$5 = function $$insert_before(range, content) {
        var self = this;

        return self.source_rewriter.$insert_before(range, content)
      }, $Rewriter_insert_before$5.$$arity = 2);
      
      Opal.def(self, '$insert_after', $Rewriter_insert_after$6 = function $$insert_after(range, content) {
        var self = this;

        return self.source_rewriter.$insert_after(range, content)
      }, $Rewriter_insert_after$6.$$arity = 2);
      
      Opal.def(self, '$replace', $Rewriter_replace$7 = function $$replace(range, content) {
        var self = this;

        return self.source_rewriter.$replace(range, content)
      }, $Rewriter_replace$7.$$arity = 2);
      Opal.const_set($nesting[0], 'DEPRECATION_WARNING', ["Parser::Rewriter is deprecated.", "Please update your code to use Parser::TreeRewriter instead"].$join("\n").$freeze());
      self.$extend($$($nesting, 'Deprecation'));
      return (Opal.def(self, '$initialize', $Rewriter_initialize$8 = function $$initialize($a) {
        var $post_args, $iter = $Rewriter_initialize$8.$$p, $yield = $iter || nil, self = this, $writer = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) $Rewriter_initialize$8.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        ;
        self.$class().$warn_of_deprecation();
        
        $writer = [true];
        $send($$$($$($nesting, 'Source'), 'Rewriter'), 'warned_of_deprecation=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return $send(self, Opal.find_super_dispatcher(self, 'initialize', $Rewriter_initialize$8, false), $zuper, $iter);
      }, $Rewriter_initialize$8.$$arity = -1), nil) && 'initialize';
    })($nesting[0], $$$($$$($$($nesting, 'Parser'), 'AST'), 'Processor'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/tree_rewriter"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$new', '$process', '$include?', '$type', '$remove', '$wrap', '$insert_before', '$insert_after', '$replace']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'TreeRewriter');

      var $nesting = [self].concat($parent_nesting), $TreeRewriter_rewrite$1, $TreeRewriter_assignment$ques$2, $TreeRewriter_remove$3, $TreeRewriter_wrap$4, $TreeRewriter_insert_before$5, $TreeRewriter_insert_after$6, $TreeRewriter_replace$7;

      self.$$prototype.source_rewriter = nil;
      
      
      Opal.def(self, '$rewrite', $TreeRewriter_rewrite$1 = function $$rewrite(source_buffer, ast, $kwargs) {
        var policy, self = this;

        
        
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expected kwargs');
        };
        
        policy = Opal.kwrestargs($kwargs, {});;
        self.source_rewriter = $$$($$$($$($nesting, 'Parser'), 'Source'), 'TreeRewriter').$new(source_buffer, Opal.to_hash(policy));
        self.$process(ast);
        return self.source_rewriter.$process();
      }, $TreeRewriter_rewrite$1.$$arity = -3);
      
      Opal.def(self, '$assignment?', $TreeRewriter_assignment$ques$2 = function(node) {
        var self = this;

        return ["lvasgn", "ivasgn", "gvasgn", "cvasgn", "casgn"]['$include?'](node.$type())
      }, $TreeRewriter_assignment$ques$2.$$arity = 1);
      
      Opal.def(self, '$remove', $TreeRewriter_remove$3 = function $$remove(range) {
        var self = this;

        return self.source_rewriter.$remove(range)
      }, $TreeRewriter_remove$3.$$arity = 1);
      
      Opal.def(self, '$wrap', $TreeRewriter_wrap$4 = function $$wrap(range, before, after) {
        var self = this;

        return self.source_rewriter.$wrap(range, before, after)
      }, $TreeRewriter_wrap$4.$$arity = 3);
      
      Opal.def(self, '$insert_before', $TreeRewriter_insert_before$5 = function $$insert_before(range, content) {
        var self = this;

        return self.source_rewriter.$insert_before(range, content)
      }, $TreeRewriter_insert_before$5.$$arity = 2);
      
      Opal.def(self, '$insert_after', $TreeRewriter_insert_after$6 = function $$insert_after(range, content) {
        var self = this;

        return self.source_rewriter.$insert_after(range, content)
      }, $TreeRewriter_insert_after$6.$$arity = 2);
      return (Opal.def(self, '$replace', $TreeRewriter_replace$7 = function $$replace(range, content) {
        var self = this;

        return self.source_rewriter.$replace(range, content)
      }, $TreeRewriter_replace$7.$$arity = 2), nil) && 'replace';
    })($nesting[0], $$$($$$($$($nesting, 'Parser'), 'AST'), 'Processor'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $truthy = Opal.truthy, $module = Opal.module;

  Opal.add_stubs(['$=~', '$require', '$raise']);
  
  if ($truthy($$($nesting, 'RUBY_VERSION')['$=~'](/^1\.[89]\./))) {
    
    self.$require("parser/version");
    self.$raise($$($nesting, 'LoadError'), "" + "parser v" + ($$$($$($nesting, 'Parser'), 'VERSION')) + " cannot run on Ruby " + ($$($nesting, 'RUBY_VERSION')) + ".\n" + "Please upgrade to Ruby 2.0.0 or higher, or use an older version of the parser gem.\n");};
  self.$require("set");
  self.$require("racc/parser");
  self.$require("ast");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    
    self.$require("parser/version");
    self.$require("parser/messages");
    self.$require("parser/deprecation");
    (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      
      self.$require("parser/ast/node");
      self.$require("parser/ast/processor");
      self.$require("parser/meta");
    })($nesting[0], $nesting);
    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      
      self.$require("parser/source/buffer");
      self.$require("parser/source/range");
      self.$require("parser/source/comment");
      self.$require("parser/source/comment/associator");
      self.$require("parser/source/rewriter");
      self.$require("parser/source/rewriter/action");
      self.$require("parser/source/tree_rewriter");
      self.$require("parser/source/tree_rewriter/action");
      self.$require("parser/source/map");
      self.$require("parser/source/map/operator");
      self.$require("parser/source/map/collection");
      self.$require("parser/source/map/constant");
      self.$require("parser/source/map/variable");
      self.$require("parser/source/map/keyword");
      self.$require("parser/source/map/definition");
      self.$require("parser/source/map/send");
      self.$require("parser/source/map/index");
      self.$require("parser/source/map/condition");
      self.$require("parser/source/map/ternary");
      self.$require("parser/source/map/for");
      self.$require("parser/source/map/rescue_body");
      self.$require("parser/source/map/heredoc");
      self.$require("parser/source/map/objc_kwarg");
    })($nesting[0], $nesting);
    self.$require("parser/syntax_error");
    self.$require("parser/clobbering_error");
    self.$require("parser/diagnostic");
    self.$require("parser/diagnostic/engine");
    self.$require("parser/static_environment");
    self.$require("parser/lexer");
    self.$require("parser/lexer/literal");
    self.$require("parser/lexer/stack_state");
    self.$require("parser/lexer/dedenter");
    (function($base, $parent_nesting) {
      var self = $module($base, 'Builders');

      var $nesting = [self].concat($parent_nesting);

      self.$require("parser/builders/default")
    })($nesting[0], $nesting);
    self.$require("parser/context");
    self.$require("parser/base");
    self.$require("parser/rewriter");
    self.$require("parser/tree_rewriter");
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["parser/ruby25"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$new', '$each', '$split', '$empty?', '$to_i', '$[]=', '$-', '$+', '$compstmt', '$[]', '$<<', '$preexe', '$!', '$nil?', '$diagnostic', '$begin_body', '$state=', '$alias', '$gvar', '$back_ref', '$undef_method', '$condition_mod', '$loop_mod', '$rescue_body', '$postexe', '$multi_assign', '$assign', '$array', '$op_assign', '$index', '$call_method', '$const_op_assignable', '$const_fetch', '$logical_op', '$not_op', '$push', '$cond', '$pop', '$block', '$keyword_cmd', '$multi_lhs', '$begin', '$splat', '$concat', '$assignable', '$index_asgn', '$attr_asgn', '$const_global', '$const', '$symbol', '$range_inclusive', '$range_exclusive', '$binary_op', '$unary_op', '$match_op', '$ternary', '$associate', '$==', '$cmdarg', '$block_pass', '$begin_keyword', '$call_lambda', '$condition', '$loop', '$case', '$for', '$extend_static', '$class_definition_allowed?', '$def_class', '$unextend', '$def_sclass', '$module_definition_allowed?', '$def_module', '$def_method', '$def_singleton', '$in_class?', '$arg', '$restarg', '$size', '$procarg0', '$args', '$declare', '$shadowarg', '$extend_dynamic', '$when', '$string_compose', '$dedent_string', '$dedent_level', '$string', '$character', '$xstring_compose', '$regexp_options', '$regexp_compose', '$words_compose', '$word', '$symbols_compose', '$string_internal', '$symbol_internal', '$ivar', '$cvar', '$symbol_compose', '$respond_to?', '$negate', '$unary_num', '$integer', '$float', '$rational', '$complex', '$ident', '$nil', '$self', '$true', '$false', '$__FILE__', '$__LINE__', '$__ENCODING__', '$accessible', '$nth_ref', '$in_kwarg', '$in_kwarg=', '$check_kwarg_name', '$kwoptarg', '$kwarg', '$kwrestarg', '$optarg', '$blockarg', '$pair', '$pair_keyword', '$pair_quoted', '$kwsplat', '$yyerrok']);
  
  self.$require("racc/parser.rb");
  self.$require("parser");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Ruby25');

      var $nesting = [self].concat($parent_nesting), $Ruby25_version$1, $Ruby25_default_encoding$2, $Ruby25$3, $Ruby25$5, $Ruby25$7, $Ruby25$9, $Ruby25__reduce_2$11, $Ruby25__reduce_3$12, $Ruby25__reduce_4$13, $Ruby25__reduce_5$14, $Ruby25__reduce_6$15, $Ruby25__reduce_8$16, $Ruby25__reduce_9$17, $Ruby25__reduce_10$18, $Ruby25__reduce_11$19, $Ruby25__reduce_12$20, $Ruby25__reduce_13$21, $Ruby25__reduce_14$22, $Ruby25__reduce_15$23, $Ruby25__reduce_17$24, $Ruby25__reduce_18$25, $Ruby25__reduce_19$26, $Ruby25__reduce_20$27, $Ruby25__reduce_21$28, $Ruby25__reduce_22$29, $Ruby25__reduce_23$30, $Ruby25__reduce_24$31, $Ruby25__reduce_25$32, $Ruby25__reduce_26$33, $Ruby25__reduce_27$34, $Ruby25__reduce_28$35, $Ruby25__reduce_29$36, $Ruby25__reduce_31$37, $Ruby25__reduce_32$38, $Ruby25__reduce_33$39, $Ruby25__reduce_35$40, $Ruby25__reduce_36$41, $Ruby25__reduce_37$42, $Ruby25__reduce_38$43, $Ruby25__reduce_39$44, $Ruby25__reduce_40$45, $Ruby25__reduce_41$46, $Ruby25__reduce_42$47, $Ruby25__reduce_44$48, $Ruby25__reduce_47$49, $Ruby25__reduce_48$50, $Ruby25__reduce_49$51, $Ruby25__reduce_50$52, $Ruby25__reduce_53$53, $Ruby25__reduce_54$54, $Ruby25__reduce_58$55, $Ruby25__reduce_59$56, $Ruby25__reduce_60$57, $Ruby25__reduce_62$58, $Ruby25__reduce_63$59, $Ruby25__reduce_64$60, $Ruby25__reduce_65$61, $Ruby25__reduce_66$62, $Ruby25__reduce_67$63, $Ruby25__reduce_68$64, $Ruby25__reduce_69$65, $Ruby25__reduce_70$66, $Ruby25__reduce_71$67, $Ruby25__reduce_72$68, $Ruby25__reduce_73$69, $Ruby25__reduce_74$70, $Ruby25__reduce_75$71, $Ruby25__reduce_76$72, $Ruby25__reduce_78$73, $Ruby25__reduce_79$74, $Ruby25__reduce_80$75, $Ruby25__reduce_81$76, $Ruby25__reduce_82$77, $Ruby25__reduce_83$78, $Ruby25__reduce_84$79, $Ruby25__reduce_85$80, $Ruby25__reduce_86$81, $Ruby25__reduce_88$82, $Ruby25__reduce_89$83, $Ruby25__reduce_90$84, $Ruby25__reduce_91$85, $Ruby25__reduce_92$86, $Ruby25__reduce_93$87, $Ruby25__reduce_94$88, $Ruby25__reduce_95$89, $Ruby25__reduce_96$90, $Ruby25__reduce_97$91, $Ruby25__reduce_98$92, $Ruby25__reduce_99$93, $Ruby25__reduce_100$94, $Ruby25__reduce_101$95, $Ruby25__reduce_102$96, $Ruby25__reduce_103$97, $Ruby25__reduce_104$98, $Ruby25__reduce_105$99, $Ruby25__reduce_106$100, $Ruby25__reduce_107$101, $Ruby25__reduce_108$102, $Ruby25__reduce_109$103, $Ruby25__reduce_110$104, $Ruby25__reduce_111$105, $Ruby25__reduce_113$106, $Ruby25__reduce_114$107, $Ruby25__reduce_115$108, $Ruby25__reduce_121$109, $Ruby25__reduce_125$110, $Ruby25__reduce_126$111, $Ruby25__reduce_127$112, $Ruby25__reduce_199$113, $Ruby25__reduce_200$114, $Ruby25__reduce_201$115, $Ruby25__reduce_202$116, $Ruby25__reduce_203$117, $Ruby25__reduce_204$118, $Ruby25__reduce_205$119, $Ruby25__reduce_206$120, $Ruby25__reduce_207$121, $Ruby25__reduce_208$122, $Ruby25__reduce_209$123, $Ruby25__reduce_210$124, $Ruby25__reduce_211$125, $Ruby25__reduce_212$126, $Ruby25__reduce_213$127, $Ruby25__reduce_214$128, $Ruby25__reduce_215$129, $Ruby25__reduce_216$130, $Ruby25__reduce_217$131, $Ruby25__reduce_218$132, $Ruby25__reduce_219$133, $Ruby25__reduce_220$134, $Ruby25__reduce_221$135, $Ruby25__reduce_222$136, $Ruby25__reduce_224$137, $Ruby25__reduce_225$138, $Ruby25__reduce_226$139, $Ruby25__reduce_227$140, $Ruby25__reduce_228$141, $Ruby25__reduce_229$142, $Ruby25__reduce_230$143, $Ruby25__reduce_231$144, $Ruby25__reduce_232$145, $Ruby25__reduce_233$146, $Ruby25__reduce_234$147, $Ruby25__reduce_235$148, $Ruby25__reduce_236$149, $Ruby25__reduce_242$150, $Ruby25__reduce_243$151, $Ruby25__reduce_247$152, $Ruby25__reduce_248$153, $Ruby25__reduce_250$154, $Ruby25__reduce_251$155, $Ruby25__reduce_252$156, $Ruby25__reduce_254$157, $Ruby25__reduce_257$158, $Ruby25__reduce_258$159, $Ruby25__reduce_259$160, $Ruby25__reduce_260$161, $Ruby25__reduce_261$162, $Ruby25__reduce_262$163, $Ruby25__reduce_263$164, $Ruby25__reduce_264$165, $Ruby25__reduce_265$166, $Ruby25__reduce_266$167, $Ruby25__reduce_267$168, $Ruby25__reduce_268$169, $Ruby25__reduce_269$170, $Ruby25__reduce_270$171, $Ruby25__reduce_271$172, $Ruby25__reduce_272$173, $Ruby25__reduce_273$174, $Ruby25__reduce_275$175, $Ruby25__reduce_276$176, $Ruby25__reduce_277$177, $Ruby25__reduce_288$178, $Ruby25__reduce_289$179, $Ruby25__reduce_290$180, $Ruby25__reduce_291$181, $Ruby25__reduce_292$182, $Ruby25__reduce_293$183, $Ruby25__reduce_294$184, $Ruby25__reduce_295$185, $Ruby25__reduce_296$186, $Ruby25__reduce_297$187, $Ruby25__reduce_298$188, $Ruby25__reduce_299$189, $Ruby25__reduce_300$190, $Ruby25__reduce_301$191, $Ruby25__reduce_302$192, $Ruby25__reduce_303$193, $Ruby25__reduce_304$194, $Ruby25__reduce_305$195, $Ruby25__reduce_306$196, $Ruby25__reduce_307$197, $Ruby25__reduce_309$198, $Ruby25__reduce_310$199, $Ruby25__reduce_311$200, $Ruby25__reduce_312$201, $Ruby25__reduce_313$202, $Ruby25__reduce_314$203, $Ruby25__reduce_315$204, $Ruby25__reduce_316$205, $Ruby25__reduce_317$206, $Ruby25__reduce_318$207, $Ruby25__reduce_319$208, $Ruby25__reduce_320$209, $Ruby25__reduce_321$210, $Ruby25__reduce_322$211, $Ruby25__reduce_323$212, $Ruby25__reduce_324$213, $Ruby25__reduce_325$214, $Ruby25__reduce_326$215, $Ruby25__reduce_327$216, $Ruby25__reduce_328$217, $Ruby25__reduce_329$218, $Ruby25__reduce_330$219, $Ruby25__reduce_331$220, $Ruby25__reduce_332$221, $Ruby25__reduce_334$222, $Ruby25__reduce_337$223, $Ruby25__reduce_341$224, $Ruby25__reduce_343$225, $Ruby25__reduce_346$226, $Ruby25__reduce_347$227, $Ruby25__reduce_348$228, $Ruby25__reduce_349$229, $Ruby25__reduce_351$230, $Ruby25__reduce_352$231, $Ruby25__reduce_353$232, $Ruby25__reduce_354$233, $Ruby25__reduce_355$234, $Ruby25__reduce_356$235, $Ruby25__reduce_357$236, $Ruby25__reduce_358$237, $Ruby25__reduce_359$238, $Ruby25__reduce_360$239, $Ruby25__reduce_361$240, $Ruby25__reduce_362$241, $Ruby25__reduce_363$242, $Ruby25__reduce_364$243, $Ruby25__reduce_365$244, $Ruby25__reduce_366$245, $Ruby25__reduce_367$246, $Ruby25__reduce_368$247, $Ruby25__reduce_369$248, $Ruby25__reduce_371$249, $Ruby25__reduce_372$250, $Ruby25__reduce_373$251, $Ruby25__reduce_374$252, $Ruby25__reduce_375$253, $Ruby25__reduce_376$254, $Ruby25__reduce_377$255, $Ruby25__reduce_378$256, $Ruby25__reduce_380$257, $Ruby25__reduce_381$258, $Ruby25__reduce_382$259, $Ruby25__reduce_383$260, $Ruby25__reduce_384$261, $Ruby25__reduce_385$262, $Ruby25__reduce_386$263, $Ruby25__reduce_387$264, $Ruby25__reduce_388$265, $Ruby25__reduce_389$266, $Ruby25__reduce_391$267, $Ruby25__reduce_392$268, $Ruby25__reduce_393$269, $Ruby25__reduce_394$270, $Ruby25__reduce_395$271, $Ruby25__reduce_396$272, $Ruby25__reduce_397$273, $Ruby25__reduce_398$274, $Ruby25__reduce_399$275, $Ruby25__reduce_400$276, $Ruby25__reduce_401$277, $Ruby25__reduce_402$278, $Ruby25__reduce_403$279, $Ruby25__reduce_404$280, $Ruby25__reduce_405$281, $Ruby25__reduce_406$282, $Ruby25__reduce_407$283, $Ruby25__reduce_408$284, $Ruby25__reduce_409$285, $Ruby25__reduce_410$286, $Ruby25__reduce_411$287, $Ruby25__reduce_412$288, $Ruby25__reduce_413$289, $Ruby25__reduce_414$290, $Ruby25__reduce_415$291, $Ruby25__reduce_416$292, $Ruby25__reduce_417$293, $Ruby25__reduce_418$294, $Ruby25__reduce_419$295, $Ruby25__reduce_420$296, $Ruby25__reduce_421$297, $Ruby25__reduce_422$298, $Ruby25__reduce_423$299, $Ruby25__reduce_424$300, $Ruby25__reduce_425$301, $Ruby25__reduce_427$302, $Ruby25__reduce_428$303, $Ruby25__reduce_429$304, $Ruby25__reduce_432$305, $Ruby25__reduce_434$306, $Ruby25__reduce_439$307, $Ruby25__reduce_440$308, $Ruby25__reduce_441$309, $Ruby25__reduce_442$310, $Ruby25__reduce_443$311, $Ruby25__reduce_444$312, $Ruby25__reduce_445$313, $Ruby25__reduce_446$314, $Ruby25__reduce_447$315, $Ruby25__reduce_448$316, $Ruby25__reduce_449$317, $Ruby25__reduce_450$318, $Ruby25__reduce_451$319, $Ruby25__reduce_452$320, $Ruby25__reduce_453$321, $Ruby25__reduce_454$322, $Ruby25__reduce_455$323, $Ruby25__reduce_456$324, $Ruby25__reduce_457$325, $Ruby25__reduce_458$326, $Ruby25__reduce_459$327, $Ruby25__reduce_460$328, $Ruby25__reduce_461$329, $Ruby25__reduce_462$330, $Ruby25__reduce_463$331, $Ruby25__reduce_464$332, $Ruby25__reduce_465$333, $Ruby25__reduce_466$334, $Ruby25__reduce_467$335, $Ruby25__reduce_468$336, $Ruby25__reduce_469$337, $Ruby25__reduce_470$338, $Ruby25__reduce_471$339, $Ruby25__reduce_472$340, $Ruby25__reduce_473$341, $Ruby25__reduce_475$342, $Ruby25__reduce_476$343, $Ruby25__reduce_477$344, $Ruby25__reduce_478$345, $Ruby25__reduce_479$346, $Ruby25__reduce_480$347, $Ruby25__reduce_481$348, $Ruby25__reduce_482$349, $Ruby25__reduce_483$350, $Ruby25__reduce_484$351, $Ruby25__reduce_485$352, $Ruby25__reduce_486$353, $Ruby25__reduce_487$354, $Ruby25__reduce_488$355, $Ruby25__reduce_489$356, $Ruby25__reduce_490$357, $Ruby25__reduce_491$358, $Ruby25__reduce_492$359, $Ruby25__reduce_493$360, $Ruby25__reduce_494$361, $Ruby25__reduce_495$362, $Ruby25__reduce_496$363, $Ruby25__reduce_497$364, $Ruby25__reduce_498$365, $Ruby25__reduce_499$366, $Ruby25__reduce_500$367, $Ruby25__reduce_501$368, $Ruby25__reduce_502$369, $Ruby25__reduce_503$370, $Ruby25__reduce_504$371, $Ruby25__reduce_505$372, $Ruby25__reduce_506$373, $Ruby25__reduce_507$374, $Ruby25__reduce_508$375, $Ruby25__reduce_509$376, $Ruby25__reduce_510$377, $Ruby25__reduce_511$378, $Ruby25__reduce_512$379, $Ruby25__reduce_513$380, $Ruby25__reduce_514$381, $Ruby25__reduce_515$382, $Ruby25__reduce_516$383, $Ruby25__reduce_517$384, $Ruby25__reduce_518$385, $Ruby25__reduce_519$386, $Ruby25__reduce_520$387, $Ruby25__reduce_521$388, $Ruby25__reduce_522$389, $Ruby25__reduce_523$390, $Ruby25__reduce_524$391, $Ruby25__reduce_525$392, $Ruby25__reduce_526$393, $Ruby25__reduce_527$394, $Ruby25__reduce_528$395, $Ruby25__reduce_529$396, $Ruby25__reduce_530$397, $Ruby25__reduce_531$398, $Ruby25__reduce_533$399, $Ruby25__reduce_534$400, $Ruby25__reduce_535$401, $Ruby25__reduce_536$402, $Ruby25__reduce_537$403, $Ruby25__reduce_538$404, $Ruby25__reduce_539$405, $Ruby25__reduce_540$406, $Ruby25__reduce_541$407, $Ruby25__reduce_542$408, $Ruby25__reduce_543$409, $Ruby25__reduce_544$410, $Ruby25__reduce_545$411, $Ruby25__reduce_546$412, $Ruby25__reduce_547$413, $Ruby25__reduce_550$414, $Ruby25__reduce_551$415, $Ruby25__reduce_552$416, $Ruby25__reduce_553$417, $Ruby25__reduce_554$418, $Ruby25__reduce_555$419, $Ruby25__reduce_556$420, $Ruby25__reduce_557$421, $Ruby25__reduce_560$422, $Ruby25__reduce_561$423, $Ruby25__reduce_564$424, $Ruby25__reduce_565$425, $Ruby25__reduce_566$426, $Ruby25__reduce_568$427, $Ruby25__reduce_569$428, $Ruby25__reduce_571$429, $Ruby25__reduce_572$430, $Ruby25__reduce_573$431, $Ruby25__reduce_574$432, $Ruby25__reduce_575$433, $Ruby25__reduce_576$434, $Ruby25__reduce_589$435, $Ruby25__reduce_590$436, $Ruby25__reduce_595$437, $Ruby25__reduce_596$438, $Ruby25__reduce_600$439, $Ruby25__reduce_604$440, $Ruby25__reduce_none$441, clist = nil, racc_action_table = nil, arr = nil, idx = nil, racc_action_check = nil, racc_action_pointer = nil, racc_action_default = nil, racc_goto_table = nil, racc_goto_check = nil, racc_goto_pointer = nil, racc_goto_default = nil, racc_reduce_table = nil, racc_reduce_n = nil, racc_shift_n = nil, racc_token_table = nil, racc_nt_base = nil, racc_use_result_var = nil;

      self.$$prototype.builder = self.$$prototype.lexer = self.$$prototype.context = self.$$prototype.last_token = self.$$prototype.static_env = nil;
      
      
      Opal.def(self, '$version', $Ruby25_version$1 = function $$version() {
        var self = this;

        return 25
      }, $Ruby25_version$1.$$arity = 0);
      
      Opal.def(self, '$default_encoding', $Ruby25_default_encoding$2 = function $$default_encoding() {
        var self = this;

        return $$$($$($nesting, 'Encoding'), 'UTF_8')
      }, $Ruby25_default_encoding$2.$$arity = 0);
      clist = ["-483,212,213,212,213,220,-102,-483,-483,-483,111,579,-483,-483,-483", "218,-483,274,222,620,260,261,267,579,-483,622,-483,-483,-483,274,592", "274,-497,124,593,-103,-483,-483,579,-483,-483,-483,-483,-483,579,579", "-102,-103,-110,-110,-88,-109,-101,811,-109,586,259,258,274,223,-74,209", "-110,210,819,-105,-483,-483,-483,-483,-483,-483,-483,-483,-483,-483", "-483,-483,-483,-483,219,269,-483,-483,-483,619,-483,-483,725,-102,-483", "621,-107,-483,-483,223,-483,223,-483,211,-483,214,-483,-483,273,-483", "-483,-483,-483,-483,-105,-483,-486,-483,-107,-93,273,-104,273,-486,-486", "-486,269,-106,-486,-486,-486,-483,-486,115,-483,-483,-483,-483,114,-483", "-486,-483,-486,-486,-486,115,-483,-483,-94,273,114,-96,-486,-486,-108", "-486,-486,-486,-486,-486,115,-104,-101,845,-100,114,115,115,-102,-103", "-110,114,114,-102,-103,-110,-109,818,-96,-106,799,-109,-486,-486,-486", "-486,-486,-486,-486,-486,-486,-486,-486,-486,-486,-486,115,263,-486", "-486,-486,114,-486,-486,-580,-98,-486,322,-98,-486,-486,323,-486,-108", "-486,798,-486,-96,-486,-486,223,-486,-486,-486,-486,-486,-296,-486,394", "-486,-95,-581,-105,-296,-296,-296,-107,-105,799,-296,-296,-107,-296", "-486,-580,-106,-486,-486,-486,-486,-106,-486,407,-486,212,213,-498,-96", "-486,-486,-96,456,-296,-296,-95,-296,-296,-296,-296,-296,-96,458,-108", "798,-98,-483,-97,-108,-581,-104,212,213,-483,559,-104,556,555,554,-97", "557,212,213,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296", "-296,-296,459,457,-296,-296,-296,-486,645,-103,-98,-497,-296,-98,-486", "-296,93,94,-99,607,-296,222,-296,-98,-296,-296,-95,-296,-296,-296,-296", "-296,-493,-296,-584,-296,-483,-580,-97,-493,404,-584,-584,-584,223,406", "405,-584,-584,-296,-584,115,-296,-296,487,-99,114,-296,-93,-584,-110", "838,212,213,-296,-108,-95,-577,-102,-95,-584,-584,-486,-584,-584,-584", "-584,-584,-97,-95,115,-97,496,609,608,114,559,607,556,555,554,-97,557", "757,95,96,498,-493,607,220,-584,-584,-584,-584,-584,-584,-584,-584,-584", "-584,-584,-584,-584,-584,525,500,-584,-584,-584,-483,646,93,94,607,-584", "115,-483,-584,115,785,114,-577,-584,114,-584,-483,-584,-584,-498,-584", "-584,-584,-584,-584,786,-584,-584,-584,607,124,-492,609,608,605,-577", "607,-110,-492,-73,-578,607,-584,609,608,-584,-584,-584,-97,956,-584", "223,-109,759,-584,-584,-584,-584,-106,-584,-584,-584,511,-584,512,-483", "-94,-105,609,608,605,-494,-584,-584,-584,-584,-103,519,-494,278,95,96", "-107,-584,-584,673,-584,-584,-584,-584,-584,525,-486,609,608,610,-492", "607,223,-486,609,608,612,607,-578,609,608,614,-486,538,575,574,537,-584", "-584,-584,-584,-584,-584,-584,-584,-584,-584,-584,-584,-584,-584,-578", "269,-584,-584,-584,522,787,-584,218,-494,-584,-100,-491,-584,-584,217", "-584,526,-584,-491,-584,-109,-584,-584,215,-584,-584,-584,-584,-584", "-486,-584,-584,-584,609,608,618,-488,-333,-489,609,608,623,243,-488", "-333,-489,-584,243,640,-584,-584,-584,-584,-333,-584,640,-584,-296,641", "864,641,-584,-106,115,-296,-296,-296,223,114,-296,-296,-296,219,-296", "240,541,-491,542,242,241,-490,218,243,-296,-296,-296,538,-490,267,540", "500,772,772,-296,-296,-96,-296,-296,-296,-296,-296,-488,-333,-489,218", "-105,-495,-98,842,811,586,454,-105,-495,240,-107,-104,-107,242,241,455", "396,-495,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296", "-296,-296,115,-95,-296,-296,-296,114,788,-296,-490,219,-296,-104,-104", "-296,-296,590,-296,591,-296,599,-296,538,-296,-296,540,-296,-296,-296", "-296,-296,-296,-296,219,-296,-495,842,811,-296,-296,-296,624,627,538", "-296,-296,540,-296,-296,243,-269,-296,-296,-296,-296,629,-296,81,-296", "-584,630,634,223,-296,-108,253,254,-296,-296,82,-296,-296,-296,-296", "-296,223,-496,638,986,83,218,240,639,-496,269,242,241,518,238,239,650", "243,-496,243,243,243,516,-296,-296,-296,-296,-296,-296,-296,-296,-296", "-296,-296,-296,-296,-296,-584,-287,-296,-296,-296,223,645,-584,-287", "223,-296,223,-580,-296,-88,676,-584,-287,-296,223,-296,531,-296,-296", "687,-296,-296,-296,-296,-296,-496,-296,-584,-296,219,-584,692,693,223", "-584,-584,-584,564,695,699,-584,-584,-296,-584,702,-296,-296,567,-296", "218,-296,703,-584,705,707,709,528,-296,-108,717,-584,-287,718,-584,-584", "455,-584,-584,-584,-584,-584,559,218,556,555,554,719,557,721,589,575", "574,726,727,586,568,751,752,587,729,753,109,110,-584,-584,-584,-584", "-584,-584,-584,-584,-584,-584,-584,-584,-584,-584,746,711,-584,-584", "-584,218,646,219,218,756,-584,760,595,-584,761,633,-270,773,-584,487", "-584,597,-584,-584,631,-584,-584,-584,-584,-584,219,-584,-584,-584,559", "487,556,555,554,564,557,-297,118,119,120,121,122,-584,-297,567,-584", "-584,-413,-584,223,-584,790,-297,791,-413,-413,-413,-584,-106,-413,-413", "-413,263,-413,796,219,562,801,219,498,243,500,-413,-413,-413,572,571", "575,574,687,223,269,568,-413,-413,269,-413,-413,-413,-413,-413,559,687", "556,555,554,-297,557,243,811,223,-297,240,-297,836,223,242,241,223,238", "239,811,-297,-413,-413,-413,-413,-413,-413,-413,-413,-413,-413,-413", "-413,-413,-413,844,711,-413,-413,-413,223,223,-413,853,269,-413,-271", "223,-413,-413,863,-413,867,-413,687,-413,883,-413,-413,-269,-413,-413", "-413,-413,-413,-303,-413,-413,-413,-297,887,891,-303,-303,-303,892,702", "-303,-303,-303,218,-303,-413,894,896,-413,-413,976,-413,898,-413,-303", "-303,900,900,223,597,-413,906,908,910,-303,-303,913,-303,-303,-303,-303", "-303,914,917,223,-296,921,-296,-272,923,702,926,-296,928,-296,930,932", "-581,223,-581,934,-296,958,-296,-303,-303,-303,-303,-303,-303,-303,-303", "-303,-303,-303,-303,-303,-303,219,963,-303,-303,-303,746,974,-303,977", "278,-303,982,983,-303,-303,984,-303,987,-303,900,-303,900,-303,-303", "900,-303,-303,-303,-303,-303,-288,-303,-296,-303,-296,992,958,-288,-288", "-288,702,997,-288,-288,-288,218,-288,-303,999,1001,-303,-303,981,-303", "1003,-303,-288,-288,-288,1003,692,979,-303,958,1018,-581,-288,-288,-580", "-288,-288,-288,-288,-288,949,218,556,555,554,223,557,559,976,556,555", "554,949,557,556,555,554,597,557,900,958,1025,-288,-288,-288,-288,-288", "-288,-288,-288,-288,-288,-288,-288,-288,-288,219,564,-288,-288,-288", "1003,1003,-288,711,1003,-288,567,1003,-288,-288,,-288,714,-288,,-288", ",-288,-288,,-288,-288,-288,-288,-288,219,-288,,-288,559,,556,555,554", ",557,,,,575,574,,-288,,568,-288,-288,-288,-288,,-288,-252,-288,,,,,-288", "-252,-252,-252,,,-252,-252,-252,711,-252,559,,556,555,554,,557,714,-252", "-252,-252,559,,556,555,554,,557,,-252,-252,,-252,-252,-252,-252,-252", "559,,556,555,554,559,557,556,555,554,711,557,118,119,120,121,122,,,905", ",711,-252,-252,-252,-252,-252,-252,-252,-252,-252,-252,-252,-252,-252", "-252,,711,-252,-252,-252,,711,-252,,269,-252,,,-252,-252,,-252,,-252", ",-252,,-252,-252,,-252,-252,-252,-252,-252,,-252,-252,-252,559,,556", "555,554,564,557,118,119,120,121,122,,-252,,567,-252,-252,-585,-252,", "-252,,,,-585,-585,-585,-252,,-585,-585,-585,,-585,243,,562,118,119,120", "121,122,-585,-585,-585,-585,,575,574,,253,254,568,-585,-585,,-585,-585", "-585,-585,-585,,,,,,240,,246,,242,241,,238,239,,,244,,245,,,,-585,-585", "-585,-585,-585,-585,-585,-585,-585,-585,-585,-585,-585,-585,,,-585,-585", "-585,243,,-585,,,-585,,,-585,-585,,-585,,-585,,-585,,-585,-585,,-585", "-585,-585,-585,-585,,-585,-585,-585,,,,240,,,,242,241,,238,239,,-585", ",,-585,-585,-585,-585,,-585,-586,-585,,,,,-585,-586,-586,-586,,,-586", "-586,-586,243,-586,,,,,,,,,-586,-586,-586,-586,,,253,254,,,,-586,-586", ",-586,-586,-586,-586,-586,,,,240,,246,,242,241,,238,239,,,244,,245,", ",,,,-586,-586,-586,-586,-586,-586,-586,-586,-586,-586,-586,-586,-586", "-586,,,-586,-586,-586,,,-586,,,-586,,,-586,-586,,-586,,-586,,-586,,-586", "-586,,-586,-586,-586,-586,-586,,-586,-586,-586,,,,,,,,,,,,,,-586,,,-586", "-586,-586,-586,,-586,-252,-586,,,,,-586,-252,-252,-252,,,-252,-252,-252", "243,-252,,,,,,,,,-252,-252,,,,,253,254,,,,-252,-252,,-252,-252,-252", "-252,-252,,,,240,,246,,242,241,,238,239,,,,243,247,248,249,250,260,261", "255,256,251,252,,236,237,,,253,254,-252,,,,,,,-252,,,,,269,-252,240", ",246,,242,241,,238,239,259,258,244,,245,,,,,,,,-252,-252,,,,,,,,,,,257", ",,-252,,,-252,,,,,-252,5,70,71,72,9,58,-252,,,64,65,,,,68,,66,67,69", "30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,635,8,46,7,10,107", "106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,243,247,248,249", "250,260,261,255,256,251,252,,236,237,,,253,254,,40,,,33,,,59,60,,,61", ",35,240,,246,45,242,241,,238,239,259,258,244,20,245,,,,91,81,84,85,", "86,88,87,89,,,,,82,90,,257,,-244,,,63,,83,95,96,296,70,71,72,9,58,,", ",64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19", ",,,,635,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94", "42,43,41,243,247,248,249,250,260,261,255,256,251,252,,236,237,,,253", "254,,40,,,300,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258", "244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,257,,,,,63,,83,95", "96,5,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27", "103,102,104,105,,,19,,,,,,8,46,7,10,107,106,108,97,57,99,98,100,,101", "109,110,,93,94,42,43,41,243,247,248,249,250,260,261,255,256,251,252", ",236,237,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238", "239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,257,,", ",,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74", ",,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57", "99,98,100,,101,109,110,,93,94,42,43,41,243,247,248,249,250,260,261,255", "256,251,252,,236,237,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45", "242,241,,238,239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,", "82,90,223,257,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66", "67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10", "107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,243,247,248", "249,250,260,261,255,256,251,252,,236,237,,,253,254,,40,,,33,,,59,60", ",,61,,35,240,,246,45,242,241,,238,239,259,258,244,20,245,,,,91,81,84", "85,,86,88,87,89,,,,,82,90,,257,,,,,63,,83,95,96,296,70,71,72,9,58,,", ",64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19", ",,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42", "43,41,243,247,248,249,250,260,261,255,256,251,252,,236,237,,,253,254", ",40,,,300,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258,244", "20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,257,,,,,63,,83,95,96,296", "70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103", "102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109", "110,,93,94,42,43,41,243,247,248,249,250,260,261,255,256,251,252,,236", "237,,,253,254,,40,,,300,,,59,60,,,61,,35,240,,246,45,242,241,,238,239", "259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,257,,,,,63", ",83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,", ",,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99", "98,100,,101,109,110,,93,94,42,43,41,243,247,248,249,250,260,261,255", "256,251,252,,-605,-605,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246", "45,242,241,,238,239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,", ",,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67", "69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107", "106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,243,247,248,249", "250,260,261,255,256,251,252,,-605,-605,,,253,254,,40,,,33,,,59,60,,", "61,,35,240,,246,45,242,241,,238,239,259,258,244,20,245,,,,91,81,84,85", ",86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65", ",,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,", "8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41", "243,-605,-605,-605,-605,260,261,,,-605,-605,,,,,,253,254,,40,,,33,,", "59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258,244,20,245,,,,91", "81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58", ",,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,", ",19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94", "42,43,41,243,-605,-605,-605,-605,260,261,,,-605,-605,,,,,,253,254,,40", ",,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258,244,20,245", ",,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72", "9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104", "105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,", "93,94,42,43,41,243,-605,-605,-605,-605,260,261,,,-605,-605,,,,,,253", "254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258,244", "20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296", "70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103", "102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109", "110,,93,94,42,43,41,243,-605,-605,-605,-605,260,261,,,-605,-605,,,,", ",253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259", "258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95", "96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28", "27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100", ",101,109,110,,93,94,42,43,41,243,-605,-605,-605,-605,260,261,,,-605", "-605,,,,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238", "239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63", ",83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,", ",,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99", "98,100,,101,109,110,,93,94,42,43,41,243,-605,-605,-605,-605,260,261", ",,-605,-605,,,,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241", ",238,239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,", ",,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73", "74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97", "57,99,98,100,,101,109,110,,93,94,42,43,41,243,247,248,249,250,260,261", ",,251,252,,,,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241", ",238,239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,", ",,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73", "74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97", "57,99,98,100,,101,109,110,,93,94,42,43,41,243,247,248,249,250,260,261", "255,,251,252,,,,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242", "241,,238,239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90", ",,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31", "73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108", "97,57,99,98,100,,101,109,110,,93,94,42,43,41,243,,,,,,,,,,,,,,,,253", "254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,,,,20,,,", ",91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72", "9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104", "105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,", "93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,", ",,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296", "70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103", "102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109", "110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45", ",,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96", "296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27", "103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101", "109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35", ",,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83", "95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75", "28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98", "100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60", ",,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,", ",,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73", "74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97", "57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33", ",,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82", "90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30", "31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106", "108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,", "40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87", "89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66", "67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10", "107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,", ",,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86", "88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,", "68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46", "298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,", ",,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84", "85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64", "65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,", ",,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43", "41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,", "91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9", "58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105", ",,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94", "42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20", ",,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,70,71,72,9", "58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105", ",,19,,,,,,8,46,7,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94", "42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20", ",,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,", ",,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,", ",,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91", "81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,", "68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46", ",,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,", ",,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,", ",91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65", ",,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,", ",,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,", ",,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233", ",,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,", ",,,,,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41", ",,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233", ",,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235", ",,,,,,313,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,,,319,,", ",,,,,,,,,,,,,,,,,309,,,305,,,59,60,,,61,,304,,,,,,,,,,,,,,,,,,91,81", "84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68", ",66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,", "313,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,,,319,,,,,,,,", ",,,,,,,,,,,309,,,234,,,59,60,,,61,,,559,,556,555,554,564,557,,,,,,,", ",567,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,321,,562,63,,83,95,96,70", "71,72,,58,575,574,,64,65,568,,,68,,66,67,69,315,316,73,74,,,,,,75,312", "318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101", "109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,", ",,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72", "63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103", "102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110", ",93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,", ",,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83", "95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104", "105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94", "42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233", ",,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,70,71,72,9", "58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105", ",,19,,,,,,8,46,,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42", "43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,", ",,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235", ",,,,,,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43", "41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,,,45,,,291,,,,,,233", ",,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235", ",,,,,,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43", "41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,291,,,,,,233", ",,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,", ",,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,", ",,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81", "84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68", ",66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,,46,,", "107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,", ",,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86", "88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69", "30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,,46,,,107,106,108", "97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228", ",,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,", ",,,82,90,115,,,,,114,63,,83,95,96,70,71,72,,58,,,,64,65,,,,68,,66,67", "69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,313,,,107", "106,108,97,57,99,98,100,,101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,", ",356,,,33,,,59,60,,,61,,35,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89", ",,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73", "74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,313,,,107,106,108,361", "57,99,98,362,,101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,368,,,363,,,234", ",,59,60,,,61,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,", ",,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75", "312,318,103,102,104,105,,,235,,,,,,,313,,,107,106,108,361,57,99,98,362", ",101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,363,,,234,,,59,60,,,61", ",,559,,556,555,554,564,557,,,,,,,,,567,,91,81,84,85,,86,88,87,89,,,", ",82,90,,,,,,562,63,,83,95,96,70,71,72,9,58,575,574,,64,65,568,,,68,", "66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,7", "10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,", ",,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85", ",86,88,87,89,,,,,82,90,,,,,,396,63,,83,95,96,70,71,72,,58,,,,64,65,", ",,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,", "46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,", ",,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84", "85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66", "67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,,46,,,107", "106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,", ",,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88", "87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30", "31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,,46,,,107,106,108,97", "57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234", ",,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82", "90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,", ",75,28,27,103,102,104,105,,,19,,,,,,,46,,,107,106,108,97,57,99,98,100", ",101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,", "61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63", ",83,95,96,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75", "28,27,103,102,104,105,,,19,,,,,,8,46,,10,107,106,108,97,57,99,98,100", ",101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61", ",35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71", "72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103", "102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110", ",93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,412,,,,45", ",,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58", "83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104", "105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94", "42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,412,,,,45,,,,,,", ",,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95", "96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,", ",19,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43", "41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,", "91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65", ",,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,", ",46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,", ",,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84", "85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66", "67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107", "106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,", ",,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88", "87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30", "31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108", "97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228", ",,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86", "88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69", "30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108", "97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228", ",,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89", ",,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73", "74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,,46,,,107,106,108,97,57,99", "98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59", "60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,", ",70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28", "27,103,102,104,105,,,19,,,,,,,46,,,107,106,108,97,57,99,98,100,,101", "109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,", ",,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,223,,,70,71", "72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318", "103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109", "110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45", ",,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58", "83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102", "104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93", "94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,", ",,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95", "96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105", ",,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42", "43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233", ",,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235", ",,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41", ",,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91", "81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,", "68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,", ",,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,", ",,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81", "84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68", ",66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,", "46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,", ",,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84", "85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66", "67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,", ",107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,", ",,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85", ",86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67", "69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107", "106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,", ",,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88", "87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315", "316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108", "97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228", ",,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89", ",,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73", "74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57", "99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234", ",,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82", "90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,", ",,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99", "98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59", "60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,", ",,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75", "312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100", ",101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,", "61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70", "71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312", "318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101", "109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,", ",,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72", "63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103", "102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110", ",93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,", ",,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83", "95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104", "105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94", "42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233", ",,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235", ",,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41", ",,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91", "81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,", "68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,", ",,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,", ",,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81", "84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68", ",66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,", "46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,", ",,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84", "85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66", "67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,", ",107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,", ",,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85", ",86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67", "69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107", "106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,", ",,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88", "87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315", "316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108", "97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228", ",,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89", ",,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73", "74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57", "99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234", ",,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82", "90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,", ",,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99", "98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59", "60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,", ",,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75", "312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100", ",101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,", "61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70", "71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27", "103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290,101", "109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287", ",285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70", "71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27", "103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290,101", "109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287", ",285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70", "71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27", "103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290,101", "109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287", ",285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90,223", ",,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75", "312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100", ",101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,", "61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70", "71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312", "318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101", "109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,", ",,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72", "63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103", "102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110", ",93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,", ",,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83", "95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104", "105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94", "42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233", ",,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,70,71,72,9", "58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105", ",,19,,,,,,8,46,,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42", "43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,", ",,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235", ",,,,,,313,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,,,319,,", ",,,,,,,,,,,,,,,,,309,,,234,,,59,60,,,61,,,559,,556,555,554,564,557,", ",,,,,,,567,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,514,,562,63,,83,95", "96,70,71,72,,58,575,574,,64,65,568,,,68,,66,67,69,315,316,73,74,,,,", ",75,312,318,103,102,104,105,,,235,,,,,,,313,,,107,106,108,97,57,99,98", "100,,101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,309,,,305,,,59,60,", ",61,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72", "63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103", "102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110", ",93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,", ",,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83", "95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104", "105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94", "42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,531,,59,60,,,61,,,,,,45,,,,,,", ",,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95", "96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,", ",19,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43", "41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,", "91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65", ",,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,", ",46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,", ",,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84", "85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66", "67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,,46,,,107", "106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,", ",,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88", "87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315", "316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108", "97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228", ",,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89", ",,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73", "74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57", "99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234", ",,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87", "89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316", "73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97", "57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234", ",,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82", "90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,", ",,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99", "98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59", "60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,", ",,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75", "312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100", ",101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,", "61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70", "71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312", "318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290", "101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61", ",670,,285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90", ",,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,", "75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98", "100,290,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59", "60,,,61,,,,285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,", "82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74", ",,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99", "98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59", "60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,", ",,,,,63,,83,95,96,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74", ",,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57", "99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,", "59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82", "90,,,,,,396,63,,83,95,96,70,71,72,,58,,,,64,65,,,,68,,66,67,69,315,316", "73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,313,,,107,106,108", "97,57,99,98,100,,101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,309,,,305", ",,59,60,,,61,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,", ",,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75", "28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290", "101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61", ",287,,285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90", ",,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,", "75,312,318,103,102,104,105,,,235,,,,,,,313,,,107,106,108,97,57,99,98", "100,,101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,309,,,305,,,59,60,", ",61,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72", "63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103", "102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110", ",93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,", ",,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83", "95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104", "105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94", "42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233", ",,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,", ",,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,", ",,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81", "84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68", ",66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,", "46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,", ",,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,670,,,,45,,,291,,,,,,233,,,", ",91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65", ",,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235", ",,,,,,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43", "41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,291,,,,,,233", ",,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235", ",,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41", ",,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91", "81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,", "68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,", ",,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,", ",,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,,,45,,,,,,,,,233,,,,,91", "81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,", "68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46", ",,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,", ",,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,", ",91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65", ",,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,", ",,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,", ",,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233", ",,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235", ",,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41", ",,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,764,,,,45,,,,,,,,,233,,,", ",91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65", ",,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,", ",,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,", ",,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81", "84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68", ",66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,", ",107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,,", ",,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,,", "91,288,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,70,71,72,9,58", ",,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,", ",19,,,,,,8,46,,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42", "43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,", ",,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235", ",,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41", ",,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91", "81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,", "68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,", ",,,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41", ",,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,670,,285,,45,,,291,,,,,,233", ",,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235", ",,,,,,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43", "41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,285,,45,,,291,,,,,,233", ",,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,", ",,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,", ",,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91", "81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,", "68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46", ",,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,", ",,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85", ",86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67", "69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106", "108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,", "228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87", "89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31", "73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97", "57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234", ",,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82", "90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,", ",,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99", "98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59", "60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,", ",,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75", "312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100", ",101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,", "61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70", "71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312", "318,103,102,104,105,,,235,,,,,,,313,,,107,106,108,97,57,99,98,100,,101", "109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,309,,,305,,,59,60,,,61,,,,,", ",,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83", "95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104", "105,,,235,,,,,,,313,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94", ",,319,,,,,,,,,,,,,,,,,,,,309,,,305,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,91", "81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,", "68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,", ",,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,", ",,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,412,,,,45,,,,,,,,,233,,,,,91", "81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,", "68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,", ",,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,", ",,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81", "84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68", ",66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,,46,,", "107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,", ",,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86", "88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69", "315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106", "108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,", "228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87", "89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31", "73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97", "57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234", ",,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82", "90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,", ",,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99", "98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59", "60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,", ",,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75", "312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100", ",101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,", "61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70", "71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312", "318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101", "109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,", ",,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72", "63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103", "102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110", ",93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,", ",,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83", "95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104", "105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94", "42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233", ",,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,", ",,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,", ",,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81", "84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68", ",66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,", "46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,", ",,,,,,,,,,,,,228,,,234,,,59,60,,,61,,670,,,,45,,,,,,,,,233,,,,,91,81", "84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68", ",66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,", "46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,", ",,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,285,,45,,,291,,,,,,233,,,", ",91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65", ",,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235", ",,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41", ",,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91", "81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,", "68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,", ",,,313,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,,,319,,,,,", ",,,,,,,,,,,,,,936,,,234,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,91,81,84,85", ",86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67", "69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,313,,,107", "106,108,97,57,99,98,100,,101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,", ",942,,,234,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89", ",,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73", "74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,313,,,107,106,108,97", "57,99,98,100,,101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,936,,,234", ",,59,60,,,61,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,", ",,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75", "28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290", "101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61", ",287,,285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90", ",,,,,,63,,83,95,96,176,187,177,200,173,193,183,182,203,204,198,181,180", "175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199", "184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,126,,128,,", ",,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150", ",,,,,,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158,137", ",,165,91,,,,,,,,,,,,,,90,176,187,177,200,173,193,183,182,203,204,198", "181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196", "189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128", ",,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162,163,149", "150,,,,,,,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158", "137,,,165,91,,,,,,,,,,,,,,90,176,187,177,200,173,193,183,182,203,204", "198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197", "196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129", ",,128,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162,163", "149,150,,,,,,,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144,136", "158,137,,,165,91,,,,,,,,,,,,,,90,176,187,177,200,173,193,183,182,203", "204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202", "197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127", "129,,,128,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162", "163,149,150,,,,,,,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144", "136,158,137,,,165,91,,,,,,,,,,,,,,90,176,187,177,200,173,193,183,182", "203,204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195", "202,197,379,378,380,377,172,191,190,,,,,,171,178,169,170,374,375,376", "372,129,99,98,373,,101,,,,,,160,161,,157,139,140,141,148,145,147,,,142", "143,,,,162,163,149,150,,,,,,384,,,,,,,,154,153,,138,159,156,155,164", "151,152,146,144,136,158,137,,,165,176,187,177,200,173,193,183,182,203", "204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202", "197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127", "129,,,128,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162", "163,149,150,,,,,,,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144", "136,158,137,434,438,165,,435,,,,,,,,160,161,,157,139,140,141,148,145", "147,,,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156", "155,164,151,152,146,144,136,158,137,441,445,165,,440,,,,,,,,160,161", ",157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,269,", ",,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158,137,485,438", "165,,486,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162", "163,149,150,,,,,,,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144", "136,158,137,651,438,165,,652,,,,,,,,160,161,,157,139,140,141,148,145", "147,,,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156", "155,164,151,152,146,144,136,158,137,653,445,165,,654,,,,,,,,160,161", ",157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,269,", ",,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158,137,680,438", "165,,681,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162", "163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156,155,164,151,152,146", "144,136,158,137,683,445,165,,684,,,,,,,,160,161,,157,139,140,141,148", "145,147,,,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159", "156,155,164,151,152,146,144,136,158,137,651,438,165,,652,,,,,,,,160", "161,,157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,269", ",,,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158,137,653", "445,165,,654,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,", ",,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156,155,164,151,152", "146,144,136,158,137,732,438,165,,733,,,,,,,,160,161,,157,139,140,141", "148,145,147,,,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138", "159,156,155,164,151,152,146,144,136,158,137,734,445,165,,735,,,,,,,", "160,161,,157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150,,", ",,,269,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158,137", "737,445,165,,738,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143", ",,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156,155,164,151", "152,146,144,136,158,137,485,438,165,,486,,,,,,,,160,161,,157,139,140", "141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153", ",138,159,156,155,164,151,152,146,144,136,158,137,766,438,165,,767,,", ",,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150", ",,,,,269,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158", "137,769,445,165,,768,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142", "143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156,155,164", "151,152,146,144,136,158,137,1007,445,165,,1006,,,,,,,,160,161,,157,139", "140,141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154", "153,,138,159,156,155,164,151,152,146,144,136,158,137,1010,438,165,,1011", ",,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162,163,149", "150,,,,,,269,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144,136", "158,137,1012,445,165,,1013,,,,,,,,160,161,,157,139,140,141,148,145,147", ",,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156,155", "164,151,152,146,144,136,158,137,,559,165,556,555,554,564,557,,559,,556", "555,554,564,557,567,,,,,,,,567,,559,,556,555,554,564,557,,,,,,562,545", ",567,,,,,562,572,571,575,574,,,,568,572,571,575,574,,,,568,562,,559", ",556,555,554,564,557,572,571,575,574,,,,568,567,,559,,556,555,554,564", "557,,559,,556,555,554,564,557,567,,,,,562,,,567,,,,,,572,571,575,574", ",,,568,562,,,,,,,,562,572,571,575,574,,,,568,572,571,575,574,,,559,568", "556,555,554,564,557,,559,,556,555,554,564,557,567,,,,,,,,567,,559,,556", "555,554,564,557,,,,,,562,,,567,,,,,562,572,571,575,574,,,,568,572,571", "575,574,,,,568,562,,559,,556,555,554,564,557,572,571,575,574,,,,568", "567,,559,,556,555,554,564,557,,559,,556,555,554,564,557,567,,,,,562", ",,567,,,,,,,,575,574,,,,568,562,,,,,,,,562,,,575,574,,,,568,572,571", "575,574,,,559,568,556,555,554,564,557,559,,556,555,554,564,557,559,567", "556,555,554,564,557,559,567,556,555,554,564,557,,567,,,,,,,567,562,", ",,,,,562,,,,575,574,,562,,568,,575,574,,562,,568,,575,574,,,,568,,575", "574,,,,568"];
      racc_action_table = (arr = $$$('::', 'Array').$new(24698, nil));
      idx = 0;
      $send(clist, 'each', [], ($Ruby25$3 = function(str){var self = $Ruby25$3.$$s || this, $$4;

      
        
        if (str == null) {
          str = nil;
        };
        return $send(str.$split(",", -1), 'each', [], ($$4 = function(i){var self = $$4.$$s || this, $writer = nil;

        
          
          if (i == null) {
            i = nil;
          };
          if ($truthy(i['$empty?']())) {
          } else {
            
            $writer = [idx, i.$to_i()];
            $send(arr, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          return (idx = $rb_plus(idx, 1));}, $$4.$$s = self, $$4.$$arity = 1, $$4));}, $Ruby25$3.$$s = self, $Ruby25$3.$$arity = 1, $Ruby25$3));
      clist = ["97,450,450,604,604,17,353,97,97,97,1,345,97,97,97,24,97,26,19,391,44", "44,24,346,97,392,97,97,97,62,363,660,226,7,363,354,97,97,730,97,97,97", "97,97,886,909,939,940,943,357,675,590,17,912,982,912,44,44,314,19,675", "10,17,12,697,732,97,97,97,97,97,97,97,97,97,97,97,97,97,97,24,26,97", "97,97,391,97,97,581,226,97,392,733,97,97,450,97,604,97,13,97,15,97,97", "26,97,97,97,97,97,1010,97,100,97,1011,353,62,847,660,100,100,100,314", "1012,100,100,100,97,100,345,97,97,97,97,345,97,100,97,100,100,100,346", "97,97,354,314,346,680,100,100,1013,100,100,100,100,100,730,1023,357", "730,590,730,886,909,939,940,943,886,909,939,940,943,982,697,732,734", "664,982,100,100,100,100,100,100,100,100,100,100,100,100,100,100,581", "22,100,100,100,581,100,100,1012,733,100,37,681,100,100,40,100,735,100", "664,100,680,100,100,46,100,100,100,100,100,440,100,111,100,847,1013", "1010,440,440,440,1011,1010,792,440,440,1011,440,100,734,1012,100,100", "100,100,1012,100,207,100,690,690,227,680,100,100,680,228,440,440,806", "440,440,440,440,440,680,230,1013,792,681,372,683,1013,735,1023,14,14", "372,714,1023,714,714,714,734,714,600,600,440,440,440,440,440,440,440", "440,440,440,440,440,440,440,231,229,440,440,440,373,440,227,681,38,440", "681,373,440,41,41,735,615,440,235,440,681,440,440,806,440,440,440,440", "440,374,440,441,440,372,683,683,374,126,441,441,441,690,126,126,441", "441,440,441,3,440,440,268,440,3,440,38,441,229,714,344,344,440,440,806", "361,38,806,441,441,373,441,441,441,441,441,683,806,600,683,282,615,615", "600,905,386,905,905,905,683,905,615,41,41,283,374,617,419,441,441,441", "441,441,441,441,441,441,441,441,441,441,441,456,286,441,441,441,361", "441,319,319,502,441,294,361,441,350,651,294,361,441,350,441,361,441", "441,39,441,441,441,441,441,652,441,441,441,387,298,375,386,386,386,361", "388,419,375,299,362,389,441,617,617,441,441,653,441,905,441,301,456", "617,653,653,653,441,441,653,653,653,302,653,303,361,39,651,502,502,502", "376,653,653,653,653,39,309,376,312,319,319,652,653,653,502,653,653,653", "653,653,323,362,387,387,387,375,390,313,362,388,388,388,393,362,389", "389,389,362,335,702,702,335,653,653,653,653,653,653,653,653,653,653", "653,653,653,653,362,318,653,653,653,320,653,653,16,376,653,323,377,653", "653,16,653,324,653,377,653,323,653,653,16,653,653,653,653,653,362,653", "653,653,390,390,390,378,47,379,393,393,393,462,378,47,379,653,327,434", "653,653,653,653,47,653,766,653,654,767,789,435,653,653,851,654,654,654", "333,851,654,654,654,16,654,462,337,377,338,462,462,380,382,463,654,654", "654,336,380,382,336,340,636,860,654,654,434,654,654,654,654,654,378", "47,379,225,434,306,435,720,720,351,225,766,306,463,767,789,435,463,463", "225,352,306,654,654,654,654,654,654,654,654,654,654,654,654,654,654", "856,636,654,654,654,856,654,654,380,382,654,636,860,654,654,356,654", "358,654,367,654,339,654,654,339,654,654,654,654,654,768,654,225,654", "306,994,994,768,768,768,402,408,696,768,768,696,768,654,470,411,654", "654,654,654,413,654,79,654,737,416,420,430,654,654,470,470,768,768,79", "768,768,768,768,768,947,307,432,947,79,308,470,433,307,442,470,470,308", "470,470,452,464,307,465,466,467,308,768,768,768,768,768,768,768,768", "768,768,768,768,768,768,737,310,768,768,768,489,768,737,310,493,768", "509,737,768,510,513,737,310,768,515,768,520,768,768,523,768,768,768", "768,768,307,768,769,768,308,737,532,533,534,769,769,769,699,535,547", "769,769,768,769,548,768,768,699,768,325,768,550,769,551,552,561,325", "768,768,569,737,310,573,769,769,325,769,769,769,769,769,838,355,838", "838,838,576,838,578,355,699,699,582,583,584,699,608,608,355,585,608", "608,608,769,769,769,769,769,769,769,769,769,769,769,769,769,769,602", "838,769,769,769,365,769,325,418,612,769,620,365,769,622,418,628,637", "769,642,769,365,769,769,418,769,769,769,769,769,355,769,769,769,798", "647,798,798,798,798,798,519,6,6,6,6,6,769,519,798,769,769,27,769,655", "769,656,519,657,27,27,27,769,769,27,27,27,659,27,663,365,798,665,418", "667,477,669,27,27,27,798,798,798,798,677,679,682,798,27,27,685,27,27", "27,27,27,906,686,906,906,906,593,906,689,691,698,519,477,593,713,715", "477,477,798,477,477,722,593,27,27,27,27,27,27,27,27,27,27,27,27,27,27", "728,906,27,27,27,731,740,27,744,27,27,763,765,27,27,774,27,795,27,805", "27,809,27,27,812,27,27,27,27,27,28,27,27,27,593,813,820,28,28,28,821", "822,28,28,28,935,28,27,826,827,27,27,935,27,829,27,28,28,830,832,835", "935,27,837,840,843,28,28,848,28,28,28,28,28,850,854,855,684,858,738", "859,868,869,871,684,872,738,873,875,684,876,738,877,684,907,738,28,28", "28,28,28,28,28,28,28,28,28,28,28,28,935,916,28,28,28,920,933,28,936", "28,28,942,945,28,28,946,28,951,28,952,28,953,28,28,954,28,28,28,28,28", "57,28,684,28,738,955,957,57,57,57,965,968,57,57,57,941,57,28,969,970", "28,28,941,28,971,28,57,57,57,973,978,941,28,993,995,1006,57,57,1007", "57,57,57,57,57,891,975,891,891,891,1009,891,562,975,562,562,562,986", "562,986,986,986,975,986,1015,1016,1019,57,57,57,57,57,57,57,57,57,57", "57,57,57,57,941,923,57,57,57,1020,1021,57,562,1022,57,923,1030,57,57", ",57,562,57,,57,,57,57,,57,57,57,57,57,975,57,,57,711,,711,711,711,,711", ",,,923,923,,57,,923,57,57,57,57,,57,436,57,,,,,57,436,436,436,,,436", "436,436,711,436,836,,836,836,836,,836,711,436,436,436,956,,956,956,956", ",956,,436,436,,436,436,436,436,436,958,,958,958,958,992,958,992,992", "992,836,992,297,297,297,297,297,,,836,,956,436,436,436,436,436,436,436", "436,436,436,436,436,436,436,,958,436,436,436,,992,436,,436,436,,,436", "436,,436,,436,,436,,436,436,,436,436,436,436,436,,436,436,436,707,,707", "707,707,707,707,332,332,332,332,332,,436,,707,436,436,445,436,,436,", ",,445,445,445,436,,445,445,445,,445,482,,707,507,507,507,507,507,445", "445,445,445,,707,707,,482,482,707,445,445,,445,445,445,445,445,,,,,", "482,,482,,482,482,,482,482,,,482,,482,,,,445,445,445,445,445,445,445", "445,445,445,445,445,445,445,,,445,445,445,478,,445,,,445,,,445,445,", "445,,445,,445,,445,445,,445,445,445,445,445,,445,445,445,,,,478,,,,478", "478,,478,478,,445,,,445,445,445,445,,445,446,445,,,,,445,446,446,446", ",,446,446,446,529,446,,,,,,,,,446,446,446,446,,,529,529,,,,446,446,", "446,446,446,446,446,,,,529,,529,,529,529,,529,529,,,529,,529,,,,,,446", "446,446,446,446,446,446,446,446,446,446,446,446,446,,,446,446,446,,", "446,,,446,,,446,446,,446,,446,,446,,446,446,,446,446,446,446,446,,446", "446,446,,,,,,,,,,,,,,446,,,446,446,446,446,,446,484,446,,,,,446,484", "484,484,,,484,484,484,468,484,,,,,,,,,484,484,,,,,468,468,,,,484,484", ",484,484,484,484,484,,,,468,,468,,468,468,,468,468,,,,21,21,21,21,21", "21,21,21,21,21,21,,21,21,,,21,21,484,,,,,,,484,,,,,484,484,21,,21,,21", "21,,21,21,21,21,21,,21,,,,,,,,484,484,,,,,,,,,,,21,,,484,,,484,,,,,484", "0,0,0,0,0,0,484,,,0,0,,,,0,,0,0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0,,,0,,,", ",423,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,0,0,0,423,423,423,423,423,423", "423,423,423,423,423,,423,423,,,423,423,,0,,,0,,,0,0,,,0,,0,423,,423", "0,423,423,,423,423,423,423,423,0,423,,,,0,0,0,0,,0,0,0,0,,,,,0,0,,423", ",423,,,0,,0,0,0,33,33,33,33,33,33,,,,33,33,,,,33,,33,33,33,33,33,33", "33,,,,,,33,33,33,33,33,33,33,,,33,,,,,429,33,33,33,33,33,33,33,33,33", "33,33,33,,33,33,33,,33,33,33,33,33,429,429,429,429,429,429,429,429,429", "429,429,,429,429,,,429,429,,33,,,33,,,33,33,,,33,,33,429,,429,33,429", "429,,429,429,429,429,429,33,429,,,,33,33,33,33,,33,33,33,33,,,,,33,33", ",429,,,,,33,,33,33,33,124,124,124,124,124,124,,,,124,124,,,,124,,124", "124,124,124,124,124,124,,,,,,124,124,124,124,124,124,124,,,124,,,,,", "124,124,124,124,124,124,124,124,124,124,124,124,,124,124,124,,124,124", "124,124,124,280,280,280,280,280,280,280,280,280,280,280,,280,280,,,280", "280,,124,,,124,,,124,124,,,124,,124,280,,280,124,280,280,,280,280,280", "280,280,124,280,,,,124,124,124,124,,124,124,124,124,,,,,124,124,,280", ",,,,124,,124,124,124,209,209,209,209,209,209,,,,209,209,,,,209,,209", "209,209,209,209,209,209,,,,,,209,209,209,209,209,209,209,,,209,,,,,", "209,209,209,209,209,209,209,209,209,209,209,209,,209,209,209,,209,209", "209,209,209,481,481,481,481,481,481,481,481,481,481,481,,481,481,,,481", "481,,209,,,209,,,209,209,,,209,,209,481,,481,209,481,481,,481,481,481", "481,481,209,481,,,,209,209,209,209,,209,209,209,209,,,,,209,209,481", "481,,,,,209,,209,209,209,234,234,234,234,234,234,,,,234,234,,,,234,", "234,234,234,234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234,", ",,,,234,234,234,234,234,234,234,234,234,234,234,234,,234,234,234,,234", "234,234,234,234,530,530,530,530,530,530,530,530,530,530,530,,530,530", ",,530,530,,234,,,234,,,234,234,,,234,,234,530,,530,234,530,530,,530", "530,530,530,530,234,530,,,,234,234,234,234,,234,234,234,234,,,,,234", "234,,530,,,,,234,,234,234,234,300,300,300,300,300,300,,,,300,300,,,", "300,,300,300,300,300,300,300,300,,,,,,300,300,300,300,300,300,300,,", "300,,,,,,300,300,300,300,300,300,300,300,300,300,300,300,,300,300,300", ",300,300,300,300,300,771,771,771,771,771,771,771,771,771,771,771,,771", "771,,,771,771,,300,,,300,,,300,300,,,300,,300,771,,771,300,771,771,", "771,771,771,771,771,300,771,,,,300,300,300,300,,300,300,300,300,,,,", "300,300,,771,,,,,300,,300,300,300,305,305,305,305,305,305,,,,305,305", ",,,305,,305,305,305,305,305,305,305,,,,,,305,305,305,305,305,305,305", ",,305,,,,,,305,305,305,305,305,305,305,305,305,305,305,305,,305,305", "305,,305,305,305,305,305,865,865,865,865,865,865,865,865,865,865,865", ",865,865,,,865,865,,305,,,305,,,305,305,,,305,,305,865,,865,305,865", "865,,865,865,865,865,865,305,865,,,,305,305,305,305,,305,305,305,305", ",,,,305,305,,865,,,,,305,,305,305,305,331,331,331,331,331,331,,,,331", "331,,,,331,,331,331,331,331,331,331,331,,,,,,331,331,331,331,331,331", "331,,,331,,,,,,331,331,331,331,331,331,331,331,331,331,331,331,,331", "331,331,,331,331,331,331,331,460,460,460,460,460,460,460,460,460,460", "460,,460,460,,,460,460,,331,,,331,,,331,331,,,331,,331,460,,460,331", "460,460,,460,460,460,460,460,331,460,,,,331,331,331,331,,331,331,331", "331,,,,,331,331,,,,,,,331,,331,331,331,348,348,348,348,348,348,,,,348", "348,,,,348,,348,348,348,348,348,348,348,,,,,,348,348,348,348,348,348", "348,,,348,,,,,,348,348,348,348,348,348,348,348,348,348,348,348,,348", "348,348,,348,348,348,348,348,461,461,461,461,461,461,461,461,461,461", "461,,461,461,,,461,461,,348,,,348,,,348,348,,,348,,348,461,,461,348", "461,461,,461,461,461,461,461,348,461,,,,348,348,348,348,,348,348,348", "348,,,,,348,348,,,,,,,348,,348,348,348,349,349,349,349,349,349,,,,349", "349,,,,349,,349,349,349,349,349,349,349,,,,,,349,349,349,349,349,349", "349,,,349,,,,,,349,349,349,349,349,349,349,349,349,349,349,349,,349", "349,349,,349,349,349,349,349,471,471,471,471,471,471,471,,,471,471,", ",,,,471,471,,349,,,349,,,349,349,,,349,,349,471,,471,349,471,471,,471", "471,471,471,471,349,471,,,,349,349,349,349,,349,349,349,349,,,,,349", "349,,,,,,,349,,349,349,349,577,577,577,577,577,577,,,,577,577,,,,577", ",577,577,577,577,577,577,577,,,,,,577,577,577,577,577,577,577,,,577", ",,,,,577,577,577,577,577,577,577,577,577,577,577,577,,577,577,577,,577", "577,577,577,577,472,472,472,472,472,472,472,,,472,472,,,,,,472,472,", "577,,,577,,,577,577,,,577,,577,472,,472,577,472,472,,472,472,472,472", "472,577,472,,,,577,577,577,577,,577,577,577,577,,,,,577,577,,,,,,,577", ",577,577,577,580,580,580,580,580,580,,,,580,580,,,,580,,580,580,580", "580,580,580,580,,,,,,580,580,580,580,580,580,580,,,580,,,,,,580,580", "580,580,580,580,580,580,580,580,580,580,,580,580,580,,580,580,580,580", "580,473,473,473,473,473,473,473,,,473,473,,,,,,473,473,,580,,,580,,", "580,580,,,580,,580,473,,473,580,473,473,,473,473,473,473,473,580,473", ",,,580,580,580,580,,580,580,580,580,,,,,580,580,,,,,,,580,,580,580,580", "601,601,601,601,601,601,,,,601,601,,,,601,,601,601,601,601,601,601,601", ",,,,,601,601,601,601,601,601,601,,,601,,,,,,601,601,601,601,601,601", "601,601,601,601,601,601,,601,601,601,,601,601,601,601,601,474,474,474", "474,474,474,474,,,474,474,,,,,,474,474,,601,,,601,,,601,601,,,601,,601", "474,,474,601,474,474,,474,474,474,474,474,601,474,,,,601,601,601,601", ",601,601,601,601,,,,,601,601,,,,,,,601,,601,601,601,736,736,736,736", "736,736,,,,736,736,,,,736,,736,736,736,736,736,736,736,,,,,,736,736", "736,736,736,736,736,,,736,,,,,,736,736,736,736,736,736,736,736,736,736", "736,736,,736,736,736,,736,736,736,736,736,475,475,475,475,475,475,475", ",,475,475,,,,,,475,475,,736,,,736,,,736,736,,,736,,736,475,,475,736", "475,475,,475,475,475,475,475,736,475,,,,736,736,736,736,,736,736,736", "736,,,,,736,736,,,,,,,736,,736,736,736,741,741,741,741,741,741,,,,741", "741,,,,741,,741,741,741,741,741,741,741,,,,,,741,741,741,741,741,741", "741,,,741,,,,,,741,741,741,741,741,741,741,741,741,741,741,741,,741", "741,741,,741,741,741,741,741,476,476,476,476,476,476,476,,,476,476,", ",,,,476,476,,741,,,741,,,741,741,,,741,,741,476,,476,741,476,476,,476", "476,476,476,476,741,476,,,,741,741,741,741,,741,741,741,741,,,,,741", "741,,,,,,,741,,741,741,741,745,745,745,745,745,745,,,,745,745,,,,745", ",745,745,745,745,745,745,745,,,,,,745,745,745,745,745,745,745,,,745", ",,,,,745,745,745,745,745,745,745,745,745,745,745,745,,745,745,745,,745", "745,745,745,745,479,479,479,479,479,479,479,,,479,479,,,,,,479,479,", "745,,,745,,,745,745,,,745,,745,479,,479,745,479,479,,479,479,479,479", "479,745,479,,,,745,745,745,745,,745,745,745,745,,,,,745,745,,,,,,,745", ",745,745,745,755,755,755,755,755,755,,,,755,755,,,,755,,755,755,755", "755,755,755,755,,,,,,755,755,755,755,755,755,755,,,755,,,,,,755,755", "755,755,755,755,755,755,755,755,755,755,,755,755,755,,755,755,755,755", "755,480,480,480,480,480,480,480,480,,480,480,,,,,,480,480,,755,,,755", ",,755,755,,,755,,755,480,,480,755,480,480,,480,480,480,480,480,755,480", ",,,755,755,755,755,,755,755,755,755,,,,,755,755,,,,,,,755,,755,755,755", "800,800,800,800,800,800,,,,800,800,,,,800,,800,800,800,800,800,800,800", ",,,,,800,800,800,800,800,800,800,,,800,,,,,,800,800,800,800,800,800", "800,800,800,800,800,800,,800,800,800,,800,800,800,800,800,469,,,,,,", ",,,,,,,,,469,469,,800,,,800,,,800,800,,,800,,800,469,,469,800,469,469", ",469,469,,,,800,,,,,800,800,800,800,,800,800,800,800,,,,,800,800,,,", ",,,800,,800,800,800,811,811,811,811,811,811,,,,811,811,,,,811,,811,811", "811,811,811,811,811,,,,,,811,811,811,811,811,811,811,,,811,,,,,,811", "811,811,811,811,811,811,811,811,811,811,811,,811,811,811,,811,811,811", "811,811,,,,,,,,,,,,,,,,,,,,811,,,811,,,811,811,,,811,,811,,,,811,,,", ",,,,,811,,,,,811,811,811,811,,811,811,811,811,,,,,811,811,,,,,,,811", ",811,811,811,846,846,846,846,846,846,,,,846,846,,,,846,,846,846,846", "846,846,846,846,,,,,,846,846,846,846,846,846,846,,,846,,,,,,846,846", "846,846,846,846,846,846,846,846,846,846,,846,846,846,,846,846,846,846", "846,,,,,,,,,,,,,,,,,,,,846,,,846,,,846,846,,,846,,846,,,,846,,,,,,,", ",846,,,,,846,846,846,846,,846,846,846,846,,,,,846,846,,,,,,,846,,846", "846,846,852,852,852,852,852,852,,,,852,852,,,,852,,852,852,852,852,852", "852,852,,,,,,852,852,852,852,852,852,852,,,852,,,,,,852,852,852,852", "852,852,852,852,852,852,852,852,,852,852,852,,852,852,852,852,852,,", ",,,,,,,,,,,,,,,,,852,,,852,,,852,852,,,852,,852,,,,852,,,,,,,,,852,", ",,,852,852,852,852,,852,852,852,852,,,,,852,852,,,,,,,852,,852,852,852", "866,866,866,866,866,866,,,,866,866,,,,866,,866,866,866,866,866,866,866", ",,,,,866,866,866,866,866,866,866,,,866,,,,,,866,866,866,866,866,866", "866,866,866,866,866,866,,866,866,866,,866,866,866,866,866,,,,,,,,,,", ",,,,,,,,,866,,,866,,,866,866,,,866,,866,,,,866,,,,,,,,,866,,,,,866,866", "866,866,,866,866,866,866,,,,,866,866,,,,,,,866,,866,866,866,883,883", "883,883,883,883,,,,883,883,,,,883,,883,883,883,883,883,883,883,,,,,", "883,883,883,883,883,883,883,,,883,,,,,,883,883,883,883,883,883,883,883", "883,883,883,883,,883,883,883,,883,883,883,883,883,,,,,,,,,,,,,,,,,,", ",883,,,883,,,883,883,,,883,,883,,,,883,,,,,,,,,883,,,,,883,883,883,883", ",883,883,883,883,,,,,883,883,,,,,,,883,,883,883,883,889,889,889,889", "889,889,,,,889,889,,,,889,,889,889,889,889,889,889,889,,,,,,889,889", "889,889,889,889,889,,,889,,,,,,889,889,889,889,889,889,889,889,889,889", "889,889,,889,889,889,,889,889,889,889,889,,,,,,,,,,,,,,,,,,,,889,,,889", ",,889,889,,,889,,889,,,,889,,,,,,,,,889,,,,,889,889,889,889,,889,889", "889,889,,,,,889,889,,,,,,,889,,889,889,889,890,890,890,890,890,890,", ",,890,890,,,,890,,890,890,890,890,890,890,890,,,,,,890,890,890,890,890", "890,890,,,890,,,,,,890,890,890,890,890,890,890,890,890,890,890,890,", "890,890,890,,890,890,890,890,890,,,,,,,,,,,,,,,,,,,,890,,,890,,,890", "890,,,890,,890,,,,890,,,,,,,,,890,,,,,890,890,890,890,,890,890,890,890", ",,,,890,890,,,,,,,890,,890,890,890,938,938,938,938,938,938,,,,938,938", ",,,938,,938,938,938,938,938,938,938,,,,,,938,938,938,938,938,938,938", ",,938,,,,,,938,938,938,938,938,938,938,938,938,938,938,938,,938,938", "938,,938,938,938,938,938,,,,,,,,,,,,,,,,,,,,938,,,938,,,938,938,,,938", ",938,,,,938,,,,,,,,,938,,,,,938,938,938,938,,938,938,938,938,,,,,938", "938,,,,,,,938,,938,938,938,959,959,959,959,959,959,,,,959,959,,,,959", ",959,959,959,959,959,959,959,,,,,,959,959,959,959,959,959,959,,,959", ",,,,,959,959,959,959,959,959,959,959,959,959,959,959,,959,959,959,,959", "959,959,959,959,,,,,,,,,,,,,,,,,,,,959,,,959,,,959,959,,,959,,959,,", ",959,,,,,,,,,959,,,,,959,959,959,959,,959,959,959,959,,,,,959,959,,", ",,,,959,,959,959,959,964,964,964,964,964,964,,,,964,964,,,,964,,964", "964,964,964,964,964,964,,,,,,964,964,964,964,964,964,964,,,964,,,,,", "964,964,964,964,964,964,964,964,964,964,964,964,,964,964,964,,964,964", "964,964,964,,,,,,,,,,,,,,,,,,,,964,,,964,,,964,964,,,964,,964,,,,964", ",,,,,,,,964,,,,,964,964,964,964,,964,964,964,964,,,,,964,964,,,,,,,964", ",964,964,964,5,5,5,5,5,,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5", ",,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,,,,,,,,,,,", ",,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,,5,,,,,5,5,5,5,,5,5,5,5,,,,,5,5,,,", "20,20,20,5,20,5,5,5,20,20,,,,20,,20,20,20,20,20,20,20,,,,,,20,20,20", "20,20,20,20,,,20,,,,,,,20,,,20,20,20,20,20,20,20,20,,20,20,20,,20,20", "20,20,20,,,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20,,,,,,,,,20", ",,,,20,20,20,20,,20,20,20,20,,,,,20,20,,,,29,29,29,20,29,20,20,20,29", "29,,,,29,,29,29,29,29,29,29,29,,,,,,29,29,29,29,29,29,29,,,29,,,,,,", "29,,,29,29,29,29,29,29,29,29,29,29,29,29,,29,29,29,29,29,,,,,,,,,,,", ",,,,,,,,29,,,29,,,29,29,,,29,,29,,29,,29,,,29,,,,,,29,,,,,29,29,29,29", ",29,29,29,29,,,,,29,29,,,,30,30,30,29,30,29,29,29,30,30,,,,30,,30,30", "30,30,30,30,30,,,,,,30,30,30,30,30,30,30,,,30,,,,,,,30,,,30,30,30,30", "30,30,30,30,30,30,30,30,,30,30,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,", ",30,30,,,30,,30,,30,,30,,,30,,,,,,30,,,,,30,30,30,30,,30,30,30,30,,", ",,30,30,,,,31,31,31,30,31,30,30,30,31,31,,,,31,,31,31,31,31,31,31,31", ",,,,,31,31,31,31,31,31,31,,,31,,,,,,,31,,,31,31,31,31,31,31,31,31,31", "31,31,31,,31,31,31,31,31,,,,,,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31", ",31,,31,,,31,,,,,,31,,,,,31,31,31,31,,31,31,31,31,,,,,31,31,,,,34,34", "34,31,34,31,31,31,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34", "34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,,34,34,34,,34,34,,", "34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,,,,,,,,,,,,,,,,,34,34", "34,34,,34,34,34,34,,,,,34,34,,,,35,35,35,34,35,34,34,34,35,35,,,,35", ",35,35,35,35,35,35,35,,,,,,35,35,35,35,35,35,35,,,35,,,,,,,35,,,35,35", "35,35,35,35,35,35,,35,35,35,,35,35,,,35,,,,,,,,,,,,,,,,,,,,35,,,35,", ",35,35,,,35,,,896,,896,896,896,896,896,,,,,,,,,896,,35,35,35,35,,35", "35,35,35,,,,,35,35,,,,35,,896,35,,35,35,35,42,42,42,,42,896,896,,42", "42,896,,,42,,42,42,42,42,42,42,42,,,,,,42,42,42,42,42,42,42,,,42,,,", ",,,42,,,42,42,42,42,42,42,42,42,,42,42,42,,42,42,42,42,42,,,,,,,,,,", ",,,,,,,,,42,,,42,,,42,42,,,42,,,,,,42,,,,,,,,,42,,,,,42,42,42,42,,42", "42,42,42,,,,,42,42,,,,43,43,43,42,43,42,42,42,43,43,,,,43,,43,43,43", "43,43,43,43,,,,,,43,43,43,43,43,43,43,,,43,,,,,,,43,,,43,43,43,43,43", "43,43,43,,43,43,43,,43,43,43,43,43,,,,,,,,,,,,,,,,,,,,43,,,43,,,43,43", ",,43,,,,,,43,,,,,,,,,43,,,,,43,43,43,43,,43,43,43,43,,,,,43,43,,,,45", "45,45,43,45,43,43,43,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45", "45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45", "45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,,45", ",,,,45,45,45,45,,45,45,45,45,,,,,45,45,,,,,,,45,,45,45,45,59,59,59,59", "59,,,,59,59,,,,59,,59,59,59,59,59,59,59,,,,,,59,59,59,59,59,59,59,,", "59,,,,,,59,59,,59,59,59,59,59,59,59,59,59,,59,59,59,,59,59,59,59,59", ",,,,,,,,,,,,,,,,,,,59,,,59,,,59,59,,,59,,59,,,,59,,,,,,,,,59,,,,,59", "59,59,59,,59,59,59,59,,,,,59,59,,,,60,60,60,59,60,59,59,59,60,60,,,", "60,,60,60,60,60,60,60,60,,,,,,60,60,60,60,60,60,60,,,60,,,,,,,60,,,60", "60,60,60,60,60,60,60,60,60,60,60,,60,60,60,60,60,,,,,,,,,,,,,,,,,,,", "60,,,60,,,60,60,,,60,,60,,,,60,,,60,,,,,,60,,,,,60,60,60,60,,60,60,60", "60,,,,,60,60,,,,61,61,61,60,61,60,60,60,61,61,,,,61,,61,61,61,61,61", "61,61,,,,,,61,61,61,61,61,61,61,,,61,,,,,,,61,,,61,61,61,61,61,61,61", "61,61,61,61,61,,61,61,61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,", "61,,,,,,61,,,61,,,,,,61,,,,,61,61,61,61,,61,61,61,61,,,,,61,61,,,,64", "64,64,61,64,61,61,61,64,64,,,,64,,64,64,64,64,64,64,64,,,,,,64,64,64", "64,64,64,64,,,64,,,,,,,64,,,64,64,64,64,64,64,64,64,,64,64,64,,64,64", "64,64,64,,,,,,,,,,,,,,,,,,,,64,,,64,,,64,64,,,64,,,,,,64,,,,,,,,,64", ",,,,64,64,64,64,,64,64,64,64,,,,,64,64,,,,65,65,65,64,65,64,64,64,65", "65,,,,65,,65,65,65,65,65,65,65,,,,,,65,65,65,65,65,65,65,,,65,,,,,,", "65,,,65,65,65,65,65,65,65,65,,65,65,65,,65,65,65,65,65,,,,,,,,,,,,,", ",,,,,,65,,,65,,,65,65,,,65,,,,,,65,,,,,,,,,65,,,,,65,65,65,65,,65,65", "65,65,,,,,65,65,,,,68,68,68,65,68,65,65,65,68,68,,,,68,,68,68,68,68", "68,68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68", "68,68,,68,68,68,,68,68,68,68,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,", ",68,,,,,,68,,,,,,,,,68,,,,,68,68,68,68,,68,68,68,68,,,,,68,68,68,,,", ",68,68,,68,68,68,69,69,69,,69,,,,69,69,,,,69,,69,69,69,69,69,69,69,", ",,,,69,69,69,69,69,69,69,,,69,,,,,,,69,,,69,69,69,69,69,69,69,69,,69", "69,69,,69,69,,,69,,,,,,,,,,,,,,,,,,,,69,,,69,,,69,69,,,69,,69,,,,,,", ",,,,,,,,,,,69,69,69,69,,69,69,69,69,,,,,69,69,,,,70,70,70,69,70,69,69", "69,70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70", ",,,,,,70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,,,70,,,,,,,,,,,", ",,,,,70,,,70,,,70,,,70,70,,,70,,,,,,,,,,,,,,,,,,,,70,70,70,70,,70,70", "70,70,,,,,70,70,,,,71,71,71,70,71,70,70,70,71,71,,,,71,,71,71,71,71", "71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71", "71,71,,71,71,71,,71,71,,,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71", ",,898,,898,898,898,898,898,,,,,,,,,898,,71,71,71,71,,71,71,71,71,,,", ",71,71,,,,,,898,71,,71,71,71,113,113,113,113,113,898,898,,113,113,898", ",,113,,113,113,113,113,113,113,113,,,,,,113,113,113,113,113,113,113", ",,113,,,,,,113,113,113,113,113,113,113,113,113,113,113,113,,113,113", "113,,113,113,113,113,113,,,,,,,,,,,,,,,,,,,,113,,,113,,,113,113,,,113", ",113,,,,113,,,,,,,,,113,,,,,113,113,113,113,,113,113,113,113,,,,,113", "113,,,,,,113,113,,113,113,113,118,118,118,,118,,,,118,118,,,,118,,118", "118,118,118,118,118,118,,,,,,118,118,118,118,118,118,118,,,118,,,,,", ",118,,,118,118,118,118,118,118,118,118,,118,118,118,,118,118,118,118", "118,,,,,,,,,,,,,,,,,,,,118,,,118,,,118,118,,,118,,,,,,118,,,,,,,,,118", ",,,,118,118,118,118,,118,118,118,118,,,,,118,118,,,,119,119,119,118", "119,118,118,118,119,119,,,,119,,119,119,119,119,119,119,119,,,,,,119", "119,119,119,119,119,119,,,119,,,,,,,119,,,119,119,119,119,119,119,119", "119,,119,119,119,,119,119,119,119,119,,,,,,,,,,,,,,,,,,,,119,,,119,", ",119,119,,,119,,,,,,119,,,,,,,,,119,,,,,119,119,119,119,,119,119,119", "119,,,,,119,119,,,,120,120,120,119,120,119,119,119,120,120,,,,120,,120", "120,120,120,120,120,120,,,,,,120,120,120,120,120,120,120,,,120,,,,,", ",120,,,120,120,120,120,120,120,120,120,,120,120,120,,120,120,120,120", "120,,,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,,,,,120,,,,,,,,,120", ",,,,120,120,120,120,,120,120,120,120,,,,,120,120,,,,121,121,121,120", "121,120,120,120,121,121,,,,121,,121,121,121,121,121,121,121,,,,,,121", "121,121,121,121,121,121,,,121,,,,,,,121,,,121,121,121,121,121,121,121", "121,,121,121,121,,121,121,121,121,121,,,,,,,,,,,,,,,,,,,,121,,,121,", ",121,121,,,121,,,,,,121,,,,,,,,,121,,,,,121,121,121,121,,121,121,121", "121,,,,,121,121,,,,,,,121,,121,121,121,122,122,122,122,122,,,,122,122", ",,,122,,122,122,122,122,122,122,122,,,,,,122,122,122,122,122,122,122", ",,122,,,,,,122,122,,122,122,122,122,122,122,122,122,122,,122,122,122", ",122,122,122,122,122,,,,,,,,,,,,,,,,,,,,122,,,122,,,122,122,,,122,,122", ",,,122,,,,,,,,,122,,,,,122,122,122,122,,122,122,122,122,,,,,122,122", ",,,210,210,210,122,210,122,122,122,210,210,,,,210,,210,210,210,210,210", "210,210,,,,,,210,210,210,210,210,210,210,,,210,,,,,,,210,,,210,210,210", "210,210,210,210,210,,210,210,210,,210,210,210,210,210,,,,,,,,,,,,,,", ",,,,,210,,,210,,,210,210,,,210,,210,,,,210,,,,,,,,,210,,,,,210,210,210", "210,,210,210,210,210,,,,,210,210,,,,211,211,211,210,211,210,210,210", "211,211,,,,211,,211,211,211,211,211,211,211,,,,,,211,211,211,211,211", "211,211,,,211,,,,,,,211,,,211,211,211,211,211,211,211,211,,211,211,211", ",211,211,211,211,211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211,,211", ",,,211,,,,,,,,,211,,,,,211,211,211,211,,211,211,211,211,,,,,211,211", ",,,212,212,212,211,212,211,211,211,212,212,,,,212,,212,212,212,212,212", "212,212,,,,,,212,212,212,212,212,212,212,,,212,,,,,,,212,,,212,212,212", "212,212,212,212,212,,212,212,212,,212,212,212,212,212,,,,,,,,,,,,,,", ",,,,,212,,,212,,,212,212,,,212,,,,,,212,,,,,,,,,212,,,,,212,212,212", "212,,212,212,212,212,,,,,212,212,,,,213,213,213,212,213,212,212,212", "213,213,,,,213,,213,213,213,213,213,213,213,,,,,,213,213,213,213,213", "213,213,,,213,,,,,,,213,,,213,213,213,213,213,213,213,213,,213,213,213", ",213,213,213,213,213,,,,,,,,,,,,,,,,,,,,213,,,213,,,213,213,,,213,,", ",,,213,,,,,,,,,213,,,,,213,213,213,213,,213,213,213,213,,,,,213,213", ",,,214,214,214,213,214,213,213,213,214,214,,,,214,,214,214,214,214,214", "214,214,,,,,,214,214,214,214,214,214,214,,,214,,,,,,,214,,,214,214,214", "214,214,214,214,214,,214,214,214,,214,214,214,214,214,,,,,,,,,,,,,,", ",,,,,214,,,214,,,214,214,,,214,,,,,,214,,,,,,,,,214,,,,,214,214,214", "214,,214,214,214,214,,,,,214,214,,,,215,215,215,214,215,214,214,214", "215,215,,,,215,,215,215,215,215,215,215,215,,,,,,215,215,215,215,215", "215,215,,,215,,,,,,,215,,,215,215,215,215,215,215,215,215,215,215,215", "215,,215,215,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,,,215,215,,,215", ",215,,215,,215,,,215,,,,,,215,,,,,215,215,215,215,,215,215,215,215,", ",,,215,215,,,,220,220,220,215,220,215,215,215,220,220,,,,220,,220,220", "220,220,220,220,220,,,,,,220,220,220,220,220,220,220,,,220,,,,,,,220", ",,220,220,220,220,220,220,220,220,,220,220,220,,220,220,220,220,220", ",,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220,,,,,,220,,,,,,,,,220,,", ",,220,220,220,220,,220,220,220,220,,,,,220,220,,,,221,221,221,220,221", "220,220,220,221,221,,,,221,,221,221,221,221,221,221,221,,,,,,221,221", "221,221,221,221,221,,,221,,,,,,,221,,,221,221,221,221,221,221,221,221", ",221,221,221,,221,221,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221", "221,,,221,,,,,,221,,,,,,,,,221,,,,,221,221,221,221,,221,221,221,221", ",,,,221,221,,,,222,222,222,221,222,221,221,221,222,222,,,,222,,222,222", "222,222,222,222,222,,,,,,222,222,222,222,222,222,222,,,222,,,,,,,222", ",,222,222,222,222,222,222,222,222,,222,222,222,,222,222,222,222,222", ",,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,,,,,222,,,,,,,,,222,,", ",,222,222,222,222,,222,222,222,222,,,,,222,222,222,,,233,233,233,222", "233,222,222,222,233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233", "233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233", "233,,233,233,233,,233,233,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,", ",233,233,,,233,,,,,,233,,,,,,,,,233,,,,,233,233,233,233,,233,233,233", "233,,,,,233,233,,,,236,236,236,233,236,233,233,233,236,236,,,,236,,236", "236,236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,", ",236,,,236,236,236,236,236,236,236,236,,236,236,236,,236,236,236,236", "236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,,236", ",,,,236,236,236,236,,236,236,236,236,,,,,236,236,,,,237,237,237,236", "237,236,236,236,237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237", "237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237", "237,,237,237,237,,237,237,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,", ",237,237,,,237,,,,,,237,,,,,,,,,237,,,,,237,237,237,237,,237,237,237", "237,,,,,237,237,,,,238,238,238,237,238,237,237,237,238,238,,,,238,,238", "238,238,238,238,238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,", ",238,,,238,238,238,238,238,238,238,238,,238,238,238,,238,238,238,238", "238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,,238", ",,,,238,238,238,238,,238,238,238,238,,,,,238,238,,,,239,239,239,238", "239,238,238,238,239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239", "239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239", "239,,239,239,239,,239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,", ",239,239,,,239,,,,,,239,,,,,,,,,239,,,,,239,239,239,239,,239,239,239", "239,,,,,239,239,,,,240,240,240,239,240,239,239,239,240,240,,,,240,,240", "240,240,240,240,240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,", ",240,,,240,240,240,240,240,240,240,240,,240,240,240,,240,240,240,240", "240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,,240", ",,,,240,240,240,240,,240,240,240,240,,,,,240,240,,,,241,241,241,240", "241,240,240,240,241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241", "241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241", "241,,241,241,241,,241,241,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,", ",241,241,,,241,,,,,,241,,,,,,,,,241,,,,,241,241,241,241,,241,241,241", "241,,,,,241,241,,,,242,242,242,241,242,241,241,241,242,242,,,,242,,242", "242,242,242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,", ",242,,,242,242,242,242,242,242,242,242,,242,242,242,,242,242,242,242", "242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,,242", ",,,,242,242,242,242,,242,242,242,242,,,,,242,242,,,,243,243,243,242", "243,242,242,242,243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243", "243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243", "243,,243,243,243,,243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,", ",243,243,,,243,,,,,,243,,,,,,,,,243,,,,,243,243,243,243,,243,243,243", "243,,,,,243,243,,,,244,244,244,243,244,243,243,243,244,244,,,,244,,244", "244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,", ",244,,,244,244,244,244,244,244,244,244,,244,244,244,,244,244,244,244", "244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,,244", ",,,,244,244,244,244,,244,244,244,244,,,,,244,244,,,,245,245,245,244", "245,244,244,244,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245", "245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245", "245,,245,245,245,,245,245,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,", ",245,245,,,245,,,,,,245,,,,,,,,,245,,,,,245,245,245,245,,245,245,245", "245,,,,,245,245,,,,246,246,246,245,246,245,245,245,246,246,,,,246,,246", "246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,", ",246,,,246,246,246,246,246,246,246,246,,246,246,246,,246,246,246,246", "246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,,246", ",,,,246,246,246,246,,246,246,246,246,,,,,246,246,,,,247,247,247,246", "247,246,246,246,247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247", "247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247", "247,,247,247,247,,247,247,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,", ",247,247,,,247,,,,,,247,,,,,,,,,247,,,,,247,247,247,247,,247,247,247", "247,,,,,247,247,,,,248,248,248,247,248,247,247,247,248,248,,,,248,,248", "248,248,248,248,248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,", ",248,,,248,248,248,248,248,248,248,248,,248,248,248,,248,248,248,248", "248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,,248", ",,,,248,248,248,248,,248,248,248,248,,,,,248,248,,,,249,249,249,248", "249,248,248,248,249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249", "249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249", "249,,249,249,249,,249,249,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,", ",249,249,,,249,,,,,,249,,,,,,,,,249,,,,,249,249,249,249,,249,249,249", "249,,,,,249,249,,,,250,250,250,249,250,249,249,249,250,250,,,,250,,250", "250,250,250,250,250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,", ",250,,,250,250,250,250,250,250,250,250,,250,250,250,,250,250,250,250", "250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,,250", ",,,,250,250,250,250,,250,250,250,250,,,,,250,250,,,,251,251,251,250", "251,250,250,250,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251", "251,251,251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251", "251,,251,251,251,,251,251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,", ",251,251,,,251,,,,,,251,,,,,,,,,251,,,,,251,251,251,251,,251,251,251", "251,,,,,251,251,,,,252,252,252,251,252,251,251,251,252,252,,,,252,,252", "252,252,252,252,252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,", ",252,,,252,252,252,252,252,252,252,252,,252,252,252,,252,252,252,252", "252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,,252", ",,,,252,252,252,252,,252,252,252,252,,,,,252,252,,,,253,253,253,252", "253,252,252,252,253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253", "253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253", "253,,253,253,253,,253,253,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,", ",253,253,,,253,,,,,,253,,,,,,,,,253,,,,,253,253,253,253,,253,253,253", "253,,,,,253,253,,,,254,254,254,253,254,253,253,253,254,254,,,,254,,254", "254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,", ",254,,,254,254,254,254,254,254,254,254,,254,254,254,,254,254,254,254", "254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,,254", ",,,,254,254,254,254,,254,254,254,254,,,,,254,254,,,,255,255,255,254", "255,254,254,254,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255", "255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255", "255,,255,255,255,,255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,", ",255,255,,,255,,,,,,255,,,,,,,,,255,,,,,255,255,255,255,,255,255,255", "255,,,,,255,255,,,,256,256,256,255,256,255,255,255,256,256,,,,256,,256", "256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,", ",256,,,256,256,256,256,256,256,256,256,,256,256,256,,256,256,256,256", "256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,,256", ",,,,256,256,256,256,,256,256,256,256,,,,,256,256,,,,257,257,257,256", "257,256,256,256,257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257", "257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257", "257,,257,257,257,,257,257,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,", ",257,257,,,257,,,,,,257,,,,,,,,,257,,,,,257,257,257,257,,257,257,257", "257,,,,,257,257,,,,262,262,262,257,262,257,257,257,262,262,,,,262,,262", "262,262,262,262,262,262,,,,,,262,262,262,262,262,262,262,,,262,,,,,", ",262,,,262,262,262,262,262,262,262,262,,262,262,262,,262,262,262,262", "262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262,,,262,,,,,,262,,,,,,,,,262", ",,,,262,262,262,262,,262,262,262,262,,,,,262,262,,,,269,269,269,262", "269,262,262,262,269,269,,,,269,,269,269,269,269,269,269,269,,,,,,269", "269,269,269,269,269,269,,,269,,,,,,,269,,,269,269,269,269,269,269,269", "269,269,269,269,269,,269,269,269,269,269,,,,,,,,,,,,,,,,,,,,269,,,269", ",,269,269,,,269,,269,,269,,269,,,269,,,,,,269,,,,,269,269,269,269,,269", "269,269,269,,,,,269,269,,,,270,270,270,269,270,269,269,269,270,270,", ",,270,,270,270,270,270,270,270,270,,,,,,270,270,270,270,270,270,270", ",,270,,,,,,,270,,,270,270,270,270,270,270,270,270,270,270,270,270,,270", "270,270,270,270,,,,,,,,,,,,,,,,,,,,270,,,270,,,270,270,,,270,,270,,270", ",270,,,270,,,,,,270,,,,,270,270,270,270,,270,270,270,270,,,,,270,270", ",,,278,278,278,270,278,270,270,270,278,278,,,,278,,278,278,278,278,278", "278,278,,,,,,278,278,278,278,278,278,278,,,278,,,,,,,278,,,278,278,278", "278,278,278,278,278,278,278,278,278,,278,278,278,278,278,,,,,,,,,,,", ",,,,,,,,278,,,278,,,278,278,,,278,,278,,278,,278,,,278,,,,,,278,,,,", "278,278,278,278,,278,278,278,278,,,,,278,278,278,,,285,285,285,278,285", "278,278,278,285,285,,,,285,,285,285,285,285,285,285,285,,,,,,285,285", "285,285,285,285,285,,,285,,,,,,,285,,,285,285,285,285,285,285,285,285", ",285,285,285,,285,285,285,285,285,,,,,,,,,,,,,,,,,,,,285,,,285,,,285", "285,,,285,,,,,,285,,,,,,,,,285,,,,,285,285,285,285,,285,285,285,285", ",,,,285,285,,,,287,287,287,285,287,285,285,285,287,287,,,,287,,287,287", "287,287,287,287,287,,,,,,287,287,287,287,287,287,287,,,287,,,,,,,287", ",,287,287,287,287,287,287,287,287,,287,287,287,,287,287,287,287,287", ",,,,,,,,,,,,,,,,,,,287,,,287,,,287,287,,,287,,,,,,287,,,,,,,,,287,,", ",,287,287,287,287,,287,287,287,287,,,,,287,287,,,,290,290,290,287,290", "287,287,287,290,290,,,,290,,290,290,290,290,290,290,290,,,,,,290,290", "290,290,290,290,290,,,290,,,,,,,290,,,290,290,290,290,290,290,290,290", ",290,290,290,,290,290,290,290,290,,,,,,,,,,,,,,,,,,,,290,,,290,,,290", "290,,,290,,,,,,290,,,,,,,,,290,,,,,290,290,290,290,,290,290,290,290", ",,,,290,290,,,,291,291,291,290,291,290,290,290,291,291,,,,291,,291,291", "291,291,291,291,291,,,,,,291,291,291,291,291,291,291,,,291,,,,,,,291", ",,291,291,291,291,291,291,291,291,,291,291,291,,291,291,291,291,291", ",,,,,,,,,,,,,,,,,,,291,,,291,,,291,291,,,291,,,,,,291,,,,,,,,,291,,", ",,291,291,291,291,,291,291,291,291,,,,,291,291,,,,,,,291,,291,291,291", "296,296,296,296,296,,,,296,296,,,,296,,296,296,296,296,296,296,296,", ",,,,296,296,296,296,296,296,296,,,296,,,,,,296,296,,296,296,296,296", "296,296,296,296,296,,296,296,296,,296,296,296,296,296,,,,,,,,,,,,,,", ",,,,,296,,,296,,,296,296,,,296,,296,,,,296,,,,,,,,,296,,,,,296,296,296", "296,,296,296,296,296,,,,,296,296,,,,304,304,304,296,304,296,296,296", "304,304,,,,304,,304,304,304,304,304,304,304,,,,,,304,304,304,304,304", "304,304,,,304,,,,,,,304,,,304,304,304,304,304,304,304,304,,304,304,304", ",304,304,,,304,,,,,,,,,,,,,,,,,,,,304,,,304,,,304,304,,,304,,,900,,900", "900,900,900,900,,,,,,,,,900,,304,304,304,304,,304,304,304,304,,,,,304", "304,,,,304,,900,304,,304,304,304,321,321,321,,321,900,900,,321,321,900", ",,321,,321,321,321,321,321,321,321,,,,,,321,321,321,321,321,321,321", ",,321,,,,,,,321,,,321,321,321,321,321,321,321,321,,321,321,321,,321", "321,,,321,,,,,,,,,,,,,,,,,,,,321,,,321,,,321,321,,,321,,,,,,,,,,,,,", ",,,,,,321,321,321,321,,321,321,321,321,,,,,321,321,,,,328,328,328,321", "328,321,321,321,328,328,,,,328,,328,328,328,328,328,328,328,,,,,,328", "328,328,328,328,328,328,,,328,,,,,,,328,,,328,328,328,328,328,328,328", "328,,328,328,328,,328,328,328,328,328,,,,,,,,,,,,,,,,,,,,328,,,328,", ",328,328,,,328,,,,,,328,,,,,,,,,328,,,,,328,328,328,328,,328,328,328", "328,,,,,328,328,,,,330,330,330,328,330,328,328,328,330,330,,,,330,,330", "330,330,330,330,330,330,,,,,,330,330,330,330,330,330,330,,,330,,,,,", ",330,,,330,330,330,330,330,330,330,330,,330,330,330,,330,330,330,330", "330,,,,,,,,,,,,,,,,,,,,330,,,330,330,,330,330,,,330,,,,,,330,,,,,,,", ",330,,,,,330,330,330,330,,330,330,330,330,,,,,330,330,,,,347,347,347", "330,347,330,330,330,347,347,,,,347,,347,347,347,347,347,347,347,,,,", ",347,347,347,347,347,347,347,,,347,,,,,,,347,,,347,347,347,347,347,347", "347,347,,347,347,347,,347,347,347,347,347,,,,,,,,,,,,,,,,,,,,347,,,347", ",,347,347,,,347,,,,,,347,,,,,,,,,347,,,,,347,347,347,347,,347,347,347", "347,,,,,347,347,,,,368,368,368,347,368,347,347,347,368,368,,,,368,,368", "368,368,368,368,368,368,,,,,,368,368,368,368,368,368,368,,,368,,,,,", ",368,,,368,368,368,368,368,368,368,368,,368,368,368,,368,368,368,368", "368,,,,,,,,,,,,,,,,,,,,368,,,368,,,368,368,,,368,,,,,,368,,,,,,,,,368", ",,,,368,368,368,368,,368,368,368,368,,,,,368,368,,,,384,384,384,368", "384,368,368,368,384,384,,,,384,,384,384,384,384,384,384,384,,,,,,384", "384,384,384,384,384,384,,,384,,,,,,,384,,,384,384,384,384,384,384,384", "384,,384,384,384,,384,384,384,384,384,,,,,,,,,,,,,,,,,,,,384,,,384,", ",384,384,,,384,,,,,,384,,,,,,,,,384,,,,,384,384,384,384,,384,384,384", "384,,,,,384,384,,,,412,412,412,384,412,384,384,384,412,412,,,,412,,412", "412,412,412,412,412,412,,,,,,412,412,412,412,412,412,412,,,412,,,,,", ",412,,,412,412,412,412,412,412,412,412,,412,412,412,,412,412,412,412", "412,,,,,,,,,,,,,,,,,,,,412,,,412,,,412,412,,,412,,,,,,412,,,,,,,,,412", ",,,,412,412,412,412,,412,412,412,412,,,,,412,412,,,,455,455,455,412", "455,412,412,412,455,455,,,,455,,455,455,455,455,455,455,455,,,,,,455", "455,455,455,455,455,455,,,455,,,,,,,455,,,455,455,455,455,455,455,455", "455,455,455,455,455,,455,455,455,455,455,,,,,,,,,,,,,,,,,,,,455,,,455", ",,455,455,,,455,,455,,455,,455,,,455,,,,,,455,,,,,455,455,455,455,,455", "455,455,455,,,,,455,455,,,,457,457,457,455,457,455,455,455,457,457,", ",,457,,457,457,457,457,457,457,457,,,,,,457,457,457,457,457,457,457", ",,457,,,,,,,457,,,457,457,457,457,457,457,457,457,,457,457,457,,457", "457,457,457,457,,,,,,,,,,,,,,,,,,,,457,,,457,,,457,457,,,457,,,,,,457", ",,,,,,,,457,,,,,457,457,457,457,,457,457,457,457,,,,,457,457,,,,458", "458,458,457,458,457,457,457,458,458,,,,458,,458,458,458,458,458,458", "458,,,,,,458,458,458,458,458,458,458,,,458,,,,,,,458,,,458,458,458,458", "458,458,458,458,,458,458,458,,458,458,458,458,458,,,,,,,,,,,,,,,,,,", ",458,,,458,,,458,458,,,458,,,,,,458,,,,,,,,,458,,,,,458,458,458,458", ",458,458,458,458,,,,,458,458,,,,459,459,459,458,459,458,458,458,459", "459,,,,459,,459,459,459,459,459,459,459,,,,,,459,459,459,459,459,459", "459,,,459,,,,,,,459,,,459,459,459,459,459,459,459,459,,459,459,459,", "459,459,459,459,459,,,,,,,,,,,,,,,,,,,,459,,,459,,,459,459,,,459,,,", ",,459,,,,,,,,,459,,,,,459,459,459,459,,459,459,459,459,,,,,459,459,", ",,496,496,496,459,496,459,459,459,496,496,,,,496,,496,496,496,496,496", "496,496,,,,,,496,496,496,496,496,496,496,,,496,,,,,,,496,,,496,496,496", "496,496,496,496,496,496,496,496,496,,496,496,496,496,496,,,,,,,,,,,", ",,,,,,,,496,,,496,,,496,496,,,496,,496,,496,,496,,,496,,,,,,496,,,,", "496,496,496,496,,496,496,496,496,,,,,496,496,,,,498,498,498,496,498", "496,496,496,498,498,,,,498,,498,498,498,498,498,498,498,,,,,,498,498", "498,498,498,498,498,,,498,,,,,,,498,,,498,498,498,498,498,498,498,498", "498,498,498,498,,498,498,498,498,498,,,,,,,,,,,,,,,,,,,,498,,,498,,", "498,498,,,498,,,,498,,498,,,498,,,,,,498,,,,,498,498,498,498,,498,498", "498,498,,,,,498,498,,,,500,500,500,498,500,498,498,498,500,500,,,,500", ",500,500,500,500,500,500,500,,,,,,500,500,500,500,500,500,500,,,500", ",,,,,,500,,,500,500,500,500,500,500,500,500,,500,500,500,,500,500,500", "500,500,,,,,,,,,,,,,,,,,,,,500,,,500,,,500,500,,,500,,,,,,500,,,,,,", ",,500,,,,,500,500,500,500,,500,500,500,500,,,,,500,500,,,,,,,500,,500", "500,500,506,506,506,506,506,,,,506,506,,,,506,,506,506,506,506,506,506", "506,,,,,,506,506,506,506,506,506,506,,,506,,,,,,506,506,506,506,506", "506,506,506,506,506,506,506,,506,506,506,,506,506,506,506,506,,,,,,", ",,,,,,,,,,,,,506,,,506,,,506,506,,,506,,506,,,,506,,,,,,,,,506,,,,,506", "506,506,506,,506,506,506,506,,,,,506,506,,,,,,506,506,,506,506,506,514", "514,514,,514,,,,514,514,,,,514,,514,514,514,514,514,514,514,,,,,,514", "514,514,514,514,514,514,,,514,,,,,,,514,,,514,514,514,514,514,514,514", "514,,514,514,514,,514,514,,,514,,,,,,,,,,,,,,,,,,,,514,,,514,,,514,514", ",,514,,,,,,,,,,,,,,,,,,,,514,514,514,514,,514,514,514,514,,,,,514,514", ",,,516,516,516,514,516,514,514,514,516,516,,,,516,,516,516,516,516,516", "516,516,,,,,,516,516,516,516,516,516,516,,,516,,,,,,,516,,,516,516,516", "516,516,516,516,516,516,516,516,516,,516,516,516,516,516,,,,,,,,,,,", ",,,,,,,,516,,,516,,,516,516,,,516,,516,,516,,516,,,516,,,,,,516,,,,", "516,516,516,516,,516,516,516,516,,,,,516,516,,,,522,522,522,516,522", "516,516,516,522,522,,,,522,,522,522,522,522,522,522,522,,,,,,522,522", "522,522,522,522,522,,,522,,,,,,,522,,,522,522,522,522,522,522,522,522", ",522,522,522,,522,522,,,522,,,,,,,,,,,,,,,,,,,,522,,,522,,,522,522,", ",522,,,,,,,,,,,,,,,,,,,,522,522,522,522,,522,522,522,522,,,,,522,522", ",,,525,525,525,522,525,522,522,522,525,525,,,,525,,525,525,525,525,525", "525,525,,,,,,525,525,525,525,525,525,525,,,525,,,,,,,525,,,525,525,525", "525,525,525,525,525,,525,525,525,,525,525,525,525,525,,,,,,,,,,,,,,", ",,,,,525,,,525,,,525,525,,,525,,,,,,525,,,,,,,,,525,,,,,525,525,525", "525,,525,525,525,525,,,,,525,525,,,,526,526,526,525,526,525,525,525", "526,526,,,,526,,526,526,526,526,526,526,526,,,,,,526,526,526,526,526", "526,526,,,526,,,,,,,526,,,526,526,526,526,526,526,526,526,,526,526,526", ",526,526,526,526,526,,,,,,,,,,,,,,,,,,,,526,,,526,,,526,526,,,526,,", ",,,526,,,,,,,,,526,,,,,526,526,526,526,,526,526,526,526,,,,,526,526", ",,,531,531,531,526,531,526,526,526,531,531,,,,531,,531,531,531,531,531", "531,531,,,,,,531,531,531,531,531,531,531,,,531,,,,,,,531,,,531,531,531", "531,531,531,531,531,,531,531,531,,531,531,531,531,531,,,,,,,,,,,,,,", ",,,,,531,,,531,,,531,531,,,531,,,,,,531,,,,,,,,,531,,,,,531,531,531", "531,,531,531,531,531,,,,,531,531,,,,537,537,537,531,537,531,531,531", "537,537,,,,537,,537,537,537,537,537,537,537,,,,,,537,537,537,537,537", "537,537,,,537,,,,,,,537,,,537,537,537,537,537,537,537,537,537,537,537", "537,,537,537,537,537,537,,,,,,,,,,,,,,,,,,,,537,,,537,,,537,537,,,537", ",537,,,,537,,,537,,,,,,537,,,,,537,537,537,537,,537,537,537,537,,,,", "537,537,,,,540,540,540,537,540,537,537,537,540,540,,,,540,,540,540,540", "540,540,540,540,,,,,,540,540,540,540,540,540,540,,,540,,,,,,,540,,,540", "540,540,540,540,540,540,540,540,540,540,540,,540,540,540,540,540,,,", ",,,,,,,,,,,,,,,,540,,,540,,,540,540,,,540,,,,,,540,,,540,,,,,,540,,", ",,540,540,540,540,,540,540,540,540,,,,,540,540,,,,565,565,565,540,565", "540,540,540,565,565,,,,565,,565,565,565,565,565,565,565,,,,,,565,565", "565,565,565,565,565,,,565,,,,,,,565,,,565,565,565,565,565,565,565,565", ",565,565,565,,565,565,565,565,565,,,,,,,,,,,,,,,,,,,,565,,,565,,,565", "565,,,565,,,,,,565,,,,,,,,,565,,,,,565,565,565,565,,565,565,565,565", ",,,,565,565,,,,586,586,586,565,586,565,565,565,586,586,,,,586,,586,586", "586,586,586,586,586,,,,,,586,586,586,586,586,586,586,,,586,,,,,,,586", ",,586,586,586,586,586,586,586,586,,586,586,586,,586,586,586,586,586", ",,,,,,,,,,,,,,,,,,,586,,,586,,,586,586,,,586,,586,,,,586,,,,,,,,,586", ",,,,586,586,586,586,,586,586,586,586,,,,,586,586,,,,587,587,587,586", "587,586,586,586,587,587,,,,587,,587,587,587,587,587,587,587,,,,,,587", "587,587,587,587,587,587,,,587,,,,,,,587,,,587,587,587,587,587,587,587", "587,587,587,587,587,,587,587,587,587,587,,,,,,,,,,,,,,,,,,,,587,,,587", ",,587,587,,,587,,587,,587,,587,,,587,,,,,,587,,,,,587,587,587,587,,587", "587,587,587,,,,,587,587,,,,597,597,597,587,597,587,587,587,597,597,", ",,597,,597,597,597,597,597,597,597,,,,,,597,597,597,597,597,597,597", ",,597,,,,,,,597,,,597,597,597,597,597,597,597,597,597,597,597,597,,597", "597,597,597,597,,,,,,,,,,,,,,,,,,,,597,,,597,,,597,597,,,597,,597,,597", ",597,,,597,,,,,,597,,,,,597,597,597,597,,597,597,597,597,,,,,597,597", ",,,629,629,629,597,629,597,597,597,629,629,,,,629,,629,629,629,629,629", "629,629,,,,,,629,629,629,629,629,629,629,,,629,,,,,,,629,,,629,629,629", "629,629,629,629,629,,629,629,629,,629,629,629,629,629,,,,,,,,,,,,,,", ",,,,,629,,,629,,,629,629,,,629,,629,,,,629,,,,,,,,,629,,,,,629,629,629", "629,,629,629,629,629,,,,,629,629,,,,630,630,630,629,630,629,629,629", "630,630,,,,630,,630,630,630,630,630,630,630,,,,,,630,630,630,630,630", "630,630,,,630,,,,,,,630,,,630,630,630,630,630,630,630,630,,630,630,630", ",630,630,630,630,630,,,,,,,,,,,,,,,,,,,,630,,,630,,,630,630,,,630,,", ",,,630,,,,,,,,,630,,,,,630,630,630,630,,630,630,630,630,,,,,630,630", ",,,631,631,631,630,631,630,630,630,631,631,,,,631,,631,631,631,631,631", "631,631,,,,,,631,631,631,631,631,631,631,,,631,,,,,,,631,,,631,631,631", "631,631,631,631,631,631,631,631,631,,631,631,631,631,631,,,,,,,,,,,", ",,,,,,,,631,,,631,,,631,631,,,631,,631,,631,,631,,,631,,,,,,631,,,,", "631,631,631,631,,631,631,631,631,,,,,631,631,,,,,,,631,,631,631,631", "634,634,634,634,634,,,,634,634,,,,634,,634,634,634,634,634,634,634,", ",,,,634,634,634,634,634,634,634,,,634,,,,,,634,634,,634,634,634,634", "634,634,634,634,634,,634,634,634,,634,634,634,634,634,,,,,,,,,,,,,,", ",,,,,634,,,634,,,634,634,,,634,,634,,,,634,,,,,,,,,634,,,,,634,634,634", "634,,634,634,634,634,,,,,634,634,,,,635,635,635,634,635,634,634,634", "635,635,,,,635,,635,635,635,635,635,635,635,,,,,,635,635,635,635,635", "635,635,,,635,,,,,,,635,,,635,635,635,635,635,635,635,635,,635,635,635", ",635,635,635,635,635,,,,,,,,,,,,,,,,,,,,635,,,635,,,635,635,,,635,,", ",,,635,,,,,,,,,635,,,,,635,635,635,635,,635,635,635,635,,,,,635,635", ",,,638,638,638,635,638,635,635,635,638,638,,,,638,,638,638,638,638,638", "638,638,,,,,,638,638,638,638,638,638,638,,,638,,,,,,,638,,,638,638,638", "638,638,638,638,638,638,638,638,638,,638,638,638,638,638,,,,,,,,,,,", ",,,,,,,,638,,,638,,,638,638,,,638,,638,,638,,638,,,638,,,,,,638,,,,", "638,638,638,638,,638,638,638,638,,,,,638,638,,,,639,639,639,638,639", "638,638,638,639,639,,,,639,,639,639,639,639,639,639,639,,,,,,639,639", "639,639,639,639,639,,,639,,,,,,,639,,,639,639,639,639,639,639,639,639", "639,639,639,639,,639,639,639,639,639,,,,,,,,,,,,,,,,,,,,639,,,639,,", "639,639,,,639,,,,639,,639,,,639,,,,,,639,,,,,639,639,639,639,,639,639", "639,639,,,,,639,639,,,,640,640,640,639,640,639,639,639,640,640,,,,640", ",640,640,640,640,640,640,640,,,,,,640,640,640,640,640,640,640,,,640", ",,,,,,640,,,640,640,640,640,640,640,640,640,,640,640,640,,640,640,640", "640,640,,,,,,,,,,,,,,,,,,,,640,,,640,,,640,640,,,640,,,,,,640,,,,,,", ",,640,,,,,640,640,640,640,,640,640,640,640,,,,,640,640,,,,641,641,641", "640,641,640,640,640,641,641,,,,641,,641,641,641,641,641,641,641,,,,", ",641,641,641,641,641,641,641,,,641,,,,,,,641,,,641,641,641,641,641,641", "641,641,,641,641,641,,641,641,641,641,641,,,,,,,,,,,,,,,,,,,,641,,,641", ",,641,641,,,641,,,,,,641,,,,,,,,,641,,,,,641,641,641,641,,641,641,641", "641,,,,,641,641,,,,645,645,645,641,645,641,641,641,645,645,,,,645,,645", "645,645,645,645,645,645,,,,,,645,645,645,645,645,645,645,,,645,,,,,", ",645,,,645,645,645,645,645,645,645,645,,645,645,645,,645,645,645,645", "645,,,,,,,,,,,,,,,,,,,,645,,,645,,,645,645,,,645,,,,,,645,,,,,,,,,645", ",,,,645,645,645,645,,645,645,645,645,,,,,645,645,,,,646,646,646,645", "646,645,645,645,646,646,,,,646,,646,646,646,646,646,646,646,,,,,,646", "646,646,646,646,646,646,,,646,,,,,,,646,,,646,646,646,646,646,646,646", "646,,646,646,646,,646,646,646,646,646,,,,,,,,,,,,,,,,,,,,646,,,646,", ",646,646,,,646,,,,,,646,,,,,,,,,646,,,,,646,646,646,646,,646,646,646", "646,,,,,646,646,,,,670,670,670,646,670,646,646,646,670,670,,,,670,,670", "670,670,670,670,670,670,,,,,,670,670,670,670,670,670,670,,,670,,,,,", ",670,,,670,670,670,670,670,670,670,670,,670,670,670,,670,670,670,670", "670,,,,,,,,,,,,,,,,,,,,670,,,670,,,670,670,,,670,,,,,,670,,,,,,,,,670", ",,,,670,670,670,670,,670,670,670,670,,,,,670,670,,,,673,673,673,670", "673,670,670,670,673,673,,,,673,,673,673,673,673,673,673,673,,,,,,673", "673,673,673,673,673,673,,,673,,,,,,,673,,,673,673,673,673,673,673,673", "673,,673,673,673,,673,673,673,673,673,,,,,,,,,,,,,,,,,,,,673,,,673,", ",673,673,,,673,,,,,,673,,,,,,,,,673,,,,,673,673,673,673,,673,673,673", "673,,,,,673,673,,,,676,676,676,673,676,673,673,673,676,676,,,,676,,676", "676,676,676,676,676,676,,,,,,676,676,676,676,676,676,676,,,676,,,,,", ",676,,,676,676,676,676,676,676,676,676,,676,676,676,,676,676,,,676,", ",,,,,,,,,,,,,,,,,,676,,,676,,,676,676,,,676,,,,,,,,,,,,,,,,,,,,676,676", "676,676,,676,676,676,676,,,,,676,676,,,,687,687,687,676,687,676,676", "676,687,687,,,,687,,687,687,687,687,687,687,687,,,,,,687,687,687,687", "687,687,687,,,687,,,,,,,687,,,687,687,687,687,687,687,687,687,,687,687", "687,,687,687,,,687,,,,,,,,,,,,,,,,,,,,687,,,687,,,687,687,,,687,,,,", ",,,,,,,,,,,,,,,687,687,687,687,,687,687,687,687,,,,,687,687,,,,692,692", "692,687,692,687,687,687,692,692,,,,692,,692,692,692,692,692,692,692", ",,,,,692,692,692,692,692,692,692,,,692,,,,,,,692,,,692,692,692,692,692", "692,692,692,,692,692,692,,692,692,692,692,692,,,,,,,,,,,,,,,,,,,,692", ",,692,,,692,692,,,692,,692,,,,692,,,,,,,,,692,,,,,692,692,692,692,,692", "692,692,692,,,,,692,692,,,,709,709,709,692,709,692,692,692,709,709,", ",,709,,709,709,709,709,709,709,709,,,,,,709,709,709,709,709,709,709", ",,709,,,,,,,709,,,709,709,709,709,709,709,709,709,,709,709,709,,709", "709,709,709,709,,,,,,,,,,,,,,,,,,,,709,,,709,,,709,709,,,709,,,,,,709", ",,,,,,,,709,,,,,709,709,709,709,,709,709,709,709,,,,,709,709,,,,742", "742,742,709,742,709,709,709,742,742,,,,742,,742,742,742,742,742,742", "742,,,,,,742,742,742,742,742,742,742,,,742,,,,,,,742,,,742,742,742,742", "742,742,742,742,,742,742,742,,742,742,742,742,742,,,,,,,,,,,,,,,,,,", ",742,,,742,,,742,742,,,742,,,,,,742,,,,,,,,,742,,,,,742,742,742,742", ",742,742,742,742,,,,,742,742,,,,764,764,764,742,764,742,742,742,764", "764,,,,764,,764,764,764,764,764,764,764,,,,,,764,764,764,764,764,764", "764,,,764,,,,,,,764,,,764,764,764,764,764,764,764,764,,764,764,764,", "764,764,764,764,764,,,,,,,,,,,,,,,,,,,,764,,,764,,,764,764,,,764,,,", ",,764,,,,,,,,,764,,,,,764,764,764,764,,764,764,764,764,,,,,764,764,", ",,772,772,772,764,772,764,764,764,772,772,,,,772,,772,772,772,772,772", "772,772,,,,,,772,772,772,772,772,772,772,,,772,,,,,,,772,,,772,772,772", "772,772,772,772,772,,772,772,772,,772,772,772,772,772,,,,,,,,,,,,,,", ",,,,,772,,,772,,,772,772,,,772,,,,,,772,,,,,,,,,772,,,,,772,772,772", "772,,772,772,772,772,,,,,772,772,,,,785,785,785,772,785,772,772,772", "785,785,,,,785,,785,785,785,785,785,785,785,,,,,,785,785,785,785,785", "785,785,,,785,,,,,,,785,,,785,785,785,785,785,785,785,785,,785,785,785", ",785,785,785,785,785,,,,,,,,,,,,,,,,,,,,785,,,785,,,785,785,,,785,,", ",,,785,,,,,,,,,785,,,,,785,785,785,785,,785,785,785,785,,,,,785,785", ",,,786,786,786,785,786,785,785,785,786,786,,,,786,,786,786,786,786,786", "786,786,,,,,,786,786,786,786,786,786,786,,,786,,,,,,,786,,,786,786,786", "786,786,786,786,786,,786,786,786,,786,786,786,786,786,,,,,,,,,,,,,,", ",,,,,786,,,786,,,786,786,,,786,,,,,,786,,,,,,,,,786,,,,,786,786,786", "786,,786,786,786,786,,,,,786,786,,,,787,787,787,786,787,786,786,786", "787,787,,,,787,,787,787,787,787,787,787,787,,,,,,787,787,787,787,787", "787,787,,,787,,,,,,,787,,,787,787,787,787,787,787,787,787,,787,787,787", ",787,787,787,787,787,,,,,,,,,,,,,,,,,,,,787,,,787,,,787,787,,,787,,", ",,,787,,,,,,,,,787,,,,,787,787,787,787,,787,787,787,787,,,,,787,787", ",,,788,788,788,787,788,787,787,787,788,788,,,,788,,788,788,788,788,788", "788,788,,,,,,788,788,788,788,788,788,788,,,788,,,,,,,788,,,788,788,788", "788,788,788,788,788,,788,788,788,,788,788,788,788,788,,,,,,,,,,,,,,", ",,,,,788,,,788,,,788,788,,,788,,,,,,788,,,,,,,,,788,,,,,788,788,788", "788,,788,788,788,788,,,,,788,788,,,,790,790,790,788,790,788,788,788", "790,790,,,,790,,790,790,790,790,790,790,790,,,,,,790,790,790,790,790", "790,790,,,790,,,,,,,790,,,790,790,790,790,790,790,790,790,,790,790,790", ",790,790,790,790,790,,,,,,,,,,,,,,,,,,,,790,,,790,,,790,790,,,790,,", ",,,790,,,,,,,,,790,,,,,790,790,790,790,,790,790,790,790,,,,,790,790", ",,,842,842,842,790,842,790,790,790,842,842,,,,842,,842,842,842,842,842", "842,842,,,,,,842,842,842,842,842,842,842,,,842,,,,,,,842,,,842,842,842", "842,842,842,842,842,,842,842,842,,842,842,842,842,842,,,,,,,,,,,,,,", ",,,,,842,,,842,,,842,842,,,842,,,,,,842,,,,,,,,,842,,,,,842,842,842", "842,,842,842,842,842,,,,,842,842,,,,845,845,845,842,845,842,842,842", "845,845,,,,845,,845,845,845,845,845,845,845,,,,,,845,845,845,845,845", "845,845,,,845,,,,,,,845,,,845,845,845,845,845,845,845,845,,845,845,845", ",845,845,845,845,845,,,,,,,,,,,,,,,,,,,,845,,,845,,,845,845,,,845,,845", ",,,845,,,,,,,,,845,,,,,845,845,845,845,,845,845,845,845,,,,,845,845", ",,,863,863,863,845,863,845,845,845,863,863,,,,863,,863,863,863,863,863", "863,863,,,,,,863,863,863,863,863,863,863,,,863,,,,,,,863,,,863,863,863", "863,863,863,863,863,863,863,863,863,,863,863,863,863,863,,,,,,,,,,,", ",,,,,,,,863,,,863,,,863,863,,,863,,,,863,,863,,,863,,,,,,863,,,,,863", "863,863,863,,863,863,863,863,,,,,863,863,,,,864,864,864,863,864,863", "863,863,864,864,,,,864,,864,864,864,864,864,864,864,,,,,,864,864,864", "864,864,864,864,,,864,,,,,,,864,,,864,864,864,864,864,864,864,864,,864", "864,864,,864,864,864,864,864,,,,,,,,,,,,,,,,,,,,864,,,864,,,864,864", ",,864,,,,,,864,,,,,,,,,864,,,,,864,864,864,864,,864,864,864,864,,,,", "864,864,,,,878,878,878,864,878,864,864,864,878,878,,,,878,,878,878,878", "878,878,878,878,,,,,,878,878,878,878,878,878,878,,,878,,,,,,,878,,,878", "878,878,878,878,878,878,878,,878,878,878,,878,878,,,878,,,,,,,,,,,,", ",,,,,,,878,,,878,,,878,878,,,878,,,,,,,,,,,,,,,,,,,,878,878,878,878", ",878,878,878,878,,,,,878,878,,,,887,887,887,878,887,878,878,878,887", "887,,,,887,,887,887,887,887,887,887,887,,,,,,887,887,887,887,887,887", "887,,,887,,,,,,,887,,,887,887,887,887,887,887,887,887,,887,887,887,", "887,887,,,887,,,,,,,,,,,,,,,,,,,,887,,,887,,,887,887,,,887,,,,,,,,,", ",,,,,,,,,,887,887,887,887,,887,887,887,887,,,,,887,887,,,,934,934,934", "887,934,887,887,887,934,934,,,,934,,934,934,934,934,934,934,934,,,,", ",934,934,934,934,934,934,934,,,934,,,,,,,934,,,934,934,934,934,934,934", "934,934,,934,934,934,,934,934,,,934,,,,,,,,,,,,,,,,,,,,934,,,934,,,934", "934,,,934,,,,,,,,,,,,,,,,,,,,934,934,934,934,,934,934,934,934,,,,,934", "934,,,,979,979,979,934,979,934,934,934,979,979,,,,979,,979,979,979,979", "979,979,979,,,,,,979,979,979,979,979,979,979,,,979,,,,,,,979,,,979,979", "979,979,979,979,979,979,979,979,979,979,,979,979,979,979,979,,,,,,,", ",,,,,,,,,,,,979,,,979,,,979,979,,,979,,979,,979,,979,,,979,,,,,,979", ",,,,979,979,979,979,,979,979,979,979,,,,,979,979,,,,,,,979,,979,979", "979,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8", "8,8,8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8,8,,", ",8,8,8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,,,", ",,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9", "9,9,9,,,,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,9,9,,9,9,9,9,9,9,9,,,9,9,,,", "9,9,9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9,,,,,,,,,,,,", ",9,403,403,403,403,403,403,403,403,403,403,403,403,403,403,403,403,403", "403,403,403,403,403,403,403,,,,403,403,403,403,403,403,403,403,403,403", ",,,,,403,403,403,403,403,403,403,403,403,,,403,,,,,,,,403,403,,403,403", "403,403,403,403,403,,,403,403,,,,403,403,403,403,,,,,,,,,,,,,,403,403", ",403,403,403,403,403,403,403,403,403,403,403,403,,,403,403,,,,,,,,,", ",,,,403,626,626,626,626,626,626,626,626,626,626,626,626,626,626,626", "626,626,626,626,626,626,626,626,626,,,,626,626,626,626,626,626,626,626", "626,626,,,,,,626,626,626,626,626,626,626,626,626,,,626,,,,,,,,626,626", ",626,626,626,626,626,626,626,,,626,626,,,,626,626,626,626,,,,,,,,,,", ",,,626,626,,626,626,626,626,626,626,626,626,626,626,626,626,,,626,626", ",,,,,,,,,,,,,626,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72", "72,72,72,72,72,72,72,,,,72,72,72,72,72,72,72,72,72,72,,,,,,72,72,72", "72,72,72,72,72,72,72,72,72,,72,,,,,,72,72,,72,72,72,72,72,72,72,,,72", "72,,,,72,72,72,72,,,,,,72,,,,,,,,72,72,,72,72,72,72,72,72,72,72,72,72", "72,72,,,72,748,748,748,748,748,748,748,748,748,748,748,748,748,748,748", "748,748,748,748,748,748,748,748,748,,,,748,748,748,748,748,748,748,748", "748,748,,,,,,748,748,748,748,748,748,748,748,748,,,748,,,,,,,,748,748", ",748,748,748,748,748,748,748,,,748,748,,,,748,748,748,748,,,,,,,,,,", ",,,748,748,,748,748,748,748,748,748,748,748,748,748,748,748,216,216", "748,,216,,,,,,,,216,216,,216,216,216,216,216,216,216,,,216,216,,,,216", "216,216,216,,,,,,216,,,,,,,,216,216,,216,216,216,216,216,216,216,216", "216,216,216,216,217,217,216,,217,,,,,,,,217,217,,217,217,217,217,217", "217,217,,,217,217,,,,217,217,217,217,,,,,,217,,,,,,,,217,217,,217,217", "217,217,217,217,217,217,217,217,217,217,265,265,217,,265,,,,,,,,265", "265,,265,265,265,265,265,265,265,,,265,265,,,,265,265,265,265,,,,,,", ",,,,,,,265,265,,265,265,265,265,265,265,265,265,265,265,265,265,453", "453,265,,453,,,,,,,,453,453,,453,453,453,453,453,453,453,,,453,453,", ",,453,453,453,453,,,,,,453,,,,,,,,453,453,,453,453,453,453,453,453,453", "453,453,453,453,453,454,454,453,,454,,,,,,,,454,454,,454,454,454,454", "454,454,454,,,454,454,,,,454,454,454,454,,,,,,454,,,,,,,,454,454,,454", "454,454,454,454,454,454,454,454,454,454,454,517,517,454,,517,,,,,,,", "517,517,,517,517,517,517,517,517,517,,,517,517,,,,517,517,517,517,,", ",,,517,,,,,,,,517,517,,517,517,517,517,517,517,517,517,517,517,517,517", "518,518,517,,518,,,,,,,,518,518,,518,518,518,518,518,518,518,,,518,518", ",,,518,518,518,518,,,,,,518,,,,,,,,518,518,,518,518,518,518,518,518", "518,518,518,518,518,518,527,527,518,,527,,,,,,,,527,527,,527,527,527", "527,527,527,527,,,527,527,,,,527,527,527,527,,,,,,527,,,,,,,,527,527", ",527,527,527,527,527,527,527,527,527,527,527,527,528,528,527,,528,,", ",,,,,528,528,,528,528,528,528,528,528,528,,,528,528,,,,528,528,528,528", ",,,,,528,,,,,,,,528,528,,528,528,528,528,528,528,528,528,528,528,528", "528,588,588,528,,588,,,,,,,,588,588,,588,588,588,588,588,588,588,,,588", "588,,,,588,588,588,588,,,,,,588,,,,,,,,588,588,,588,588,588,588,588", "588,588,588,588,588,588,588,589,589,588,,589,,,,,,,,589,589,,589,589", "589,589,589,589,589,,,589,589,,,,589,589,589,589,,,,,,589,,,,,,,,589", "589,,589,589,589,589,589,589,589,589,589,589,589,589,595,595,589,,595", ",,,,,,,595,595,,595,595,595,595,595,595,595,,,595,595,,,,595,595,595", "595,,,,,,595,,,,,,,,595,595,,595,595,595,595,595,595,595,595,595,595", "595,595,596,596,595,,596,,,,,,,,596,596,,596,596,596,596,596,596,596", ",,596,596,,,,596,596,596,596,,,,,,596,,,,,,,,596,596,,596,596,596,596", "596,596,596,596,596,596,596,596,632,632,596,,632,,,,,,,,632,632,,632", "632,632,632,632,632,632,,,632,632,,,,632,632,632,632,,,,,,632,,,,,,", ",632,632,,632,632,632,632,632,632,632,632,632,632,632,632,633,633,632", ",633,,,,,,,,633,633,,633,633,633,633,633,633,633,,,633,633,,,,633,633", "633,633,,,,,,633,,,,,,,,633,633,,633,633,633,633,633,633,633,633,633", "633,633,633,976,976,633,,976,,,,,,,,976,976,,976,976,976,976,976,976", "976,,,976,976,,,,976,976,976,976,,,,,,976,,,,,,,,976,976,,976,976,976", "976,976,976,976,976,976,976,976,976,980,980,976,,980,,,,,,,,980,980", ",980,980,980,980,980,980,980,,,980,980,,,,980,980,980,980,,,,,,980,", ",,,,,,980,980,,980,980,980,980,980,980,980,980,980,980,980,980,981,981", "980,,981,,,,,,,,981,981,,981,981,981,981,981,981,981,,,981,981,,,,981", "981,981,981,,,,,,981,,,,,,,,981,981,,981,981,981,981,981,981,981,981", "981,981,981,981,,343,981,343,343,343,343,343,,545,,545,545,545,545,545", "343,,,,,,,,545,,703,,703,703,703,703,703,,,,,,343,343,,703,,,,,545,343", "343,343,343,,,,343,545,545,545,545,,,,545,703,,705,,705,705,705,705", "705,703,703,703,703,,,,703,705,,746,,746,746,746,746,746,,747,,747,747", "747,747,747,746,,,,,705,,,747,,,,,,705,705,705,705,,,,705,746,,,,,,", ",747,746,746,746,746,,,,746,747,747,747,747,,,894,747,894,894,894,894", "894,,926,,926,926,926,926,926,894,,,,,,,,926,,928,,928,928,928,928,928", ",,,,,894,,,928,,,,,926,894,894,894,894,,,,894,926,926,926,926,,,,926", "928,,930,,930,930,930,930,930,928,928,928,928,,,,928,930,,987,,987,987", "987,987,987,,997,,997,997,997,997,997,987,,,,,930,,,997,,,,,,,,930,930", ",,,930,987,,,,,,,,997,,,987,987,,,,987,997,997,997,997,,,999,997,999", "999,999,999,999,1001,,1001,1001,1001,1001,1001,1003,999,1003,1003,1003", "1003,1003,1025,1001,1025,1025,1025,1025,1025,,1003,,,,,,,1025,999,,", ",,,,1001,,,,999,999,,1003,,999,,1001,1001,,1025,,1001,,1003,1003,,,", "1003,,1025,1025,,,,1025"];
      racc_action_check = (arr = $$$('::', 'Array').$new(24698, nil));
      idx = 0;
      $send(clist, 'each', [], ($Ruby25$5 = function(str){var self = $Ruby25$5.$$s || this, $$6;

      
        
        if (str == null) {
          str = nil;
        };
        return $send(str.$split(",", -1), 'each', [], ($$6 = function(i){var self = $$6.$$s || this, $writer = nil;

        
          
          if (i == null) {
            i = nil;
          };
          if ($truthy(i['$empty?']())) {
          } else {
            
            $writer = [idx, i.$to_i()];
            $send(arr, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          return (idx = $rb_plus(idx, 1));}, $$6.$$s = self, $$6.$$arity = 1, $$6));}, $Ruby25$5.$$s = self, $Ruby25$5.$$arity = 1, $Ruby25$5));
      racc_action_pointer = [1853, 10, nil, 221, nil, 5772, 909, -79, 22505, 22633, -51, nil, -80, -44, 240, 15, 477, -81, nil, -71, 5903, 1711, 166, nil, -62, nil, -8, 958, 1068, 6034, 6165, 6296, nil, 1993, 6427, 6558, nil, 70, 225, 352, 152, 255, 6697, 6828, -51, 6959, 86, 507, nil, nil, nil, nil, nil, nil, nil, nil, nil, 1178, nil, 7098, 7229, 7360, 4, nil, 7491, 7622, nil, nil, 7753, 7892, 8023, 8154, 23017, nil, nil, nil, nil, nil, nil, 624, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0, nil, nil, 112, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 224, nil, 8293, nil, nil, nil, nil, 8432, 8563, 8694, 8825, 8964, nil, 2133, nil, 287, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 115, nil, 2273, 9095, 9226, 9357, 9488, 9619, 9750, 23191, 23252, nil, nil, 9881, 10012, 10143, nil, nil, 574, -54, 166, 202, 217, 124, 216, nil, 10274, 2413, 232, 10405, 10536, 10667, 10798, 10929, 11060, 11191, 11322, 11453, 11584, 11715, 11846, 11977, 12108, 12239, 12370, 12501, 12632, 12763, 12894, 13025, 13156, nil, nil, nil, nil, 13287, nil, nil, 23313, nil, nil, 258, 13418, 13549, nil, nil, nil, nil, nil, nil, nil, 13680, nil, 2133, nil, 249, 263, nil, 13811, 328, 13942, nil, nil, 14073, 14204, nil, nil, 295, nil, 14343, 1331, 337, 315, 2553, 340, 391, 350, 14474, 2693, 576, 682, 686, 441, 718, nil, 409, 387, 33, nil, nil, nil, 458, 360, 418, 14613, nil, 424, 497, 771, nil, 528, 14744, nil, 14875, 2833, 1396, 484, nil, 398, 503, 528, 511, 575, 550, nil, nil, 24290, 326, -1, 11, 15006, 2973, 3113, 298, 641, 533, -18, 11, 794, 644, 25, 677, nil, nil, 342, 434, -21, nil, 834, nil, 596, 15137, nil, nil, nil, 194, 230, 255, 373, 413, 481, 506, 508, 550, nil, 551, nil, 15268, nil, 327, 388, 395, 400, 456, -41, -35, 462, nil, nil, nil, nil, nil, nil, nil, nil, 611, 22761, nil, nil, nil, nil, 612, nil, nil, 600, 15399, 605, nil, nil, 600, nil, 837, 313, 701, nil, nil, 1853, nil, nil, nil, nil, nil, 1993, 615, nil, 627, 632, 509, 521, 1314, nil, nil, nil, 222, 334, 678, nil, nil, 1446, 1582, nil, nil, nil, -35, nil, 683, 23374, 23435, 15530, 328, 15661, 15792, 15923, 2833, 2973, 523, 563, 708, 710, 711, 712, 1667, 4233, 666, 3113, 3253, 3393, 3533, 3673, 3813, 915, 1465, 3953, 4093, 2273, 1397, nil, 1718, nil, nil, nil, nil, 669, nil, nil, nil, 673, nil, nil, 16054, nil, 16185, nil, 16316, nil, 363, nil, nil, nil, 16455, 1427, nil, 675, 675, nil, nil, 676, 16594, 683, 16725, 23496, 23557, 870, 726, nil, 16856, 685, nil, 16987, 17118, 23618, 23679, 1531, 2413, 17249, 823, 822, 702, 747, nil, 17380, nil, nil, 17511, nil, nil, nil, nil, 24298, nil, 705, 710, nil, 717, 719, 720, nil, nil, nil, nil, nil, nil, nil, nil, 711, 1178, nil, nil, 17642, nil, nil, nil, 807, nil, nil, nil, 810, nil, nil, 824, 3253, 865, nil, 3393, 62, 872, 873, 867, 879, 17773, 17904, 23740, 23801, 27, nil, nil, 930, nil, 23862, 23923, 18035, nil, nil, 250, 3533, 817, nil, -33, nil, nil, nil, 832, nil, nil, nil, 796, nil, nil, 259, nil, 338, nil, nil, 783, nil, 786, nil, nil, nil, 22889, nil, 789, 18166, 18297, 18428, 23984, 24045, 18567, 18698, 552, 829, 18829, 18960, 19091, 19222, 829, nil, nil, 19353, 19484, 845, nil, nil, nil, 343, 358, 466, 604, 830, 830, 955, nil, 946, 6, nil, nil, 862, 102, 969, nil, 847, nil, 895, 19615, nil, nil, 19746, nil, -83, 19877, 857, nil, 861, 123, 180, 903, 248, 1038, 907, 870, 20008, nil, 943, 214, 996, 20139, nil, nil, nil, 596, 36, 881, 780, nil, nil, 430, 24315, nil, 24354, nil, 1377, nil, 20270, nil, 1241, nil, 882, 228, 886, nil, nil, nil, nil, 642, nil, 1008, nil, nil, nil, nil, nil, 1029, nil, 26, 913, 41, 68, 151, 185, 3673, 717, 1040, nil, 914, 3813, 20401, nil, 1037, 3953, 24371, 24379, 23130, nil, nil, nil, nil, nil, nil, 4093, nil, nil, nil, nil, nil, nil, nil, 916, 20532, 920, 516, 519, 714, 826, nil, 2553, 20663, nil, 920, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 20794, 20925, 21056, 21187, 520, 21318, nil, 160, nil, nil, 942, nil, nil, 889, nil, 4233, nil, nil, nil, nil, 924, 236, nil, nil, 1051, nil, 4373, 929, 986, nil, nil, nil, nil, nil, nil, 939, 988, 946, nil, nil, nil, 953, 954, nil, 959, 963, nil, 964, nil, nil, 968, 1280, 968, 819, nil, 1093, nil, 21449, 1094, nil, 21580, 4513, 93, 1097, nil, 1103, 480, 4653, nil, 1104, 984, 554, nil, 989, 985, 553, nil, nil, 21711, 21842, 2693, 4793, nil, 986, 987, nil, 988, 990, 992, nil, 1017, 998, 987, 21973, nil, nil, nil, nil, 4933, nil, nil, 32, 22104, nil, 5073, 5213, 1171, nil, nil, 24431, nil, 6605, nil, 8201, nil, 14521, nil, nil, nil, nil, 335, 951, 999, nil, 33, nil, nil, 39, nil, nil, nil, 1140, nil, nil, nil, 1064, nil, nil, 1203, nil, nil, 24439, nil, 24456, nil, 24495, nil, nil, 1045, 22235, 1006, 1101, nil, 5353, 34, 35, 1116, 1104, 36, nil, 1047, 1154, 628, nil, nil, nil, 1032, 1034, 1036, 1039, 1050, 1291, 1051, 1307, 5493, nil, nil, nil, nil, 5633, 1055, nil, nil, 1056, 1063, 1064, 1069, nil, 1074, nil, 1146, 24106, nil, 1201, 22366, 24167, 24228, 42, nil, nil, nil, 1183, 24512, nil, nil, nil, nil, 1312, 1078, 706, 1203, nil, 24520, nil, 24572, nil, 24579, nil, 24586, nil, nil, 1124, 1127, nil, 1097, 98, 102, 111, 138, nil, 1108, 1109, nil, nil, 1110, 1130, 1131, 1134, 145, nil, 24593, nil, nil, nil, nil, 1137, nil];
      racc_action_default = [-3, -605, -1, -591, -4, -605, -7, -605, -605, -605, -605, -30, -605, -605, -34, -605, -605, -287, -46, -593, -605, -51, -55, -56, -57, -61, -264, -264, -264, -300, -329, -330, -73, -12, -77, -85, -87, -605, -495, -496, -605, -605, -605, -605, -223, -605, -593, -237, -278, -279, -280, -281, -282, -283, -284, -285, -286, -579, -289, -293, -604, -569, -308, -391, -605, -605, -53, -53, -591, -605, -605, -605, -605, -331, -332, -334, -436, -437, -438, -439, -440, -461, -443, -444, -463, -465, -448, -453, -457, -459, -475, -463, -477, -479, -480, -481, -482, -577, -484, -485, -578, -487, -488, -489, -490, -491, -492, -493, -494, -499, -500, -605, -2, -592, -600, -601, -602, -6, -605, -605, -605, -605, -605, -8, -3, -18, -605, -116, -117, -118, -119, -120, -121, -122, -123, -124, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170, -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183, -184, -185, -186, -187, -188, -189, -190, -191, -192, -193, -194, -195, -196, -197, -198, -23, -125, -12, -605, -605, -605, -605, -605, -254, -605, -605, -589, -590, -605, -605, -593, -594, -50, -605, -495, -496, -605, -287, -605, -605, -229, -605, -12, -605, -605, -605, -605, -605, -605, -605, -605, -605, -605, -605, -605, -605, -605, -605, -605, -605, -605, -605, -605, -605, -605, -605, -238, -239, -240, -241, -605, -400, -402, -605, -587, -588, -62, -254, -605, -307, -406, -415, -417, -68, -412, -69, -593, -70, -244, -259, -268, -268, -263, -605, -269, -605, -461, -571, -605, -605, -71, -72, -591, -13, -605, -16, -605, -75, -12, -593, -605, -78, -81, -12, -93, -94, -605, -605, -101, -300, -303, -593, -605, -329, -330, -333, -413, -605, -83, -605, -89, -297, -478, -605, -217, -218, -605, -230, -605, -12, -291, -593, -245, -597, -597, -605, -605, -597, -605, -309, -310, -527, -52, -605, -605, -605, -12, -12, -591, -605, -592, -495, -496, -605, -605, -287, -605, -344, -345, -111, -112, -605, -114, -605, -287, -503, -605, -495, -496, -322, -116, -117, -158, -159, -160, -176, -181, -188, -191, -324, -605, -567, -605, -441, -605, -605, -605, -605, -605, -605, -605, -605, 1032, -5, -603, -24, -25, -26, -27, -28, -605, -605, -20, -21, -22, -126, -605, -31, -33, -274, -605, -605, -273, -32, -605, -35, -605, -287, -43, -45, -199, -249, -269, -47, -48, -36, -200, -249, -593, -255, -268, -268, -580, -581, -264, -410, -582, -583, -581, -580, -264, -409, -411, -582, -583, -42, -207, -49, -593, -306, -605, -605, -605, -254, -297, -605, -605, -605, -208, -209, -210, -211, -212, -213, -214, -215, -219, -220, -221, -222, -224, -225, -226, -227, -228, -231, -232, -233, -234, -593, -242, -421, -264, -580, -581, -59, -63, -593, -265, -419, -421, -593, -302, -260, -605, -261, -605, -266, -605, -270, -605, -574, -576, -11, -592, -15, -17, -593, -74, -295, -90, -79, -605, -593, -254, -605, -605, -100, -605, -478, -605, -86, -91, -605, -605, -605, -605, -243, -235, -605, -428, -605, -593, -605, -246, -599, -598, -248, -599, -298, -299, -570, -392, -527, -395, -566, -566, -510, -512, -512, -512, -526, -528, -529, -530, -531, -532, -533, -534, -535, -605, -537, -539, -541, -546, -548, -549, -551, -556, -558, -559, -561, -562, -563, -605, -12, -335, -336, -12, -605, -605, -605, -605, -605, -605, -254, -605, -605, -297, -53, -111, -112, -113, -605, -605, -254, -318, -501, -605, -12, -505, -326, -593, -442, -462, -467, -605, -469, -445, -464, -605, -466, -447, -605, -450, -605, -452, -455, -605, -456, -605, -476, -9, -19, -605, -29, -277, -605, -605, -254, -605, -605, -605, -605, -414, -605, -256, -258, -605, -605, -64, -253, -407, -605, -605, -66, -408, -305, -595, -580, -581, -580, -581, -593, -605, -605, -422, -58, -403, -419, -251, -605, -380, -605, -301, -268, -267, -271, -605, -572, -573, -605, -14, -76, -605, -82, -88, -593, -580, -581, -252, -584, -99, -605, -84, -605, -206, -216, -593, -604, -604, -290, -292, -294, -597, -605, -593, -605, -508, -509, -605, -605, -519, -605, -522, -605, -524, -605, -346, -605, -348, -350, -357, -593, -540, -550, -560, -564, -604, -337, -604, -54, -338, -339, -313, -314, -605, -316, -605, -593, -580, -581, -584, -296, -12, -111, -112, -115, -593, -12, -605, -320, -605, -12, -527, -527, -605, -568, -468, -471, -472, -473, -474, -12, -446, -449, -451, -454, -458, -460, -127, -275, -605, -593, -580, -581, -581, -580, -44, -250, -605, -596, -268, -38, -202, -39, -203, -65, -40, -205, -41, -204, -67, -605, -605, -605, -605, -414, -605, -401, -380, -405, -404, -605, -416, -381, -593, -383, -12, -418, -262, -272, -575, -80, -414, -92, -304, -604, -342, -12, -429, -604, -430, -431, -247, -393, -396, -398, -385, -605, -566, -547, -565, -511, -512, -512, -538, -512, -512, -557, -512, -535, -552, -593, -605, -355, -605, -536, -605, -340, -605, -605, -315, -605, -12, -414, -605, -414, -605, -605, -12, -323, -605, -593, -605, -327, -605, -276, -414, -37, -201, -257, -605, -236, -12, -60, -566, -566, -362, -364, -364, -364, -379, -605, -593, -535, -543, -544, -554, -420, -10, -12, -435, -343, -605, -605, -433, -12, -12, -605, -394, -507, -605, -515, -605, -517, -605, -520, -605, -523, -525, -347, -349, -353, -605, -358, -311, -605, -312, -271, -604, -317, -319, -502, -605, -325, -504, -506, -505, -470, -423, -605, -360, -361, -370, -372, -605, -375, -605, -377, -382, -605, -605, -542, -605, -434, -12, -495, -496, -605, -605, -287, -432, -605, -605, -593, -387, -389, -390, -512, -512, -512, -512, -351, -605, -356, -605, -12, -424, -425, -426, -321, -12, -566, -545, -363, -364, -364, -364, -364, -555, -364, -384, -553, -605, -297, -428, -254, -605, -605, -297, -397, -399, -386, -605, -605, -513, -516, -518, -521, -605, -354, -604, -605, -359, -605, -367, -605, -369, -605, -373, -605, -376, -378, -296, -584, -427, -593, -580, -581, -584, -296, -388, -512, -352, -341, -328, -364, -364, -364, -364, -414, -514, -605, -365, -368, -371, -374, -364, -366];
      clist = ["221,216,334,303,381,130,130,585,16,266,272,276,691,16,264,281,281,281", "116,317,317,341,125,208,414,415,430,330,225,533,577,580,345,346,133", "133,350,225,225,225,6,16,308,308,497,6,265,828,636,135,135,282,282,282", "317,317,317,546,436,442,745,561,427,113,348,349,553,16,447,130,123,224", "225,225,302,488,225,355,365,365,489,523,335,116,112,594,397,398,399", "400,344,344,536,539,344,320,543,840,386,332,809,324,283,283,283,299", "821,484,671,715,2,700,701,301,421,663,117,421,268,275,277,16,831,421", "872,800,225,225,225,225,16,843,16,336,339,904,948,668,972,668,950,387", "657,1,344,344,344,344,393,351,671,665,882,6,367,371,615,617,279,292", "293,674,401,207,6,360,410,403,723,907,661,626,827,328,829,337,660,383", "338,342,358,598,382,710,611,613,616,616,331,534,611,333,741,852,497", "601,602,748,920,874,437,281,876,947,544,817,875,972,343,697,453,889", "890,483,446,491,492,16,225,418,225,225,418,225,395,792,960,813,418,225", "225,1014,413,413,402,950,886,957,425,426,728,385,16,388,828,389,390", "449,450,671,408,391,968,866,392,281,281,904,835,698,750,409,420,561", "281,420,655,873,553,755,828,420,742,789,677,302,826,225,225,668,668", "823,686,966,933,795,225,993,,317,524,,282,517,520,436,442,806,272,744", "282,,276,,16,502,317,,16,116,527,831,308,16,535,581,,739,,,,961,,1016", ",,,679,,308,,,710,,,837,507,,,16,588,302,,283,,,302,828,,847,,283,,", "506,225,16,16,849,682,,508,,951,513,116,,266,,682,,1017,299,344,,505", "225,299,964,521,509,,,860,,515,893,,,582,583,,225,,600,969,,970,731", "490,130,,,632,603,,,493,740,,604,637,758,,758,846,,625,,,643,561,,561", ",,648,,802,133,682,584,924,925,,,805,437,682,850,,281,765,854,135,,", ",,779,,446,,816,784,,,710,1008,710,855,856,656,225,561,561,1019,,643", "553,553,,,671,436,442,,,,,,,,524,,,,,775,777,,524,,780,782,,,,,317,", "437,281,822,668,,814,317,,,,437,,,16,446,877,428,,,,,308,448,225,446", "955,710,642,996,308,,,421,647,802,,,,225,,,,421,421,,,,421,421,916,", ",,,,,690,,,,,,,922,,,,962,667,,938,437,281,,,659,710,,710,437,,,281", ",16,446,,16,736,,,446,,959,225,724,,,,,,869,,,225,,,730,16,696,,561", "710,,743,437,281,720,794,861,722,,130,,,,1023,,,446,,,,815,,637,,418", "225,762,,16,,877,524,877,,418,418,,793,133,418,418,,807,,,,637,317,995", ",,,643,135,,648,,,317,,770,421,,,,820,857,420,,,308,,,,,,,420,420,26", ",308,420,420,26,,,,,,,,704,706,708,,851,774,637,26,413,877,,,,,,637", "26,26,26,,26,965,,,869,,869,,869,,,,,,,,,,16,130,637,,,16,225,884,26", "16,,888,,26,26,,448,26,428,16,,,,,344,,824,,,824,,,,848,,820,418,,,", ",,,,,,1009,,,,,,858,,,,,869,,869,,869,26,869,16,,909,26,26,26,26,26", "29,26,,16,,29,682,420,,,,340,688,869,,,,,,,29,,,,,881,,,,29,29,29,,29", "225,,885,,16,,,820,,,16,,,317,,,915,,344,870,,919,317,,16,29,,,,878", "29,29,,,29,,935,912,,,,16,,,,941,,16,16,,,451,26,26,26,26,26,26,26,830", ",832,,26,26,26,,,,317,,,,,937,,980,26,985,29,945,946,,,29,29,29,29,29", ",29,,975,776,778,,16,,781,783,,,,,,,,494,,,,,26,26,437,281,,16,,,,26", "16,446,,,411,424,446,978,510,,895,897,,899,901,225,902,26,637,,,26,824", ",,870,26,870,994,870,871,,878,,,878,,878,,878,,,13,,,,,13,,,,,26,29", "29,29,29,29,29,29,,,,,29,29,29,,26,26,26,,,,,13,,,29,499,,501,,,503", "504,,,,26,,,,,,,870,,870,,870,13,870,862,,26,878,,878,,878,359,878,29", "29,,776,778,783,781,,,29,,870,,952,,953,,954,,,,878,988,989,990,991", ",29,,,,29,,,,,29,,,,,,13,,649,,,971,,973,,13,15,13,,,,15,,,,,29,26,", ",,,,,,,,,,,,,29,29,29,,862,662,,15,1024,666,,,,,,628,,,,,,29,,,,675", ",,1015,,,678,,15,,,26,29,1020,,1021,,1022,,,,26,,,,694,,,,,,,,,,13,26", "416,,,416,1030,,,,,416,,,,,,,,,,,,,,13,,15,,,,,,,,,15,,15,669,,340,", "672,,,,26,29,,26,,,,,,,26,,,749,,,,,,,26,,,,26,,,,,,,,,669,,,340,,,", "13,,,,13,,,,,13,,,29,26,26,,,26,927,929,931,716,29,26,26,,,,26,26,,", ",,,13,15,29,15,,,15,424,,,,,15,,,,,13,13,,,,,,808,,15,,,,,,,,,,,,,,", ",,,,,,,29,839,763,29,,,,,,,29,669,340,,,,,,,,29,,,,29,,,,,,,,998,1000", "1002,1004,26,1005,,,15,26,26,803,15,26,804,,,15,,,,29,29,26,,29,,,,", ",29,29,812,,,29,29,,,26,,,15,,,,,,,834,1026,1027,1028,1029,,,,,,15,15", "1031,,,,,,26,,,,,,,,,,,26,,,,,,,,,,903,,,,,,13,,,,,,,,,,859,,,,918,26", ",,,26,,,,,,26,,,,,,,29,,,,,29,29,26,,29,,,,17,,,,,17,29,,,,,26,,,,,", "26,26,,,,,29,,,13,,,13,,,,17,310,310,,,,,,,,,,,911,,,,13,29,,,,,,,,17", ",,29,,340,,26,,,357,366,366,,,,,,,15,416,,,,13,,,,26,,416,416,,26,29", "416,416,,29,,,,,,29,,,,26,,,,,,17,,,,29,,,,,17,,17,,,,,,,,,,29,,,,,", "29,29,,,,,,,,15,,,15,,,,,,,,,,,,,,,,,,,,,15,,,,,,,,,,,,13,,,,29,13,", ",,13,,,,,,,,15,,13,,15,,,17,29,419,15,15,419,29,,15,15,,419,416,,,,", ",,,,29,,,,17,,,,,,,,,,,,,,,13,,,,,,,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,13,17,,,,17,13,,,310,17,,,15,,,,,15,,13,,15,,,,310,,38,,,,15", "38,,,17,13,,,,944,,13,13,,,,,15,,,,17,17,,,,,,,38,306,306,,,,,,,,,,", ",,,15,,,,,,,,,,38,15,,,,13,,,,,353,369,369,369,,,,,,,,,,,,,13,,,,,13", ",,,39,15,,,,39,,15,,,,,,,,,,,,38,,15,,,,,,,38,,38,,,39,307,307,,,15", ",,,,,15,15,,,,,,,,,,,,,,39,,,,,,,,,,354,370,370,370,,,,,,,,,,,,,,,,", "17,,,,15,,,,310,,,,,,,,310,,,,,,,,39,15,38,,,,15,,,39,,39,,,,,,,,,,", ",,,,,38,,,,,,,,,,,,,,,,,,,,17,,,17,,,,,,,,,,,,,,,,,,,,,17,,,,,,,754", ",,,,,,,,,,38,,,,38,,,39,306,38,,419,,,,17,,,,,,419,419,,,306,419,419", ",,,,39,,,38,,,,,,,,,,,,,,,,,38,38,,,,310,,,,,,,,,,,310,,,,,,,,,,,,,", ",,,,,,,,,,,,39,,,,39,,,,307,39,,,,,,,,,,,,,,17,,307,,,17,,,,17,,,39", ",,,,,,17,,,,,,,,,,39,39,,,,,,419,,,,,,,,,,,,,,,,,,,,,,,,,,,,17,,,,,", ",,,,,17,,,,,,,,,,,,,,,,,,38,,,,,,,,306,,,,,,,,306,17,,,,,,17,,,,,,,", ",,,,,,17,,,,,,,,,,,,366,,,,,17,,,,943,,17,17,,,,,,,,,,38,,,38,,,,,,", ",,,,,,,,,,,,,39,38,,,,,,,307,,,366,,,,17,307,,,,,,,,,,,,,,,,,,38,,17", ",,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,39,,,39,,306,,,,,,,,,,,306,,,,,", ",,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,39,,,,,,,,38,,,,,38,,,,38,,,,,", ",,,,38,,,,,,,,,,,,,,,307,,,,,,232,,,,,307,,,,280,280,280,,,,,,,,,,,326", "327,38,329,,,,,,,,,,38,,,,,280,280,,,,,,,,,,,,,39,,,,,39,,,,39,,,,,", ",38,,,39,,,38,,,,,,,,,,,,,,38,,,,,,,,,,,,369,,,,,38,,,,939,,38,38,,", ",39,,,,,,,,,,,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,369,,,,38,,39,,,,,,39,", ",,,,,,,,,,,38,39,,,,38,,280,423,,,429,280,370,,,,429,39,,,,940,,39,39", ",,,,232,,,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474", "475,476,477,478,479,480,481,,,,,482,,,,,,,280,280,,370,,,,39,,280,,", ",,,,280,,280,,,280,280,,,,,,39,,,,,39,,,,,,,,,,,,,,,,,,,,,,,,,,529,", "530,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,280,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,280,", "429,429,429,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,280,,280,,280,,,,,,", ",,,,,,,,,280,,,,,,,,,429,689,,,,,,,,,,,280,,,280,,,,,,,,,,,,,,,,,,,", ",,,,,280,,,,,,,,,,,,,,,,,,,,,280,280,,,,,,,,,,280,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,280,429,280,,,,771,,,280,280,429,429,,,,429,429,,,,,,,", ",,,,,,,,,,,,,,,,280,,,280,,,,,,,,,,,,,,,,,,,280,,,,,,,,,,,,,,,,,280", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,280,,,,,,,,429", ",,,,,,,,,,,,429,429,429,429,,865,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,280,,,,,,,,,,,,,,,,,,280,429,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,280"];
      racc_goto_table = (arr = $$$('::', 'Array').$new(3624, nil));
      idx = 0;
      $send(clist, 'each', [], ($Ruby25$7 = function(str){var self = $Ruby25$7.$$s || this, $$8;

      
        
        if (str == null) {
          str = nil;
        };
        return $send(str.$split(",", -1), 'each', [], ($$8 = function(i){var self = $$8.$$s || this, $writer = nil;

        
          
          if (i == null) {
            i = nil;
          };
          if ($truthy(i['$empty?']())) {
          } else {
            
            $writer = [idx, i.$to_i()];
            $send(arr, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          return (idx = $rb_plus(idx, 1));}, $$8.$$s = self, $$8.$$arity = 1, $$8));}, $Ruby25$7.$$s = self, $Ruby25$7.$$arity = 1, $Ruby25$7));
      clist = ["34,32,77,56,63,64,64,101,29,32,81,81,11,29,141,39,39,39,104,73,73,96", "16,16,23,23,30,34,29,9,99,99,18,18,67,67,18,29,29,29,7,29,29,29,83,7", "42,176,31,68,68,78,78,78,73,73,73,140,43,43,105,175,27,6,36,36,170,29", "27,64,8,21,29,29,10,45,29,29,29,29,30,58,78,104,4,61,18,18,18,18,25", "25,79,79,25,57,79,100,158,7,12,71,80,80,80,52,132,43,185,118,2,123,123", "53,19,46,5,19,44,44,44,29,181,19,128,130,29,29,29,29,29,12,29,80,80", "116,134,84,182,84,135,159,144,1,25,25,25,25,159,4,185,144,13,7,62,62", "162,162,51,51,51,15,7,17,7,20,24,26,37,119,48,69,129,74,129,76,82,94", "95,98,102,103,106,117,163,163,163,163,107,108,163,109,110,111,83,112", "113,114,115,120,81,39,126,133,136,137,132,182,138,139,32,142,143,145", "64,147,148,29,29,29,29,29,29,29,5,151,152,153,29,29,29,134,78,78,2,135", "154,119,25,25,101,157,29,160,176,161,164,25,25,185,10,165,128,130,166", "39,39,116,118,140,167,21,21,175,39,21,30,129,170,168,176,21,169,31,58", "10,174,29,29,84,84,178,58,179,132,46,29,119,,73,56,,78,32,34,43,43,31", "81,9,78,,81,,29,158,73,,29,104,32,181,29,29,34,18,,61,,,,12,,119,,,", "30,,29,,,117,,,117,7,,,29,32,10,,80,,,10,176,,31,,80,,,6,29,29,29,31", "43,,8,,129,57,104,,32,,43,,100,52,25,,4,29,52,105,71,53,,,31,,53,123", ",,10,10,,29,,25,129,,129,30,51,64,,,32,42,,,51,30,,25,34,163,,163,99", ",16,,,81,175,,175,,,81,,83,67,43,4,123,123,,,58,81,43,9,,39,30,9,68", ",,,,45,,64,,79,45,,,117,11,117,140,140,34,29,175,175,129,,81,170,170", ",,185,43,43,,,,,,,,56,,,,,27,27,,56,,27,27,,,,,73,,81,39,122,84,,23", "73,,,,81,,,29,64,175,70,,,,,29,70,29,64,117,117,44,123,29,,,19,44,83", ",,,29,,,,19,19,,,,19,19,9,,,,,,,25,,,,,,,9,,,,101,80,,99,81,39,,,44", "117,,117,81,,,39,,29,64,,29,36,,,64,,99,29,104,,,,,,122,,,29,,,78,29", "80,,175,117,,104,81,39,10,96,27,10,,64,,,,31,,,64,,,,77,,34,,29,29,16", ",29,,175,56,175,,29,29,,141,67,29,29,,56,,,,34,73,9,,,,81,68,,81,,,73", ",7,19,,,,34,63,21,,,29,,,,,,,21,21,47,,29,21,21,47,,,,,,,,173,173,173", ",18,80,34,47,78,175,,,,,,34,47,47,47,,47,122,,,122,,122,,122,,,,,,,", ",,29,64,34,,,29,29,77,47,29,,77,,47,47,,70,47,70,29,,,,,25,,124,,,124", ",,,10,,34,29,,,,,,,,,,30,,,,,,10,,,,,122,,122,,122,47,122,29,,18,47", "47,47,47,47,50,47,,29,,50,43,21,,,,75,70,122,,,,,,,50,,,,,10,,,,50,50", "50,,50,29,,10,,29,,,34,,,29,,,73,,,104,,25,124,,104,73,,29,50,,,,177", "50,50,,,50,,29,10,,,,29,,,,29,,29,29,,,54,47,47,47,47,47,47,47,127,", "127,,47,47,47,,,,73,,,,,10,,32,47,34,50,10,10,,,50,50,50,50,50,,50,", "29,70,70,,29,,70,70,,,,,,,,54,,,,,47,47,81,39,,29,,,,47,29,64,,,75,75", "64,10,54,,173,173,,173,173,29,173,47,34,,,47,124,,,124,47,124,10,124", "127,,177,,,177,,177,,177,,,22,,,,,22,,,,,47,50,50,50,50,50,50,50,,,", ",50,50,50,,47,47,47,,,,,22,,,50,75,,75,,,75,75,,,,47,,,,,,,124,,124", ",124,22,124,70,,47,177,,177,,177,22,177,50,50,,70,70,70,70,,,50,,124", ",127,,127,,127,,,,177,173,173,173,173,,50,,,,50,,,,,50,,,,,,22,,54,", ",127,,127,,22,28,22,,,,28,,,,,50,47,,,,,,,,,,,,,,,50,50,50,,70,54,,28", "173,54,,,,,,75,,,,,,50,,,,54,,,127,,,54,,28,,,47,50,127,,127,,127,,", ",47,,,,54,,,,,,,,,,22,47,22,,,22,127,,,,,22,,,,,,,,,,,,,,22,,28,,,,", ",,,,28,,28,75,,75,,75,,,,47,50,,47,,,,,,,47,,,54,,,,,,,47,,,,47,,,,", ",,,,75,,,75,,,,22,,,,22,,,,,22,,,50,47,47,,,47,125,125,125,75,50,47", "47,,,,47,47,,,,,,22,28,50,28,,,28,75,,,,,28,,,,,22,22,,,,,,54,,28,,", ",,,,,,,,,,,,,,,,,,,50,54,75,50,,,,,,,50,75,75,,,,,,,,50,,,,50,,,,,,", ",125,125,125,125,47,125,,,28,47,47,75,28,47,75,,,28,,,,50,50,47,,50", ",,,,,50,50,75,,,50,50,,,47,,,28,,,,,,,75,125,125,125,125,,,,,,28,28", "125,,,,,,47,,,,,,,,,,,47,,,,,,,,,,54,,,,,,22,,,,,,,,,,75,,,,54,47,,", ",47,,,,,,47,,,,,,,50,,,,,50,50,47,,50,,,,33,,,,,33,50,,,,,47,,,,,,47", "47,,,,,50,,,22,,,22,,,,33,33,33,,,,,,,,,,,75,,,,22,50,,,,,,,,33,,,50", ",75,,47,,,33,33,33,,,,,,,28,22,,,,22,,,,47,,22,22,,47,50,22,22,,50,", ",,,,50,,,,47,,,,,,33,,,,50,,,,,33,,33,,,,,,,,,,50,,,,,,50,50,,,,,,,", "28,,,28,,,,,,,,,,,,,,,,,,,,,28,,,,,,,,,,,,22,,,,50,22,,,,22,,,,,,,,28", ",22,,28,,,33,50,33,28,28,33,50,,28,28,,33,22,,,,,,,,,50,,,,33,,,,,,", ",,,,,,,,22,,,,,,,,,,,22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,33,,,,33", "22,,,33,33,,,28,,,,,28,,22,,28,,,,33,,59,,,,28,59,,,33,22,,,,22,,22", "22,,,,,28,,,,33,33,,,,,,,59,59,59,,,,,,,,,,,,,,28,,,,,,,,,,59,28,,,", "22,,,,,59,59,59,59,,,,,,,,,,,,,22,,,,,22,,,,60,28,,,,60,,28,,,,,,,,", ",,,59,,28,,,,,,,59,,59,,,60,60,60,,,28,,,,,,28,28,,,,,,,,,,,,,,60,,", ",,,,,,,60,60,60,60,,,,,,,,,,,,,,,,,33,,,,28,,,,33,,,,,,,,33,,,,,,,,60", "28,59,,,,28,,,60,,60,,,,,,,,,,,,,,,,59,,,,,,,,,,,,,,,,,,,,33,,,33,,", ",,,,,,,,,,,,,,,,,,33,,,,,,,33,,,,,,,,,,,59,,,,59,,,60,59,59,,33,,,,33", ",,,,,33,33,,,59,33,33,,,,,60,,,59,,,,,,,,,,,,,,,,,59,59,,,,33,,,,,,", ",,,,33,,,,,,,,,,,,,,,,,,,,,,,,,,60,,,,60,,,,60,60,,,,,,,,,,,,,,33,,60", ",,33,,,,33,,,60,,,,,,,33,,,,,,,,,,60,60,,,,,,33,,,,,,,,,,,,,,,,,,,,", ",,,,,,,33,,,,,,,,,,,33,,,,,,,,,,,,,,,,,,59,,,,,,,,59,,,,,,,,59,33,,", ",,,33,,,,,,,,,,,,,,33,,,,,,,,,,,,33,,,,,33,,,,33,,33,33,,,,,,,,,,59", ",,59,,,,,,,,,,,,,,,,,,,,60,59,,,,,,,60,,,33,,,,33,60,,,,,,,,,,,,,,,", ",,59,,33,,,,,33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,60,,,60,,59,,,,,,,,,,,59", ",,,,,,,60,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,60,,,,,,,,59,,,,,59,,,,59", ",,,,,,,,,59,,,,,,,,,,,,,,,60,,,,,,35,,,,,60,,,,35,35,35,,,,,,,,,,,35", "35,59,35,,,,,,,,,,59,,,,,35,35,,,,,,,,,,,,,60,,,,,60,,,,60,,,,,,,59", ",,60,,,59,,,,,,,,,,,,,,59,,,,,,,,,,,,59,,,,,59,,,,59,,59,59,,,,60,,", ",,,,,,,,60,,,,,,,,,,,,,,,,,,,,,,,,,,,,,59,,,,59,,60,,,,,,60,,,,,,,,", ",,,,59,60,,,,59,,35,35,,,35,35,60,,,,35,60,,,,60,,60,60,,,,,35,,,35", "35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,,,,,35", ",,,,,,35,35,,60,,,,60,,35,,,,,,,35,,35,,,35,35,,,,,,60,,,,,60,,,,,,", ",,,,,,,,,,,,,,,,,,,35,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,35,,35,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35", ",35,,35,,,,,,,,,,,,,,,,35,,,,,,,,,35,35,,,,,,,,,,,35,,,35,,,,,,,,,,", ",,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,35,35,,,,,,,,,,35,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,35,35,35,,,,35,,,35,35,35,35,,,,35,35,,,,,,,,,,,,", ",,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,35,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,35,,,,,,,,,,", ",,35,35,35,35,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,35,,,,,,,,,,,,,,,,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,35"];
      racc_goto_check = (arr = $$$('::', 'Array').$new(3624, nil));
      idx = 0;
      $send(clist, 'each', [], ($Ruby25$9 = function(str){var self = $Ruby25$9.$$s || this, $$10;

      
        
        if (str == null) {
          str = nil;
        };
        return $send(str.$split(",", -1), 'each', [], ($$10 = function(i){var self = $$10.$$s || this, $writer = nil;

        
          
          if (i == null) {
            i = nil;
          };
          if ($truthy(i['$empty?']())) {
          } else {
            
            $writer = [idx, i.$to_i()];
            $send(arr, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          return (idx = $rb_plus(idx, 1));}, $$10.$$s = self, $$10.$$arity = 1, $$10));}, $Ruby25$9.$$s = self, $Ruby25$9.$$arity = 1, $Ruby25$9));
      racc_goto_pointer = [nil, 143, 110, nil, 81, 111, 60, 40, 63, -302, 41, -520, -591, -657, nil, -345, 14, 154, -32, -97, 96, 51, 1014, -186, -44, 26, 42, -152, 1137, 8, -189, -382, -15, 1565, -19, 2644, -2, -413, nil, -14, nil, nil, 22, -158, 92, -193, -376, 693, -317, nil, 816, 129, 72, 80, 679, nil, -31, 60, -240, 1888, 1982, -278, 84, -68, -3, nil, nil, 26, 41, -236, 303, 60, nil, -15, 129, 766, 115, -58, 22, -243, 73, -16, -308, -239, -359, nil, nil, nil, nil, nil, nil, nil, nil, nil, 105, 117, -41, nil, 116, -315, -623, -344, 111, -186, 15, -542, 110, 130, -143, 132, -406, -550, -176, -185, -406, -659, -701, -379, -453, -669, -599, nil, -196, -436, 71, 457, -596, 204, -674, -531, -539, nil, -592, -688, -755, -751, -139, -492, 145, -335, -286, -8, -607, -607, -341, -50, nil, -58, -58, nil, nil, -433, -686, -465, -577, nil, nil, 162, 17, 57, 158, 159, -233, -203, 159, 163, 165, -348, -340, -327, -277, nil, nil, 156, -427, -282, -656, 81, -418, -640, nil, -583, -790, nil, nil, -390];
      racc_goto_default = [nil, nil, nil, 3, nil, 4, 352, 297, nil, nil, 532, nil, 841, nil, 294, 295, nil, nil, nil, 11, 12, 18, 230, nil, nil, 14, nil, 417, 231, 325, nil, nil, 596, 229, 452, 21, nil, nil, 347, 22, 23, 24, nil, 685, nil, nil, nil, 314, nil, 25, 311, 431, 32, nil, nil, 34, 37, 36, nil, 226, 227, 364, nil, 132, 439, 131, 134, 77, 78, nil, 422, 92, 44, 47, 262, 286, nil, 810, 432, nil, 433, 444, 644, 495, 284, 270, 48, 49, 50, 51, 52, 53, 54, 55, 56, nil, 271, 62, nil, nil, nil, nil, nil, nil, 578, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 712, 560, nil, 713, 967, 868, 548, nil, 549, nil, nil, 550, nil, 552, nil, 797, nil, nil, nil, 558, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 443, nil, nil, 664, 658, nil, nil, nil, nil, 76, 79, 80, nil, nil, nil, nil, nil, 606, nil, nil, nil, nil, nil, nil, 825, 747, 547, nil, 551, 833, 563, 565, 566, 879, 569, 570, 880, 573, 576, 289];
      racc_reduce_table = [0, 0, "racc_error", 1, 146, "_reduce_none", 2, 147, "_reduce_2", 0, 148, "_reduce_3", 1, 148, "_reduce_4", 3, 148, "_reduce_5", 2, 148, "_reduce_6", 1, 150, "_reduce_none", 2, 150, "_reduce_8", 3, 153, "_reduce_9", 4, 154, "_reduce_10", 2, 155, "_reduce_11", 0, 159, "_reduce_12", 1, 159, "_reduce_13", 3, 159, "_reduce_14", 2, 159, "_reduce_15", 1, 160, "_reduce_none", 2, 160, "_reduce_17", 0, 171, "_reduce_18", 4, 152, "_reduce_19", 3, 152, "_reduce_20", 3, 152, "_reduce_21", 3, 152, "_reduce_22", 2, 152, "_reduce_23", 3, 152, "_reduce_24", 3, 152, "_reduce_25", 3, 152, "_reduce_26", 3, 152, "_reduce_27", 3, 152, "_reduce_28", 4, 152, "_reduce_29", 1, 152, "_reduce_none", 3, 152, "_reduce_31", 3, 152, "_reduce_32", 3, 152, "_reduce_33", 1, 152, "_reduce_none", 3, 164, "_reduce_35", 3, 164, "_reduce_36", 6, 164, "_reduce_37", 5, 164, "_reduce_38", 5, 164, "_reduce_39", 5, 164, "_reduce_40", 5, 164, "_reduce_41", 3, 164, "_reduce_42", 1, 172, "_reduce_none", 3, 172, "_reduce_44", 1, 172, "_reduce_none", 1, 170, "_reduce_none", 3, 170, "_reduce_47", 3, 170, "_reduce_48", 3, 170, "_reduce_49", 2, 170, "_reduce_50", 1, 170, "_reduce_none", 1, 163, "_reduce_none", 0, 183, "_reduce_53", 3, 181, "_reduce_54", 1, 166, "_reduce_none", 1, 166, "_reduce_none", 1, 185, "_reduce_none", 4, 185, "_reduce_58", 0, 193, "_reduce_59", 4, 190, "_reduce_60", 1, 192, "_reduce_none", 2, 184, "_reduce_62", 3, 184, "_reduce_63", 4, 184, "_reduce_64", 5, 184, "_reduce_65", 4, 184, "_reduce_66", 5, 184, "_reduce_67", 2, 184, "_reduce_68", 2, 184, "_reduce_69", 2, 184, "_reduce_70", 2, 184, "_reduce_71", 2, 184, "_reduce_72", 1, 165, "_reduce_73", 3, 165, "_reduce_74", 1, 198, "_reduce_75", 3, 198, "_reduce_76", 1, 197, "_reduce_none", 2, 197, "_reduce_78", 3, 197, "_reduce_79", 5, 197, "_reduce_80", 2, 197, "_reduce_81", 4, 197, "_reduce_82", 2, 197, "_reduce_83", 4, 197, "_reduce_84", 1, 197, "_reduce_85", 3, 197, "_reduce_86", 1, 201, "_reduce_none", 3, 201, "_reduce_88", 2, 200, "_reduce_89", 3, 200, "_reduce_90", 1, 203, "_reduce_91", 3, 203, "_reduce_92", 1, 202, "_reduce_93", 1, 202, "_reduce_94", 4, 202, "_reduce_95", 3, 202, "_reduce_96", 3, 202, "_reduce_97", 3, 202, "_reduce_98", 3, 202, "_reduce_99", 2, 202, "_reduce_100", 1, 202, "_reduce_101", 1, 167, "_reduce_102", 1, 167, "_reduce_103", 4, 167, "_reduce_104", 3, 167, "_reduce_105", 3, 167, "_reduce_106", 3, 167, "_reduce_107", 3, 167, "_reduce_108", 2, 167, "_reduce_109", 1, 167, "_reduce_110", 1, 206, "_reduce_111", 1, 206, "_reduce_none", 2, 207, "_reduce_113", 1, 207, "_reduce_114", 3, 207, "_reduce_115", 1, 208, "_reduce_none", 1, 208, "_reduce_none", 1, 208, "_reduce_none", 1, 208, "_reduce_none", 1, 208, "_reduce_none", 1, 211, "_reduce_121", 1, 211, "_reduce_none", 1, 161, "_reduce_none", 1, 161, "_reduce_none", 1, 162, "_reduce_125", 0, 214, "_reduce_126", 4, 162, "_reduce_127", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 3, 180, "_reduce_199", 3, 180, "_reduce_200", 6, 180, "_reduce_201", 5, 180, "_reduce_202", 5, 180, "_reduce_203", 5, 180, "_reduce_204", 5, 180, "_reduce_205", 4, 180, "_reduce_206", 3, 180, "_reduce_207", 3, 180, "_reduce_208", 3, 180, "_reduce_209", 3, 180, "_reduce_210", 3, 180, "_reduce_211", 3, 180, "_reduce_212", 3, 180, "_reduce_213", 3, 180, "_reduce_214", 3, 180, "_reduce_215", 4, 180, "_reduce_216", 2, 180, "_reduce_217", 2, 180, "_reduce_218", 3, 180, "_reduce_219", 3, 180, "_reduce_220", 3, 180, "_reduce_221", 3, 180, "_reduce_222", 1, 180, "_reduce_none", 3, 180, "_reduce_224", 3, 180, "_reduce_225", 3, 180, "_reduce_226", 3, 180, "_reduce_227", 3, 180, "_reduce_228", 2, 180, "_reduce_229", 2, 180, "_reduce_230", 3, 180, "_reduce_231", 3, 180, "_reduce_232", 3, 180, "_reduce_233", 3, 180, "_reduce_234", 3, 180, "_reduce_235", 6, 180, "_reduce_236", 1, 180, "_reduce_none", 1, 219, "_reduce_none", 1, 219, "_reduce_none", 1, 219, "_reduce_none", 1, 219, "_reduce_none", 3, 217, "_reduce_242", 3, 217, "_reduce_243", 1, 220, "_reduce_none", 1, 221, "_reduce_none", 2, 221, "_reduce_none", 4, 221, "_reduce_247", 2, 221, "_reduce_248", 1, 215, "_reduce_none", 3, 215, "_reduce_250", 3, 226, "_reduce_251", 0, 227, "_reduce_252", 1, 227, "_reduce_none", 0, 175, "_reduce_254", 1, 175, "_reduce_none", 2, 175, "_reduce_none", 4, 175, "_reduce_257", 2, 175, "_reduce_258", 1, 196, "_reduce_259", 2, 196, "_reduce_260", 2, 196, "_reduce_261", 4, 196, "_reduce_262", 1, 196, "_reduce_263", 0, 230, "_reduce_264", 2, 189, "_reduce_265", 2, 229, "_reduce_266", 2, 228, "_reduce_267", 0, 228, "_reduce_268", 1, 223, "_reduce_269", 2, 223, "_reduce_270", 3, 223, "_reduce_271", 4, 223, "_reduce_272", 1, 169, "_reduce_273", 1, 169, "_reduce_none", 3, 168, "_reduce_275", 4, 168, "_reduce_276", 2, 168, "_reduce_277", 1, 218, "_reduce_none", 1, 218, "_reduce_none", 1, 218, "_reduce_none", 1, 218, "_reduce_none", 1, 218, "_reduce_none", 1, 218, "_reduce_none", 1, 218, "_reduce_none", 1, 218, "_reduce_none", 1, 218, "_reduce_none", 1, 218, "_reduce_none", 1, 218, "_reduce_288", 0, 252, "_reduce_289", 4, 218, "_reduce_290", 0, 253, "_reduce_291", 4, 218, "_reduce_292", 0, 254, "_reduce_293", 4, 218, "_reduce_294", 3, 218, "_reduce_295", 3, 218, "_reduce_296", 2, 218, "_reduce_297", 3, 218, "_reduce_298", 3, 218, "_reduce_299", 1, 218, "_reduce_300", 4, 218, "_reduce_301", 3, 218, "_reduce_302", 1, 218, "_reduce_303", 5, 218, "_reduce_304", 4, 218, "_reduce_305", 3, 218, "_reduce_306", 2, 218, "_reduce_307", 1, 218, "_reduce_none", 2, 218, "_reduce_309", 2, 218, "_reduce_310", 6, 218, "_reduce_311", 6, 218, "_reduce_312", 4, 218, "_reduce_313", 4, 218, "_reduce_314", 5, 218, "_reduce_315", 4, 218, "_reduce_316", 6, 218, "_reduce_317", 0, 255, "_reduce_318", 6, 218, "_reduce_319", 0, 256, "_reduce_320", 7, 218, "_reduce_321", 0, 257, "_reduce_322", 5, 218, "_reduce_323", 0, 258, "_reduce_324", 6, 218, "_reduce_325", 0, 259, "_reduce_326", 0, 260, "_reduce_327", 9, 218, "_reduce_328", 1, 218, "_reduce_329", 1, 218, "_reduce_330", 1, 218, "_reduce_331", 1, 218, "_reduce_332", 1, 174, "_reduce_none", 1, 195, "_reduce_334", 1, 244, "_reduce_none", 1, 244, "_reduce_none", 2, 244, "_reduce_337", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 245, "_reduce_none", 5, 245, "_reduce_341", 1, 157, "_reduce_none", 2, 157, "_reduce_343", 1, 247, "_reduce_none", 1, 247, "_reduce_none", 1, 261, "_reduce_346", 3, 261, "_reduce_347", 1, 264, "_reduce_348", 3, 264, "_reduce_349", 1, 263, "_reduce_none", 4, 263, "_reduce_351", 6, 263, "_reduce_352", 3, 263, "_reduce_353", 5, 263, "_reduce_354", 2, 263, "_reduce_355", 4, 263, "_reduce_356", 1, 263, "_reduce_357", 3, 263, "_reduce_358", 4, 265, "_reduce_359", 2, 265, "_reduce_360", 2, 265, "_reduce_361", 1, 265, "_reduce_362", 2, 270, "_reduce_363", 0, 270, "_reduce_364", 6, 271, "_reduce_365", 8, 271, "_reduce_366", 4, 271, "_reduce_367", 6, 271, "_reduce_368", 4, 271, "_reduce_369", 2, 271, "_reduce_none", 6, 271, "_reduce_371", 2, 271, "_reduce_372", 4, 271, "_reduce_373", 6, 271, "_reduce_374", 2, 271, "_reduce_375", 4, 271, "_reduce_376", 2, 271, "_reduce_377", 4, 271, "_reduce_378", 1, 271, "_reduce_none", 0, 275, "_reduce_380", 1, 275, "_reduce_381", 3, 276, "_reduce_382", 1, 276, "_reduce_383", 4, 276, "_reduce_384", 1, 277, "_reduce_385", 4, 277, "_reduce_386", 1, 278, "_reduce_387", 3, 278, "_reduce_388", 1, 279, "_reduce_389", 1, 279, "_reduce_none", 0, 283, "_reduce_391", 0, 284, "_reduce_392", 4, 243, "_reduce_393", 4, 281, "_reduce_394", 1, 281, "_reduce_395", 0, 287, "_reduce_396", 4, 282, "_reduce_397", 0, 288, "_reduce_398", 4, 282, "_reduce_399", 0, 290, "_reduce_400", 4, 286, "_reduce_401", 2, 186, "_reduce_402", 4, 186, "_reduce_403", 5, 186, "_reduce_404", 5, 186, "_reduce_405", 2, 242, "_reduce_406", 4, 242, "_reduce_407", 4, 242, "_reduce_408", 3, 242, "_reduce_409", 3, 242, "_reduce_410", 3, 242, "_reduce_411", 2, 242, "_reduce_412", 1, 242, "_reduce_413", 4, 242, "_reduce_414", 0, 292, "_reduce_415", 4, 241, "_reduce_416", 0, 293, "_reduce_417", 4, 241, "_reduce_418", 0, 294, "_reduce_419", 3, 191, "_reduce_420", 0, 295, "_reduce_421", 0, 296, "_reduce_422", 4, 289, "_reduce_423", 5, 246, "_reduce_424", 1, 297, "_reduce_425", 1, 297, "_reduce_none", 6, 156, "_reduce_427", 0, 156, "_reduce_428", 1, 298, "_reduce_429", 1, 298, "_reduce_none", 1, 298, "_reduce_none", 2, 299, "_reduce_432", 1, 299, "_reduce_none", 2, 158, "_reduce_434", 1, 158, "_reduce_none", 1, 231, "_reduce_none", 1, 231, "_reduce_none", 1, 231, "_reduce_none", 1, 232, "_reduce_439", 1, 301, "_reduce_440", 2, 301, "_reduce_441", 3, 302, "_reduce_442", 1, 302, "_reduce_443", 1, 302, "_reduce_444", 3, 233, "_reduce_445", 4, 234, "_reduce_446", 3, 235, "_reduce_447", 0, 306, "_reduce_448", 3, 306, "_reduce_449", 1, 307, "_reduce_450", 2, 307, "_reduce_451", 3, 237, "_reduce_452", 0, 309, "_reduce_453", 3, 309, "_reduce_454", 3, 236, "_reduce_455", 3, 238, "_reduce_456", 0, 310, "_reduce_457", 3, 310, "_reduce_458", 0, 311, "_reduce_459", 3, 311, "_reduce_460", 0, 303, "_reduce_461", 2, 303, "_reduce_462", 0, 304, "_reduce_463", 2, 304, "_reduce_464", 0, 305, "_reduce_465", 2, 305, "_reduce_466", 1, 308, "_reduce_467", 2, 308, "_reduce_468", 0, 313, "_reduce_469", 4, 308, "_reduce_470", 1, 312, "_reduce_471", 1, 312, "_reduce_472", 1, 312, "_reduce_473", 1, 312, "_reduce_none", 1, 212, "_reduce_475", 3, 213, "_reduce_476", 1, 300, "_reduce_477", 2, 300, "_reduce_478", 1, 216, "_reduce_479", 1, 216, "_reduce_480", 1, 216, "_reduce_481", 1, 216, "_reduce_482", 1, 204, "_reduce_483", 1, 204, "_reduce_484", 1, 204, "_reduce_485", 1, 204, "_reduce_486", 1, 204, "_reduce_487", 1, 205, "_reduce_488", 1, 205, "_reduce_489", 1, 205, "_reduce_490", 1, 205, "_reduce_491", 1, 205, "_reduce_492", 1, 205, "_reduce_493", 1, 205, "_reduce_494", 1, 239, "_reduce_495", 1, 239, "_reduce_496", 1, 173, "_reduce_497", 1, 173, "_reduce_498", 1, 178, "_reduce_499", 1, 178, "_reduce_500", 0, 314, "_reduce_501", 4, 248, "_reduce_502", 0, 248, "_reduce_503", 3, 250, "_reduce_504", 0, 316, "_reduce_505", 3, 250, "_reduce_506", 4, 315, "_reduce_507", 2, 315, "_reduce_508", 2, 315, "_reduce_509", 1, 315, "_reduce_510", 2, 318, "_reduce_511", 0, 318, "_reduce_512", 6, 285, "_reduce_513", 8, 285, "_reduce_514", 4, 285, "_reduce_515", 6, 285, "_reduce_516", 4, 285, "_reduce_517", 6, 285, "_reduce_518", 2, 285, "_reduce_519", 4, 285, "_reduce_520", 6, 285, "_reduce_521", 2, 285, "_reduce_522", 4, 285, "_reduce_523", 2, 285, "_reduce_524", 4, 285, "_reduce_525", 1, 285, "_reduce_526", 0, 285, "_reduce_527", 1, 280, "_reduce_528", 1, 280, "_reduce_529", 1, 280, "_reduce_530", 1, 280, "_reduce_531", 1, 262, "_reduce_none", 1, 262, "_reduce_533", 1, 320, "_reduce_534", 1, 321, "_reduce_535", 3, 321, "_reduce_536", 1, 272, "_reduce_537", 3, 272, "_reduce_538", 1, 322, "_reduce_539", 2, 323, "_reduce_540", 1, 323, "_reduce_541", 2, 324, "_reduce_542", 1, 324, "_reduce_543", 1, 266, "_reduce_544", 3, 266, "_reduce_545", 1, 317, "_reduce_546", 3, 317, "_reduce_547", 1, 325, "_reduce_none", 1, 325, "_reduce_none", 2, 267, "_reduce_550", 1, 267, "_reduce_551", 3, 326, "_reduce_552", 3, 327, "_reduce_553", 1, 273, "_reduce_554", 3, 273, "_reduce_555", 1, 319, "_reduce_556", 3, 319, "_reduce_557", 1, 328, "_reduce_none", 1, 328, "_reduce_none", 2, 274, "_reduce_560", 1, 274, "_reduce_561", 1, 329, "_reduce_none", 1, 329, "_reduce_none", 2, 269, "_reduce_564", 2, 268, "_reduce_565", 0, 268, "_reduce_566", 1, 251, "_reduce_none", 3, 251, "_reduce_568", 0, 240, "_reduce_569", 2, 240, "_reduce_none", 1, 225, "_reduce_571", 3, 225, "_reduce_572", 3, 330, "_reduce_573", 2, 330, "_reduce_574", 4, 330, "_reduce_575", 2, 330, "_reduce_576", 1, 194, "_reduce_none", 1, 194, "_reduce_none", 1, 194, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 291, "_reduce_none", 1, 291, "_reduce_none", 1, 291, "_reduce_none", 1, 187, "_reduce_none", 1, 187, "_reduce_none", 1, 177, "_reduce_589", 1, 177, "_reduce_590", 0, 149, "_reduce_none", 1, 149, "_reduce_none", 0, 179, "_reduce_none", 1, 179, "_reduce_none", 2, 199, "_reduce_595", 2, 176, "_reduce_596", 0, 224, "_reduce_none", 1, 224, "_reduce_none", 1, 224, "_reduce_none", 1, 249, "_reduce_600", 1, 249, "_reduce_none", 1, 151, "_reduce_none", 2, 151, "_reduce_none", 0, 222, "_reduce_604"];
      racc_reduce_n = 605;
      racc_shift_n = 1032;
      racc_token_table = $hash(false, 0, "error", 1, "kCLASS", 2, "kMODULE", 3, "kDEF", 4, "kUNDEF", 5, "kBEGIN", 6, "kRESCUE", 7, "kENSURE", 8, "kEND", 9, "kIF", 10, "kUNLESS", 11, "kTHEN", 12, "kELSIF", 13, "kELSE", 14, "kCASE", 15, "kWHEN", 16, "kWHILE", 17, "kUNTIL", 18, "kFOR", 19, "kBREAK", 20, "kNEXT", 21, "kREDO", 22, "kRETRY", 23, "kIN", 24, "kDO", 25, "kDO_COND", 26, "kDO_BLOCK", 27, "kDO_LAMBDA", 28, "kRETURN", 29, "kYIELD", 30, "kSUPER", 31, "kSELF", 32, "kNIL", 33, "kTRUE", 34, "kFALSE", 35, "kAND", 36, "kOR", 37, "kNOT", 38, "kIF_MOD", 39, "kUNLESS_MOD", 40, "kWHILE_MOD", 41, "kUNTIL_MOD", 42, "kRESCUE_MOD", 43, "kALIAS", 44, "kDEFINED", 45, "klBEGIN", 46, "klEND", 47, "k__LINE__", 48, "k__FILE__", 49, "k__ENCODING__", 50, "tIDENTIFIER", 51, "tFID", 52, "tGVAR", 53, "tIVAR", 54, "tCONSTANT", 55, "tLABEL", 56, "tCVAR", 57, "tNTH_REF", 58, "tBACK_REF", 59, "tSTRING_CONTENT", 60, "tINTEGER", 61, "tFLOAT", 62, "tUPLUS", 63, "tUMINUS", 64, "tUNARY_NUM", 65, "tPOW", 66, "tCMP", 67, "tEQ", 68, "tEQQ", 69, "tNEQ", 70, "tGEQ", 71, "tLEQ", 72, "tANDOP", 73, "tOROP", 74, "tMATCH", 75, "tNMATCH", 76, "tDOT", 77, "tDOT2", 78, "tDOT3", 79, "tAREF", 80, "tASET", 81, "tLSHFT", 82, "tRSHFT", 83, "tCOLON2", 84, "tCOLON3", 85, "tOP_ASGN", 86, "tASSOC", 87, "tLPAREN", 88, "tLPAREN2", 89, "tRPAREN", 90, "tLPAREN_ARG", 91, "tLBRACK", 92, "tLBRACK2", 93, "tRBRACK", 94, "tLBRACE", 95, "tLBRACE_ARG", 96, "tSTAR", 97, "tSTAR2", 98, "tAMPER", 99, "tAMPER2", 100, "tTILDE", 101, "tPERCENT", 102, "tDIVIDE", 103, "tDSTAR", 104, "tPLUS", 105, "tMINUS", 106, "tLT", 107, "tGT", 108, "tPIPE", 109, "tBANG", 110, "tCARET", 111, "tLCURLY", 112, "tRCURLY", 113, "tBACK_REF2", 114, "tSYMBEG", 115, "tSTRING_BEG", 116, "tXSTRING_BEG", 117, "tREGEXP_BEG", 118, "tREGEXP_OPT", 119, "tWORDS_BEG", 120, "tQWORDS_BEG", 121, "tSYMBOLS_BEG", 122, "tQSYMBOLS_BEG", 123, "tSTRING_DBEG", 124, "tSTRING_DVAR", 125, "tSTRING_END", 126, "tSTRING_DEND", 127, "tSTRING", 128, "tSYMBOL", 129, "tNL", 130, "tEH", 131, "tCOLON", 132, "tCOMMA", 133, "tSPACE", 134, "tSEMI", 135, "tLAMBDA", 136, "tLAMBEG", 137, "tCHARACTER", 138, "tRATIONAL", 139, "tIMAGINARY", 140, "tLABEL_END", 141, "tANDDOT", 142, "tEQL", 143, "tLOWEST", 144);
      racc_nt_base = 145;
      racc_use_result_var = true;
      Opal.const_set($nesting[0], 'Racc_arg', [racc_action_table, racc_action_check, racc_action_default, racc_action_pointer, racc_goto_table, racc_goto_check, racc_goto_default, racc_goto_pointer, racc_nt_base, racc_reduce_table, racc_token_table, racc_shift_n, racc_reduce_n, racc_use_result_var]);
      Opal.const_set($nesting[0], 'Racc_token_to_s_table', ["$end", "error", "kCLASS", "kMODULE", "kDEF", "kUNDEF", "kBEGIN", "kRESCUE", "kENSURE", "kEND", "kIF", "kUNLESS", "kTHEN", "kELSIF", "kELSE", "kCASE", "kWHEN", "kWHILE", "kUNTIL", "kFOR", "kBREAK", "kNEXT", "kREDO", "kRETRY", "kIN", "kDO", "kDO_COND", "kDO_BLOCK", "kDO_LAMBDA", "kRETURN", "kYIELD", "kSUPER", "kSELF", "kNIL", "kTRUE", "kFALSE", "kAND", "kOR", "kNOT", "kIF_MOD", "kUNLESS_MOD", "kWHILE_MOD", "kUNTIL_MOD", "kRESCUE_MOD", "kALIAS", "kDEFINED", "klBEGIN", "klEND", "k__LINE__", "k__FILE__", "k__ENCODING__", "tIDENTIFIER", "tFID", "tGVAR", "tIVAR", "tCONSTANT", "tLABEL", "tCVAR", "tNTH_REF", "tBACK_REF", "tSTRING_CONTENT", "tINTEGER", "tFLOAT", "tUPLUS", "tUMINUS", "tUNARY_NUM", "tPOW", "tCMP", "tEQ", "tEQQ", "tNEQ", "tGEQ", "tLEQ", "tANDOP", "tOROP", "tMATCH", "tNMATCH", "tDOT", "tDOT2", "tDOT3", "tAREF", "tASET", "tLSHFT", "tRSHFT", "tCOLON2", "tCOLON3", "tOP_ASGN", "tASSOC", "tLPAREN", "tLPAREN2", "tRPAREN", "tLPAREN_ARG", "tLBRACK", "tLBRACK2", "tRBRACK", "tLBRACE", "tLBRACE_ARG", "tSTAR", "tSTAR2", "tAMPER", "tAMPER2", "tTILDE", "tPERCENT", "tDIVIDE", "tDSTAR", "tPLUS", "tMINUS", "tLT", "tGT", "tPIPE", "tBANG", "tCARET", "tLCURLY", "tRCURLY", "tBACK_REF2", "tSYMBEG", "tSTRING_BEG", "tXSTRING_BEG", "tREGEXP_BEG", "tREGEXP_OPT", "tWORDS_BEG", "tQWORDS_BEG", "tSYMBOLS_BEG", "tQSYMBOLS_BEG", "tSTRING_DBEG", "tSTRING_DVAR", "tSTRING_END", "tSTRING_DEND", "tSTRING", "tSYMBOL", "tNL", "tEH", "tCOLON", "tCOMMA", "tSPACE", "tSEMI", "tLAMBDA", "tLAMBEG", "tCHARACTER", "tRATIONAL", "tIMAGINARY", "tLABEL_END", "tANDDOT", "tEQL", "tLOWEST", "$start", "program", "top_compstmt", "top_stmts", "opt_terms", "top_stmt", "terms", "stmt", "begin_block", "bodystmt", "compstmt", "opt_rescue", "opt_else", "opt_ensure", "stmts", "stmt_or_begin", "fitem", "undef_list", "expr_value", "command_asgn", "mlhs", "command_call", "lhs", "mrhs", "mrhs_arg", "expr", "@1", "command_rhs", "var_lhs", "primary_value", "opt_call_args", "rbracket", "call_op", "backref", "opt_nl", "arg", "expr_value_do", "do", "@2", "command", "block_command", "block_call", "dot_or_colon", "operation2", "command_args", "cmd_brace_block", "brace_body", "fcall", "@3", "operation", "k_return", "call_args", "mlhs_basic", "mlhs_inner", "rparen", "mlhs_head", "mlhs_item", "mlhs_node", "mlhs_post", "user_variable", "keyword_variable", "cname", "cpath", "fname", "op", "reswords", "fsym", "symbol", "dsym", "@4", "arg_rhs", "simple_numeric", "rel_expr", "primary", "relop", "arg_value", "aref_args", "none", "args", "trailer", "assocs", "paren_args", "opt_paren_args", "opt_block_arg", "block_arg", "@5", "literal", "strings", "xstring", "regexp", "words", "qwords", "symbols", "qsymbols", "var_ref", "assoc_list", "brace_block", "method_call", "lambda", "then", "if_tail", "case_body", "for_var", "superclass", "term", "f_arglist", "singleton", "@6", "@7", "@8", "@9", "@10", "@11", "@12", "@13", "@14", "f_marg", "f_norm_arg", "f_margs", "f_marg_list", "block_args_tail", "f_block_kwarg", "f_kwrest", "opt_f_block_arg", "f_block_arg", "opt_block_args_tail", "block_param", "f_arg", "f_block_optarg", "f_rest_arg", "opt_block_param", "block_param_def", "opt_bv_decl", "bv_decls", "bvar", "f_bad_arg", "f_larglist", "lambda_body", "@15", "@16", "f_args", "do_block", "@17", "@18", "do_body", "@19", "operation3", "@20", "@21", "@22", "@23", "@24", "cases", "exc_list", "exc_var", "numeric", "string", "string1", "string_contents", "xstring_contents", "regexp_contents", "word_list", "word", "string_content", "symbol_list", "qword_list", "qsym_list", "string_dvar", "@25", "@26", "args_tail", "@27", "f_kwarg", "opt_args_tail", "f_optarg", "f_arg_asgn", "f_arg_item", "f_label", "f_kw", "f_block_kw", "kwrest_mark", "f_opt", "f_block_opt", "restarg_mark", "blkarg_mark", "assoc"]);
      Opal.const_set($nesting[0], 'Racc_debug_parser', false);
      
      Opal.def(self, '$_reduce_2', $Ruby25__reduce_2$11 = function $$_reduce_2(val, _values, result) {
        var self = this;

        
        result = self.builder.$compstmt(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_2$11.$$arity = 3);
      
      Opal.def(self, '$_reduce_3', $Ruby25__reduce_3$12 = function $$_reduce_3(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_3$12.$$arity = 3);
      
      Opal.def(self, '$_reduce_4', $Ruby25__reduce_4$13 = function $$_reduce_4(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_4$13.$$arity = 3);
      
      Opal.def(self, '$_reduce_5', $Ruby25__reduce_5$14 = function $$_reduce_5(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_5$14.$$arity = 3);
      
      Opal.def(self, '$_reduce_6', $Ruby25__reduce_6$15 = function $$_reduce_6(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](1)];
        return result;
      }, $Ruby25__reduce_6$15.$$arity = 3);
      
      Opal.def(self, '$_reduce_8', $Ruby25__reduce_8$16 = function $$_reduce_8(val, _values, result) {
        var self = this;

        
        result = $send(self.builder, 'preexe', [val['$[]'](0)].concat(Opal.to_a(val['$[]'](1))));
        return result;
      }, $Ruby25__reduce_8$16.$$arity = 3);
      
      Opal.def(self, '$_reduce_9', $Ruby25__reduce_9$17 = function $$_reduce_9(val, _values, result) {
        var self = this;

        
        result = val;
        return result;
      }, $Ruby25__reduce_9$17.$$arity = 3);
      
      Opal.def(self, '$_reduce_10', $Ruby25__reduce_10$18 = function $$_reduce_10(val, _values, result) {
        var $a, $b, self = this, rescue_bodies = nil, else_t = nil, else_ = nil, ensure_t = nil, ensure_ = nil;

        
        rescue_bodies = val['$[]'](1);
        $b = val['$[]'](2), $a = Opal.to_ary($b), (else_t = ($a[0] == null ? nil : $a[0])), (else_ = ($a[1] == null ? nil : $a[1])), $b;
        $b = val['$[]'](3), $a = Opal.to_ary($b), (ensure_t = ($a[0] == null ? nil : $a[0])), (ensure_ = ($a[1] == null ? nil : $a[1])), $b;
        if ($truthy(($truthy($a = rescue_bodies['$empty?']()) ? else_['$nil?']()['$!']() : $a))) {
          self.$diagnostic("warning", "useless_else", nil, else_t)};
        result = self.builder.$begin_body(val['$[]'](0), rescue_bodies, else_t, else_, ensure_t, ensure_);
        return result;
      }, $Ruby25__reduce_10$18.$$arity = 3);
      
      Opal.def(self, '$_reduce_11', $Ruby25__reduce_11$19 = function $$_reduce_11(val, _values, result) {
        var self = this;

        
        result = self.builder.$compstmt(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_11$19.$$arity = 3);
      
      Opal.def(self, '$_reduce_12', $Ruby25__reduce_12$20 = function $$_reduce_12(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_12$20.$$arity = 3);
      
      Opal.def(self, '$_reduce_13', $Ruby25__reduce_13$21 = function $$_reduce_13(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_13$21.$$arity = 3);
      
      Opal.def(self, '$_reduce_14', $Ruby25__reduce_14$22 = function $$_reduce_14(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_14$22.$$arity = 3);
      
      Opal.def(self, '$_reduce_15', $Ruby25__reduce_15$23 = function $$_reduce_15(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](1)];
        return result;
      }, $Ruby25__reduce_15$23.$$arity = 3);
      
      Opal.def(self, '$_reduce_17', $Ruby25__reduce_17$24 = function $$_reduce_17(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "begin_in_method", nil, val['$[]'](0));
        return result;
      }, $Ruby25__reduce_17$24.$$arity = 3);
      
      Opal.def(self, '$_reduce_18', $Ruby25__reduce_18$25 = function $$_reduce_18(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_fname"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby25__reduce_18$25.$$arity = 3);
      
      Opal.def(self, '$_reduce_19', $Ruby25__reduce_19$26 = function $$_reduce_19(val, _values, result) {
        var self = this;

        
        result = self.builder.$alias(val['$[]'](0), val['$[]'](1), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_19$26.$$arity = 3);
      
      Opal.def(self, '$_reduce_20', $Ruby25__reduce_20$27 = function $$_reduce_20(val, _values, result) {
        var self = this;

        
        result = self.builder.$alias(val['$[]'](0), self.builder.$gvar(val['$[]'](1)), self.builder.$gvar(val['$[]'](2)));
        return result;
      }, $Ruby25__reduce_20$27.$$arity = 3);
      
      Opal.def(self, '$_reduce_21', $Ruby25__reduce_21$28 = function $$_reduce_21(val, _values, result) {
        var self = this;

        
        result = self.builder.$alias(val['$[]'](0), self.builder.$gvar(val['$[]'](1)), self.builder.$back_ref(val['$[]'](2)));
        return result;
      }, $Ruby25__reduce_21$28.$$arity = 3);
      
      Opal.def(self, '$_reduce_22', $Ruby25__reduce_22$29 = function $$_reduce_22(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "nth_ref_alias", nil, val['$[]'](2));
        return result;
      }, $Ruby25__reduce_22$29.$$arity = 3);
      
      Opal.def(self, '$_reduce_23', $Ruby25__reduce_23$30 = function $$_reduce_23(val, _values, result) {
        var self = this;

        
        result = self.builder.$undef_method(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby25__reduce_23$30.$$arity = 3);
      
      Opal.def(self, '$_reduce_24', $Ruby25__reduce_24$31 = function $$_reduce_24(val, _values, result) {
        var self = this;

        
        result = self.builder.$condition_mod(val['$[]'](0), nil, val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_24$31.$$arity = 3);
      
      Opal.def(self, '$_reduce_25', $Ruby25__reduce_25$32 = function $$_reduce_25(val, _values, result) {
        var self = this;

        
        result = self.builder.$condition_mod(nil, val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_25$32.$$arity = 3);
      
      Opal.def(self, '$_reduce_26', $Ruby25__reduce_26$33 = function $$_reduce_26(val, _values, result) {
        var self = this;

        
        result = self.builder.$loop_mod("while", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_26$33.$$arity = 3);
      
      Opal.def(self, '$_reduce_27', $Ruby25__reduce_27$34 = function $$_reduce_27(val, _values, result) {
        var self = this;

        
        result = self.builder.$loop_mod("until", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_27$34.$$arity = 3);
      
      Opal.def(self, '$_reduce_28', $Ruby25__reduce_28$35 = function $$_reduce_28(val, _values, result) {
        var self = this, rescue_body = nil;

        
        rescue_body = self.builder.$rescue_body(val['$[]'](1), nil, nil, nil, nil, val['$[]'](2));
        result = self.builder.$begin_body(val['$[]'](0), [rescue_body]);
        return result;
      }, $Ruby25__reduce_28$35.$$arity = 3);
      
      Opal.def(self, '$_reduce_29', $Ruby25__reduce_29$36 = function $$_reduce_29(val, _values, result) {
        var self = this;

        
        result = self.builder.$postexe(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_29$36.$$arity = 3);
      
      Opal.def(self, '$_reduce_31', $Ruby25__reduce_31$37 = function $$_reduce_31(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_31$37.$$arity = 3);
      
      Opal.def(self, '$_reduce_32', $Ruby25__reduce_32$38 = function $$_reduce_32(val, _values, result) {
        var self = this;

        
        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), self.builder.$array(nil, val['$[]'](2), nil));
        return result;
      }, $Ruby25__reduce_32$38.$$arity = 3);
      
      Opal.def(self, '$_reduce_33', $Ruby25__reduce_33$39 = function $$_reduce_33(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_33$39.$$arity = 3);
      
      Opal.def(self, '$_reduce_35', $Ruby25__reduce_35$40 = function $$_reduce_35(val, _values, result) {
        var self = this;

        
        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_35$40.$$arity = 3);
      
      Opal.def(self, '$_reduce_36', $Ruby25__reduce_36$41 = function $$_reduce_36(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_36$41.$$arity = 3);
      
      Opal.def(self, '$_reduce_37', $Ruby25__reduce_37$42 = function $$_reduce_37(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$index(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3)), val['$[]'](4), val['$[]'](5));
        return result;
      }, $Ruby25__reduce_37$42.$$arity = 3);
      
      Opal.def(self, '$_reduce_38', $Ruby25__reduce_38$43 = function $$_reduce_38(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      }, $Ruby25__reduce_38$43.$$arity = 3);
      
      Opal.def(self, '$_reduce_39', $Ruby25__reduce_39$44 = function $$_reduce_39(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      }, $Ruby25__reduce_39$44.$$arity = 3);
      
      Opal.def(self, '$_reduce_40', $Ruby25__reduce_40$45 = function $$_reduce_40(val, _values, result) {
        var self = this, const$ = nil;

        
        const$ = self.builder.$const_op_assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        result = self.builder.$op_assign(const$, val['$[]'](3), val['$[]'](4));
        return result;
      }, $Ruby25__reduce_40$45.$$arity = 3);
      
      Opal.def(self, '$_reduce_41', $Ruby25__reduce_41$46 = function $$_reduce_41(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      }, $Ruby25__reduce_41$46.$$arity = 3);
      
      Opal.def(self, '$_reduce_42', $Ruby25__reduce_42$47 = function $$_reduce_42(val, _values, result) {
        var self = this;

        
        self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_42$47.$$arity = 3);
      
      Opal.def(self, '$_reduce_44', $Ruby25__reduce_44$48 = function $$_reduce_44(val, _values, result) {
        var self = this, rescue_body = nil;

        
        rescue_body = self.builder.$rescue_body(val['$[]'](1), nil, nil, nil, nil, val['$[]'](2));
        result = self.builder.$begin_body(val['$[]'](0), [rescue_body]);
        return result;
      }, $Ruby25__reduce_44$48.$$arity = 3);
      
      Opal.def(self, '$_reduce_47', $Ruby25__reduce_47$49 = function $$_reduce_47(val, _values, result) {
        var self = this;

        
        result = self.builder.$logical_op("and", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_47$49.$$arity = 3);
      
      Opal.def(self, '$_reduce_48', $Ruby25__reduce_48$50 = function $$_reduce_48(val, _values, result) {
        var self = this;

        
        result = self.builder.$logical_op("or", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_48$50.$$arity = 3);
      
      Opal.def(self, '$_reduce_49', $Ruby25__reduce_49$51 = function $$_reduce_49(val, _values, result) {
        var self = this;

        
        result = self.builder.$not_op(val['$[]'](0), nil, val['$[]'](2), nil);
        return result;
      }, $Ruby25__reduce_49$51.$$arity = 3);
      
      Opal.def(self, '$_reduce_50', $Ruby25__reduce_50$52 = function $$_reduce_50(val, _values, result) {
        var self = this;

        
        result = self.builder.$not_op(val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, $Ruby25__reduce_50$52.$$arity = 3);
      
      Opal.def(self, '$_reduce_53', $Ruby25__reduce_53$53 = function $$_reduce_53(val, _values, result) {
        var self = this;

        
        self.lexer.$cond().$push(true);
        return result;
      }, $Ruby25__reduce_53$53.$$arity = 3);
      
      Opal.def(self, '$_reduce_54', $Ruby25__reduce_54$54 = function $$_reduce_54(val, _values, result) {
        var self = this;

        
        self.lexer.$cond().$pop();
        result = [val['$[]'](1), val['$[]'](2)];
        return result;
      }, $Ruby25__reduce_54$54.$$arity = 3);
      
      Opal.def(self, '$_reduce_58', $Ruby25__reduce_58$55 = function $$_reduce_58(val, _values, result) {
        var self = this;

        
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        return result;
      }, $Ruby25__reduce_58$55.$$arity = 3);
      
      Opal.def(self, '$_reduce_59', $Ruby25__reduce_59$56 = function $$_reduce_59(val, _values, result) {
        var self = this;

        
        self.context.$push("block");
        return result;
      }, $Ruby25__reduce_59$56.$$arity = 3);
      
      Opal.def(self, '$_reduce_60', $Ruby25__reduce_60$57 = function $$_reduce_60(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)].concat(Opal.to_a(val['$[]'](2))).concat([val['$[]'](3)]);
        self.context.$pop();
        return result;
      }, $Ruby25__reduce_60$57.$$arity = 3);
      
      Opal.def(self, '$_reduce_62', $Ruby25__reduce_62$58 = function $$_reduce_62(val, _values, result) {
        var self = this;

        
        result = self.builder.$call_method(nil, nil, val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, $Ruby25__reduce_62$58.$$arity = 3);
      
      Opal.def(self, '$_reduce_63', $Ruby25__reduce_63$59 = function $$_reduce_63(val, _values, result) {
        var $a, $b, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        
        method_call = self.builder.$call_method(nil, nil, val['$[]'](0), nil, val['$[]'](1), nil);
        $b = val['$[]'](2), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      }, $Ruby25__reduce_63$59.$$arity = 3);
      
      Opal.def(self, '$_reduce_64', $Ruby25__reduce_64$60 = function $$_reduce_64(val, _values, result) {
        var self = this;

        
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        return result;
      }, $Ruby25__reduce_64$60.$$arity = 3);
      
      Opal.def(self, '$_reduce_65', $Ruby25__reduce_65$61 = function $$_reduce_65(val, _values, result) {
        var $a, $b, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        
        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        $b = val['$[]'](4), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      }, $Ruby25__reduce_65$61.$$arity = 3);
      
      Opal.def(self, '$_reduce_66', $Ruby25__reduce_66$62 = function $$_reduce_66(val, _values, result) {
        var self = this;

        
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        return result;
      }, $Ruby25__reduce_66$62.$$arity = 3);
      
      Opal.def(self, '$_reduce_67', $Ruby25__reduce_67$63 = function $$_reduce_67(val, _values, result) {
        var $a, $b, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        
        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        $b = val['$[]'](4), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      }, $Ruby25__reduce_67$63.$$arity = 3);
      
      Opal.def(self, '$_reduce_68', $Ruby25__reduce_68$64 = function $$_reduce_68(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("super", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, $Ruby25__reduce_68$64.$$arity = 3);
      
      Opal.def(self, '$_reduce_69', $Ruby25__reduce_69$65 = function $$_reduce_69(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("yield", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, $Ruby25__reduce_69$65.$$arity = 3);
      
      Opal.def(self, '$_reduce_70', $Ruby25__reduce_70$66 = function $$_reduce_70(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("return", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, $Ruby25__reduce_70$66.$$arity = 3);
      
      Opal.def(self, '$_reduce_71', $Ruby25__reduce_71$67 = function $$_reduce_71(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("break", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, $Ruby25__reduce_71$67.$$arity = 3);
      
      Opal.def(self, '$_reduce_72', $Ruby25__reduce_72$68 = function $$_reduce_72(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("next", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, $Ruby25__reduce_72$68.$$arity = 3);
      
      Opal.def(self, '$_reduce_73', $Ruby25__reduce_73$69 = function $$_reduce_73(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_lhs(nil, val['$[]'](0), nil);
        return result;
      }, $Ruby25__reduce_73$69.$$arity = 3);
      
      Opal.def(self, '$_reduce_74', $Ruby25__reduce_74$70 = function $$_reduce_74(val, _values, result) {
        var self = this;

        
        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_74$70.$$arity = 3);
      
      Opal.def(self, '$_reduce_75', $Ruby25__reduce_75$71 = function $$_reduce_75(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_lhs(nil, val['$[]'](0), nil);
        return result;
      }, $Ruby25__reduce_75$71.$$arity = 3);
      
      Opal.def(self, '$_reduce_76', $Ruby25__reduce_76$72 = function $$_reduce_76(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_lhs(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_76$72.$$arity = 3);
      
      Opal.def(self, '$_reduce_78', $Ruby25__reduce_78$73 = function $$_reduce_78(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(val['$[]'](1));
        return result;
      }, $Ruby25__reduce_78$73.$$arity = 3);
      
      Opal.def(self, '$_reduce_79', $Ruby25__reduce_79$74 = function $$_reduce_79(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1), val['$[]'](2)));
        return result;
      }, $Ruby25__reduce_79$74.$$arity = 3);
      
      Opal.def(self, '$_reduce_80', $Ruby25__reduce_80$75 = function $$_reduce_80(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1), val['$[]'](2))).$concat(val['$[]'](4));
        return result;
      }, $Ruby25__reduce_80$75.$$arity = 3);
      
      Opal.def(self, '$_reduce_81', $Ruby25__reduce_81$76 = function $$_reduce_81(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1)));
        return result;
      }, $Ruby25__reduce_81$76.$$arity = 3);
      
      Opal.def(self, '$_reduce_82', $Ruby25__reduce_82$77 = function $$_reduce_82(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1))).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_82$77.$$arity = 3);
      
      Opal.def(self, '$_reduce_83', $Ruby25__reduce_83$78 = function $$_reduce_83(val, _values, result) {
        var self = this;

        
        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      }, $Ruby25__reduce_83$78.$$arity = 3);
      
      Opal.def(self, '$_reduce_84', $Ruby25__reduce_84$79 = function $$_reduce_84(val, _values, result) {
        var self = this;

        
        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))].concat(Opal.to_a(val['$[]'](3)));
        return result;
      }, $Ruby25__reduce_84$79.$$arity = 3);
      
      Opal.def(self, '$_reduce_85', $Ruby25__reduce_85$80 = function $$_reduce_85(val, _values, result) {
        var self = this;

        
        result = [self.builder.$splat(val['$[]'](0))];
        return result;
      }, $Ruby25__reduce_85$80.$$arity = 3);
      
      Opal.def(self, '$_reduce_86', $Ruby25__reduce_86$81 = function $$_reduce_86(val, _values, result) {
        var self = this;

        
        result = [self.builder.$splat(val['$[]'](0))].concat(Opal.to_a(val['$[]'](2)));
        return result;
      }, $Ruby25__reduce_86$81.$$arity = 3);
      
      Opal.def(self, '$_reduce_88', $Ruby25__reduce_88$82 = function $$_reduce_88(val, _values, result) {
        var self = this;

        
        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_88$82.$$arity = 3);
      
      Opal.def(self, '$_reduce_89', $Ruby25__reduce_89$83 = function $$_reduce_89(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_89$83.$$arity = 3);
      
      Opal.def(self, '$_reduce_90', $Ruby25__reduce_90$84 = function $$_reduce_90(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, $Ruby25__reduce_90$84.$$arity = 3);
      
      Opal.def(self, '$_reduce_91', $Ruby25__reduce_91$85 = function $$_reduce_91(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_91$85.$$arity = 3);
      
      Opal.def(self, '$_reduce_92', $Ruby25__reduce_92$86 = function $$_reduce_92(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_92$86.$$arity = 3);
      
      Opal.def(self, '$_reduce_93', $Ruby25__reduce_93$87 = function $$_reduce_93(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_93$87.$$arity = 3);
      
      Opal.def(self, '$_reduce_94', $Ruby25__reduce_94$88 = function $$_reduce_94(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_94$88.$$arity = 3);
      
      Opal.def(self, '$_reduce_95', $Ruby25__reduce_95$89 = function $$_reduce_95(val, _values, result) {
        var self = this;

        
        result = self.builder.$index_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_95$89.$$arity = 3);
      
      Opal.def(self, '$_reduce_96', $Ruby25__reduce_96$90 = function $$_reduce_96(val, _values, result) {
        var self = this;

        
        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_96$90.$$arity = 3);
      
      Opal.def(self, '$_reduce_97', $Ruby25__reduce_97$91 = function $$_reduce_97(val, _values, result) {
        var self = this;

        
        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_97$91.$$arity = 3);
      
      Opal.def(self, '$_reduce_98', $Ruby25__reduce_98$92 = function $$_reduce_98(val, _values, result) {
        var self = this;

        
        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_98$92.$$arity = 3);
      
      Opal.def(self, '$_reduce_99', $Ruby25__reduce_99$93 = function $$_reduce_99(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        return result;
      }, $Ruby25__reduce_99$93.$$arity = 3);
      
      Opal.def(self, '$_reduce_100', $Ruby25__reduce_100$94 = function $$_reduce_100(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(self.builder.$const_global(val['$[]'](0), val['$[]'](1)));
        return result;
      }, $Ruby25__reduce_100$94.$$arity = 3);
      
      Opal.def(self, '$_reduce_101', $Ruby25__reduce_101$95 = function $$_reduce_101(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_101$95.$$arity = 3);
      
      Opal.def(self, '$_reduce_102', $Ruby25__reduce_102$96 = function $$_reduce_102(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_102$96.$$arity = 3);
      
      Opal.def(self, '$_reduce_103', $Ruby25__reduce_103$97 = function $$_reduce_103(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_103$97.$$arity = 3);
      
      Opal.def(self, '$_reduce_104', $Ruby25__reduce_104$98 = function $$_reduce_104(val, _values, result) {
        var self = this;

        
        result = self.builder.$index_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_104$98.$$arity = 3);
      
      Opal.def(self, '$_reduce_105', $Ruby25__reduce_105$99 = function $$_reduce_105(val, _values, result) {
        var self = this;

        
        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_105$99.$$arity = 3);
      
      Opal.def(self, '$_reduce_106', $Ruby25__reduce_106$100 = function $$_reduce_106(val, _values, result) {
        var self = this;

        
        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_106$100.$$arity = 3);
      
      Opal.def(self, '$_reduce_107', $Ruby25__reduce_107$101 = function $$_reduce_107(val, _values, result) {
        var self = this;

        
        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_107$101.$$arity = 3);
      
      Opal.def(self, '$_reduce_108', $Ruby25__reduce_108$102 = function $$_reduce_108(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        return result;
      }, $Ruby25__reduce_108$102.$$arity = 3);
      
      Opal.def(self, '$_reduce_109', $Ruby25__reduce_109$103 = function $$_reduce_109(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(self.builder.$const_global(val['$[]'](0), val['$[]'](1)));
        return result;
      }, $Ruby25__reduce_109$103.$$arity = 3);
      
      Opal.def(self, '$_reduce_110', $Ruby25__reduce_110$104 = function $$_reduce_110(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_110$104.$$arity = 3);
      
      Opal.def(self, '$_reduce_111', $Ruby25__reduce_111$105 = function $$_reduce_111(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "module_name_const", nil, val['$[]'](0));
        return result;
      }, $Ruby25__reduce_111$105.$$arity = 3);
      
      Opal.def(self, '$_reduce_113', $Ruby25__reduce_113$106 = function $$_reduce_113(val, _values, result) {
        var self = this;

        
        result = self.builder.$const_global(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby25__reduce_113$106.$$arity = 3);
      
      Opal.def(self, '$_reduce_114', $Ruby25__reduce_114$107 = function $$_reduce_114(val, _values, result) {
        var self = this;

        
        result = self.builder.$const(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_114$107.$$arity = 3);
      
      Opal.def(self, '$_reduce_115', $Ruby25__reduce_115$108 = function $$_reduce_115(val, _values, result) {
        var self = this;

        
        result = self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_115$108.$$arity = 3);
      
      Opal.def(self, '$_reduce_121', $Ruby25__reduce_121$109 = function $$_reduce_121(val, _values, result) {
        var self = this;

        
        result = self.builder.$symbol(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_121$109.$$arity = 3);
      
      Opal.def(self, '$_reduce_125', $Ruby25__reduce_125$110 = function $$_reduce_125(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_125$110.$$arity = 3);
      
      Opal.def(self, '$_reduce_126', $Ruby25__reduce_126$111 = function $$_reduce_126(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_fname"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby25__reduce_126$111.$$arity = 3);
      
      Opal.def(self, '$_reduce_127', $Ruby25__reduce_127$112 = function $$_reduce_127(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](3));
        return result;
      }, $Ruby25__reduce_127$112.$$arity = 3);
      
      Opal.def(self, '$_reduce_199', $Ruby25__reduce_199$113 = function $$_reduce_199(val, _values, result) {
        var self = this;

        
        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_199$113.$$arity = 3);
      
      Opal.def(self, '$_reduce_200', $Ruby25__reduce_200$114 = function $$_reduce_200(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_200$114.$$arity = 3);
      
      Opal.def(self, '$_reduce_201', $Ruby25__reduce_201$115 = function $$_reduce_201(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$index(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3)), val['$[]'](4), val['$[]'](5));
        return result;
      }, $Ruby25__reduce_201$115.$$arity = 3);
      
      Opal.def(self, '$_reduce_202', $Ruby25__reduce_202$116 = function $$_reduce_202(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      }, $Ruby25__reduce_202$116.$$arity = 3);
      
      Opal.def(self, '$_reduce_203', $Ruby25__reduce_203$117 = function $$_reduce_203(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      }, $Ruby25__reduce_203$117.$$arity = 3);
      
      Opal.def(self, '$_reduce_204', $Ruby25__reduce_204$118 = function $$_reduce_204(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      }, $Ruby25__reduce_204$118.$$arity = 3);
      
      Opal.def(self, '$_reduce_205', $Ruby25__reduce_205$119 = function $$_reduce_205(val, _values, result) {
        var self = this, const$ = nil;

        
        const$ = self.builder.$const_op_assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        result = self.builder.$op_assign(const$, val['$[]'](3), val['$[]'](4));
        return result;
      }, $Ruby25__reduce_205$119.$$arity = 3);
      
      Opal.def(self, '$_reduce_206', $Ruby25__reduce_206$120 = function $$_reduce_206(val, _values, result) {
        var self = this, const$ = nil;

        
        const$ = self.builder.$const_op_assignable(self.builder.$const_global(val['$[]'](0), val['$[]'](1)));
        result = self.builder.$op_assign(const$, val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_206$120.$$arity = 3);
      
      Opal.def(self, '$_reduce_207', $Ruby25__reduce_207$121 = function $$_reduce_207(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_207$121.$$arity = 3);
      
      Opal.def(self, '$_reduce_208', $Ruby25__reduce_208$122 = function $$_reduce_208(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_inclusive(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_208$122.$$arity = 3);
      
      Opal.def(self, '$_reduce_209', $Ruby25__reduce_209$123 = function $$_reduce_209(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_exclusive(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_209$123.$$arity = 3);
      
      Opal.def(self, '$_reduce_210', $Ruby25__reduce_210$124 = function $$_reduce_210(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_210$124.$$arity = 3);
      
      Opal.def(self, '$_reduce_211', $Ruby25__reduce_211$125 = function $$_reduce_211(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_211$125.$$arity = 3);
      
      Opal.def(self, '$_reduce_212', $Ruby25__reduce_212$126 = function $$_reduce_212(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_212$126.$$arity = 3);
      
      Opal.def(self, '$_reduce_213', $Ruby25__reduce_213$127 = function $$_reduce_213(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_213$127.$$arity = 3);
      
      Opal.def(self, '$_reduce_214', $Ruby25__reduce_214$128 = function $$_reduce_214(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_214$128.$$arity = 3);
      
      Opal.def(self, '$_reduce_215', $Ruby25__reduce_215$129 = function $$_reduce_215(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_215$129.$$arity = 3);
      
      Opal.def(self, '$_reduce_216', $Ruby25__reduce_216$130 = function $$_reduce_216(val, _values, result) {
        var self = this;

        
        result = self.builder.$unary_op(val['$[]'](0), self.builder.$binary_op(val['$[]'](1), val['$[]'](2), val['$[]'](3)));
        return result;
      }, $Ruby25__reduce_216$130.$$arity = 3);
      
      Opal.def(self, '$_reduce_217', $Ruby25__reduce_217$131 = function $$_reduce_217(val, _values, result) {
        var self = this;

        
        result = self.builder.$unary_op(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby25__reduce_217$131.$$arity = 3);
      
      Opal.def(self, '$_reduce_218', $Ruby25__reduce_218$132 = function $$_reduce_218(val, _values, result) {
        var self = this;

        
        result = self.builder.$unary_op(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby25__reduce_218$132.$$arity = 3);
      
      Opal.def(self, '$_reduce_219', $Ruby25__reduce_219$133 = function $$_reduce_219(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_219$133.$$arity = 3);
      
      Opal.def(self, '$_reduce_220', $Ruby25__reduce_220$134 = function $$_reduce_220(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_220$134.$$arity = 3);
      
      Opal.def(self, '$_reduce_221', $Ruby25__reduce_221$135 = function $$_reduce_221(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_221$135.$$arity = 3);
      
      Opal.def(self, '$_reduce_222', $Ruby25__reduce_222$136 = function $$_reduce_222(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_222$136.$$arity = 3);
      
      Opal.def(self, '$_reduce_224', $Ruby25__reduce_224$137 = function $$_reduce_224(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_224$137.$$arity = 3);
      
      Opal.def(self, '$_reduce_225', $Ruby25__reduce_225$138 = function $$_reduce_225(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_225$138.$$arity = 3);
      
      Opal.def(self, '$_reduce_226', $Ruby25__reduce_226$139 = function $$_reduce_226(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_226$139.$$arity = 3);
      
      Opal.def(self, '$_reduce_227', $Ruby25__reduce_227$140 = function $$_reduce_227(val, _values, result) {
        var self = this;

        
        result = self.builder.$match_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_227$140.$$arity = 3);
      
      Opal.def(self, '$_reduce_228', $Ruby25__reduce_228$141 = function $$_reduce_228(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_228$141.$$arity = 3);
      
      Opal.def(self, '$_reduce_229', $Ruby25__reduce_229$142 = function $$_reduce_229(val, _values, result) {
        var self = this;

        
        result = self.builder.$not_op(val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, $Ruby25__reduce_229$142.$$arity = 3);
      
      Opal.def(self, '$_reduce_230', $Ruby25__reduce_230$143 = function $$_reduce_230(val, _values, result) {
        var self = this;

        
        result = self.builder.$unary_op(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby25__reduce_230$143.$$arity = 3);
      
      Opal.def(self, '$_reduce_231', $Ruby25__reduce_231$144 = function $$_reduce_231(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_231$144.$$arity = 3);
      
      Opal.def(self, '$_reduce_232', $Ruby25__reduce_232$145 = function $$_reduce_232(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_232$145.$$arity = 3);
      
      Opal.def(self, '$_reduce_233', $Ruby25__reduce_233$146 = function $$_reduce_233(val, _values, result) {
        var self = this;

        
        result = self.builder.$logical_op("and", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_233$146.$$arity = 3);
      
      Opal.def(self, '$_reduce_234', $Ruby25__reduce_234$147 = function $$_reduce_234(val, _values, result) {
        var self = this;

        
        result = self.builder.$logical_op("or", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_234$147.$$arity = 3);
      
      Opal.def(self, '$_reduce_235', $Ruby25__reduce_235$148 = function $$_reduce_235(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("defined?", val['$[]'](0), nil, [val['$[]'](2)], nil);
        return result;
      }, $Ruby25__reduce_235$148.$$arity = 3);
      
      Opal.def(self, '$_reduce_236', $Ruby25__reduce_236$149 = function $$_reduce_236(val, _values, result) {
        var self = this;

        
        result = self.builder.$ternary(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](4), val['$[]'](5));
        return result;
      }, $Ruby25__reduce_236$149.$$arity = 3);
      
      Opal.def(self, '$_reduce_242', $Ruby25__reduce_242$150 = function $$_reduce_242(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_242$150.$$arity = 3);
      
      Opal.def(self, '$_reduce_243', $Ruby25__reduce_243$151 = function $$_reduce_243(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_243$151.$$arity = 3);
      
      Opal.def(self, '$_reduce_247', $Ruby25__reduce_247$152 = function $$_reduce_247(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$associate(nil, val['$[]'](2), nil));
        return result;
      }, $Ruby25__reduce_247$152.$$arity = 3);
      
      Opal.def(self, '$_reduce_248', $Ruby25__reduce_248$153 = function $$_reduce_248(val, _values, result) {
        var self = this;

        
        result = [self.builder.$associate(nil, val['$[]'](0), nil)];
        return result;
      }, $Ruby25__reduce_248$153.$$arity = 3);
      
      Opal.def(self, '$_reduce_250', $Ruby25__reduce_250$154 = function $$_reduce_250(val, _values, result) {
        var self = this, rescue_body = nil;

        
        rescue_body = self.builder.$rescue_body(val['$[]'](1), nil, nil, nil, nil, val['$[]'](2));
        result = self.builder.$begin_body(val['$[]'](0), [rescue_body]);
        return result;
      }, $Ruby25__reduce_250$154.$$arity = 3);
      
      Opal.def(self, '$_reduce_251', $Ruby25__reduce_251$155 = function $$_reduce_251(val, _values, result) {
        var self = this;

        
        result = val;
        return result;
      }, $Ruby25__reduce_251$155.$$arity = 3);
      
      Opal.def(self, '$_reduce_252', $Ruby25__reduce_252$156 = function $$_reduce_252(val, _values, result) {
        var self = this;

        
        result = [nil, [], nil];
        return result;
      }, $Ruby25__reduce_252$156.$$arity = 3);
      
      Opal.def(self, '$_reduce_254', $Ruby25__reduce_254$157 = function $$_reduce_254(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_254$157.$$arity = 3);
      
      Opal.def(self, '$_reduce_257', $Ruby25__reduce_257$158 = function $$_reduce_257(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$associate(nil, val['$[]'](2), nil));
        return result;
      }, $Ruby25__reduce_257$158.$$arity = 3);
      
      Opal.def(self, '$_reduce_258', $Ruby25__reduce_258$159 = function $$_reduce_258(val, _values, result) {
        var self = this;

        
        result = [self.builder.$associate(nil, val['$[]'](0), nil)];
        return result;
      }, $Ruby25__reduce_258$159.$$arity = 3);
      
      Opal.def(self, '$_reduce_259', $Ruby25__reduce_259$160 = function $$_reduce_259(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_259$160.$$arity = 3);
      
      Opal.def(self, '$_reduce_260', $Ruby25__reduce_260$161 = function $$_reduce_260(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby25__reduce_260$161.$$arity = 3);
      
      Opal.def(self, '$_reduce_261', $Ruby25__reduce_261$162 = function $$_reduce_261(val, _values, result) {
        var self = this;

        
        result = [self.builder.$associate(nil, val['$[]'](0), nil)];
        result.$concat(val['$[]'](1));
        return result;
      }, $Ruby25__reduce_261$162.$$arity = 3);
      
      Opal.def(self, '$_reduce_262', $Ruby25__reduce_262$163 = function $$_reduce_262(val, _values, result) {
        var self = this, assocs = nil;

        
        assocs = self.builder.$associate(nil, val['$[]'](2), nil);
        result = val['$[]'](0)['$<<'](assocs);
        result.$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_262$163.$$arity = 3);
      
      Opal.def(self, '$_reduce_263', $Ruby25__reduce_263$164 = function $$_reduce_263(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_263$164.$$arity = 3);
      
      Opal.def(self, '$_reduce_264', $Ruby25__reduce_264$165 = function $$_reduce_264(val, _values, result) {
        var $a, self = this, last_token = nil, lookahead = nil, top = nil;

        
        last_token = self.last_token['$[]'](0);
        lookahead = ($truthy($a = last_token['$==']("tLBRACK")) ? $a : last_token['$==']("tLPAREN_ARG"));
        if ($truthy(lookahead)) {
          
          top = self.lexer.$cmdarg().$pop();
          self.lexer.$cmdarg().$push(true);
          self.lexer.$cmdarg().$push(top);
        } else {
          self.lexer.$cmdarg().$push(true)
        };
        return result;
      }, $Ruby25__reduce_264$165.$$arity = 3);
      
      Opal.def(self, '$_reduce_265', $Ruby25__reduce_265$166 = function $$_reduce_265(val, _values, result) {
        var self = this, last_token = nil, lookahead = nil, top = nil;

        
        last_token = self.last_token['$[]'](0);
        lookahead = last_token['$==']("tLBRACE_ARG");
        if ($truthy(lookahead)) {
          
          top = self.lexer.$cmdarg().$pop();
          self.lexer.$cmdarg().$pop();
          self.lexer.$cmdarg().$push(top);
        } else {
          self.lexer.$cmdarg().$pop()
        };
        result = val['$[]'](1);
        return result;
      }, $Ruby25__reduce_265$166.$$arity = 3);
      
      Opal.def(self, '$_reduce_266', $Ruby25__reduce_266$167 = function $$_reduce_266(val, _values, result) {
        var self = this;

        
        result = self.builder.$block_pass(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby25__reduce_266$167.$$arity = 3);
      
      Opal.def(self, '$_reduce_267', $Ruby25__reduce_267$168 = function $$_reduce_267(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](1)];
        return result;
      }, $Ruby25__reduce_267$168.$$arity = 3);
      
      Opal.def(self, '$_reduce_268', $Ruby25__reduce_268$169 = function $$_reduce_268(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_268$169.$$arity = 3);
      
      Opal.def(self, '$_reduce_269', $Ruby25__reduce_269$170 = function $$_reduce_269(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_269$170.$$arity = 3);
      
      Opal.def(self, '$_reduce_270', $Ruby25__reduce_270$171 = function $$_reduce_270(val, _values, result) {
        var self = this;

        
        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      }, $Ruby25__reduce_270$171.$$arity = 3);
      
      Opal.def(self, '$_reduce_271', $Ruby25__reduce_271$172 = function $$_reduce_271(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_271$172.$$arity = 3);
      
      Opal.def(self, '$_reduce_272', $Ruby25__reduce_272$173 = function $$_reduce_272(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$splat(val['$[]'](2), val['$[]'](3)));
        return result;
      }, $Ruby25__reduce_272$173.$$arity = 3);
      
      Opal.def(self, '$_reduce_273', $Ruby25__reduce_273$174 = function $$_reduce_273(val, _values, result) {
        var self = this;

        
        result = self.builder.$array(nil, val['$[]'](0), nil);
        return result;
      }, $Ruby25__reduce_273$174.$$arity = 3);
      
      Opal.def(self, '$_reduce_275', $Ruby25__reduce_275$175 = function $$_reduce_275(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_275$175.$$arity = 3);
      
      Opal.def(self, '$_reduce_276', $Ruby25__reduce_276$176 = function $$_reduce_276(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$splat(val['$[]'](2), val['$[]'](3)));
        return result;
      }, $Ruby25__reduce_276$176.$$arity = 3);
      
      Opal.def(self, '$_reduce_277', $Ruby25__reduce_277$177 = function $$_reduce_277(val, _values, result) {
        var self = this;

        
        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      }, $Ruby25__reduce_277$177.$$arity = 3);
      
      Opal.def(self, '$_reduce_288', $Ruby25__reduce_288$178 = function $$_reduce_288(val, _values, result) {
        var self = this;

        
        result = self.builder.$call_method(nil, nil, val['$[]'](0));
        return result;
      }, $Ruby25__reduce_288$178.$$arity = 3);
      
      Opal.def(self, '$_reduce_289', $Ruby25__reduce_289$179 = function $$_reduce_289(val, _values, result) {
        var self = this;

        
        self.lexer.$cmdarg().$push(false);
        return result;
      }, $Ruby25__reduce_289$179.$$arity = 3);
      
      Opal.def(self, '$_reduce_290', $Ruby25__reduce_290$180 = function $$_reduce_290(val, _values, result) {
        var self = this;

        
        self.lexer.$cmdarg().$pop();
        result = self.builder.$begin_keyword(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_290$180.$$arity = 3);
      
      Opal.def(self, '$_reduce_291', $Ruby25__reduce_291$181 = function $$_reduce_291(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_endarg"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby25__reduce_291$181.$$arity = 3);
      
      Opal.def(self, '$_reduce_292', $Ruby25__reduce_292$182 = function $$_reduce_292(val, _values, result) {
        var self = this;

        
        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_292$182.$$arity = 3);
      
      Opal.def(self, '$_reduce_293', $Ruby25__reduce_293$183 = function $$_reduce_293(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_endarg"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby25__reduce_293$183.$$arity = 3);
      
      Opal.def(self, '$_reduce_294', $Ruby25__reduce_294$184 = function $$_reduce_294(val, _values, result) {
        var self = this;

        
        result = self.builder.$begin(val['$[]'](0), nil, val['$[]'](3));
        return result;
      }, $Ruby25__reduce_294$184.$$arity = 3);
      
      Opal.def(self, '$_reduce_295', $Ruby25__reduce_295$185 = function $$_reduce_295(val, _values, result) {
        var self = this;

        
        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_295$185.$$arity = 3);
      
      Opal.def(self, '$_reduce_296', $Ruby25__reduce_296$186 = function $$_reduce_296(val, _values, result) {
        var self = this;

        
        result = self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_296$186.$$arity = 3);
      
      Opal.def(self, '$_reduce_297', $Ruby25__reduce_297$187 = function $$_reduce_297(val, _values, result) {
        var self = this;

        
        result = self.builder.$const_global(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby25__reduce_297$187.$$arity = 3);
      
      Opal.def(self, '$_reduce_298', $Ruby25__reduce_298$188 = function $$_reduce_298(val, _values, result) {
        var self = this;

        
        result = self.builder.$array(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_298$188.$$arity = 3);
      
      Opal.def(self, '$_reduce_299', $Ruby25__reduce_299$189 = function $$_reduce_299(val, _values, result) {
        var self = this;

        
        result = self.builder.$associate(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_299$189.$$arity = 3);
      
      Opal.def(self, '$_reduce_300', $Ruby25__reduce_300$190 = function $$_reduce_300(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("return", val['$[]'](0));
        return result;
      }, $Ruby25__reduce_300$190.$$arity = 3);
      
      Opal.def(self, '$_reduce_301', $Ruby25__reduce_301$191 = function $$_reduce_301(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("yield", val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_301$191.$$arity = 3);
      
      Opal.def(self, '$_reduce_302', $Ruby25__reduce_302$192 = function $$_reduce_302(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("yield", val['$[]'](0), val['$[]'](1), [], val['$[]'](2));
        return result;
      }, $Ruby25__reduce_302$192.$$arity = 3);
      
      Opal.def(self, '$_reduce_303', $Ruby25__reduce_303$193 = function $$_reduce_303(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("yield", val['$[]'](0));
        return result;
      }, $Ruby25__reduce_303$193.$$arity = 3);
      
      Opal.def(self, '$_reduce_304', $Ruby25__reduce_304$194 = function $$_reduce_304(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("defined?", val['$[]'](0), val['$[]'](2), [val['$[]'](3)], val['$[]'](4));
        return result;
      }, $Ruby25__reduce_304$194.$$arity = 3);
      
      Opal.def(self, '$_reduce_305', $Ruby25__reduce_305$195 = function $$_reduce_305(val, _values, result) {
        var self = this;

        
        result = self.builder.$not_op(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_305$195.$$arity = 3);
      
      Opal.def(self, '$_reduce_306', $Ruby25__reduce_306$196 = function $$_reduce_306(val, _values, result) {
        var self = this;

        
        result = self.builder.$not_op(val['$[]'](0), val['$[]'](1), nil, val['$[]'](2));
        return result;
      }, $Ruby25__reduce_306$196.$$arity = 3);
      
      Opal.def(self, '$_reduce_307', $Ruby25__reduce_307$197 = function $$_reduce_307(val, _values, result) {
        var $a, $b, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        
        method_call = self.builder.$call_method(nil, nil, val['$[]'](0));
        $b = val['$[]'](1), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      }, $Ruby25__reduce_307$197.$$arity = 3);
      
      Opal.def(self, '$_reduce_309', $Ruby25__reduce_309$198 = function $$_reduce_309(val, _values, result) {
        var $a, $b, self = this, begin_t = nil, args = nil, body = nil, end_t = nil;

        
        $b = val['$[]'](1), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(val['$[]'](0), begin_t, args, body, end_t);
        return result;
      }, $Ruby25__reduce_309$198.$$arity = 3);
      
      Opal.def(self, '$_reduce_310', $Ruby25__reduce_310$199 = function $$_reduce_310(val, _values, result) {
        var $a, $b, $c, self = this, lambda_call = nil, args = nil, begin_t = nil, body = nil, end_t = nil;

        
        lambda_call = self.builder.$call_lambda(val['$[]'](0));
        $b = val['$[]'](1), $a = Opal.to_ary($b), (args = ($a[0] == null ? nil : $a[0])), ($c = Opal.to_ary(($a[1] == null ? nil : $a[1])), (begin_t = ($c[0] == null ? nil : $c[0])), (body = ($c[1] == null ? nil : $c[1])), (end_t = ($c[2] == null ? nil : $c[2]))), $b;
        result = self.builder.$block(lambda_call, begin_t, args, body, end_t);
        return result;
      }, $Ruby25__reduce_310$199.$$arity = 3);
      
      Opal.def(self, '$_reduce_311', $Ruby25__reduce_311$200 = function $$_reduce_311(val, _values, result) {
        var $a, $b, self = this, else_t = nil, else_ = nil;

        
        $b = val['$[]'](4), $a = Opal.to_ary($b), (else_t = ($a[0] == null ? nil : $a[0])), (else_ = ($a[1] == null ? nil : $a[1])), $b;
        result = self.builder.$condition(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3), else_t, else_, val['$[]'](5));
        return result;
      }, $Ruby25__reduce_311$200.$$arity = 3);
      
      Opal.def(self, '$_reduce_312', $Ruby25__reduce_312$201 = function $$_reduce_312(val, _values, result) {
        var $a, $b, self = this, else_t = nil, else_ = nil;

        
        $b = val['$[]'](4), $a = Opal.to_ary($b), (else_t = ($a[0] == null ? nil : $a[0])), (else_ = ($a[1] == null ? nil : $a[1])), $b;
        result = self.builder.$condition(val['$[]'](0), val['$[]'](1), val['$[]'](2), else_, else_t, val['$[]'](3), val['$[]'](5));
        return result;
      }, $Ruby25__reduce_312$201.$$arity = 3);
      
      Opal.def(self, '$_reduce_313', $Ruby25__reduce_313$202 = function $$_reduce_313(val, _values, result) {
        var self = this;

        
        result = $send(self.builder, 'loop', ["while", val['$[]'](0)].concat(Opal.to_a(val['$[]'](1))).concat([val['$[]'](2), val['$[]'](3)]));
        return result;
      }, $Ruby25__reduce_313$202.$$arity = 3);
      
      Opal.def(self, '$_reduce_314', $Ruby25__reduce_314$203 = function $$_reduce_314(val, _values, result) {
        var self = this;

        
        result = $send(self.builder, 'loop', ["until", val['$[]'](0)].concat(Opal.to_a(val['$[]'](1))).concat([val['$[]'](2), val['$[]'](3)]));
        return result;
      }, $Ruby25__reduce_314$203.$$arity = 3);
      
      Opal.def(self, '$_reduce_315', $Ruby25__reduce_315$204 = function $$_reduce_315(val, _values, result) {
        var $a, $b, $c, self = this, when_bodies = nil, else_t = nil, else_body = nil;

        
        $a = [].concat(Opal.to_a(val['$[]'](3))), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (when_bodies = $slice.call($a, 0, $b)), ($c = Opal.to_ary(($a[$b] == null ? nil : $a[$b])), (else_t = ($c[0] == null ? nil : $c[0])), (else_body = ($c[1] == null ? nil : $c[1]))), $a;
        result = self.builder.$case(val['$[]'](0), val['$[]'](1), when_bodies, else_t, else_body, val['$[]'](4));
        return result;
      }, $Ruby25__reduce_315$204.$$arity = 3);
      
      Opal.def(self, '$_reduce_316', $Ruby25__reduce_316$205 = function $$_reduce_316(val, _values, result) {
        var $a, $b, $c, self = this, when_bodies = nil, else_t = nil, else_body = nil;

        
        $a = [].concat(Opal.to_a(val['$[]'](2))), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (when_bodies = $slice.call($a, 0, $b)), ($c = Opal.to_ary(($a[$b] == null ? nil : $a[$b])), (else_t = ($c[0] == null ? nil : $c[0])), (else_body = ($c[1] == null ? nil : $c[1]))), $a;
        result = self.builder.$case(val['$[]'](0), nil, when_bodies, else_t, else_body, val['$[]'](3));
        return result;
      }, $Ruby25__reduce_316$205.$$arity = 3);
      
      Opal.def(self, '$_reduce_317', $Ruby25__reduce_317$206 = function $$_reduce_317(val, _values, result) {
        var self = this;

        
        result = $send(self.builder, 'for', [val['$[]'](0), val['$[]'](1), val['$[]'](2)].concat(Opal.to_a(val['$[]'](3))).concat([val['$[]'](4), val['$[]'](5)]));
        return result;
      }, $Ruby25__reduce_317$206.$$arity = 3);
      
      Opal.def(self, '$_reduce_318', $Ruby25__reduce_318$207 = function $$_reduce_318(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_static();
        self.lexer.$cmdarg().$push(false);
        self.lexer.$cond().$push(false);
        self.context.$push("class");
        return result;
      }, $Ruby25__reduce_318$207.$$arity = 3);
      
      Opal.def(self, '$_reduce_319', $Ruby25__reduce_319$208 = function $$_reduce_319(val, _values, result) {
        var $a, $b, self = this, lt_t = nil, superclass = nil;

        
        if ($truthy(self.context['$class_definition_allowed?']())) {
        } else {
          self.$diagnostic("error", "class_in_def", nil, val['$[]'](0))
        };
        $b = val['$[]'](2), $a = Opal.to_ary($b), (lt_t = ($a[0] == null ? nil : $a[0])), (superclass = ($a[1] == null ? nil : $a[1])), $b;
        result = self.builder.$def_class(val['$[]'](0), val['$[]'](1), lt_t, superclass, val['$[]'](4), val['$[]'](5));
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        self.static_env.$unextend();
        self.context.$pop();
        return result;
      }, $Ruby25__reduce_319$208.$$arity = 3);
      
      Opal.def(self, '$_reduce_320', $Ruby25__reduce_320$209 = function $$_reduce_320(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_static();
        self.lexer.$cmdarg().$push(false);
        self.lexer.$cond().$push(false);
        self.context.$push("sclass");
        return result;
      }, $Ruby25__reduce_320$209.$$arity = 3);
      
      Opal.def(self, '$_reduce_321', $Ruby25__reduce_321$210 = function $$_reduce_321(val, _values, result) {
        var self = this;

        
        result = self.builder.$def_sclass(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](5), val['$[]'](6));
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        self.static_env.$unextend();
        self.context.$pop();
        return result;
      }, $Ruby25__reduce_321$210.$$arity = 3);
      
      Opal.def(self, '$_reduce_322', $Ruby25__reduce_322$211 = function $$_reduce_322(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_static();
        self.lexer.$cmdarg().$push(false);
        return result;
      }, $Ruby25__reduce_322$211.$$arity = 3);
      
      Opal.def(self, '$_reduce_323', $Ruby25__reduce_323$212 = function $$_reduce_323(val, _values, result) {
        var self = this;

        
        if ($truthy(self.context['$module_definition_allowed?']())) {
        } else {
          self.$diagnostic("error", "module_in_def", nil, val['$[]'](0))
        };
        result = self.builder.$def_module(val['$[]'](0), val['$[]'](1), val['$[]'](3), val['$[]'](4));
        self.lexer.$cmdarg().$pop();
        self.static_env.$unextend();
        return result;
      }, $Ruby25__reduce_323$212.$$arity = 3);
      
      Opal.def(self, '$_reduce_324', $Ruby25__reduce_324$213 = function $$_reduce_324(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_static();
        self.lexer.$cmdarg().$push(false);
        self.lexer.$cond().$push(false);
        self.context.$push("def");
        return result;
      }, $Ruby25__reduce_324$213.$$arity = 3);
      
      Opal.def(self, '$_reduce_325', $Ruby25__reduce_325$214 = function $$_reduce_325(val, _values, result) {
        var self = this;

        
        result = self.builder.$def_method(val['$[]'](0), val['$[]'](1), val['$[]'](3), val['$[]'](4), val['$[]'](5));
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        self.static_env.$unextend();
        self.context.$pop();
        return result;
      }, $Ruby25__reduce_325$214.$$arity = 3);
      
      Opal.def(self, '$_reduce_326', $Ruby25__reduce_326$215 = function $$_reduce_326(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_fname"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby25__reduce_326$215.$$arity = 3);
      
      Opal.def(self, '$_reduce_327', $Ruby25__reduce_327$216 = function $$_reduce_327(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_static();
        self.lexer.$cmdarg().$push(false);
        self.lexer.$cond().$push(false);
        self.context.$push("defs");
        return result;
      }, $Ruby25__reduce_327$216.$$arity = 3);
      
      Opal.def(self, '$_reduce_328', $Ruby25__reduce_328$217 = function $$_reduce_328(val, _values, result) {
        var self = this;

        
        result = self.builder.$def_singleton(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](4), val['$[]'](6), val['$[]'](7), val['$[]'](8));
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        self.static_env.$unextend();
        self.context.$pop();
        return result;
      }, $Ruby25__reduce_328$217.$$arity = 3);
      
      Opal.def(self, '$_reduce_329', $Ruby25__reduce_329$218 = function $$_reduce_329(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("break", val['$[]'](0));
        return result;
      }, $Ruby25__reduce_329$218.$$arity = 3);
      
      Opal.def(self, '$_reduce_330', $Ruby25__reduce_330$219 = function $$_reduce_330(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("next", val['$[]'](0));
        return result;
      }, $Ruby25__reduce_330$219.$$arity = 3);
      
      Opal.def(self, '$_reduce_331', $Ruby25__reduce_331$220 = function $$_reduce_331(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("redo", val['$[]'](0));
        return result;
      }, $Ruby25__reduce_331$220.$$arity = 3);
      
      Opal.def(self, '$_reduce_332', $Ruby25__reduce_332$221 = function $$_reduce_332(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("retry", val['$[]'](0));
        return result;
      }, $Ruby25__reduce_332$221.$$arity = 3);
      
      Opal.def(self, '$_reduce_334', $Ruby25__reduce_334$222 = function $$_reduce_334(val, _values, result) {
        var self = this;

        
        if ($truthy(self.context['$in_class?']())) {
          self.$diagnostic("error", "invalid_return", nil, val['$[]'](0))};
        return result;
      }, $Ruby25__reduce_334$222.$$arity = 3);
      
      Opal.def(self, '$_reduce_337', $Ruby25__reduce_337$223 = function $$_reduce_337(val, _values, result) {
        var self = this;

        
        result = val['$[]'](1);
        return result;
      }, $Ruby25__reduce_337$223.$$arity = 3);
      
      Opal.def(self, '$_reduce_341', $Ruby25__reduce_341$224 = function $$_reduce_341(val, _values, result) {
        var $a, $b, self = this, else_t = nil, else_ = nil;

        
        $b = val['$[]'](4), $a = Opal.to_ary($b), (else_t = ($a[0] == null ? nil : $a[0])), (else_ = ($a[1] == null ? nil : $a[1])), $b;
        result = [val['$[]'](0), self.builder.$condition(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3), else_t, else_, nil)];
        return result;
      }, $Ruby25__reduce_341$224.$$arity = 3);
      
      Opal.def(self, '$_reduce_343', $Ruby25__reduce_343$225 = function $$_reduce_343(val, _values, result) {
        var self = this;

        
        result = val;
        return result;
      }, $Ruby25__reduce_343$225.$$arity = 3);
      
      Opal.def(self, '$_reduce_346', $Ruby25__reduce_346$226 = function $$_reduce_346(val, _values, result) {
        var self = this;

        
        result = self.builder.$arg(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_346$226.$$arity = 3);
      
      Opal.def(self, '$_reduce_347', $Ruby25__reduce_347$227 = function $$_reduce_347(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_lhs(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_347$227.$$arity = 3);
      
      Opal.def(self, '$_reduce_348', $Ruby25__reduce_348$228 = function $$_reduce_348(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_348$228.$$arity = 3);
      
      Opal.def(self, '$_reduce_349', $Ruby25__reduce_349$229 = function $$_reduce_349(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_349$229.$$arity = 3);
      
      Opal.def(self, '$_reduce_351', $Ruby25__reduce_351$230 = function $$_reduce_351(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(self.builder.$restarg(val['$[]'](2), val['$[]'](3)));
        return result;
      }, $Ruby25__reduce_351$230.$$arity = 3);
      
      Opal.def(self, '$_reduce_352', $Ruby25__reduce_352$231 = function $$_reduce_352(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(self.builder.$restarg(val['$[]'](2), val['$[]'](3))).$concat(val['$[]'](5));
        return result;
      }, $Ruby25__reduce_352$231.$$arity = 3);
      
      Opal.def(self, '$_reduce_353', $Ruby25__reduce_353$232 = function $$_reduce_353(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(self.builder.$restarg(val['$[]'](2)));
        return result;
      }, $Ruby25__reduce_353$232.$$arity = 3);
      
      Opal.def(self, '$_reduce_354', $Ruby25__reduce_354$233 = function $$_reduce_354(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(self.builder.$restarg(val['$[]'](2))).$concat(val['$[]'](4));
        return result;
      }, $Ruby25__reduce_354$233.$$arity = 3);
      
      Opal.def(self, '$_reduce_355', $Ruby25__reduce_355$234 = function $$_reduce_355(val, _values, result) {
        var self = this;

        
        result = [self.builder.$restarg(val['$[]'](0), val['$[]'](1))];
        return result;
      }, $Ruby25__reduce_355$234.$$arity = 3);
      
      Opal.def(self, '$_reduce_356', $Ruby25__reduce_356$235 = function $$_reduce_356(val, _values, result) {
        var self = this;

        
        result = [self.builder.$restarg(val['$[]'](0), val['$[]'](1))].concat(Opal.to_a(val['$[]'](3)));
        return result;
      }, $Ruby25__reduce_356$235.$$arity = 3);
      
      Opal.def(self, '$_reduce_357', $Ruby25__reduce_357$236 = function $$_reduce_357(val, _values, result) {
        var self = this;

        
        result = [self.builder.$restarg(val['$[]'](0))];
        return result;
      }, $Ruby25__reduce_357$236.$$arity = 3);
      
      Opal.def(self, '$_reduce_358', $Ruby25__reduce_358$237 = function $$_reduce_358(val, _values, result) {
        var self = this;

        
        result = [self.builder.$restarg(val['$[]'](0))].concat(Opal.to_a(val['$[]'](2)));
        return result;
      }, $Ruby25__reduce_358$237.$$arity = 3);
      
      Opal.def(self, '$_reduce_359', $Ruby25__reduce_359$238 = function $$_reduce_359(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_359$238.$$arity = 3);
      
      Opal.def(self, '$_reduce_360', $Ruby25__reduce_360$239 = function $$_reduce_360(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby25__reduce_360$239.$$arity = 3);
      
      Opal.def(self, '$_reduce_361', $Ruby25__reduce_361$240 = function $$_reduce_361(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby25__reduce_361$240.$$arity = 3);
      
      Opal.def(self, '$_reduce_362', $Ruby25__reduce_362$241 = function $$_reduce_362(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_362$241.$$arity = 3);
      
      Opal.def(self, '$_reduce_363', $Ruby25__reduce_363$242 = function $$_reduce_363(val, _values, result) {
        var self = this;

        
        result = val['$[]'](1);
        return result;
      }, $Ruby25__reduce_363$242.$$arity = 3);
      
      Opal.def(self, '$_reduce_364', $Ruby25__reduce_364$243 = function $$_reduce_364(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_364$243.$$arity = 3);
      
      Opal.def(self, '$_reduce_365', $Ruby25__reduce_365$244 = function $$_reduce_365(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, $Ruby25__reduce_365$244.$$arity = 3);
      
      Opal.def(self, '$_reduce_366', $Ruby25__reduce_366$245 = function $$_reduce_366(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](6)).$concat(val['$[]'](7));
        return result;
      }, $Ruby25__reduce_366$245.$$arity = 3);
      
      Opal.def(self, '$_reduce_367', $Ruby25__reduce_367$246 = function $$_reduce_367(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_367$246.$$arity = 3);
      
      Opal.def(self, '$_reduce_368', $Ruby25__reduce_368$247 = function $$_reduce_368(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, $Ruby25__reduce_368$247.$$arity = 3);
      
      Opal.def(self, '$_reduce_369', $Ruby25__reduce_369$248 = function $$_reduce_369(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_369$248.$$arity = 3);
      
      Opal.def(self, '$_reduce_371', $Ruby25__reduce_371$249 = function $$_reduce_371(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, $Ruby25__reduce_371$249.$$arity = 3);
      
      Opal.def(self, '$_reduce_372', $Ruby25__reduce_372$250 = function $$_reduce_372(val, _values, result) {
        var $a, self = this;

        
        if ($truthy(($truthy($a = val['$[]'](1)['$empty?']()) ? val['$[]'](0).$size()['$=='](1) : $a))) {
          result = [self.builder.$procarg0(val['$[]'](0)['$[]'](0))]
        } else {
          result = val['$[]'](0).$concat(val['$[]'](1))
        };
        return result;
      }, $Ruby25__reduce_372$250.$$arity = 3);
      
      Opal.def(self, '$_reduce_373', $Ruby25__reduce_373$251 = function $$_reduce_373(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_373$251.$$arity = 3);
      
      Opal.def(self, '$_reduce_374', $Ruby25__reduce_374$252 = function $$_reduce_374(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, $Ruby25__reduce_374$252.$$arity = 3);
      
      Opal.def(self, '$_reduce_375', $Ruby25__reduce_375$253 = function $$_reduce_375(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby25__reduce_375$253.$$arity = 3);
      
      Opal.def(self, '$_reduce_376', $Ruby25__reduce_376$254 = function $$_reduce_376(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_376$254.$$arity = 3);
      
      Opal.def(self, '$_reduce_377', $Ruby25__reduce_377$255 = function $$_reduce_377(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby25__reduce_377$255.$$arity = 3);
      
      Opal.def(self, '$_reduce_378', $Ruby25__reduce_378$256 = function $$_reduce_378(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_378$256.$$arity = 3);
      
      Opal.def(self, '$_reduce_380', $Ruby25__reduce_380$257 = function $$_reduce_380(val, _values, result) {
        var self = this;

        
        result = self.builder.$args(nil, [], nil);
        return result;
      }, $Ruby25__reduce_380$257.$$arity = 3);
      
      Opal.def(self, '$_reduce_381', $Ruby25__reduce_381$258 = function $$_reduce_381(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_value"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby25__reduce_381$258.$$arity = 3);
      
      Opal.def(self, '$_reduce_382', $Ruby25__reduce_382$259 = function $$_reduce_382(val, _values, result) {
        var self = this;

        
        result = self.builder.$args(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_382$259.$$arity = 3);
      
      Opal.def(self, '$_reduce_383', $Ruby25__reduce_383$260 = function $$_reduce_383(val, _values, result) {
        var self = this;

        
        result = self.builder.$args(val['$[]'](0), [], val['$[]'](0));
        return result;
      }, $Ruby25__reduce_383$260.$$arity = 3);
      
      Opal.def(self, '$_reduce_384', $Ruby25__reduce_384$261 = function $$_reduce_384(val, _values, result) {
        var self = this;

        
        result = self.builder.$args(val['$[]'](0), val['$[]'](1).$concat(val['$[]'](2)), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_384$261.$$arity = 3);
      
      Opal.def(self, '$_reduce_385', $Ruby25__reduce_385$262 = function $$_reduce_385(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_385$262.$$arity = 3);
      
      Opal.def(self, '$_reduce_386', $Ruby25__reduce_386$263 = function $$_reduce_386(val, _values, result) {
        var self = this;

        
        result = val['$[]'](2);
        return result;
      }, $Ruby25__reduce_386$263.$$arity = 3);
      
      Opal.def(self, '$_reduce_387', $Ruby25__reduce_387$264 = function $$_reduce_387(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_387$264.$$arity = 3);
      
      Opal.def(self, '$_reduce_388', $Ruby25__reduce_388$265 = function $$_reduce_388(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_388$265.$$arity = 3);
      
      Opal.def(self, '$_reduce_389', $Ruby25__reduce_389$266 = function $$_reduce_389(val, _values, result) {
        var self = this;

        
        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        result = self.builder.$shadowarg(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_389$266.$$arity = 3);
      
      Opal.def(self, '$_reduce_391', $Ruby25__reduce_391$267 = function $$_reduce_391(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_dynamic();
        return result;
      }, $Ruby25__reduce_391$267.$$arity = 3);
      
      Opal.def(self, '$_reduce_392', $Ruby25__reduce_392$268 = function $$_reduce_392(val, _values, result) {
        var self = this;

        
        self.lexer.$cmdarg().$push(false);
        return result;
      }, $Ruby25__reduce_392$268.$$arity = 3);
      
      Opal.def(self, '$_reduce_393', $Ruby25__reduce_393$269 = function $$_reduce_393(val, _values, result) {
        var self = this;

        
        self.lexer.$cmdarg().$pop();
        result = [val['$[]'](1), val['$[]'](3)];
        self.static_env.$unextend();
        return result;
      }, $Ruby25__reduce_393$269.$$arity = 3);
      
      Opal.def(self, '$_reduce_394', $Ruby25__reduce_394$270 = function $$_reduce_394(val, _values, result) {
        var self = this;

        
        result = self.builder.$args(val['$[]'](0), val['$[]'](1).$concat(val['$[]'](2)), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_394$270.$$arity = 3);
      
      Opal.def(self, '$_reduce_395', $Ruby25__reduce_395$271 = function $$_reduce_395(val, _values, result) {
        var self = this;

        
        result = self.builder.$args(nil, val['$[]'](0), nil);
        return result;
      }, $Ruby25__reduce_395$271.$$arity = 3);
      
      Opal.def(self, '$_reduce_396', $Ruby25__reduce_396$272 = function $$_reduce_396(val, _values, result) {
        var self = this;

        
        self.context.$push("lambda");
        return result;
      }, $Ruby25__reduce_396$272.$$arity = 3);
      
      Opal.def(self, '$_reduce_397', $Ruby25__reduce_397$273 = function $$_reduce_397(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3)];
        self.context.$pop();
        return result;
      }, $Ruby25__reduce_397$273.$$arity = 3);
      
      Opal.def(self, '$_reduce_398', $Ruby25__reduce_398$274 = function $$_reduce_398(val, _values, result) {
        var self = this;

        
        self.context.$push("lambda");
        return result;
      }, $Ruby25__reduce_398$274.$$arity = 3);
      
      Opal.def(self, '$_reduce_399', $Ruby25__reduce_399$275 = function $$_reduce_399(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3)];
        self.context.$pop();
        return result;
      }, $Ruby25__reduce_399$275.$$arity = 3);
      
      Opal.def(self, '$_reduce_400', $Ruby25__reduce_400$276 = function $$_reduce_400(val, _values, result) {
        var self = this;

        
        self.context.$push("block");
        return result;
      }, $Ruby25__reduce_400$276.$$arity = 3);
      
      Opal.def(self, '$_reduce_401', $Ruby25__reduce_401$277 = function $$_reduce_401(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)].concat(Opal.to_a(val['$[]'](2))).concat([val['$[]'](3)]);
        self.context.$pop();
        return result;
      }, $Ruby25__reduce_401$277.$$arity = 3);
      
      Opal.def(self, '$_reduce_402', $Ruby25__reduce_402$278 = function $$_reduce_402(val, _values, result) {
        var $a, $b, self = this, begin_t = nil, block_args = nil, body = nil, end_t = nil;

        
        $b = val['$[]'](1), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (block_args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(val['$[]'](0), begin_t, block_args, body, end_t);
        return result;
      }, $Ruby25__reduce_402$278.$$arity = 3);
      
      Opal.def(self, '$_reduce_403', $Ruby25__reduce_403$279 = function $$_reduce_403(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](3), $a = Opal.to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      }, $Ruby25__reduce_403$279.$$arity = 3);
      
      Opal.def(self, '$_reduce_404', $Ruby25__reduce_404$280 = function $$_reduce_404(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil, method_call = nil, begin_t = nil, body = nil, end_t = nil;

        
        $b = val['$[]'](3), $a = Opal.to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        $b = val['$[]'](4), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      }, $Ruby25__reduce_404$280.$$arity = 3);
      
      Opal.def(self, '$_reduce_405', $Ruby25__reduce_405$281 = function $$_reduce_405(val, _values, result) {
        var $a, $b, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        
        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        $b = val['$[]'](4), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      }, $Ruby25__reduce_405$281.$$arity = 3);
      
      Opal.def(self, '$_reduce_406', $Ruby25__reduce_406$282 = function $$_reduce_406(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](1), $a = Opal.to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$call_method(nil, nil, val['$[]'](0), lparen_t, args, rparen_t);
        return result;
      }, $Ruby25__reduce_406$282.$$arity = 3);
      
      Opal.def(self, '$_reduce_407', $Ruby25__reduce_407$283 = function $$_reduce_407(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](3), $a = Opal.to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      }, $Ruby25__reduce_407$283.$$arity = 3);
      
      Opal.def(self, '$_reduce_408', $Ruby25__reduce_408$284 = function $$_reduce_408(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](3), $a = Opal.to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      }, $Ruby25__reduce_408$284.$$arity = 3);
      
      Opal.def(self, '$_reduce_409', $Ruby25__reduce_409$285 = function $$_reduce_409(val, _values, result) {
        var self = this;

        
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_409$285.$$arity = 3);
      
      Opal.def(self, '$_reduce_410', $Ruby25__reduce_410$286 = function $$_reduce_410(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](2), $a = Opal.to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), nil, lparen_t, args, rparen_t);
        return result;
      }, $Ruby25__reduce_410$286.$$arity = 3);
      
      Opal.def(self, '$_reduce_411', $Ruby25__reduce_411$287 = function $$_reduce_411(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](2), $a = Opal.to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), nil, lparen_t, args, rparen_t);
        return result;
      }, $Ruby25__reduce_411$287.$$arity = 3);
      
      Opal.def(self, '$_reduce_412', $Ruby25__reduce_412$288 = function $$_reduce_412(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](1), $a = Opal.to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$keyword_cmd("super", val['$[]'](0), lparen_t, args, rparen_t);
        return result;
      }, $Ruby25__reduce_412$288.$$arity = 3);
      
      Opal.def(self, '$_reduce_413', $Ruby25__reduce_413$289 = function $$_reduce_413(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("zsuper", val['$[]'](0));
        return result;
      }, $Ruby25__reduce_413$289.$$arity = 3);
      
      Opal.def(self, '$_reduce_414', $Ruby25__reduce_414$290 = function $$_reduce_414(val, _values, result) {
        var self = this;

        
        result = self.builder.$index(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_414$290.$$arity = 3);
      
      Opal.def(self, '$_reduce_415', $Ruby25__reduce_415$291 = function $$_reduce_415(val, _values, result) {
        var self = this;

        
        self.context.$push("block");
        return result;
      }, $Ruby25__reduce_415$291.$$arity = 3);
      
      Opal.def(self, '$_reduce_416', $Ruby25__reduce_416$292 = function $$_reduce_416(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)].concat(Opal.to_a(val['$[]'](2))).concat([val['$[]'](3)]);
        self.context.$pop();
        return result;
      }, $Ruby25__reduce_416$292.$$arity = 3);
      
      Opal.def(self, '$_reduce_417', $Ruby25__reduce_417$293 = function $$_reduce_417(val, _values, result) {
        var self = this;

        
        self.context.$push("block");
        return result;
      }, $Ruby25__reduce_417$293.$$arity = 3);
      
      Opal.def(self, '$_reduce_418', $Ruby25__reduce_418$294 = function $$_reduce_418(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)].concat(Opal.to_a(val['$[]'](2))).concat([val['$[]'](3)]);
        self.context.$pop();
        return result;
      }, $Ruby25__reduce_418$294.$$arity = 3);
      
      Opal.def(self, '$_reduce_419', $Ruby25__reduce_419$295 = function $$_reduce_419(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_dynamic();
        return result;
      }, $Ruby25__reduce_419$295.$$arity = 3);
      
      Opal.def(self, '$_reduce_420', $Ruby25__reduce_420$296 = function $$_reduce_420(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](1), val['$[]'](2)];
        self.static_env.$unextend();
        return result;
      }, $Ruby25__reduce_420$296.$$arity = 3);
      
      Opal.def(self, '$_reduce_421', $Ruby25__reduce_421$297 = function $$_reduce_421(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_dynamic();
        return result;
      }, $Ruby25__reduce_421$297.$$arity = 3);
      
      Opal.def(self, '$_reduce_422', $Ruby25__reduce_422$298 = function $$_reduce_422(val, _values, result) {
        var self = this;

        
        self.lexer.$cmdarg().$push(false);
        return result;
      }, $Ruby25__reduce_422$298.$$arity = 3);
      
      Opal.def(self, '$_reduce_423', $Ruby25__reduce_423$299 = function $$_reduce_423(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](2), val['$[]'](3)];
        self.static_env.$unextend();
        self.lexer.$cmdarg().$pop();
        return result;
      }, $Ruby25__reduce_423$299.$$arity = 3);
      
      Opal.def(self, '$_reduce_424', $Ruby25__reduce_424$300 = function $$_reduce_424(val, _values, result) {
        var self = this;

        
        result = [self.builder.$when(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3))].concat(Opal.to_a(val['$[]'](4)));
        return result;
      }, $Ruby25__reduce_424$300.$$arity = 3);
      
      Opal.def(self, '$_reduce_425', $Ruby25__reduce_425$301 = function $$_reduce_425(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_425$301.$$arity = 3);
      
      Opal.def(self, '$_reduce_427', $Ruby25__reduce_427$302 = function $$_reduce_427(val, _values, result) {
        var $a, $b, self = this, assoc_t = nil, exc_var = nil, exc_list = nil;

        
        $b = val['$[]'](2), $a = Opal.to_ary($b), (assoc_t = ($a[0] == null ? nil : $a[0])), (exc_var = ($a[1] == null ? nil : $a[1])), $b;
        if ($truthy(val['$[]'](1))) {
          exc_list = self.builder.$array(nil, val['$[]'](1), nil)};
        result = [self.builder.$rescue_body(val['$[]'](0), exc_list, assoc_t, exc_var, val['$[]'](3), val['$[]'](4))].concat(Opal.to_a(val['$[]'](5)));
        return result;
      }, $Ruby25__reduce_427$302.$$arity = 3);
      
      Opal.def(self, '$_reduce_428', $Ruby25__reduce_428$303 = function $$_reduce_428(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_428$303.$$arity = 3);
      
      Opal.def(self, '$_reduce_429', $Ruby25__reduce_429$304 = function $$_reduce_429(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_429$304.$$arity = 3);
      
      Opal.def(self, '$_reduce_432', $Ruby25__reduce_432$305 = function $$_reduce_432(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0), val['$[]'](1)];
        return result;
      }, $Ruby25__reduce_432$305.$$arity = 3);
      
      Opal.def(self, '$_reduce_434', $Ruby25__reduce_434$306 = function $$_reduce_434(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0), val['$[]'](1)];
        return result;
      }, $Ruby25__reduce_434$306.$$arity = 3);
      
      Opal.def(self, '$_reduce_439', $Ruby25__reduce_439$307 = function $$_reduce_439(val, _values, result) {
        var self = this;

        
        result = self.builder.$string_compose(nil, val['$[]'](0), nil);
        return result;
      }, $Ruby25__reduce_439$307.$$arity = 3);
      
      Opal.def(self, '$_reduce_440', $Ruby25__reduce_440$308 = function $$_reduce_440(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_440$308.$$arity = 3);
      
      Opal.def(self, '$_reduce_441', $Ruby25__reduce_441$309 = function $$_reduce_441(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, $Ruby25__reduce_441$309.$$arity = 3);
      
      Opal.def(self, '$_reduce_442', $Ruby25__reduce_442$310 = function $$_reduce_442(val, _values, result) {
        var self = this, string = nil;

        
        string = self.builder.$string_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        result = self.builder.$dedent_string(string, self.lexer.$dedent_level());
        return result;
      }, $Ruby25__reduce_442$310.$$arity = 3);
      
      Opal.def(self, '$_reduce_443', $Ruby25__reduce_443$311 = function $$_reduce_443(val, _values, result) {
        var self = this, string = nil;

        
        string = self.builder.$string(val['$[]'](0));
        result = self.builder.$dedent_string(string, self.lexer.$dedent_level());
        return result;
      }, $Ruby25__reduce_443$311.$$arity = 3);
      
      Opal.def(self, '$_reduce_444', $Ruby25__reduce_444$312 = function $$_reduce_444(val, _values, result) {
        var self = this;

        
        result = self.builder.$character(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_444$312.$$arity = 3);
      
      Opal.def(self, '$_reduce_445', $Ruby25__reduce_445$313 = function $$_reduce_445(val, _values, result) {
        var self = this, string = nil;

        
        string = self.builder.$xstring_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        result = self.builder.$dedent_string(string, self.lexer.$dedent_level());
        return result;
      }, $Ruby25__reduce_445$313.$$arity = 3);
      
      Opal.def(self, '$_reduce_446', $Ruby25__reduce_446$314 = function $$_reduce_446(val, _values, result) {
        var self = this, opts = nil;

        
        opts = self.builder.$regexp_options(val['$[]'](3));
        result = self.builder.$regexp_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2), opts);
        return result;
      }, $Ruby25__reduce_446$314.$$arity = 3);
      
      Opal.def(self, '$_reduce_447', $Ruby25__reduce_447$315 = function $$_reduce_447(val, _values, result) {
        var self = this;

        
        result = self.builder.$words_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_447$315.$$arity = 3);
      
      Opal.def(self, '$_reduce_448', $Ruby25__reduce_448$316 = function $$_reduce_448(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_448$316.$$arity = 3);
      
      Opal.def(self, '$_reduce_449', $Ruby25__reduce_449$317 = function $$_reduce_449(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$word(val['$[]'](1)));
        return result;
      }, $Ruby25__reduce_449$317.$$arity = 3);
      
      Opal.def(self, '$_reduce_450', $Ruby25__reduce_450$318 = function $$_reduce_450(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_450$318.$$arity = 3);
      
      Opal.def(self, '$_reduce_451', $Ruby25__reduce_451$319 = function $$_reduce_451(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, $Ruby25__reduce_451$319.$$arity = 3);
      
      Opal.def(self, '$_reduce_452', $Ruby25__reduce_452$320 = function $$_reduce_452(val, _values, result) {
        var self = this;

        
        result = self.builder.$symbols_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_452$320.$$arity = 3);
      
      Opal.def(self, '$_reduce_453', $Ruby25__reduce_453$321 = function $$_reduce_453(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_453$321.$$arity = 3);
      
      Opal.def(self, '$_reduce_454', $Ruby25__reduce_454$322 = function $$_reduce_454(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$word(val['$[]'](1)));
        return result;
      }, $Ruby25__reduce_454$322.$$arity = 3);
      
      Opal.def(self, '$_reduce_455', $Ruby25__reduce_455$323 = function $$_reduce_455(val, _values, result) {
        var self = this;

        
        result = self.builder.$words_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_455$323.$$arity = 3);
      
      Opal.def(self, '$_reduce_456', $Ruby25__reduce_456$324 = function $$_reduce_456(val, _values, result) {
        var self = this;

        
        result = self.builder.$symbols_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_456$324.$$arity = 3);
      
      Opal.def(self, '$_reduce_457', $Ruby25__reduce_457$325 = function $$_reduce_457(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_457$325.$$arity = 3);
      
      Opal.def(self, '$_reduce_458', $Ruby25__reduce_458$326 = function $$_reduce_458(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$string_internal(val['$[]'](1)));
        return result;
      }, $Ruby25__reduce_458$326.$$arity = 3);
      
      Opal.def(self, '$_reduce_459', $Ruby25__reduce_459$327 = function $$_reduce_459(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_459$327.$$arity = 3);
      
      Opal.def(self, '$_reduce_460', $Ruby25__reduce_460$328 = function $$_reduce_460(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$symbol_internal(val['$[]'](1)));
        return result;
      }, $Ruby25__reduce_460$328.$$arity = 3);
      
      Opal.def(self, '$_reduce_461', $Ruby25__reduce_461$329 = function $$_reduce_461(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_461$329.$$arity = 3);
      
      Opal.def(self, '$_reduce_462', $Ruby25__reduce_462$330 = function $$_reduce_462(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, $Ruby25__reduce_462$330.$$arity = 3);
      
      Opal.def(self, '$_reduce_463', $Ruby25__reduce_463$331 = function $$_reduce_463(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_463$331.$$arity = 3);
      
      Opal.def(self, '$_reduce_464', $Ruby25__reduce_464$332 = function $$_reduce_464(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, $Ruby25__reduce_464$332.$$arity = 3);
      
      Opal.def(self, '$_reduce_465', $Ruby25__reduce_465$333 = function $$_reduce_465(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_465$333.$$arity = 3);
      
      Opal.def(self, '$_reduce_466', $Ruby25__reduce_466$334 = function $$_reduce_466(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, $Ruby25__reduce_466$334.$$arity = 3);
      
      Opal.def(self, '$_reduce_467', $Ruby25__reduce_467$335 = function $$_reduce_467(val, _values, result) {
        var self = this;

        
        result = self.builder.$string_internal(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_467$335.$$arity = 3);
      
      Opal.def(self, '$_reduce_468', $Ruby25__reduce_468$336 = function $$_reduce_468(val, _values, result) {
        var self = this;

        
        result = val['$[]'](1);
        return result;
      }, $Ruby25__reduce_468$336.$$arity = 3);
      
      Opal.def(self, '$_reduce_469', $Ruby25__reduce_469$337 = function $$_reduce_469(val, _values, result) {
        var self = this;

        
        self.lexer.$cmdarg().$push(false);
        self.lexer.$cond().$push(false);
        return result;
      }, $Ruby25__reduce_469$337.$$arity = 3);
      
      Opal.def(self, '$_reduce_470', $Ruby25__reduce_470$338 = function $$_reduce_470(val, _values, result) {
        var self = this;

        
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        result = self.builder.$begin(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_470$338.$$arity = 3);
      
      Opal.def(self, '$_reduce_471', $Ruby25__reduce_471$339 = function $$_reduce_471(val, _values, result) {
        var self = this;

        
        result = self.builder.$gvar(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_471$339.$$arity = 3);
      
      Opal.def(self, '$_reduce_472', $Ruby25__reduce_472$340 = function $$_reduce_472(val, _values, result) {
        var self = this;

        
        result = self.builder.$ivar(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_472$340.$$arity = 3);
      
      Opal.def(self, '$_reduce_473', $Ruby25__reduce_473$341 = function $$_reduce_473(val, _values, result) {
        var self = this;

        
        result = self.builder.$cvar(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_473$341.$$arity = 3);
      
      Opal.def(self, '$_reduce_475', $Ruby25__reduce_475$342 = function $$_reduce_475(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_end"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$symbol(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_475$342.$$arity = 3);
      
      Opal.def(self, '$_reduce_476', $Ruby25__reduce_476$343 = function $$_reduce_476(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_end"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$symbol_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_476$343.$$arity = 3);
      
      Opal.def(self, '$_reduce_477', $Ruby25__reduce_477$344 = function $$_reduce_477(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0);
        return result;
      }, $Ruby25__reduce_477$344.$$arity = 3);
      
      Opal.def(self, '$_reduce_478', $Ruby25__reduce_478$345 = function $$_reduce_478(val, _values, result) {
        var self = this;

        
        if ($truthy(self.builder['$respond_to?']("negate"))) {
          result = self.builder.$negate(val['$[]'](0), val['$[]'](1))
        } else {
          result = self.builder.$unary_num(val['$[]'](0), val['$[]'](1))
        };
        return result;
      }, $Ruby25__reduce_478$345.$$arity = 3);
      
      Opal.def(self, '$_reduce_479', $Ruby25__reduce_479$346 = function $$_reduce_479(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_end"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$integer(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_479$346.$$arity = 3);
      
      Opal.def(self, '$_reduce_480', $Ruby25__reduce_480$347 = function $$_reduce_480(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_end"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$float(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_480$347.$$arity = 3);
      
      Opal.def(self, '$_reduce_481', $Ruby25__reduce_481$348 = function $$_reduce_481(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_end"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$rational(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_481$348.$$arity = 3);
      
      Opal.def(self, '$_reduce_482', $Ruby25__reduce_482$349 = function $$_reduce_482(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_end"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$complex(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_482$349.$$arity = 3);
      
      Opal.def(self, '$_reduce_483', $Ruby25__reduce_483$350 = function $$_reduce_483(val, _values, result) {
        var self = this;

        
        result = self.builder.$ident(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_483$350.$$arity = 3);
      
      Opal.def(self, '$_reduce_484', $Ruby25__reduce_484$351 = function $$_reduce_484(val, _values, result) {
        var self = this;

        
        result = self.builder.$ivar(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_484$351.$$arity = 3);
      
      Opal.def(self, '$_reduce_485', $Ruby25__reduce_485$352 = function $$_reduce_485(val, _values, result) {
        var self = this;

        
        result = self.builder.$gvar(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_485$352.$$arity = 3);
      
      Opal.def(self, '$_reduce_486', $Ruby25__reduce_486$353 = function $$_reduce_486(val, _values, result) {
        var self = this;

        
        result = self.builder.$const(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_486$353.$$arity = 3);
      
      Opal.def(self, '$_reduce_487', $Ruby25__reduce_487$354 = function $$_reduce_487(val, _values, result) {
        var self = this;

        
        result = self.builder.$cvar(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_487$354.$$arity = 3);
      
      Opal.def(self, '$_reduce_488', $Ruby25__reduce_488$355 = function $$_reduce_488(val, _values, result) {
        var self = this;

        
        result = self.builder.$nil(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_488$355.$$arity = 3);
      
      Opal.def(self, '$_reduce_489', $Ruby25__reduce_489$356 = function $$_reduce_489(val, _values, result) {
        var self = this;

        
        result = self.builder.$self(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_489$356.$$arity = 3);
      
      Opal.def(self, '$_reduce_490', $Ruby25__reduce_490$357 = function $$_reduce_490(val, _values, result) {
        var self = this;

        
        result = self.builder.$true(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_490$357.$$arity = 3);
      
      Opal.def(self, '$_reduce_491', $Ruby25__reduce_491$358 = function $$_reduce_491(val, _values, result) {
        var self = this;

        
        result = self.builder.$false(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_491$358.$$arity = 3);
      
      Opal.def(self, '$_reduce_492', $Ruby25__reduce_492$359 = function $$_reduce_492(val, _values, result) {
        var self = this;

        
        result = self.builder.$__FILE__(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_492$359.$$arity = 3);
      
      Opal.def(self, '$_reduce_493', $Ruby25__reduce_493$360 = function $$_reduce_493(val, _values, result) {
        var self = this;

        
        result = self.builder.$__LINE__(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_493$360.$$arity = 3);
      
      Opal.def(self, '$_reduce_494', $Ruby25__reduce_494$361 = function $$_reduce_494(val, _values, result) {
        var self = this;

        
        result = self.builder.$__ENCODING__(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_494$361.$$arity = 3);
      
      Opal.def(self, '$_reduce_495', $Ruby25__reduce_495$362 = function $$_reduce_495(val, _values, result) {
        var self = this;

        
        result = self.builder.$accessible(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_495$362.$$arity = 3);
      
      Opal.def(self, '$_reduce_496', $Ruby25__reduce_496$363 = function $$_reduce_496(val, _values, result) {
        var self = this;

        
        result = self.builder.$accessible(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_496$363.$$arity = 3);
      
      Opal.def(self, '$_reduce_497', $Ruby25__reduce_497$364 = function $$_reduce_497(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_497$364.$$arity = 3);
      
      Opal.def(self, '$_reduce_498', $Ruby25__reduce_498$365 = function $$_reduce_498(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_498$365.$$arity = 3);
      
      Opal.def(self, '$_reduce_499', $Ruby25__reduce_499$366 = function $$_reduce_499(val, _values, result) {
        var self = this;

        
        result = self.builder.$nth_ref(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_499$366.$$arity = 3);
      
      Opal.def(self, '$_reduce_500', $Ruby25__reduce_500$367 = function $$_reduce_500(val, _values, result) {
        var self = this;

        
        result = self.builder.$back_ref(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_500$367.$$arity = 3);
      
      Opal.def(self, '$_reduce_501', $Ruby25__reduce_501$368 = function $$_reduce_501(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_value"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby25__reduce_501$368.$$arity = 3);
      
      Opal.def(self, '$_reduce_502', $Ruby25__reduce_502$369 = function $$_reduce_502(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0), val['$[]'](2)];
        return result;
      }, $Ruby25__reduce_502$369.$$arity = 3);
      
      Opal.def(self, '$_reduce_503', $Ruby25__reduce_503$370 = function $$_reduce_503(val, _values, result) {
        var self = this;

        
        result = nil;
        return result;
      }, $Ruby25__reduce_503$370.$$arity = 3);
      
      Opal.def(self, '$_reduce_504', $Ruby25__reduce_504$371 = function $$_reduce_504(val, _values, result) {
        var self = this, $writer = nil;

        
        result = self.builder.$args(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        
        $writer = ["expr_value"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby25__reduce_504$371.$$arity = 3);
      
      Opal.def(self, '$_reduce_505', $Ruby25__reduce_505$372 = function $$_reduce_505(val, _values, result) {
        var self = this, $writer = nil;

        
        result = self.lexer.$in_kwarg();
        
        $writer = [true];
        $send(self.lexer, 'in_kwarg=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby25__reduce_505$372.$$arity = 3);
      
      Opal.def(self, '$_reduce_506', $Ruby25__reduce_506$373 = function $$_reduce_506(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = [val['$[]'](0)];
        $send(self.lexer, 'in_kwarg=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$args(nil, val['$[]'](1), nil);
        return result;
      }, $Ruby25__reduce_506$373.$$arity = 3);
      
      Opal.def(self, '$_reduce_507', $Ruby25__reduce_507$374 = function $$_reduce_507(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_507$374.$$arity = 3);
      
      Opal.def(self, '$_reduce_508', $Ruby25__reduce_508$375 = function $$_reduce_508(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby25__reduce_508$375.$$arity = 3);
      
      Opal.def(self, '$_reduce_509', $Ruby25__reduce_509$376 = function $$_reduce_509(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby25__reduce_509$376.$$arity = 3);
      
      Opal.def(self, '$_reduce_510', $Ruby25__reduce_510$377 = function $$_reduce_510(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_510$377.$$arity = 3);
      
      Opal.def(self, '$_reduce_511', $Ruby25__reduce_511$378 = function $$_reduce_511(val, _values, result) {
        var self = this;

        
        result = val['$[]'](1);
        return result;
      }, $Ruby25__reduce_511$378.$$arity = 3);
      
      Opal.def(self, '$_reduce_512', $Ruby25__reduce_512$379 = function $$_reduce_512(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_512$379.$$arity = 3);
      
      Opal.def(self, '$_reduce_513', $Ruby25__reduce_513$380 = function $$_reduce_513(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, $Ruby25__reduce_513$380.$$arity = 3);
      
      Opal.def(self, '$_reduce_514', $Ruby25__reduce_514$381 = function $$_reduce_514(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](6)).$concat(val['$[]'](7));
        return result;
      }, $Ruby25__reduce_514$381.$$arity = 3);
      
      Opal.def(self, '$_reduce_515', $Ruby25__reduce_515$382 = function $$_reduce_515(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_515$382.$$arity = 3);
      
      Opal.def(self, '$_reduce_516', $Ruby25__reduce_516$383 = function $$_reduce_516(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, $Ruby25__reduce_516$383.$$arity = 3);
      
      Opal.def(self, '$_reduce_517', $Ruby25__reduce_517$384 = function $$_reduce_517(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_517$384.$$arity = 3);
      
      Opal.def(self, '$_reduce_518', $Ruby25__reduce_518$385 = function $$_reduce_518(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, $Ruby25__reduce_518$385.$$arity = 3);
      
      Opal.def(self, '$_reduce_519', $Ruby25__reduce_519$386 = function $$_reduce_519(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby25__reduce_519$386.$$arity = 3);
      
      Opal.def(self, '$_reduce_520', $Ruby25__reduce_520$387 = function $$_reduce_520(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_520$387.$$arity = 3);
      
      Opal.def(self, '$_reduce_521', $Ruby25__reduce_521$388 = function $$_reduce_521(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, $Ruby25__reduce_521$388.$$arity = 3);
      
      Opal.def(self, '$_reduce_522', $Ruby25__reduce_522$389 = function $$_reduce_522(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby25__reduce_522$389.$$arity = 3);
      
      Opal.def(self, '$_reduce_523', $Ruby25__reduce_523$390 = function $$_reduce_523(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_523$390.$$arity = 3);
      
      Opal.def(self, '$_reduce_524', $Ruby25__reduce_524$391 = function $$_reduce_524(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby25__reduce_524$391.$$arity = 3);
      
      Opal.def(self, '$_reduce_525', $Ruby25__reduce_525$392 = function $$_reduce_525(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_525$392.$$arity = 3);
      
      Opal.def(self, '$_reduce_526', $Ruby25__reduce_526$393 = function $$_reduce_526(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0);
        return result;
      }, $Ruby25__reduce_526$393.$$arity = 3);
      
      Opal.def(self, '$_reduce_527', $Ruby25__reduce_527$394 = function $$_reduce_527(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_527$394.$$arity = 3);
      
      Opal.def(self, '$_reduce_528', $Ruby25__reduce_528$395 = function $$_reduce_528(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "argument_const", nil, val['$[]'](0));
        return result;
      }, $Ruby25__reduce_528$395.$$arity = 3);
      
      Opal.def(self, '$_reduce_529', $Ruby25__reduce_529$396 = function $$_reduce_529(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "argument_ivar", nil, val['$[]'](0));
        return result;
      }, $Ruby25__reduce_529$396.$$arity = 3);
      
      Opal.def(self, '$_reduce_530', $Ruby25__reduce_530$397 = function $$_reduce_530(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "argument_gvar", nil, val['$[]'](0));
        return result;
      }, $Ruby25__reduce_530$397.$$arity = 3);
      
      Opal.def(self, '$_reduce_531', $Ruby25__reduce_531$398 = function $$_reduce_531(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "argument_cvar", nil, val['$[]'](0));
        return result;
      }, $Ruby25__reduce_531$398.$$arity = 3);
      
      Opal.def(self, '$_reduce_533', $Ruby25__reduce_533$399 = function $$_reduce_533(val, _values, result) {
        var self = this;

        
        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        result = val['$[]'](0);
        return result;
      }, $Ruby25__reduce_533$399.$$arity = 3);
      
      Opal.def(self, '$_reduce_534', $Ruby25__reduce_534$400 = function $$_reduce_534(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0);
        return result;
      }, $Ruby25__reduce_534$400.$$arity = 3);
      
      Opal.def(self, '$_reduce_535', $Ruby25__reduce_535$401 = function $$_reduce_535(val, _values, result) {
        var self = this;

        
        result = self.builder.$arg(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_535$401.$$arity = 3);
      
      Opal.def(self, '$_reduce_536', $Ruby25__reduce_536$402 = function $$_reduce_536(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_lhs(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_536$402.$$arity = 3);
      
      Opal.def(self, '$_reduce_537', $Ruby25__reduce_537$403 = function $$_reduce_537(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_537$403.$$arity = 3);
      
      Opal.def(self, '$_reduce_538', $Ruby25__reduce_538$404 = function $$_reduce_538(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_538$404.$$arity = 3);
      
      Opal.def(self, '$_reduce_539', $Ruby25__reduce_539$405 = function $$_reduce_539(val, _values, result) {
        var self = this;

        
        self.$check_kwarg_name(val['$[]'](0));
        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        result = val['$[]'](0);
        return result;
      }, $Ruby25__reduce_539$405.$$arity = 3);
      
      Opal.def(self, '$_reduce_540', $Ruby25__reduce_540$406 = function $$_reduce_540(val, _values, result) {
        var self = this;

        
        result = self.builder.$kwoptarg(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby25__reduce_540$406.$$arity = 3);
      
      Opal.def(self, '$_reduce_541', $Ruby25__reduce_541$407 = function $$_reduce_541(val, _values, result) {
        var self = this;

        
        result = self.builder.$kwarg(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_541$407.$$arity = 3);
      
      Opal.def(self, '$_reduce_542', $Ruby25__reduce_542$408 = function $$_reduce_542(val, _values, result) {
        var self = this;

        
        result = self.builder.$kwoptarg(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby25__reduce_542$408.$$arity = 3);
      
      Opal.def(self, '$_reduce_543', $Ruby25__reduce_543$409 = function $$_reduce_543(val, _values, result) {
        var self = this;

        
        result = self.builder.$kwarg(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_543$409.$$arity = 3);
      
      Opal.def(self, '$_reduce_544', $Ruby25__reduce_544$410 = function $$_reduce_544(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_544$410.$$arity = 3);
      
      Opal.def(self, '$_reduce_545', $Ruby25__reduce_545$411 = function $$_reduce_545(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_545$411.$$arity = 3);
      
      Opal.def(self, '$_reduce_546', $Ruby25__reduce_546$412 = function $$_reduce_546(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_546$412.$$arity = 3);
      
      Opal.def(self, '$_reduce_547', $Ruby25__reduce_547$413 = function $$_reduce_547(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_547$413.$$arity = 3);
      
      Opal.def(self, '$_reduce_550', $Ruby25__reduce_550$414 = function $$_reduce_550(val, _values, result) {
        var self = this;

        
        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = [self.builder.$kwrestarg(val['$[]'](0), val['$[]'](1))];
        return result;
      }, $Ruby25__reduce_550$414.$$arity = 3);
      
      Opal.def(self, '$_reduce_551', $Ruby25__reduce_551$415 = function $$_reduce_551(val, _values, result) {
        var self = this;

        
        result = [self.builder.$kwrestarg(val['$[]'](0))];
        return result;
      }, $Ruby25__reduce_551$415.$$arity = 3);
      
      Opal.def(self, '$_reduce_552', $Ruby25__reduce_552$416 = function $$_reduce_552(val, _values, result) {
        var self = this;

        
        result = self.builder.$optarg(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_552$416.$$arity = 3);
      
      Opal.def(self, '$_reduce_553', $Ruby25__reduce_553$417 = function $$_reduce_553(val, _values, result) {
        var self = this;

        
        result = self.builder.$optarg(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_553$417.$$arity = 3);
      
      Opal.def(self, '$_reduce_554', $Ruby25__reduce_554$418 = function $$_reduce_554(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_554$418.$$arity = 3);
      
      Opal.def(self, '$_reduce_555', $Ruby25__reduce_555$419 = function $$_reduce_555(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_555$419.$$arity = 3);
      
      Opal.def(self, '$_reduce_556', $Ruby25__reduce_556$420 = function $$_reduce_556(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_556$420.$$arity = 3);
      
      Opal.def(self, '$_reduce_557', $Ruby25__reduce_557$421 = function $$_reduce_557(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_557$421.$$arity = 3);
      
      Opal.def(self, '$_reduce_560', $Ruby25__reduce_560$422 = function $$_reduce_560(val, _values, result) {
        var self = this;

        
        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = [self.builder.$restarg(val['$[]'](0), val['$[]'](1))];
        return result;
      }, $Ruby25__reduce_560$422.$$arity = 3);
      
      Opal.def(self, '$_reduce_561', $Ruby25__reduce_561$423 = function $$_reduce_561(val, _values, result) {
        var self = this;

        
        result = [self.builder.$restarg(val['$[]'](0))];
        return result;
      }, $Ruby25__reduce_561$423.$$arity = 3);
      
      Opal.def(self, '$_reduce_564', $Ruby25__reduce_564$424 = function $$_reduce_564(val, _values, result) {
        var self = this;

        
        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = self.builder.$blockarg(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby25__reduce_564$424.$$arity = 3);
      
      Opal.def(self, '$_reduce_565', $Ruby25__reduce_565$425 = function $$_reduce_565(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](1)];
        return result;
      }, $Ruby25__reduce_565$425.$$arity = 3);
      
      Opal.def(self, '$_reduce_566', $Ruby25__reduce_566$426 = function $$_reduce_566(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_566$426.$$arity = 3);
      
      Opal.def(self, '$_reduce_568', $Ruby25__reduce_568$427 = function $$_reduce_568(val, _values, result) {
        var self = this;

        
        result = val['$[]'](1);
        return result;
      }, $Ruby25__reduce_568$427.$$arity = 3);
      
      Opal.def(self, '$_reduce_569', $Ruby25__reduce_569$428 = function $$_reduce_569(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_569$428.$$arity = 3);
      
      Opal.def(self, '$_reduce_571', $Ruby25__reduce_571$429 = function $$_reduce_571(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_571$429.$$arity = 3);
      
      Opal.def(self, '$_reduce_572', $Ruby25__reduce_572$430 = function $$_reduce_572(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_572$430.$$arity = 3);
      
      Opal.def(self, '$_reduce_573', $Ruby25__reduce_573$431 = function $$_reduce_573(val, _values, result) {
        var self = this;

        
        result = self.builder.$pair(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_573$431.$$arity = 3);
      
      Opal.def(self, '$_reduce_574', $Ruby25__reduce_574$432 = function $$_reduce_574(val, _values, result) {
        var self = this;

        
        result = self.builder.$pair_keyword(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby25__reduce_574$432.$$arity = 3);
      
      Opal.def(self, '$_reduce_575', $Ruby25__reduce_575$433 = function $$_reduce_575(val, _values, result) {
        var self = this;

        
        result = self.builder.$pair_quoted(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_575$433.$$arity = 3);
      
      Opal.def(self, '$_reduce_576', $Ruby25__reduce_576$434 = function $$_reduce_576(val, _values, result) {
        var self = this;

        
        result = self.builder.$kwsplat(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby25__reduce_576$434.$$arity = 3);
      
      Opal.def(self, '$_reduce_589', $Ruby25__reduce_589$435 = function $$_reduce_589(val, _values, result) {
        var self = this;

        
        result = ["dot", val['$[]'](0)['$[]'](1)];
        return result;
      }, $Ruby25__reduce_589$435.$$arity = 3);
      
      Opal.def(self, '$_reduce_590', $Ruby25__reduce_590$436 = function $$_reduce_590(val, _values, result) {
        var self = this;

        
        result = ["anddot", val['$[]'](0)['$[]'](1)];
        return result;
      }, $Ruby25__reduce_590$436.$$arity = 3);
      
      Opal.def(self, '$_reduce_595', $Ruby25__reduce_595$437 = function $$_reduce_595(val, _values, result) {
        var self = this;

        
        result = val['$[]'](1);
        return result;
      }, $Ruby25__reduce_595$437.$$arity = 3);
      
      Opal.def(self, '$_reduce_596', $Ruby25__reduce_596$438 = function $$_reduce_596(val, _values, result) {
        var self = this;

        
        result = val['$[]'](1);
        return result;
      }, $Ruby25__reduce_596$438.$$arity = 3);
      
      Opal.def(self, '$_reduce_600', $Ruby25__reduce_600$439 = function $$_reduce_600(val, _values, result) {
        var self = this;

        
        self.$yyerrok();
        return result;
      }, $Ruby25__reduce_600$439.$$arity = 3);
      
      Opal.def(self, '$_reduce_604', $Ruby25__reduce_604$440 = function $$_reduce_604(val, _values, result) {
        var self = this;

        
        result = nil;
        return result;
      }, $Ruby25__reduce_604$440.$$arity = 3);
      return (Opal.def(self, '$_reduce_none', $Ruby25__reduce_none$441 = function $$_reduce_none(val, _values, result) {
        var self = this;

        return val['$[]'](0)
      }, $Ruby25__reduce_none$441.$$arity = 3), nil) && '_reduce_none';
    })($nesting[0], $$$($$($nesting, 'Parser'), 'Base'), $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/ast/builder"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$emit_lambda=', '$-', '$new']);
  
  self.$require("opal/ast/node");
  self.$require("parser/ruby25");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Builder');

        var $nesting = [self].concat($parent_nesting), $Builder_n$1, $writer = nil;

        
        
        $writer = [true];
        $send(self, 'emit_lambda=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return (Opal.def(self, '$n', $Builder_n$1 = function $$n(type, children, location) {
          var self = this;

          return $$$($$$($$$('::', 'Opal'), 'AST'), 'Node').$new(type, children, $hash2(["location"], {"location": location}))
        }, $Builder_n$1.$$arity = 3), nil) && 'n';
      })($nesting[0], $$$($$$($$$('::', 'Parser'), 'Builders'), 'Default'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/rewriters/base"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$require', '$new', '$current_node', '$loc', '$+', '$stmts_of', '$begin_with_stmts', '$nil?', '$include?', '$type', '$children', '$length', '$===', '$[]', '$s', '$attr_accessor', '$current_node=', '$-', '$location=', '$raise']);
  
  self.$require("parser");
  self.$require("opal/ast/node");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Base');

        var $nesting = [self].concat($parent_nesting), $Base_s$9, $Base_s$10, $Base_prepend_to_body$11, $Base_append_to_body$12, $Base_stmts_of$13, $Base_begin_with_stmts$14, $Base_process$15, $Base_error$16;

        
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'DummyLocation');

          var $nesting = [self].concat($parent_nesting), $DummyLocation_node$eq$1, $DummyLocation_expression$2, $DummyLocation_begin_pos$3, $DummyLocation_end_pos$4, $DummyLocation_source$5, $DummyLocation_line$6, $DummyLocation_column$7, $DummyLocation_last_line$8;

          
          
          Opal.def(self, '$node=', $DummyLocation_node$eq$1 = function($a) {
            var $post_args, self = this;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            ;
            return nil;
          }, $DummyLocation_node$eq$1.$$arity = -1);
          
          Opal.def(self, '$expression', $DummyLocation_expression$2 = function $$expression() {
            var self = this;

            return self
          }, $DummyLocation_expression$2.$$arity = 0);
          
          Opal.def(self, '$begin_pos', $DummyLocation_begin_pos$3 = function $$begin_pos() {
            var self = this;

            return 0
          }, $DummyLocation_begin_pos$3.$$arity = 0);
          
          Opal.def(self, '$end_pos', $DummyLocation_end_pos$4 = function $$end_pos() {
            var self = this;

            return 0
          }, $DummyLocation_end_pos$4.$$arity = 0);
          
          Opal.def(self, '$source', $DummyLocation_source$5 = function $$source() {
            var self = this;

            return ""
          }, $DummyLocation_source$5.$$arity = 0);
          
          Opal.def(self, '$line', $DummyLocation_line$6 = function $$line() {
            var self = this;

            return 0
          }, $DummyLocation_line$6.$$arity = 0);
          
          Opal.def(self, '$column', $DummyLocation_column$7 = function $$column() {
            var self = this;

            return 0
          }, $DummyLocation_column$7.$$arity = 0);
          return (Opal.def(self, '$last_line', $DummyLocation_last_line$8 = function $$last_line() {
            var self = this;

            return $$$($$($nesting, 'Float'), 'INFINITY')
          }, $DummyLocation_last_line$8.$$arity = 0), nil) && 'last_line';
        })($nesting[0], null, $nesting);
        Opal.const_set($nesting[0], 'DUMMY_LOCATION', $$($nesting, 'DummyLocation').$new());
        
        Opal.def(self, '$s', $Base_s$9 = function $$s(type, $a) {
          var $post_args, children, self = this, loc = nil;

          
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          children = $post_args;;
          loc = (function() {if ($truthy(self.$current_node())) {
            return self.$current_node().$loc()
          } else {
            return $$($nesting, 'DUMMY_LOCATION')
          }; return nil; })();
          return $$$($$$($$$('::', 'Opal'), 'AST'), 'Node').$new(type, children, $hash2(["location"], {"location": loc}));
        }, $Base_s$9.$$arity = -2);
        Opal.defs(self, '$s', $Base_s$10 = function $$s(type, $a) {
          var $post_args, children, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          children = $post_args;;
          return $$$($$$($$$('::', 'Opal'), 'AST'), 'Node').$new(type, children, $hash2(["location"], {"location": $$($nesting, 'DUMMY_LOCATION')}));
        }, $Base_s$10.$$arity = -2);
        Opal.alias(self, "on_iter", "process_regular_node");
        Opal.alias(self, "on_top", "process_regular_node");
        Opal.alias(self, "on_zsuper", "process_regular_node");
        Opal.alias(self, "on_jscall", "on_send");
        Opal.alias(self, "on_jsattr", "process_regular_node");
        Opal.alias(self, "on_jsattrasgn", "process_regular_node");
        Opal.alias(self, "on_kwsplat", "process_regular_node");
        
        Opal.def(self, '$prepend_to_body', $Base_prepend_to_body$11 = function $$prepend_to_body(body, node) {
          var self = this, stmts = nil;

          
          stmts = $rb_plus(self.$stmts_of(node), self.$stmts_of(body));
          return self.$begin_with_stmts(stmts);
        }, $Base_prepend_to_body$11.$$arity = 2);
        
        Opal.def(self, '$append_to_body', $Base_append_to_body$12 = function $$append_to_body(body, node) {
          var self = this, stmts = nil;

          
          stmts = $rb_plus(self.$stmts_of(body), self.$stmts_of(node));
          return self.$begin_with_stmts(stmts);
        }, $Base_append_to_body$12.$$arity = 2);
        
        Opal.def(self, '$stmts_of', $Base_stmts_of$13 = function $$stmts_of(node) {
          var self = this;

          if ($truthy(node['$nil?']())) {
            return []
          } else if ($truthy(["begin", "kwbegin"]['$include?'](node.$type()))) {
            return node.$children()
          } else {
            return [node]
          }
        }, $Base_stmts_of$13.$$arity = 1);
        
        Opal.def(self, '$begin_with_stmts', $Base_begin_with_stmts$14 = function $$begin_with_stmts(stmts) {
          var self = this, $case = nil;

          return (function() {$case = stmts.$length();
          if ((0)['$===']($case)) {return nil}
          else if ((1)['$===']($case)) {return stmts['$[]'](0)}
          else {return $send(self, 's', ["begin"].concat(Opal.to_a(stmts)))}})()
        }, $Base_begin_with_stmts$14.$$arity = 1);
        self.$attr_accessor("current_node");
        
        Opal.def(self, '$process', $Base_process$15 = function $$process(node) {
          var $iter = $Base_process$15.$$p, $yield = $iter || nil, self = this, $writer = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $Base_process$15.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          return (function() { try {
          
          
          $writer = [node];
          $send(self, 'current_node=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return $send(self, Opal.find_super_dispatcher(self, 'process', $Base_process$15, false), $zuper, $iter);
          } finally {
            (($writer = [nil]), $send(self, 'current_node=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])
          }; })()
        }, $Base_process$15.$$arity = 1);
        return (Opal.def(self, '$error', $Base_error$16 = function $$error(msg) {
          var self = this, error = nil, $writer = nil;

          
          error = $$$($$$('::', 'Opal'), 'RewritingError').$new(msg);
          if ($truthy(self.$current_node())) {
            
            $writer = [self.$current_node().$loc()];
            $send(error, 'location=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          return self.$raise(error);
        }, $Base_error$16.$$arity = 1), nil) && 'error';
      })($nesting[0], $$$($$$($$$('::', 'Parser'), 'AST'), 'Processor'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/rewriters/opal_engine_check"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$children', '$skip_check_present?', '$s', '$skip_check_present_not?', '$updated', '$process_all', '$==']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'OpalEngineCheck');

        var $nesting = [self].concat($parent_nesting), $OpalEngineCheck_on_if$1, $OpalEngineCheck_skip_check_present$ques$2, $OpalEngineCheck_skip_check_present_not$ques$3;

        
        
        Opal.def(self, '$on_if', $OpalEngineCheck_on_if$1 = function $$on_if(node) {
          var $a, self = this, test = nil, true_body = nil, false_body = nil;

          
          $a = [].concat(Opal.to_a(node.$children())), (test = ($a[0] == null ? nil : $a[0])), (true_body = ($a[1] == null ? nil : $a[1])), (false_body = ($a[2] == null ? nil : $a[2])), $a;
          if ($truthy(self['$skip_check_present?'](test))) {
            false_body = self.$s("nil")};
          if ($truthy(self['$skip_check_present_not?'](test))) {
            true_body = self.$s("nil")};
          return node.$updated(nil, self.$process_all([test, true_body, false_body]));
        }, $OpalEngineCheck_on_if$1.$$arity = 1);
        
        Opal.def(self, '$skip_check_present?', $OpalEngineCheck_skip_check_present$ques$2 = function(test) {
          var $a, self = this;

          return ($truthy($a = test['$==']($$($nesting, 'RUBY_ENGINE_CHECK'))) ? $a : test['$==']($$($nesting, 'RUBY_PLATFORM_CHECK')))
        }, $OpalEngineCheck_skip_check_present$ques$2.$$arity = 1);
        
        Opal.def(self, '$skip_check_present_not?', $OpalEngineCheck_skip_check_present_not$ques$3 = function(test) {
          var $a, self = this;

          return ($truthy($a = test['$==']($$($nesting, 'RUBY_ENGINE_CHECK_NOT'))) ? $a : test['$==']($$($nesting, 'RUBY_PLATFORM_CHECK_NOT')))
        }, $OpalEngineCheck_skip_check_present_not$ques$3.$$arity = 1);
        Opal.const_set($nesting[0], 'RUBY_ENGINE_CHECK', self.$s("send", self.$s("const", nil, "RUBY_ENGINE"), "==", self.$s("str", "opal")));
        Opal.const_set($nesting[0], 'RUBY_ENGINE_CHECK_NOT', self.$s("send", self.$s("const", nil, "RUBY_ENGINE"), "!=", self.$s("str", "opal")));
        Opal.const_set($nesting[0], 'RUBY_PLATFORM_CHECK', self.$s("send", self.$s("const", nil, "RUBY_PLATFORM"), "==", self.$s("str", "opal")));
        return Opal.const_set($nesting[0], 'RUBY_PLATFORM_CHECK_NOT', self.$s("send", self.$s("const", nil, "RUBY_PLATFORM"), "!=", self.$s("str", "opal")));
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/rewriters/for_rewriter"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$+', '$find', '$map', '$s', '$next_tmp', '$class', '$type', '$===', '$<<', '$prepend_to_body', '$attr_reader', '$new', '$process', '$to_a', '$result']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ForRewriter');

        var $nesting = [self].concat($parent_nesting), $ForRewriter_reset_tmp_counter$excl$1, $ForRewriter_next_tmp$2, $ForRewriter_on_for$3;

        
        Opal.defs(self, '$reset_tmp_counter!', $ForRewriter_reset_tmp_counter$excl$1 = function() {
          var self = this;

          return (self.counter = 0)
        }, $ForRewriter_reset_tmp_counter$excl$1.$$arity = 0);
        Opal.defs(self, '$next_tmp', $ForRewriter_next_tmp$2 = function $$next_tmp() {
          var $a, self = this;
          if (self.counter == null) self.counter = nil;

          
          self.counter = ($truthy($a = self.counter) ? $a : 0);
          self.counter = $rb_plus(self.counter, 1);
          return "" + "$for_tmp" + (self.counter);
        }, $ForRewriter_next_tmp$2.$$arity = 0);
        
        Opal.def(self, '$on_for', $ForRewriter_on_for$3 = function $$on_for(node) {
          var $a, $$4, self = this, loop_variable = nil, iterating_value = nil, loop_body = nil, iterating_lvars = nil, lvars_declared_in_body = nil, outer_assigns = nil, tmp_loop_variable = nil, get_tmp_loop_variable = nil, loop_variable_assignment = nil, $case = nil;

          
          $a = [].concat(Opal.to_a(node)), (loop_variable = ($a[0] == null ? nil : $a[0])), (iterating_value = ($a[1] == null ? nil : $a[1])), (loop_body = ($a[2] == null ? nil : $a[2])), $a;
          iterating_lvars = $$($nesting, 'LocalVariableAssigns').$find(loop_variable);
          lvars_declared_in_body = $$($nesting, 'LocalVariableAssigns').$find(loop_body);
          outer_assigns = $send($rb_plus(iterating_lvars, lvars_declared_in_body), 'map', [], ($$4 = function(lvar_name){var self = $$4.$$s || this;

          
            
            if (lvar_name == null) {
              lvar_name = nil;
            };
            return self.$s("lvdeclare", lvar_name);}, $$4.$$s = self, $$4.$$arity = 1, $$4));
          tmp_loop_variable = self.$class().$next_tmp();
          get_tmp_loop_variable = self.$s("js_tmp", tmp_loop_variable);
          loop_variable_assignment = (function() {$case = loop_variable.$type();
          if ("mlhs"['$===']($case)) {return self.$s("masgn", loop_variable, get_tmp_loop_variable)}
          else {return loop_variable['$<<'](get_tmp_loop_variable)}})();
          loop_body = self.$prepend_to_body(loop_body, loop_variable_assignment);
          node = self.$s("send", iterating_value, "each", self.$s("iter", self.$s("args", self.$s("arg", tmp_loop_variable)), loop_body));
          return $send(self, 's', ["begin"].concat(Opal.to_a(outer_assigns)).concat([node]));
        }, $ForRewriter_on_for$3.$$arity = 1);
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'LocalVariableAssigns');

          var $nesting = [self].concat($parent_nesting), $LocalVariableAssigns_find$5, $LocalVariableAssigns_initialize$6, $LocalVariableAssigns_on_lvasgn$7;

          
          self.$attr_reader("result");
          Opal.defs(self, '$find', $LocalVariableAssigns_find$5 = function $$find(node) {
            var self = this, processor = nil;

            
            processor = self.$new();
            processor.$process(node);
            return processor.$result().$to_a();
          }, $LocalVariableAssigns_find$5.$$arity = 1);
          
          Opal.def(self, '$initialize', $LocalVariableAssigns_initialize$6 = function $$initialize() {
            var self = this;

            return (self.result = $$($nesting, 'Set').$new())
          }, $LocalVariableAssigns_initialize$6.$$arity = 0);
          return (Opal.def(self, '$on_lvasgn', $LocalVariableAssigns_on_lvasgn$7 = function $$on_lvasgn(node) {
            var $a, $iter = $LocalVariableAssigns_on_lvasgn$7.$$p, $yield = $iter || nil, self = this, name = nil, _ = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

            if ($iter) $LocalVariableAssigns_on_lvasgn$7.$$p = null;
            // Prepare super implicit arguments
            for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
              $zuper[$zuper_i] = arguments[$zuper_i];
            }
            
            $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
            self.$result()['$<<'](name);
            return $send(self, Opal.find_super_dispatcher(self, 'on_lvasgn', $LocalVariableAssigns_on_lvasgn$7, false), $zuper, $iter);
          }, $LocalVariableAssigns_on_lvasgn$7.$$arity = 1), nil) && 'on_lvasgn';
        })($nesting[0], $$($nesting, 'Base'), $nesting);
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/rewriters/explicit_writer_return"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$s', '$=~', '$to_s', '$==', '$process_all', '$updated']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ExplicitWriterReturn');

        var $nesting = [self].concat($parent_nesting), $ExplicitWriterReturn_initialize$1, $ExplicitWriterReturn_on_send$2, $ExplicitWriterReturn_on_masgn$3;

        self.$$prototype.in_masgn = nil;
        
        
        Opal.def(self, '$initialize', $ExplicitWriterReturn_initialize$1 = function $$initialize() {
          var self = this;

          return (self.in_masgn = false)
        }, $ExplicitWriterReturn_initialize$1.$$arity = 0);
        Opal.const_set($nesting[0], 'TMP_NAME', "$writer");
        Opal.const_set($nesting[0], 'GET_ARGS_NODE', self.$s("lvar", $$($nesting, 'TMP_NAME')));
        Opal.const_set($nesting[0], 'RETURN_ARGS_NODE', self.$s("jsattr", $$($nesting, 'GET_ARGS_NODE'), self.$s("send", self.$s("jsattr", $$($nesting, 'GET_ARGS_NODE'), self.$s("str", "length")), "-", self.$s("int", 1))));
        
        Opal.def(self, '$on_send', $ExplicitWriterReturn_on_send$2 = function $$on_send(node) {
          var $a, $iter = $ExplicitWriterReturn_on_send$2.$$p, $yield = $iter || nil, self = this, recv = nil, method_name = nil, args = nil, set_args_node = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $ExplicitWriterReturn_on_send$2.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          if ($truthy(self.in_masgn)) {
            return $send(self, Opal.find_super_dispatcher(self, 'on_send', $ExplicitWriterReturn_on_send$2, false), $zuper, $iter)};
          $a = [].concat(Opal.to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (method_name = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
          if ($truthy(($truthy($a = method_name.$to_s()['$=~'](new RegExp("" + ($$($nesting, 'REGEXP_START')) + "\\w+=" + ($$($nesting, 'REGEXP_END'))))) ? $a : method_name.$to_s()['$==']("[]=")))) {
            
            set_args_node = self.$s("lvasgn", $$($nesting, 'TMP_NAME'), $send(self, 's', ["array"].concat(Opal.to_a(self.$process_all(args)))));
            return self.$s("begin", set_args_node, node.$updated(nil, [recv, method_name, self.$s("splat", $$($nesting, 'GET_ARGS_NODE'))]), $$($nesting, 'RETURN_ARGS_NODE'));
          } else {
            return $send(self, Opal.find_super_dispatcher(self, 'on_send', $ExplicitWriterReturn_on_send$2, false), $zuper, $iter)
          };
        }, $ExplicitWriterReturn_on_send$2.$$arity = 1);
        return (Opal.def(self, '$on_masgn', $ExplicitWriterReturn_on_masgn$3 = function $$on_masgn(node) {
          var $iter = $ExplicitWriterReturn_on_masgn$3.$$p, $yield = $iter || nil, self = this, result = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $ExplicitWriterReturn_on_masgn$3.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          self.in_masgn = true;
          result = $send(self, Opal.find_super_dispatcher(self, 'on_masgn', $ExplicitWriterReturn_on_masgn$3, false), $zuper, $iter);
          self.in_masgn = false;
          return result;
        }, $ExplicitWriterReturn_on_masgn$3.$$arity = 1), nil) && 'on_masgn';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/rewriters/js_reserved_words"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$=~', '$!', '$valid_name?', '$class', '$to_sym', '$valid_ivar_name?', '$[]', '$to_s', '$updated', '$fix_var_name', '$fix_ivar_name']);
  
  self.$require("opal/rewriters/base");
  self.$require("opal/regexp_anchors");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JsReservedWords');

        var $nesting = [self].concat($parent_nesting), $JsReservedWords_valid_name$ques$1, $JsReservedWords_valid_ivar_name$ques$2, $JsReservedWords_fix_var_name$3, $JsReservedWords_fix_ivar_name$4, $JsReservedWords_on_lvar$5, $JsReservedWords_on_lvasgn$6, $JsReservedWords_on_ivar$7, $JsReservedWords_on_ivasgn$8, $JsReservedWords_on_restarg$9, $JsReservedWords_on_argument$10;

        
        Opal.const_set($nesting[0], 'ES51_RESERVED_WORD', new RegExp("" + ($$($nesting, 'REGEXP_START')) + "(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)" + ($$($nesting, 'REGEXP_END'))));
        Opal.const_set($nesting[0], 'ES3_RESERVED_WORD_EXCLUSIVE', new RegExp("" + ($$($nesting, 'REGEXP_START')) + "(?:int|byte|char|goto|long|final|float|short|double|native|throws|boolean|abstract|volatile|transient|synchronized)" + ($$($nesting, 'REGEXP_END'))));
        Opal.const_set($nesting[0], 'PROTO_SPECIAL_PROPS', new RegExp("" + ($$($nesting, 'REGEXP_START')) + "(?:constructor|displayName|__proto__|__parent__|__noSuchMethod__|__count__)" + ($$($nesting, 'REGEXP_END'))));
        Opal.const_set($nesting[0], 'PROTO_SPECIAL_METHODS', new RegExp("" + ($$($nesting, 'REGEXP_START')) + "(?:hasOwnProperty|valueOf)" + ($$($nesting, 'REGEXP_END'))));
        Opal.const_set($nesting[0], 'IMMUTABLE_PROPS', new RegExp("" + ($$($nesting, 'REGEXP_START')) + "(?:NaN|Infinity|undefined)" + ($$($nesting, 'REGEXP_END'))));
        Opal.const_set($nesting[0], 'BASIC_IDENTIFIER_RULES', new RegExp("" + ($$($nesting, 'REGEXP_START')) + "[$_a-z][$_a-z\\d]*" + ($$($nesting, 'REGEXP_END')), 'i'));
        Opal.const_set($nesting[0], 'RESERVED_FUNCTION_NAMES', new RegExp("" + ($$($nesting, 'REGEXP_START')) + "(?:Array)" + ($$($nesting, 'REGEXP_END'))));
        Opal.defs(self, '$valid_name?', $JsReservedWords_valid_name$ques$1 = function(name) {
          var $a, $b, $c, self = this;

          return ($truthy($a = $$($nesting, 'BASIC_IDENTIFIER_RULES')['$=~'](name)) ? ($truthy($b = ($truthy($c = $$($nesting, 'ES51_RESERVED_WORD')['$=~'](name)) ? $c : $$($nesting, 'ES3_RESERVED_WORD_EXCLUSIVE')['$=~'](name))) ? $b : $$($nesting, 'IMMUTABLE_PROPS')['$=~'](name))['$!']() : $a)
        }, $JsReservedWords_valid_name$ques$1.$$arity = 1);
        Opal.defs(self, '$valid_ivar_name?', $JsReservedWords_valid_ivar_name$ques$2 = function(name) {
          var $a, self = this;

          return ($truthy($a = $$($nesting, 'PROTO_SPECIAL_PROPS')['$=~'](name)) ? $a : $$($nesting, 'PROTO_SPECIAL_METHODS')['$=~'](name))['$!']()
        }, $JsReservedWords_valid_ivar_name$ques$2.$$arity = 1);
        
        Opal.def(self, '$fix_var_name', $JsReservedWords_fix_var_name$3 = function $$fix_var_name(name) {
          var self = this;

          if ($truthy(self.$class()['$valid_name?'](name))) {
            return name
          } else {
            return (("" + (name)) + "$").$to_sym()
          }
        }, $JsReservedWords_fix_var_name$3.$$arity = 1);
        
        Opal.def(self, '$fix_ivar_name', $JsReservedWords_fix_ivar_name$4 = function $$fix_ivar_name(name) {
          var self = this;

          if ($truthy(self.$class()['$valid_ivar_name?'](name.$to_s()['$[]']($range(1, -1, false))))) {
            return name
          } else {
            return (("" + (name)) + "$").$to_sym()
          }
        }, $JsReservedWords_fix_ivar_name$4.$$arity = 1);
        
        Opal.def(self, '$on_lvar', $JsReservedWords_on_lvar$5 = function $$on_lvar(node) {
          var $a, $iter = $JsReservedWords_on_lvar$5.$$p, $yield = $iter || nil, self = this, name = nil, _ = nil;

          if ($iter) $JsReservedWords_on_lvar$5.$$p = null;
          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          node = node.$updated(nil, [self.$fix_var_name(name)]);
          return $send(self, Opal.find_super_dispatcher(self, 'on_lvar', $JsReservedWords_on_lvar$5, false), [node], null);
        }, $JsReservedWords_on_lvar$5.$$arity = 1);
        
        Opal.def(self, '$on_lvasgn', $JsReservedWords_on_lvasgn$6 = function $$on_lvasgn(node) {
          var $a, $iter = $JsReservedWords_on_lvasgn$6.$$p, $yield = $iter || nil, self = this, name = nil, value = nil;

          if ($iter) $JsReservedWords_on_lvasgn$6.$$p = null;
          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $a;
          node = (function() {if ($truthy(value)) {
            return node.$updated(nil, [self.$fix_var_name(name), value])
          } else {
            return node.$updated(nil, [self.$fix_var_name(name)])
          }; return nil; })();
          return $send(self, Opal.find_super_dispatcher(self, 'on_lvasgn', $JsReservedWords_on_lvasgn$6, false), [node], null);
        }, $JsReservedWords_on_lvasgn$6.$$arity = 1);
        
        Opal.def(self, '$on_ivar', $JsReservedWords_on_ivar$7 = function $$on_ivar(node) {
          var $a, $iter = $JsReservedWords_on_ivar$7.$$p, $yield = $iter || nil, self = this, name = nil, _ = nil;

          if ($iter) $JsReservedWords_on_ivar$7.$$p = null;
          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          node = node.$updated(nil, [self.$fix_ivar_name(name)]);
          return $send(self, Opal.find_super_dispatcher(self, 'on_ivar', $JsReservedWords_on_ivar$7, false), [node], null);
        }, $JsReservedWords_on_ivar$7.$$arity = 1);
        
        Opal.def(self, '$on_ivasgn', $JsReservedWords_on_ivasgn$8 = function $$on_ivasgn(node) {
          var $a, $iter = $JsReservedWords_on_ivasgn$8.$$p, $yield = $iter || nil, self = this, name = nil, value = nil;

          if ($iter) $JsReservedWords_on_ivasgn$8.$$p = null;
          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $a;
          node = (function() {if ($truthy(value)) {
            return node.$updated(nil, [self.$fix_ivar_name(name), value])
          } else {
            return node.$updated(nil, [self.$fix_ivar_name(name)])
          }; return nil; })();
          return $send(self, Opal.find_super_dispatcher(self, 'on_ivasgn', $JsReservedWords_on_ivasgn$8, false), [node], null);
        }, $JsReservedWords_on_ivasgn$8.$$arity = 1);
        
        Opal.def(self, '$on_restarg', $JsReservedWords_on_restarg$9 = function $$on_restarg(node) {
          var $a, self = this, name = nil, _ = nil;

          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          if ($truthy(name)) {
            node = node.$updated(nil, [self.$fix_var_name(name)], $hash2(["meta"], {"meta": $hash2(["arg_name"], {"arg_name": name})}))};
          return node;
        }, $JsReservedWords_on_restarg$9.$$arity = 1);
        return (Opal.def(self, '$on_argument', $JsReservedWords_on_argument$10 = function $$on_argument(node) {
          var $a, $iter = $JsReservedWords_on_argument$10.$$p, $yield = $iter || nil, self = this, name = nil, value = nil, fixed_name = nil, new_children = nil;

          if ($iter) $JsReservedWords_on_argument$10.$$p = null;
          
          node = $send(self, Opal.find_super_dispatcher(self, 'on_argument', $JsReservedWords_on_argument$10, false), [node], null);
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $a;
          fixed_name = self.$fix_var_name(name);
          new_children = (function() {if ($truthy(value)) {
            return [fixed_name, value]
          } else {
            return [fixed_name]
          }; return nil; })();
          return node.$updated(nil, new_children, $hash2(["meta"], {"meta": $hash2(["arg_name"], {"arg_name": name})}));
        }, $JsReservedWords_on_argument$10.$$arity = 1), nil) && 'on_argument';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/rewriters/block_to_iter"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$require', '$s', '$updated', '$+', '$children']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BlockToIter');

        var $nesting = [self].concat($parent_nesting), $BlockToIter_on_block$1;

        return (Opal.def(self, '$on_block', $BlockToIter_on_block$1 = function $$on_block(node) {
          var $a, $iter = $BlockToIter_on_block$1.$$p, $yield = $iter || nil, self = this, recvr = nil, args = nil, body = nil, iter_node = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $BlockToIter_on_block$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          $a = [].concat(Opal.to_a($send(self, Opal.find_super_dispatcher(self, 'on_block', $BlockToIter_on_block$1, false), $zuper, $iter))), (recvr = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
          iter_node = self.$s("iter", args, body);
          return recvr.$updated(nil, $rb_plus(recvr.$children(), [iter_node]));
        }, $BlockToIter_on_block$1.$$arity = 1), nil) && 'on_block'
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/rewriters/dot_js_syntax"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$==', '$type', '$===', '$!=', '$size', '$error', '$first', '$to_js_attr_call', '$to_js_attr_assign_call', '$to_native_js_call', '$s']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DotJsSyntax');

        var $nesting = [self].concat($parent_nesting), $DotJsSyntax_on_send$1, $DotJsSyntax_to_native_js_call$2, $DotJsSyntax_to_js_attr_call$3, $DotJsSyntax_to_js_attr_assign_call$4;

        
        
        Opal.def(self, '$on_send', $DotJsSyntax_on_send$1 = function $$on_send(node) {
          var $a, $iter = $DotJsSyntax_on_send$1.$$p, $yield = $iter || nil, self = this, recv = nil, meth = nil, args = nil, recv_of_recv = nil, meth_of_recv = nil, _ = nil, $case = nil, property = nil, value = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $DotJsSyntax_on_send$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          $a = [].concat(Opal.to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (meth = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
          if ($truthy(($truthy($a = recv) ? recv.$type()['$==']("send") : $a))) {
            
            $a = [].concat(Opal.to_a(recv)), (recv_of_recv = ($a[0] == null ? nil : $a[0])), (meth_of_recv = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), $a;
            if (meth_of_recv['$==']("JS")) {
              
              $case = meth;
              if ("[]"['$===']($case)) {
              if ($truthy(args.$size()['$!='](1))) {
                self.$error(".JS[:property] syntax supports only one argument")};
              property = args.$first();
              node = self.$to_js_attr_call(recv_of_recv, property);}
              else if ("[]="['$===']($case)) {
              if ($truthy(args.$size()['$!='](2))) {
                self.$error(".JS[:property]= syntax supports only two arguments")};
              $a = [].concat(Opal.to_a(args)), (property = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $a;
              node = self.$to_js_attr_assign_call(recv_of_recv, property, value);}
              else {node = self.$to_native_js_call(recv_of_recv, meth, args)};
              return $send(self, Opal.find_super_dispatcher(self, 'on_send', $DotJsSyntax_on_send$1, false), [node], null);
            } else {
              return $send(self, Opal.find_super_dispatcher(self, 'on_send', $DotJsSyntax_on_send$1, false), $zuper, $iter)
            };
          } else {
            return $send(self, Opal.find_super_dispatcher(self, 'on_send', $DotJsSyntax_on_send$1, false), $zuper, $iter)
          };
        }, $DotJsSyntax_on_send$1.$$arity = 1);
        
        Opal.def(self, '$to_native_js_call', $DotJsSyntax_to_native_js_call$2 = function $$to_native_js_call(recv, meth, args) {
          var self = this;

          return $send(self, 's', ["jscall", recv, meth].concat(Opal.to_a(args)))
        }, $DotJsSyntax_to_native_js_call$2.$$arity = 3);
        
        Opal.def(self, '$to_js_attr_call', $DotJsSyntax_to_js_attr_call$3 = function $$to_js_attr_call(recv, property) {
          var self = this;

          return self.$s("jsattr", recv, property)
        }, $DotJsSyntax_to_js_attr_call$3.$$arity = 2);
        return (Opal.def(self, '$to_js_attr_assign_call', $DotJsSyntax_to_js_attr_assign_call$4 = function $$to_js_attr_assign_call(recv, property, value) {
          var self = this;

          return self.$s("jsattrasgn", recv, property, value)
        }, $DotJsSyntax_to_js_attr_assign_call$4.$$arity = 3), nil) && 'to_js_attr_assign_call';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/rewriters/logical_operator_assignment"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $lambda = Opal.lambda, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$require', '$+', '$updated', '$s', '$[]', '$==', '$type', '$new_temp', '$freeze', '$call', '$fetch', '$error', '$process', '$include?']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'LogicalOperatorAssignment');

        var $nesting = [self].concat($parent_nesting), $LogicalOperatorAssignment_reset_tmp_counter$excl$1, $LogicalOperatorAssignment_new_temp$2, $LogicalOperatorAssignment$3, $LogicalOperatorAssignment_on_or_asgn$7, $LogicalOperatorAssignment_on_and_asgn$9, $LogicalOperatorAssignment_on_defined$ques$11;

        
        Opal.defs(self, '$reset_tmp_counter!', $LogicalOperatorAssignment_reset_tmp_counter$excl$1 = function() {
          var self = this;

          return (Opal.class_variable_set($nesting[0], '@@counter', 0))
        }, $LogicalOperatorAssignment_reset_tmp_counter$excl$1.$$arity = 0);
        Opal.defs(self, '$new_temp', $LogicalOperatorAssignment_new_temp$2 = function $$new_temp() {
          var $a, $b, self = this;

          
          (Opal.class_variable_set($nesting[0], '@@counter', ($truthy($a = (($b = $nesting[0].$$cvars['@@counter']) == null ? nil : $b)) ? $a : 0)));
          (Opal.class_variable_set($nesting[0], '@@counter', $rb_plus((($a = $nesting[0].$$cvars['@@counter']) == null ? nil : $a), 1)));
          return "" + "$logical_op_recvr_tmp_" + ((($a = $nesting[0].$$cvars['@@counter']) == null ? nil : $a));
        }, $LogicalOperatorAssignment_new_temp$2.$$arity = 0);
        Opal.const_set($nesting[0], 'GET_SET', $lambda(($LogicalOperatorAssignment$3 = function(get_type, set_type){var self = $LogicalOperatorAssignment$3.$$s || this, $$4;

        
          
          if (get_type == null) {
            get_type = nil;
          };
          
          if (set_type == null) {
            set_type = nil;
          };
          return $lambda(($$4 = function(lhs, rhs, root_type){var self = $$4.$$s || this, get_node = nil, condition_node = nil;

          
            
            if (lhs == null) {
              lhs = nil;
            };
            
            if (rhs == null) {
              rhs = nil;
            };
            
            if (root_type == null) {
              root_type = nil;
            };
            get_node = lhs.$updated(get_type);
            condition_node = self.$s(root_type, get_node, rhs);
            return lhs.$updated(set_type, [].concat(Opal.to_a(lhs)).concat([condition_node]));}, $$4.$$s = self, $$4.$$arity = 3, $$4));}, $LogicalOperatorAssignment$3.$$s = self, $LogicalOperatorAssignment$3.$$arity = 2, $LogicalOperatorAssignment$3)));
        Opal.const_set($nesting[0], 'LocalVariableHandler', $$($nesting, 'GET_SET')['$[]']("lvar", "lvasgn"));
        Opal.const_set($nesting[0], 'InstanceVariableHandler', $$($nesting, 'GET_SET')['$[]']("ivar", "ivasgn"));
        Opal.const_set($nesting[0], 'ConstantHandler', $$($nesting, 'GET_SET')['$[]']("const", "casgn"));
        Opal.const_set($nesting[0], 'GlobalVariableHandler', $$($nesting, 'GET_SET')['$[]']("gvar", "gvasgn"));
        Opal.const_set($nesting[0], 'ClassVariableHandler', $$($nesting, 'GET_SET')['$[]']("cvar", "cvasgn"));
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'SendHandler');

          var $nesting = [self].concat($parent_nesting), $SendHandler_call$5;

          return (Opal.defs(self, '$call', $SendHandler_call$5 = function $$call(lhs, rhs, root_type) {
            var $a, self = this, recvr = nil, reader_method = nil, args = nil, recvr_tmp = nil, cache_recvr = nil, writer_method = nil, call_reader = nil, call_writer = nil, get_or_set = nil;

            
            $a = [].concat(Opal.to_a(lhs)), (recvr = ($a[0] == null ? nil : $a[0])), (reader_method = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
            if ($truthy(($truthy($a = recvr) ? recvr.$type()['$==']("send") : $a))) {
              
              recvr_tmp = self.$new_temp();
              cache_recvr = self.$s("lvasgn", recvr_tmp, recvr);
              recvr = self.$s("js_tmp", recvr_tmp);};
            writer_method = "" + (reader_method) + "=";
            call_reader = lhs.$updated("send", [recvr, reader_method].concat(Opal.to_a(args)));
            call_writer = lhs.$updated("send", [recvr, writer_method].concat(Opal.to_a(args)).concat([rhs]));
            get_or_set = self.$s(root_type, call_reader, call_writer);
            if ($truthy(cache_recvr)) {
              return self.$s("begin", cache_recvr, get_or_set)
            } else {
              return get_or_set
            };
          }, $SendHandler_call$5.$$arity = 3), nil) && 'call'
        })($nesting[0], self, $nesting);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ConditionalSendHandler');

          var $nesting = [self].concat($parent_nesting), $ConditionalSendHandler_call$6;

          return (Opal.defs(self, '$call', $ConditionalSendHandler_call$6 = function $$call(lhs, rhs, root_type) {
            var $a, self = this, recvr = nil, meth = nil, args = nil, recvr_tmp = nil, cache_recvr = nil, recvr_is_nil = nil, plain_send = nil, plain_or_asgn = nil;

            
            root_type = "" + (root_type) + "_asgn";
            $a = [].concat(Opal.to_a(lhs)), (recvr = ($a[0] == null ? nil : $a[0])), (meth = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
            recvr_tmp = self.$new_temp();
            cache_recvr = self.$s("lvasgn", recvr_tmp, recvr);
            recvr = self.$s("js_tmp", recvr_tmp);
            recvr_is_nil = self.$s("send", recvr, "nil?");
            plain_send = lhs.$updated("send", [recvr, meth].concat(Opal.to_a(args)));
            plain_or_asgn = self.$s(root_type, plain_send, rhs);
            return self.$s("begin", cache_recvr, self.$s("if", recvr_is_nil, self.$s("nil"), plain_or_asgn));
          }, $ConditionalSendHandler_call$6.$$arity = 3), nil) && 'call'
        })($nesting[0], self, $nesting);
        Opal.const_set($nesting[0], 'HANDLERS', $hash2(["lvasgn", "ivasgn", "casgn", "gvasgn", "cvasgn", "send", "csend"], {"lvasgn": $$($nesting, 'LocalVariableHandler'), "ivasgn": $$($nesting, 'InstanceVariableHandler'), "casgn": $$($nesting, 'ConstantHandler'), "gvasgn": $$($nesting, 'GlobalVariableHandler'), "cvasgn": $$($nesting, 'ClassVariableHandler'), "send": $$($nesting, 'SendHandler'), "csend": $$($nesting, 'ConditionalSendHandler')}).$freeze());
        
        Opal.def(self, '$on_or_asgn', $LogicalOperatorAssignment_on_or_asgn$7 = function $$on_or_asgn(node) {
          var $a, $$8, self = this, lhs = nil, rhs = nil, result = nil;

          
          $a = [].concat(Opal.to_a(node)), (lhs = ($a[0] == null ? nil : $a[0])), (rhs = ($a[1] == null ? nil : $a[1])), $a;
          result = $send($$($nesting, 'HANDLERS'), 'fetch', [lhs.$type()], ($$8 = function(){var self = $$8.$$s || this;

          return self.$error("" + "cannot handle LHS type: " + (lhs.$type()))}, $$8.$$s = self, $$8.$$arity = 0, $$8)).$call(lhs, rhs, "or");
          return self.$process(result);
        }, $LogicalOperatorAssignment_on_or_asgn$7.$$arity = 1);
        
        Opal.def(self, '$on_and_asgn', $LogicalOperatorAssignment_on_and_asgn$9 = function $$on_and_asgn(node) {
          var $a, $$10, self = this, lhs = nil, rhs = nil, result = nil;

          
          $a = [].concat(Opal.to_a(node)), (lhs = ($a[0] == null ? nil : $a[0])), (rhs = ($a[1] == null ? nil : $a[1])), $a;
          result = $send($$($nesting, 'HANDLERS'), 'fetch', [lhs.$type()], ($$10 = function(){var self = $$10.$$s || this;

          return self.$error("" + "cannot handle LHS type: " + (lhs.$type()))}, $$10.$$s = self, $$10.$$arity = 0, $$10)).$call(lhs, rhs, "and");
          return self.$process(result);
        }, $LogicalOperatorAssignment_on_and_asgn$9.$$arity = 1);
        Opal.const_set($nesting[0], 'ASSIGNMENT_STRING_NODE', self.$s("str", "assignment"));
        return (Opal.def(self, '$on_defined?', $LogicalOperatorAssignment_on_defined$ques$11 = function(node) {
          var $a, $iter = $LogicalOperatorAssignment_on_defined$ques$11.$$p, $yield = $iter || nil, self = this, inner = nil, _ = nil;

          if ($iter) $LogicalOperatorAssignment_on_defined$ques$11.$$p = null;
          
          $a = [].concat(Opal.to_a(node)), (inner = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          if ($truthy(["or_asgn", "and_asgn"]['$include?'](inner.$type()))) {
            return $$($nesting, 'ASSIGNMENT_STRING_NODE')
          } else {
            return $send(self, Opal.find_super_dispatcher(self, 'on_defined?', $LogicalOperatorAssignment_on_defined$ques$11, false), [node], null)
          };
        }, $LogicalOperatorAssignment_on_defined$ques$11.$$arity = 1), nil) && 'on_defined?';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/rewriters/binary_operator_assignment"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $lambda = Opal.lambda, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$require', '$+', '$updated', '$s', '$[]', '$==', '$type', '$new_temp', '$freeze', '$call', '$fetch', '$error', '$process']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BinaryOperatorAssignment');

        var $nesting = [self].concat($parent_nesting), $BinaryOperatorAssignment_reset_tmp_counter$excl$1, $BinaryOperatorAssignment_new_temp$2, $BinaryOperatorAssignment$3, $BinaryOperatorAssignment_on_op_asgn$7, $BinaryOperatorAssignment_on_defined$ques$9;

        
        Opal.defs(self, '$reset_tmp_counter!', $BinaryOperatorAssignment_reset_tmp_counter$excl$1 = function() {
          var self = this;

          return (Opal.class_variable_set($nesting[0], '@@counter', 0))
        }, $BinaryOperatorAssignment_reset_tmp_counter$excl$1.$$arity = 0);
        Opal.defs(self, '$new_temp', $BinaryOperatorAssignment_new_temp$2 = function $$new_temp() {
          var $a, $b, self = this;

          
          (Opal.class_variable_set($nesting[0], '@@counter', ($truthy($a = (($b = $nesting[0].$$cvars['@@counter']) == null ? nil : $b)) ? $a : 0)));
          (Opal.class_variable_set($nesting[0], '@@counter', $rb_plus((($a = $nesting[0].$$cvars['@@counter']) == null ? nil : $a), 1)));
          return "" + "$binary_op_recvr_tmp_" + ((($a = $nesting[0].$$cvars['@@counter']) == null ? nil : $a));
        }, $BinaryOperatorAssignment_new_temp$2.$$arity = 0);
        Opal.const_set($nesting[0], 'GET_SET', $lambda(($BinaryOperatorAssignment$3 = function(get_type, set_type){var self = $BinaryOperatorAssignment$3.$$s || this, $$4;

        
          
          if (get_type == null) {
            get_type = nil;
          };
          
          if (set_type == null) {
            set_type = nil;
          };
          return $lambda(($$4 = function(lhs, operation, rhs){var self = $$4.$$s || this, get_node = nil, set_node = nil;

          
            
            if (lhs == null) {
              lhs = nil;
            };
            
            if (operation == null) {
              operation = nil;
            };
            
            if (rhs == null) {
              rhs = nil;
            };
            get_node = lhs.$updated(get_type);
            set_node = self.$s("send", get_node, operation, rhs);
            return lhs.$updated(set_type, [].concat(Opal.to_a(lhs)).concat([set_node]));}, $$4.$$s = self, $$4.$$arity = 3, $$4));}, $BinaryOperatorAssignment$3.$$s = self, $BinaryOperatorAssignment$3.$$arity = 2, $BinaryOperatorAssignment$3)));
        Opal.const_set($nesting[0], 'LocalVariableHandler', $$($nesting, 'GET_SET')['$[]']("lvar", "lvasgn"));
        Opal.const_set($nesting[0], 'InstanceVariableHandler', $$($nesting, 'GET_SET')['$[]']("ivar", "ivasgn"));
        Opal.const_set($nesting[0], 'ConstantHandler', $$($nesting, 'GET_SET')['$[]']("const", "casgn"));
        Opal.const_set($nesting[0], 'GlobalVariableHandler', $$($nesting, 'GET_SET')['$[]']("gvar", "gvasgn"));
        Opal.const_set($nesting[0], 'ClassVariableHandler', $$($nesting, 'GET_SET')['$[]']("cvar", "cvasgn"));
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'SendHandler');

          var $nesting = [self].concat($parent_nesting), $SendHandler_call$5;

          return (Opal.defs(self, '$call', $SendHandler_call$5 = function $$call(lhs, operation, rhs) {
            var $a, self = this, recvr = nil, reader_method = nil, args = nil, recvr_tmp = nil, cache_recvr = nil, writer_method = nil, call_reader = nil, call_op = nil, call_writer = nil;

            
            $a = [].concat(Opal.to_a(lhs)), (recvr = ($a[0] == null ? nil : $a[0])), (reader_method = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
            if ($truthy(($truthy($a = recvr) ? recvr.$type()['$==']("send") : $a))) {
              
              recvr_tmp = self.$new_temp();
              cache_recvr = self.$s("lvasgn", recvr_tmp, recvr);
              recvr = self.$s("js_tmp", recvr_tmp);};
            writer_method = "" + (reader_method) + "=";
            call_reader = lhs.$updated("send", [recvr, reader_method].concat(Opal.to_a(args)));
            call_op = self.$s("send", call_reader, operation, rhs);
            call_writer = lhs.$updated("send", [recvr, writer_method].concat(Opal.to_a(args)).concat([call_op]));
            if ($truthy(cache_recvr)) {
              return self.$s("begin", cache_recvr, call_writer)
            } else {
              return call_writer
            };
          }, $SendHandler_call$5.$$arity = 3), nil) && 'call'
        })($nesting[0], self, $nesting);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ConditionalSendHandler');

          var $nesting = [self].concat($parent_nesting), $ConditionalSendHandler_call$6;

          return (Opal.defs(self, '$call', $ConditionalSendHandler_call$6 = function $$call(lhs, operation, rhs) {
            var $a, self = this, recvr = nil, meth = nil, args = nil, recvr_tmp = nil, cache_recvr = nil, recvr_is_nil = nil, plain_send = nil, plain_op_asgn = nil;

            
            $a = [].concat(Opal.to_a(lhs)), (recvr = ($a[0] == null ? nil : $a[0])), (meth = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
            recvr_tmp = self.$new_temp();
            cache_recvr = self.$s("lvasgn", recvr_tmp, recvr);
            recvr = self.$s("js_tmp", recvr_tmp);
            recvr_is_nil = self.$s("send", recvr, "nil?");
            plain_send = lhs.$updated("send", [recvr, meth].concat(Opal.to_a(args)));
            plain_op_asgn = self.$s("op_asgn", plain_send, operation, rhs);
            return self.$s("begin", cache_recvr, self.$s("if", recvr_is_nil, self.$s("nil"), plain_op_asgn));
          }, $ConditionalSendHandler_call$6.$$arity = 3), nil) && 'call'
        })($nesting[0], self, $nesting);
        Opal.const_set($nesting[0], 'HANDLERS', $hash2(["lvasgn", "ivasgn", "casgn", "gvasgn", "cvasgn", "send", "csend"], {"lvasgn": $$($nesting, 'LocalVariableHandler'), "ivasgn": $$($nesting, 'InstanceVariableHandler'), "casgn": $$($nesting, 'ConstantHandler'), "gvasgn": $$($nesting, 'GlobalVariableHandler'), "cvasgn": $$($nesting, 'ClassVariableHandler'), "send": $$($nesting, 'SendHandler'), "csend": $$($nesting, 'ConditionalSendHandler')}).$freeze());
        
        Opal.def(self, '$on_op_asgn', $BinaryOperatorAssignment_on_op_asgn$7 = function $$on_op_asgn(node) {
          var $a, $$8, self = this, lhs = nil, op = nil, rhs = nil, result = nil;

          
          $a = [].concat(Opal.to_a(node)), (lhs = ($a[0] == null ? nil : $a[0])), (op = ($a[1] == null ? nil : $a[1])), (rhs = ($a[2] == null ? nil : $a[2])), $a;
          result = $send($$($nesting, 'HANDLERS'), 'fetch', [lhs.$type()], ($$8 = function(){var self = $$8.$$s || this;

          return self.$error("" + "cannot handle LHS type: " + (lhs.$type()))}, $$8.$$s = self, $$8.$$arity = 0, $$8)).$call(lhs, op, rhs);
          return self.$process(result);
        }, $BinaryOperatorAssignment_on_op_asgn$7.$$arity = 1);
        Opal.const_set($nesting[0], 'ASSIGNMENT_STRING_NODE', self.$s("str", "assignment"));
        return (Opal.def(self, '$on_defined?', $BinaryOperatorAssignment_on_defined$ques$9 = function(node) {
          var $a, $iter = $BinaryOperatorAssignment_on_defined$ques$9.$$p, $yield = $iter || nil, self = this, inner = nil, _ = nil;

          if ($iter) $BinaryOperatorAssignment_on_defined$ques$9.$$p = null;
          
          $a = [].concat(Opal.to_a(node)), (inner = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          if (inner.$type()['$==']("op_asgn")) {
            return $$($nesting, 'ASSIGNMENT_STRING_NODE')
          } else {
            return $send(self, Opal.find_super_dispatcher(self, 'on_defined?', $BinaryOperatorAssignment_on_defined$ques$9, false), [node], null)
          };
        }, $BinaryOperatorAssignment_on_defined$ques$9.$$arity = 1), nil) && 'on_defined?';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/rewriters/hashes/key_duplicates_rewriter"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$new', '$include?', '$type', '$<<', '$==', '$process_regular_node', '$updated', '$inspect', '$warn']);
  
  self.$require("opal/rewriters/base");
  self.$require("set");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Hashes');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'KeyDuplicatesRewriter');

          var $nesting = [self].concat($parent_nesting), $KeyDuplicatesRewriter_initialize$1, $KeyDuplicatesRewriter_on_hash$2, $KeyDuplicatesRewriter_on_pair$3, $KeyDuplicatesRewriter_on_kwsplat$4;

          self.$$prototype.keys = nil;
          
          
          Opal.def(self, '$initialize', $KeyDuplicatesRewriter_initialize$1 = function $$initialize() {
            var self = this;

            return (self.keys = $$($nesting, 'UniqKeysSet').$new())
          }, $KeyDuplicatesRewriter_initialize$1.$$arity = 0);
          
          Opal.def(self, '$on_hash', $KeyDuplicatesRewriter_on_hash$2 = function $$on_hash(node) {
            var $a, $iter = $KeyDuplicatesRewriter_on_hash$2.$$p, $yield = $iter || nil, self = this, previous_keys = nil;

            if ($iter) $KeyDuplicatesRewriter_on_hash$2.$$p = null;
            return (function() { try {
            
            $a = [self.keys, $$($nesting, 'UniqKeysSet').$new()], (previous_keys = $a[0]), (self.keys = $a[1]), $a;
            return $send(self, Opal.find_super_dispatcher(self, 'on_hash', $KeyDuplicatesRewriter_on_hash$2, false), [node], null);
            } finally {
              (self.keys = previous_keys)
            }; })()
          }, $KeyDuplicatesRewriter_on_hash$2.$$arity = 1);
          
          Opal.def(self, '$on_pair', $KeyDuplicatesRewriter_on_pair$3 = function $$on_pair(node) {
            var $a, $iter = $KeyDuplicatesRewriter_on_pair$3.$$p, $yield = $iter || nil, self = this, key = nil, _value = nil;

            if ($iter) $KeyDuplicatesRewriter_on_pair$3.$$p = null;
            
            $a = [].concat(Opal.to_a(node)), (key = ($a[0] == null ? nil : $a[0])), (_value = ($a[1] == null ? nil : $a[1])), $a;
            if ($truthy(["str", "sym"]['$include?'](key.$type()))) {
              self.keys['$<<'](key)};
            return $send(self, Opal.find_super_dispatcher(self, 'on_pair', $KeyDuplicatesRewriter_on_pair$3, false), [node], null);
          }, $KeyDuplicatesRewriter_on_pair$3.$$arity = 1);
          
          Opal.def(self, '$on_kwsplat', $KeyDuplicatesRewriter_on_kwsplat$4 = function $$on_kwsplat(node) {
            var $a, self = this, hash = nil, _ = nil;

            
            $a = [].concat(Opal.to_a(node)), (hash = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
            if (hash.$type()['$==']("hash")) {
              hash = self.$process_regular_node(hash)};
            return node.$updated(nil, [hash]);
          }, $KeyDuplicatesRewriter_on_kwsplat$4.$$arity = 1);
          return (function($base, $super, $parent_nesting) {
            var self = $klass($base, $super, 'UniqKeysSet');

            var $nesting = [self].concat($parent_nesting), $UniqKeysSet_initialize$5, $UniqKeysSet_$lt$lt$6;

            self.$$prototype.set = nil;
            
            
            Opal.def(self, '$initialize', $UniqKeysSet_initialize$5 = function $$initialize() {
              var self = this;

              return (self.set = $$($nesting, 'Set').$new())
            }, $UniqKeysSet_initialize$5.$$arity = 0);
            return (Opal.def(self, '$<<', $UniqKeysSet_$lt$lt$6 = function(element) {
              var $a, self = this, key = nil, _ = nil;

              if ($truthy(self.set['$include?'](element))) {
                
                $a = [].concat(Opal.to_a(element)), (key = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
                key = (function() {if (element.$type()['$==']("str")) {
                  return key.$inspect()
                } else {
                  return "" + ":" + (key)
                }; return nil; })();
                return $$($nesting, 'Kernel').$warn("" + "warning: key " + (key) + " is duplicated and overwritten");
              } else {
                return self.set['$<<'](element)
              }
            }, $UniqKeysSet_$lt$lt$6.$$arity = 1), nil) && '<<';
          })($nesting[0], null, $nesting);
        })($nesting[0], $$$($$$($$$('::', 'Opal'), 'Rewriters'), 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/rewriters/dump_args"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$updated']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DumpArgs');

        var $nesting = [self].concat($parent_nesting), $DumpArgs_on_def$1, $DumpArgs_on_defs$2, $DumpArgs_on_iter$3;

        
        
        Opal.def(self, '$on_def', $DumpArgs_on_def$1 = function $$on_def(node) {
          var $a, $iter = $DumpArgs_on_def$1.$$p, $yield = $iter || nil, self = this, _mid = nil, args = nil, _body = nil;

          if ($iter) $DumpArgs_on_def$1.$$p = null;
          
          node = $send(self, Opal.find_super_dispatcher(self, 'on_def', $DumpArgs_on_def$1, false), [node], null);
          $a = [].concat(Opal.to_a(node)), (_mid = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (_body = ($a[2] == null ? nil : $a[2])), $a;
          return node.$updated(nil, nil, $hash2(["meta"], {"meta": $hash2(["original_args"], {"original_args": args})}));
        }, $DumpArgs_on_def$1.$$arity = 1);
        
        Opal.def(self, '$on_defs', $DumpArgs_on_defs$2 = function $$on_defs(node) {
          var $a, $iter = $DumpArgs_on_defs$2.$$p, $yield = $iter || nil, self = this, _recv = nil, _mid = nil, args = nil, _body = nil;

          if ($iter) $DumpArgs_on_defs$2.$$p = null;
          
          node = $send(self, Opal.find_super_dispatcher(self, 'on_defs', $DumpArgs_on_defs$2, false), [node], null);
          $a = [].concat(Opal.to_a(node)), (_recv = ($a[0] == null ? nil : $a[0])), (_mid = ($a[1] == null ? nil : $a[1])), (args = ($a[2] == null ? nil : $a[2])), (_body = ($a[3] == null ? nil : $a[3])), $a;
          return node.$updated(nil, nil, $hash2(["meta"], {"meta": $hash2(["original_args"], {"original_args": args})}));
        }, $DumpArgs_on_defs$2.$$arity = 1);
        return (Opal.def(self, '$on_iter', $DumpArgs_on_iter$3 = function $$on_iter(node) {
          var $a, $iter = $DumpArgs_on_iter$3.$$p, $yield = $iter || nil, self = this, args = nil, _body = nil;

          if ($iter) $DumpArgs_on_iter$3.$$p = null;
          
          node = $send(self, Opal.find_super_dispatcher(self, 'on_iter', $DumpArgs_on_iter$3, false), [node], null);
          $a = [].concat(Opal.to_a(node)), (args = ($a[0] == null ? nil : $a[0])), (_body = ($a[1] == null ? nil : $a[1])), $a;
          return node.$updated(nil, nil, $hash2(["meta"], {"meta": $hash2(["original_args"], {"original_args": args})}));
        }, $DumpArgs_on_iter$3.$$arity = 1), nil) && 'on_iter';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/rewriters/mlhs_args"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$new', '$updated', '$rewritten', '$initialization', '$s', '$prepend_to_body', '$attr_reader', '$split!', '$+', '$each', '$children', '$==', '$type', '$new_mlhs_tmp', '$process', '$<<', '$length', '$[]', '$empty?']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'MlhsArgs');

        var $nesting = [self].concat($parent_nesting), $MlhsArgs_on_def$1, $MlhsArgs_on_defs$2, $MlhsArgs_on_iter$3;

        
        
        Opal.def(self, '$on_def', $MlhsArgs_on_def$1 = function $$on_def(node) {
          var $a, $iter = $MlhsArgs_on_def$1.$$p, $yield = $iter || nil, self = this, mid = nil, args = nil, body = nil, arguments$ = nil;

          if ($iter) $MlhsArgs_on_def$1.$$p = null;
          
          node = $send(self, Opal.find_super_dispatcher(self, 'on_def', $MlhsArgs_on_def$1, false), [node], null);
          $a = [].concat(Opal.to_a(node)), (mid = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
          arguments$ = $$($nesting, 'Arguments').$new(args);
          args = args.$updated(nil, arguments$.$rewritten());
          if ($truthy(arguments$.$initialization())) {
            
            body = ($truthy($a = body) ? $a : self.$s("nil"));
            body = self.$prepend_to_body(body, arguments$.$initialization());};
          return node.$updated(nil, [mid, args, body]);
        }, $MlhsArgs_on_def$1.$$arity = 1);
        
        Opal.def(self, '$on_defs', $MlhsArgs_on_defs$2 = function $$on_defs(node) {
          var $a, $iter = $MlhsArgs_on_defs$2.$$p, $yield = $iter || nil, self = this, recv = nil, mid = nil, args = nil, body = nil, arguments$ = nil;

          if ($iter) $MlhsArgs_on_defs$2.$$p = null;
          
          node = $send(self, Opal.find_super_dispatcher(self, 'on_defs', $MlhsArgs_on_defs$2, false), [node], null);
          $a = [].concat(Opal.to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (mid = ($a[1] == null ? nil : $a[1])), (args = ($a[2] == null ? nil : $a[2])), (body = ($a[3] == null ? nil : $a[3])), $a;
          arguments$ = $$($nesting, 'Arguments').$new(args);
          args = args.$updated(nil, arguments$.$rewritten());
          if ($truthy(arguments$.$initialization())) {
            
            body = ($truthy($a = body) ? $a : self.$s("nil"));
            body = self.$prepend_to_body(body, arguments$.$initialization());};
          return node.$updated(nil, [recv, mid, args, body]);
        }, $MlhsArgs_on_defs$2.$$arity = 1);
        
        Opal.def(self, '$on_iter', $MlhsArgs_on_iter$3 = function $$on_iter(node) {
          var $a, $iter = $MlhsArgs_on_iter$3.$$p, $yield = $iter || nil, self = this, args = nil, body = nil, arguments$ = nil;

          if ($iter) $MlhsArgs_on_iter$3.$$p = null;
          
          node = $send(self, Opal.find_super_dispatcher(self, 'on_iter', $MlhsArgs_on_iter$3, false), [node], null);
          $a = [].concat(Opal.to_a(node)), (args = ($a[0] == null ? nil : $a[0])), (body = ($a[1] == null ? nil : $a[1])), $a;
          arguments$ = $$($nesting, 'Arguments').$new(args);
          args = args.$updated(nil, arguments$.$rewritten());
          if ($truthy(arguments$.$initialization())) {
            
            body = ($truthy($a = body) ? $a : self.$s("nil"));
            body = self.$prepend_to_body(body, arguments$.$initialization());};
          return node.$updated(nil, [args, body]);
        }, $MlhsArgs_on_iter$3.$$arity = 1);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Arguments');

          var $nesting = [self].concat($parent_nesting), $Arguments_initialize$4, $Arguments_reset_tmp_counter$excl$5, $Arguments_new_mlhs_tmp$6, $Arguments_split$excl$7;

          self.$$prototype.counter = self.$$prototype.args = self.$$prototype.initialization = nil;
          
          self.$attr_reader("rewritten", "initialization");
          
          Opal.def(self, '$initialize', $Arguments_initialize$4 = function $$initialize(args) {
            var self = this;

            
            self.args = args;
            self.rewritten = [];
            self.initialization = [];
            self.rewriter = $$($nesting, 'MlhsRewriter').$new();
            return self['$split!']();
          }, $Arguments_initialize$4.$$arity = 1);
          
          Opal.def(self, '$reset_tmp_counter!', $Arguments_reset_tmp_counter$excl$5 = function() {
            var self = this;

            return (self.counter = 0)
          }, $Arguments_reset_tmp_counter$excl$5.$$arity = 0);
          
          Opal.def(self, '$new_mlhs_tmp', $Arguments_new_mlhs_tmp$6 = function $$new_mlhs_tmp() {
            var $a, self = this;

            
            self.counter = ($truthy($a = self.counter) ? $a : 0);
            self.counter = $rb_plus(self.counter, 1);
            return "" + "$mlhs_tmp" + (self.counter);
          }, $Arguments_new_mlhs_tmp$6.$$arity = 0);
          return (Opal.def(self, '$split!', $Arguments_split$excl$7 = function() {
            var $$8, self = this;

            
            $send(self.args.$children(), 'each', [], ($$8 = function(arg){var self = $$8.$$s || this, var_name = nil, rhs = nil, mlhs = nil;
              if (self.rewriter == null) self.rewriter = nil;
              if (self.initialization == null) self.initialization = nil;
              if (self.rewritten == null) self.rewritten = nil;

            
              
              if (arg == null) {
                arg = nil;
              };
              if (arg.$type()['$==']("mlhs")) {
                
                var_name = self.$new_mlhs_tmp();
                rhs = self.$s("lvar", var_name);
                mlhs = self.rewriter.$process(arg);
                self.initialization['$<<'](self.$s("masgn", mlhs, rhs));
                return self.rewritten['$<<'](self.$s("arg", var_name).$updated(nil, nil, $hash2(["meta"], {"meta": $hash2(["arg_name"], {"arg_name": var_name})})));
              } else {
                return self.rewritten['$<<'](arg)
              };}, $$8.$$s = self, $$8.$$arity = 1, $$8));
            if (self.initialization.$length()['$=='](1)) {
              return (self.initialization = self.initialization['$[]'](0))
            } else if ($truthy(self.initialization['$empty?']())) {
              return (self.initialization = nil)
            } else {
              return (self.initialization = $send(self, 's', ["begin"].concat(Opal.to_a(self.initialization))))
            };
          }, $Arguments_split$excl$7.$$arity = 0), nil) && 'split!';
        })($nesting[0], $$($nesting, 'Base'), $nesting);
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'MlhsRewriter');

          var $nesting = [self].concat($parent_nesting), $MlhsRewriter_on_arg$9, $MlhsRewriter_on_restarg$10;

          
          
          Opal.def(self, '$on_arg', $MlhsRewriter_on_arg$9 = function $$on_arg(node) {
            var self = this;

            return node.$updated("lvasgn")
          }, $MlhsRewriter_on_arg$9.$$arity = 1);
          return (Opal.def(self, '$on_restarg', $MlhsRewriter_on_restarg$10 = function $$on_restarg(node) {
            var self = this, name = nil;

            
            name = node.$children()['$[]'](0);
            if ($truthy(name)) {
              return self.$s("splat", node.$updated("lvasgn"))
            } else {
              return self.$s("splat")
            };
          }, $MlhsRewriter_on_restarg$10.$$arity = 1), nil) && 'on_restarg';
        })($nesting[0], $$($nesting, 'Base'), $nesting);
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/rewriters/arguments"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$each', '$type', '$===', '$<<', '$any?', '$raise', '$!', '$nil?', '$has_any_kwargs?', '$can_inline_kwargs?', '$empty?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Arguments');

        var $nesting = [self].concat($parent_nesting), $Arguments_initialize$1, $Arguments_has_post_args$ques$3, $Arguments_has_any_kwargs$ques$4, $Arguments_can_inline_kwargs$ques$5;

        self.$$prototype.restarg = self.$$prototype.postargs = self.$$prototype.kwargs = self.$$prototype.kwoptargs = self.$$prototype.kwrestarg = self.$$prototype.optargs = nil;
        
        self.$attr_reader("args", "optargs", "restarg", "postargs", "kwargs", "kwoptargs", "kwrestarg", "shadowargs", "blockarg");
        
        Opal.def(self, '$initialize', $Arguments_initialize$1 = function $$initialize(args) {
          var $$2, self = this;

          
          self.args = [];
          self.optargs = [];
          self.restarg = nil;
          self.postargs = [];
          self.kwargs = [];
          self.kwoptargs = [];
          self.kwrestarg = nil;
          self.shadowargs = [];
          self.blockarg = nil;
          return $send(args, 'each', [], ($$2 = function(arg){var self = $$2.$$s || this, $a, $case = nil;
            if (self.restarg == null) self.restarg = nil;
            if (self.optargs == null) self.optargs = nil;
            if (self.postargs == null) self.postargs = nil;
            if (self.args == null) self.args = nil;
            if (self.kwargs == null) self.kwargs = nil;
            if (self.kwoptargs == null) self.kwoptargs = nil;
            if (self.shadowargs == null) self.shadowargs = nil;

          
            
            if (arg == null) {
              arg = nil;
            };
            return (function() {$case = arg.$type();
            if ("arg"['$===']($case) || "mlhs"['$===']($case)) {return (function() {if ($truthy(($truthy($a = self.restarg) ? $a : self.optargs['$any?']()))) {
              return self.postargs
            } else {
              return self.args
            }; return nil; })()['$<<'](arg)}
            else if ("optarg"['$===']($case)) {return self.optargs['$<<'](arg)}
            else if ("restarg"['$===']($case)) {return (self.restarg = arg)}
            else if ("kwarg"['$===']($case)) {return self.kwargs['$<<'](arg)}
            else if ("kwoptarg"['$===']($case)) {return self.kwoptargs['$<<'](arg)}
            else if ("kwrestarg"['$===']($case)) {return (self.kwrestarg = arg)}
            else if ("shadowarg"['$===']($case)) {return self.shadowargs['$<<'](arg)}
            else if ("blockarg"['$===']($case)) {return (self.blockarg = arg)}
            else {return self.$raise("" + "Unsupported arg type " + (arg.$type()))}})();}, $$2.$$s = self, $$2.$$arity = 1, $$2));
        }, $Arguments_initialize$1.$$arity = 1);
        
        Opal.def(self, '$has_post_args?', $Arguments_has_post_args$ques$3 = function() {
          var $a, $b, self = this;

          return ($truthy($a = ($truthy($b = self.restarg['$nil?']()['$!']()) ? $b : self.postargs['$any?']())) ? $a : ($truthy($b = self['$has_any_kwargs?']()) ? self['$can_inline_kwargs?']()['$!']() : $b))
        }, $Arguments_has_post_args$ques$3.$$arity = 0);
        
        Opal.def(self, '$has_any_kwargs?', $Arguments_has_any_kwargs$ques$4 = function() {
          var $a, $b, self = this;

          return ($truthy($a = ($truthy($b = self.kwargs['$any?']()) ? $b : self.kwoptargs['$any?']())) ? $a : self.kwrestarg['$nil?']()['$!']())
        }, $Arguments_has_any_kwargs$ques$4.$$arity = 0);
        return (Opal.def(self, '$can_inline_kwargs?', $Arguments_can_inline_kwargs$ques$5 = function() {
          var $a, $b, self = this;

          return ($truthy($a = ($truthy($b = self.optargs['$empty?']()) ? self.restarg['$nil?']() : $b)) ? self.postargs['$empty?']() : $a)
        }, $Arguments_can_inline_kwargs$ques$5.$$arity = 0), nil) && 'can_inline_kwargs?';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/rewriters/inline_args"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$s', '$new', '$updated', '$inline', '$prepend_to_body', '$initialization', '$attr_reader', '$freeze', '$children', '$each', '$send', '$any?', '$blockarg', '$<<', '$shadowargs', '$args', '$==', '$[]', '$has_post_args?', '$length', '$has_any_kwargs?', '$can_inline_kwargs?', '$kwargs', '$kwoptargs', '$kwrestarg', '$postargs', '$optargs', '$args_to_keep', '$restarg']);
  
  self.$require("opal/rewriters/base");
  self.$require("opal/rewriters/arguments");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'InlineArgs');

        var $nesting = [self].concat($parent_nesting), $InlineArgs_on_def$1, $InlineArgs_on_defs$2, $InlineArgs_on_iter$3;

        
        
        Opal.def(self, '$on_def', $InlineArgs_on_def$1 = function $$on_def(node) {
          var $a, $iter = $InlineArgs_on_def$1.$$p, $yield = $iter || nil, self = this, mid = nil, args = nil, body = nil, initializer = nil, inline_args = nil;

          if ($iter) $InlineArgs_on_def$1.$$p = null;
          
          node = $send(self, Opal.find_super_dispatcher(self, 'on_def', $InlineArgs_on_def$1, false), [node], null);
          $a = [].concat(Opal.to_a(node)), (mid = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
          body = ($truthy($a = body) ? $a : self.$s("nil"));
          initializer = $$($nesting, 'Initializer').$new(args, $hash2(["type"], {"type": "def"}));
          inline_args = args.$updated(nil, initializer.$inline());
          body = self.$prepend_to_body(body, initializer.$initialization());
          return node.$updated(nil, [mid, inline_args, body]);
        }, $InlineArgs_on_def$1.$$arity = 1);
        
        Opal.def(self, '$on_defs', $InlineArgs_on_defs$2 = function $$on_defs(node) {
          var $a, $iter = $InlineArgs_on_defs$2.$$p, $yield = $iter || nil, self = this, recv = nil, mid = nil, args = nil, body = nil, initializer = nil, inline_args = nil;

          if ($iter) $InlineArgs_on_defs$2.$$p = null;
          
          node = $send(self, Opal.find_super_dispatcher(self, 'on_defs', $InlineArgs_on_defs$2, false), [node], null);
          $a = [].concat(Opal.to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (mid = ($a[1] == null ? nil : $a[1])), (args = ($a[2] == null ? nil : $a[2])), (body = ($a[3] == null ? nil : $a[3])), $a;
          body = ($truthy($a = body) ? $a : self.$s("nil"));
          initializer = $$($nesting, 'Initializer').$new(args, $hash2(["type"], {"type": "defs"}));
          inline_args = args.$updated(nil, initializer.$inline());
          body = self.$prepend_to_body(body, initializer.$initialization());
          return node.$updated(nil, [recv, mid, inline_args, body]);
        }, $InlineArgs_on_defs$2.$$arity = 1);
        
        Opal.def(self, '$on_iter', $InlineArgs_on_iter$3 = function $$on_iter(node) {
          var $a, $iter = $InlineArgs_on_iter$3.$$p, $yield = $iter || nil, self = this, args = nil, body = nil, initializer = nil, inline_args = nil;

          if ($iter) $InlineArgs_on_iter$3.$$p = null;
          
          node = $send(self, Opal.find_super_dispatcher(self, 'on_iter', $InlineArgs_on_iter$3, false), [node], null);
          $a = [].concat(Opal.to_a(node)), (args = ($a[0] == null ? nil : $a[0])), (body = ($a[1] == null ? nil : $a[1])), $a;
          body = ($truthy($a = body) ? $a : self.$s("nil"));
          initializer = $$($nesting, 'Initializer').$new(args, $hash2(["type"], {"type": "iter"}));
          inline_args = args.$updated(nil, initializer.$inline());
          body = self.$prepend_to_body(body, initializer.$initialization());
          return node.$updated(nil, [inline_args, body]);
        }, $InlineArgs_on_iter$3.$$arity = 1);
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Initializer');

          var $nesting = [self].concat($parent_nesting), $Initializer_initialize$4, $Initializer_extract_blockarg$6, $Initializer_initialize_shadowargs$7, $Initializer_extract_args$9, $Initializer_prepare_post_args$11, $Initializer_prepare_kwargs$12, $Initializer_extract_kwargs$13, $Initializer_extract_kwoptargs$15, $Initializer_extract_kwrestarg$17, $Initializer_extract_post_args$18, $Initializer_extract_optargs$20, $Initializer_extract_restarg$22, $Initializer_args_to_keep$23;

          self.$$prototype.initialization = self.$$prototype.args = self.$$prototype.inline = nil;
          
          self.$attr_reader("inline", "initialization");
          Opal.const_set($nesting[0], 'STEPS', ["extract_blockarg", "initialize_shadowargs", "extract_args", "prepare_post_args", "prepare_kwargs", "extract_optargs", "extract_restarg", "extract_post_args", "extract_kwargs", "extract_kwoptargs", "extract_kwrestarg"].$freeze());
          
          Opal.def(self, '$initialize', $Initializer_initialize$4 = function $$initialize(args, $kwargs) {
            var type, $$5, self = this;

            
            
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else if (!$kwargs.$$is_hash) {
              throw Opal.ArgumentError.$new('expected kwargs');
            };
            
            if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'type')) {
              throw Opal.ArgumentError.$new('missing keyword: type');
            }
            type = $kwargs.$$smap["type"];;
            self.args = $$($nesting, 'Arguments').$new(args.$children());
            self.inline = [];
            self.initialization = [];
            self.type = type;
            self.underscore_found = false;
            $send($$($nesting, 'STEPS'), 'each', [], ($$5 = function(step){var self = $$5.$$s || this;

            
              
              if (step == null) {
                step = nil;
              };
              return self.$send(step);}, $$5.$$s = self, $$5.$$arity = 1, $$5));
            if ($truthy(self.initialization['$any?']())) {
              return (self.initialization = $send(self, 's', ["begin"].concat(Opal.to_a(self.initialization))))
            } else {
              return (self.initialization = nil)
            };
          }, $Initializer_initialize$4.$$arity = 2);
          
          Opal.def(self, '$extract_blockarg', $Initializer_extract_blockarg$6 = function $$extract_blockarg() {
            var self = this, arg = nil;

            if ($truthy((arg = self.args.$blockarg()))) {
              return self.initialization['$<<'](arg.$updated("extract_blockarg"))
            } else {
              return nil
            }
          }, $Initializer_extract_blockarg$6.$$arity = 0);
          
          Opal.def(self, '$initialize_shadowargs', $Initializer_initialize_shadowargs$7 = function $$initialize_shadowargs() {
            var $$8, self = this;

            return $send(self.args.$shadowargs(), 'each', [], ($$8 = function(arg){var self = $$8.$$s || this;
              if (self.initialization == null) self.initialization = nil;

            
              
              if (arg == null) {
                arg = nil;
              };
              return self.initialization['$<<'](arg.$updated("initialize_shadowarg"));}, $$8.$$s = self, $$8.$$arity = 1, $$8))
          }, $Initializer_initialize_shadowargs$7.$$arity = 0);
          
          Opal.def(self, '$extract_args', $Initializer_extract_args$9 = function $$extract_args() {
            var $$10, self = this;

            return $send(self.args.$args(), 'each', [], ($$10 = function(arg){var self = $$10.$$s || this;
              if (self.type == null) self.type = nil;
              if (self.initialization == null) self.initialization = nil;
              if (self.underscore_found == null) self.underscore_found = nil;
              if (self.inline == null) self.inline = nil;

            
              
              if (arg == null) {
                arg = nil;
              };
              if (self.type['$==']("iter")) {
                
                self.initialization['$<<'](arg.$updated("initialize_iter_arg"));
                if (arg.$children()['$[]'](0)['$==']("_")) {
                  
                  if ($truthy(self.underscore_found)) {
                    arg = self.$s("fake_arg")};
                  self.underscore_found = true;};};
              return self.inline['$<<'](arg);}, $$10.$$s = self, $$10.$$arity = 1, $$10))
          }, $Initializer_extract_args$9.$$arity = 0);
          
          Opal.def(self, '$prepare_post_args', $Initializer_prepare_post_args$11 = function $$prepare_post_args() {
            var self = this;

            if ($truthy(self.args['$has_post_args?']())) {
              return self.initialization['$<<'](self.$s("prepare_post_args", self.args.$args().$length()))
            } else {
              return nil
            }
          }, $Initializer_prepare_post_args$11.$$arity = 0);
          
          Opal.def(self, '$prepare_kwargs', $Initializer_prepare_kwargs$12 = function $$prepare_kwargs() {
            var self = this;

            
            if ($truthy(self.args['$has_any_kwargs?']())) {
            } else {
              return nil
            };
            if ($truthy(self.args['$can_inline_kwargs?']())) {
              self.inline['$<<'](self.$s("arg", "$kwargs"))
            } else {
              
              self.initialization['$<<'](self.$s("extract_kwargs"));
              self.inline['$<<'](self.$s("fake_arg"));
            };
            return self.initialization['$<<'](self.$s("ensure_kwargs_are_kwargs"));
          }, $Initializer_prepare_kwargs$12.$$arity = 0);
          
          Opal.def(self, '$extract_kwargs', $Initializer_extract_kwargs$13 = function $$extract_kwargs() {
            var $$14, self = this;

            return $send(self.args.$kwargs(), 'each', [], ($$14 = function(arg){var self = $$14.$$s || this;
              if (self.initialization == null) self.initialization = nil;

            
              
              if (arg == null) {
                arg = nil;
              };
              return self.initialization['$<<'](arg.$updated("extract_kwarg"));}, $$14.$$s = self, $$14.$$arity = 1, $$14))
          }, $Initializer_extract_kwargs$13.$$arity = 0);
          
          Opal.def(self, '$extract_kwoptargs', $Initializer_extract_kwoptargs$15 = function $$extract_kwoptargs() {
            var $$16, self = this;

            return $send(self.args.$kwoptargs(), 'each', [], ($$16 = function(arg){var self = $$16.$$s || this;
              if (self.initialization == null) self.initialization = nil;

            
              
              if (arg == null) {
                arg = nil;
              };
              return self.initialization['$<<'](arg.$updated("extract_kwoptarg"));}, $$16.$$s = self, $$16.$$arity = 1, $$16))
          }, $Initializer_extract_kwoptargs$15.$$arity = 0);
          
          Opal.def(self, '$extract_kwrestarg', $Initializer_extract_kwrestarg$17 = function $$extract_kwrestarg() {
            var self = this, arg = nil;

            if ($truthy((arg = self.args.$kwrestarg()))) {
              return self.initialization['$<<'](arg.$updated("extract_kwrestarg"))
            } else {
              return nil
            }
          }, $Initializer_extract_kwrestarg$17.$$arity = 0);
          
          Opal.def(self, '$extract_post_args', $Initializer_extract_post_args$18 = function $$extract_post_args() {
            var $$19, self = this;

            return $send(self.args.$postargs(), 'each', [], ($$19 = function(arg){var self = $$19.$$s || this;
              if (self.initialization == null) self.initialization = nil;
              if (self.inline == null) self.inline = nil;

            
              
              if (arg == null) {
                arg = nil;
              };
              self.initialization['$<<'](arg.$updated("extract_post_arg"));
              return self.inline['$<<'](self.$s("fake_arg"));}, $$19.$$s = self, $$19.$$arity = 1, $$19))
          }, $Initializer_extract_post_args$18.$$arity = 0);
          
          Opal.def(self, '$extract_optargs', $Initializer_extract_optargs$20 = function $$extract_optargs() {
            var $$21, self = this, has_post_args = nil;

            
            has_post_args = self.args['$has_post_args?']();
            return $send(self.args.$optargs(), 'each', [], ($$21 = function(arg){var self = $$21.$$s || this, $a, arg_name = nil, default_value = nil;
              if (self.initialization == null) self.initialization = nil;
              if (self.inline == null) self.inline = nil;

            
              
              if (arg == null) {
                arg = nil;
              };
              if ($truthy(has_post_args)) {
                
                $a = [].concat(Opal.to_a(arg)), (arg_name = ($a[0] == null ? nil : $a[0])), (default_value = ($a[1] == null ? nil : $a[1])), $a;
                self.initialization['$<<'](arg.$updated("extract_post_optarg", [arg_name, default_value, self.$args_to_keep()]));
                return self.inline['$<<'](self.$s("fake_arg"));
              } else {
                
                self.inline['$<<'](arg.$updated("arg"));
                return self.initialization['$<<'](arg.$updated("extract_optarg"));
              };}, $$21.$$s = self, $$21.$$arity = 1, $$21));
          }, $Initializer_extract_optargs$20.$$arity = 0);
          
          Opal.def(self, '$extract_restarg', $Initializer_extract_restarg$22 = function $$extract_restarg() {
            var self = this, arg = nil, arg_name = nil;

            if ($truthy((arg = self.args.$restarg()))) {
              
              arg_name = arg.$children()['$[]'](0);
              self.initialization['$<<'](arg.$updated("extract_restarg", [arg_name, self.$args_to_keep()]));
              return self.inline['$<<'](self.$s("fake_arg"));
            } else {
              return nil
            }
          }, $Initializer_extract_restarg$22.$$arity = 0);
          return (Opal.def(self, '$args_to_keep', $Initializer_args_to_keep$23 = function $$args_to_keep() {
            var self = this;

            return self.args.$postargs().$length()
          }, $Initializer_args_to_keep$23.$$arity = 0), nil) && 'args_to_keep';
        })($nesting[0], $$$($$$($$$('::', 'Opal'), 'Rewriters'), 'Base'), $nesting);
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/rewriter"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$<<', '$list', '$delete', '$use', '$disabled?', '$class', '$each', '$new', '$process']);
  
  self.$require("opal/rewriters/opal_engine_check");
  self.$require("opal/rewriters/for_rewriter");
  self.$require("opal/rewriters/explicit_writer_return");
  self.$require("opal/rewriters/js_reserved_words");
  self.$require("opal/rewriters/block_to_iter");
  self.$require("opal/rewriters/dot_js_syntax");
  self.$require("opal/rewriters/logical_operator_assignment");
  self.$require("opal/rewriters/binary_operator_assignment");
  self.$require("opal/rewriters/hashes/key_duplicates_rewriter");
  self.$require("opal/rewriters/dump_args");
  self.$require("opal/rewriters/mlhs_args");
  self.$require("opal/rewriters/inline_args");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Rewriter');

      var $nesting = [self].concat($parent_nesting), $Rewriter_initialize$6, $Rewriter_process$7;

      self.$$prototype.sexp = nil;
      
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting), $list$1, $use$2, $delete$3, $disable$4, $disabled$ques$5;

        
        
        Opal.def(self, '$list', $list$1 = function $$list() {
          var $a, self = this;
          if (self.list == null) self.list = nil;

          return (self.list = ($truthy($a = self.list) ? $a : []))
        }, $list$1.$$arity = 0);
        
        Opal.def(self, '$use', $use$2 = function $$use(rewriter) {
          var self = this;

          return self.$list()['$<<'](rewriter)
        }, $use$2.$$arity = 1);
        
        Opal.def(self, '$delete', $delete$3 = function(rewriter) {
          var self = this;

          return self.$list().$delete(rewriter)
        }, $delete$3.$$arity = 1);
        
        Opal.def(self, '$disable', $disable$4 = function $$disable() {
          var $iter = $disable$4.$$p, $yield = $iter || nil, self = this;

          if ($iter) $disable$4.$$p = null;
          return (function() { try {
          
          self.disabled = true;
          return Opal.yieldX($yield, []);;
          } finally {
            (self.disabled = false)
          }; })()
        }, $disable$4.$$arity = 0);
        return (Opal.def(self, '$disabled?', $disabled$ques$5 = function() {
          var $a, self = this;
          if (self.disabled == null) self.disabled = nil;

          if ($truthy((($a = self['disabled'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
            return self.disabled
          } else {
            return nil
          }
        }, $disabled$ques$5.$$arity = 0), nil) && 'disabled?';
      })(Opal.get_singleton_class(self), $nesting);
      self.$use($$$($$($nesting, 'Rewriters'), 'OpalEngineCheck'));
      self.$use($$$($$($nesting, 'Rewriters'), 'ForRewriter'));
      self.$use($$$($$($nesting, 'Rewriters'), 'BlockToIter'));
      self.$use($$$($$($nesting, 'Rewriters'), 'DotJsSyntax'));
      self.$use($$$($$($nesting, 'Rewriters'), 'JsReservedWords'));
      self.$use($$$($$($nesting, 'Rewriters'), 'LogicalOperatorAssignment'));
      self.$use($$$($$($nesting, 'Rewriters'), 'BinaryOperatorAssignment'));
      self.$use($$$($$($nesting, 'Rewriters'), 'ExplicitWriterReturn'));
      self.$use($$$($$$($$($nesting, 'Rewriters'), 'Hashes'), 'KeyDuplicatesRewriter'));
      self.$use($$$($$($nesting, 'Rewriters'), 'DumpArgs'));
      self.$use($$$($$($nesting, 'Rewriters'), 'MlhsArgs'));
      self.$use($$$($$($nesting, 'Rewriters'), 'InlineArgs'));
      
      Opal.def(self, '$initialize', $Rewriter_initialize$6 = function $$initialize(sexp) {
        var self = this;

        return (self.sexp = sexp)
      }, $Rewriter_initialize$6.$$arity = 1);
      return (Opal.def(self, '$process', $Rewriter_process$7 = function $$process() {
        var $$8, self = this;

        
        if ($truthy(self.$class()['$disabled?']())) {
          return self.sexp};
        $send(self.$class().$list(), 'each', [], ($$8 = function(rewriter_class){var self = $$8.$$s || this, rewriter = nil;
          if (self.sexp == null) self.sexp = nil;

        
          
          if (rewriter_class == null) {
            rewriter_class = nil;
          };
          rewriter = rewriter_class.$new();
          return (self.sexp = rewriter.$process(self.sexp));}, $$8.$$s = self, $$8.$$arity = 1, $$8));
        return self.sexp;
      }, $Rewriter_process$7.$$arity = 0), nil) && 'process';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/parser/source_buffer"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Parser');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SourceBuffer');

        var $nesting = [self].concat($parent_nesting), $SourceBuffer_recognize_encoding$1;

        return (Opal.defs(self, '$recognize_encoding', $SourceBuffer_recognize_encoding$1 = function $$recognize_encoding(string) {
          var $a, $iter = $SourceBuffer_recognize_encoding$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $SourceBuffer_recognize_encoding$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          return ($truthy($a = $send(self, Opal.find_super_dispatcher(self, 'recognize_encoding', $SourceBuffer_recognize_encoding$1, false, self.$$class.$$prototype), $zuper, $iter)) ? $a : $$$($$($nesting, 'Encoding'), 'UTF_8'))
        }, $SourceBuffer_recognize_encoding$1.$$arity = 1), nil) && 'recognize_encoding'
      })($nesting[0], $$$($$$($$$('::', 'Parser'), 'Source'), 'Buffer'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/parser/default_config"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $lambda = Opal.lambda, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_accessor', '$all_errors_are_fatal=', '$diagnostics', '$-', '$ignore_warnings=', '$diagnostics_consumer', '$consumer=', '$extend', '$!=', '$diagnostics_consumer=', '$new', '$rewrite', '$process', '$default_parser', '$default_parser_class']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Parser');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $parent_nesting) {
        var self = $module($base, 'DefaultConfig');

        var $nesting = [self].concat($parent_nesting), $DefaultConfig_included$2, $DefaultConfig_initialize$4, $DefaultConfig_parse$5, $DefaultConfig_rewrite$6;

        
        (function($base, $parent_nesting) {
          var self = $module($base, 'ClassMethods');

          var $nesting = [self].concat($parent_nesting), $ClassMethods_default_parser$1;

          
          self.$attr_accessor("diagnostics_consumer");
          
          Opal.def(self, '$default_parser', $ClassMethods_default_parser$1 = function $$default_parser() {
            var $iter = $ClassMethods_default_parser$1.$$p, $yield = $iter || nil, self = this, parser = nil, $writer = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

            if ($iter) $ClassMethods_default_parser$1.$$p = null;
            // Prepare super implicit arguments
            for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
              $zuper[$zuper_i] = arguments[$zuper_i];
            }
            
            parser = $send(self, Opal.find_super_dispatcher(self, 'default_parser', $ClassMethods_default_parser$1, false), $zuper, $iter);
            
            $writer = [true];
            $send(parser.$diagnostics(), 'all_errors_are_fatal=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [false];
            $send(parser.$diagnostics(), 'ignore_warnings=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [self.$diagnostics_consumer()];
            $send(parser.$diagnostics(), 'consumer=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return parser;
          }, $ClassMethods_default_parser$1.$$arity = 0);
        })($nesting[0], $nesting);
        Opal.defs(self, '$included', $DefaultConfig_included$2 = function $$included(klass) {
          var $$3, self = this, $writer = nil;

          
          klass.$extend($$($nesting, 'ClassMethods'));
          
          $writer = [$lambda(($$3 = function(diagnostic){var self = $$3.$$s || this;

          
            
            if (diagnostic == null) {
              diagnostic = nil;
            };
            if ($truthy($$($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
              return nil
            } else {
              return nil
            };}, $$3.$$s = self, $$3.$$arity = 1, $$3))];
          $send(klass, 'diagnostics_consumer=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        }, $DefaultConfig_included$2.$$arity = 1);
        
        Opal.def(self, '$initialize', $DefaultConfig_initialize$4 = function $$initialize($a) {
          var $post_args, $iter = $DefaultConfig_initialize$4.$$p, $yield = $iter || nil, self = this;

          if ($iter) $DefaultConfig_initialize$4.$$p = null;
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', $DefaultConfig_initialize$4, false), [$$$($$$($$($nesting, 'Opal'), 'AST'), 'Builder').$new()], null);
        }, $DefaultConfig_initialize$4.$$arity = -1);
        
        Opal.def(self, '$parse', $DefaultConfig_parse$5 = function $$parse(source_buffer) {
          var $iter = $DefaultConfig_parse$5.$$p, $yield = $iter || nil, self = this, parsed = nil, rewriten = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $DefaultConfig_parse$5.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          parsed = $send(self, Opal.find_super_dispatcher(self, 'parse', $DefaultConfig_parse$5, false), $zuper, $iter);
          rewriten = self.$rewrite(parsed);
          return rewriten;
        }, $DefaultConfig_parse$5.$$arity = 1);
        
        Opal.def(self, '$rewrite', $DefaultConfig_rewrite$6 = function $$rewrite(node) {
          var self = this;

          return $$$($$($nesting, 'Opal'), 'Rewriter').$new(node).$process()
        }, $DefaultConfig_rewrite$6.$$arity = 1);
      })($nesting[0], $nesting);
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting), $default_parser$7;

        
        self.$attr_accessor("default_parser_class");
        return (Opal.def(self, '$default_parser', $default_parser$7 = function $$default_parser() {
          var self = this;

          return self.$default_parser_class().$default_parser()
        }, $default_parser$7.$$arity = 0), nil) && 'default_parser';
      })(Opal.get_singleton_class(self), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/parser/with_ruby_lexer"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$include', '$default_parser_class=', '$-']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'WithRubyLexer');

    var $nesting = [self].concat($parent_nesting), $writer = nil;

    
    self.$include($$$($$$($$($nesting, 'Opal'), 'Parser'), 'DefaultConfig'));
    
    $writer = [self];
    $send($$$($$($nesting, 'Opal'), 'Parser'), 'default_parser_class=', Opal.to_a($writer));
    return $writer[$rb_minus($writer["length"], 1)];;
  })($$$($$($nesting, 'Opal'), 'Parser'), $$$($$($nesting, 'Parser'), 'Ruby25'), $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/parser/patch"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$==', '$+', '$to_a', '$lines', '$end_with?', '$<<', '$map', '$chomp']);
  if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Literal');

      var $nesting = [self].concat($parent_nesting), $Literal_extend_string$1;

      self.$$prototype.buffer_s = self.$$prototype.buffer = nil;
      
      
      Opal.udef(self, '$' + "extend_string");;
      return (Opal.def(self, '$extend_string', $Literal_extend_string$1 = function $$extend_string(string, ts, te) {
        var $a, self = this;

        
        self.buffer_s = ($truthy($a = self.buffer_s) ? $a : ts);
        self.buffer_e = te;
        return (self.buffer = $rb_plus(self.buffer, string));
      }, $Literal_extend_string$1.$$arity = 3), nil) && 'extend_string';
    })($$$($$($nesting, 'Parser'), 'Lexer'), null, $nesting);
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Buffer');

      var $nesting = [self].concat($parent_nesting), $Buffer_source_lines$2;

      self.$$prototype.lines = self.$$prototype.source = nil;
      return (Opal.def(self, '$source_lines', $Buffer_source_lines$2 = function $$source_lines() {
        var $a, $$3, self = this, lines = nil;

        return (self.lines = ($truthy($a = self.lines) ? $a : ((lines = self.source.$lines().$to_a()), (function() {if ($truthy(self.source['$end_with?']("\n"))) {
          return lines['$<<']("")
        } else {
          return nil
        }; return nil; })(), $send(lines, 'map', [], ($$3 = function(line){var self = $$3.$$s || this;

        
          
          if (line == null) {
            line = nil;
          };
          return line.$chomp("\n");}, $$3.$$s = self, $$3.$$arity = 1, $$3)))))
      }, $Buffer_source_lines$2.$$arity = 0), nil) && 'source_lines'
    })($$$($$($nesting, 'Parser'), 'Source'), null, $nesting);
  } else {
    return nil
  }
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/parser"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$==']);
  
  self.$require("opal/ast/builder");
  self.$require("opal/rewriter");
  self.$require("opal/parser/source_buffer");
  self.$require("opal/parser/default_config");
  self.$require("opal/parser/with_ruby_lexer");
  if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    return self.$require("opal/parser/patch")
  } else {
    return nil
  };
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/fragment"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$to_s', '$inspect', '$type', '$===', '$first', '$children', '$[]', '$line', '$column']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Fragment');

      var $nesting = [self].concat($parent_nesting), $Fragment_initialize$1, $Fragment_inspect$2, $Fragment_source_map_name$3, $Fragment_line$4, $Fragment_column$5;

      self.$$prototype.code = self.$$prototype.sexp = nil;
      
      self.$attr_reader("code");
      
      Opal.def(self, '$initialize', $Fragment_initialize$1 = function $$initialize(code, scope, sexp) {
        var self = this;

        
        
        if (sexp == null) {
          sexp = nil;
        };
        self.code = code.$to_s();
        self.sexp = sexp;
        return (self.scope = scope);
      }, $Fragment_initialize$1.$$arity = -3);
      
      Opal.def(self, '$inspect', $Fragment_inspect$2 = function $$inspect() {
        var self = this;

        return "" + "f(" + (self.code.$inspect()) + ")"
      }, $Fragment_inspect$2.$$arity = 0);
      
      Opal.def(self, '$source_map_name', $Fragment_source_map_name$3 = function $$source_map_name() {
        var self = this, $case = nil;

        return (function() {$case = self.sexp.$type();
        if ("top"['$===']($case) || "begin"['$===']($case) || "newline"['$===']($case) || "js_return"['$===']($case)) {return nil}
        else if ("self"['$===']($case)) {return "self"}
        else if ("module"['$===']($case)) {return "module"}
        else if ("class"['$===']($case)) {return "class"}
        else if ("int"['$===']($case)) {return self.sexp.$children().$first()}
        else if ("def"['$===']($case)) {return self.sexp.$children().$first()}
        else if ("defs"['$===']($case)) {return self.sexp.$children()['$[]'](1)}
        else if ("send"['$===']($case)) {return self.sexp.$children()['$[]'](1)}
        else if ("lvar"['$===']($case) || "lvasgn"['$===']($case) || "lvdeclare"['$===']($case) || "ivar"['$===']($case) || "ivasgn"['$===']($case) || "gvar"['$===']($case) || "cvar"['$===']($case) || "cvasgn"['$===']($case) || "gvars"['$===']($case) || "gvasgn"['$===']($case)) {return self.sexp.$children().$first()}
        else { return nil }})()
      }, $Fragment_source_map_name$3.$$arity = 0);
      
      Opal.def(self, '$line', $Fragment_line$4 = function $$line() {
        var self = this;

        if ($truthy(self.sexp)) {
          return self.sexp.$line()
        } else {
          return nil
        }
      }, $Fragment_line$4.$$arity = 0);
      return (Opal.def(self, '$column', $Fragment_column$5 = function $$column() {
        var self = this;

        if ($truthy(self.sexp)) {
          return self.sexp.$column()
        } else {
          return nil
        }
      }, $Fragment_column$5.$$arity = 0), nil) && 'column';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/helpers"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$valid_name?', '$inspect', '$=~', '$to_s', '$+', '$indent', '$compiler', '$to_proc', '$parser_indent', '$push', '$current_indent', '$js_truthy_optimize', '$helper', '$fragment', '$expr', '$==', '$type', '$[]', '$children', '$uses_block!', '$scope', '$block_name', '$handlers', '$include?', '$truthy_optimize?', '$new_temp', '$wrap']);
  
  self.$require("opal/regexp_anchors");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Helpers');

        var $nesting = [self].concat($parent_nesting), $Helpers_property$1, $Helpers_valid_name$ques$2, $Helpers_mid_to_jsid$3, $Helpers_indent$4, $Helpers_current_indent$5, $Helpers_line$6, $Helpers_empty_line$7, $Helpers_js_truthy$8, $Helpers_js_falsy$9, $Helpers_js_truthy_optimize$10, $Helpers_conditional_send$11;

        
        
        Opal.def(self, '$property', $Helpers_property$1 = function $$property(name) {
          var self = this;

          if ($truthy(self['$valid_name?'](name))) {
            return "" + "." + (name)
          } else {
            return "" + "[" + (name.$inspect()) + "]"
          }
        }, $Helpers_property$1.$$arity = 1);
        
        Opal.def(self, '$valid_name?', $Helpers_valid_name$ques$2 = function(name) {
          var self = this;

          return $$$($$$($$($nesting, 'Opal'), 'Rewriters'), 'JsReservedWords')['$valid_name?'](name)
        }, $Helpers_valid_name$ques$2.$$arity = 1);
        
        Opal.def(self, '$mid_to_jsid', $Helpers_mid_to_jsid$3 = function $$mid_to_jsid(mid) {
          var self = this;

          if ($truthy(/\=|\+|\-|\*|\/|\!|\?|<|\>|\&|\||\^|\%|\~|\[/['$=~'](mid.$to_s()))) {
            return "" + "['$" + (mid) + "']"
          } else {
            return $rb_plus(".$", mid)
          }
        }, $Helpers_mid_to_jsid$3.$$arity = 1);
        
        Opal.def(self, '$indent', $Helpers_indent$4 = function $$indent() {
          var $iter = $Helpers_indent$4.$$p, block = $iter || nil, self = this;

          if ($iter) $Helpers_indent$4.$$p = null;
          
          
          if ($iter) $Helpers_indent$4.$$p = null;;
          return $send(self.$compiler(), 'indent', [], block.$to_proc());
        }, $Helpers_indent$4.$$arity = 0);
        
        Opal.def(self, '$current_indent', $Helpers_current_indent$5 = function $$current_indent() {
          var self = this;

          return self.$compiler().$parser_indent()
        }, $Helpers_current_indent$5.$$arity = 0);
        
        Opal.def(self, '$line', $Helpers_line$6 = function $$line($a) {
          var $post_args, strs, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          strs = $post_args;;
          self.$push("" + "\n" + (self.$current_indent()));
          return $send(self, 'push', Opal.to_a(strs));
        }, $Helpers_line$6.$$arity = -1);
        
        Opal.def(self, '$empty_line', $Helpers_empty_line$7 = function $$empty_line() {
          var self = this;

          return self.$push("\n")
        }, $Helpers_empty_line$7.$$arity = 0);
        
        Opal.def(self, '$js_truthy', $Helpers_js_truthy$8 = function $$js_truthy(sexp) {
          var self = this, optimize = nil;

          
          if ($truthy((optimize = self.$js_truthy_optimize(sexp)))) {
            return optimize};
          self.$helper("truthy");
          return [self.$fragment("$truthy("), self.$expr(sexp), self.$fragment(")")];
        }, $Helpers_js_truthy$8.$$arity = 1);
        
        Opal.def(self, '$js_falsy', $Helpers_js_falsy$9 = function $$js_falsy(sexp) {
          var self = this, mid = nil;

          
          if (sexp.$type()['$==']("send")) {
            
            mid = sexp.$children()['$[]'](1);
            if (mid['$==']("block_given?")) {
              
              self.$scope()['$uses_block!']();
              return "" + (self.$scope().$block_name()) + " === nil";};};
          self.$helper("falsy");
          return [self.$fragment("$falsy("), self.$expr(sexp), self.$fragment(")")];
        }, $Helpers_js_falsy$9.$$arity = 1);
        
        Opal.def(self, '$js_truthy_optimize', $Helpers_js_truthy_optimize$10 = function $$js_truthy_optimize(sexp) {
          var $a, $b, self = this, mid = nil, receiver_handler_class = nil, receiver = nil, allow_optimization_on_type = nil;

          if (sexp.$type()['$==']("send")) {
            
            mid = sexp.$children()['$[]'](1);
            receiver_handler_class = ($truthy($a = (receiver = sexp.$children()['$[]'](0))) ? self.$compiler().$handlers()['$[]'](receiver.$type()) : $a);
            allow_optimization_on_type = ($truthy($a = ($truthy($b = $$$($$($nesting, 'Compiler'), 'COMPARE')['$include?'](mid.$to_s())) ? receiver_handler_class : $b)) ? receiver_handler_class['$truthy_optimize?']() : $a);
            if ($truthy(($truthy($a = ($truthy($b = allow_optimization_on_type) ? $b : mid['$==']("block_given?"))) ? $a : mid['$==']("==")))) {
              return self.$expr(sexp)
            } else {
              return nil
            };
          } else {
            return nil
          }
        }, $Helpers_js_truthy_optimize$10.$$arity = 1);
        
        Opal.def(self, '$conditional_send', $Helpers_conditional_send$11 = function $$conditional_send(recvr) {
          var $iter = $Helpers_conditional_send$11.$$p, $yield = $iter || nil, self = this, receiver_temp = nil;

          if ($iter) $Helpers_conditional_send$11.$$p = null;
          
          receiver_temp = self.$scope().$new_temp();
          self.$push("" + (receiver_temp) + " = ", recvr);
          self.$push("" + ", (" + (receiver_temp) + " === nil || " + (receiver_temp) + " == null) ? nil : ");
          Opal.yield1($yield, receiver_temp);
          return self.$wrap("(", ")");
        }, $Helpers_conditional_send$11.$$arity = 1);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/base"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$require', '$include', '$each', '$[]=', '$handlers', '$-', '$each_with_index', '$define_method', '$[]', '$children', '$attr_reader', '$type', '$compile', '$raise', '$is_a?', '$fragment', '$<<', '$reverse', '$unshift', '$push', '$new', '$scope', '$error', '$s', '$==', '$process', '$expr', '$add_scope_local', '$to_sym', '$add_scope_ivar', '$add_scope_gvar', '$add_scope_temp', '$helper', '$with_temp', '$to_proc', '$in_while?', '$instance_variable_get', '$has_rescue_else?', '$in_ensure', '$in_ensure?', '$!', '$class_scope?', '$sclass?', '$+', '$parent', '$class_variable_owner_nesting_level', '$comments', '$compiler', '$loc']);
  
  self.$require("opal/nodes/helpers");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Base');

        var $nesting = [self].concat($parent_nesting), $Base_handlers$1, $Base_handle$2, $Base_children$4, $Base_truthy_optimize$ques$7, $Base_initialize$8, $Base_children$9, $Base_compile_to_fragments$10, $Base_compile$11, $Base_push$12, $Base_unshift$14, $Base_wrap$16, $Base_fragment$17, $Base_error$18, $Base_scope$19, $Base_s$20, $Base_expr$ques$21, $Base_recv$ques$22, $Base_stmt$ques$23, $Base_process$24, $Base_expr$25, $Base_recv$26, $Base_stmt$27, $Base_expr_or_nil$28, $Base_add_local$29, $Base_add_ivar$30, $Base_add_gvar$31, $Base_add_temp$32, $Base_helper$33, $Base_with_temp$34, $Base_in_while$ques$35, $Base_while_loop$36, $Base_has_rescue_else$ques$37, $Base_in_ensure$38, $Base_in_ensure$ques$39, $Base_class_variable_owner_nesting_level$40, $Base_class_variable_owner$41, $Base_comments$42;

        self.$$prototype.sexp = self.$$prototype.fragments = self.$$prototype.compiler = self.$$prototype.level = nil;
        
        self.$include($$($nesting, 'Helpers'));
        Opal.defs(self, '$handlers', $Base_handlers$1 = function $$handlers() {
          var $a, self = this;
          if (self.handlers == null) self.handlers = nil;

          return (self.handlers = ($truthy($a = self.handlers) ? $a : $hash2([], {})))
        }, $Base_handlers$1.$$arity = 0);
        Opal.defs(self, '$handle', $Base_handle$2 = function $$handle($a) {
          var $post_args, types, $$3, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          types = $post_args;;
          return $send(types, 'each', [], ($$3 = function(type){var self = $$3.$$s || this, $writer = nil;

          
            
            if (type == null) {
              type = nil;
            };
            $writer = [type, self];
            $send($$($nesting, 'Base').$handlers(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$3.$$s = self, $$3.$$arity = 1, $$3));
        }, $Base_handle$2.$$arity = -1);
        Opal.defs(self, '$children', $Base_children$4 = function $$children($a) {
          var $post_args, names, $$5, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          names = $post_args;;
          return $send(names, 'each_with_index', [], ($$5 = function(name, idx){var self = $$5.$$s || this, $$6;

          
            
            if (name == null) {
              name = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            return $send(self, 'define_method', [name], ($$6 = function(){var self = $$6.$$s || this;
              if (self.sexp == null) self.sexp = nil;

            return self.sexp.$children()['$[]'](idx)}, $$6.$$s = self, $$6.$$arity = 0, $$6));}, $$5.$$s = self, $$5.$$arity = 2, $$5));
        }, $Base_children$4.$$arity = -1);
        Opal.defs(self, '$truthy_optimize?', $Base_truthy_optimize$ques$7 = function() {
          var self = this;

          return false
        }, $Base_truthy_optimize$ques$7.$$arity = 0);
        self.$attr_reader("compiler", "type");
        
        Opal.def(self, '$initialize', $Base_initialize$8 = function $$initialize(sexp, level, compiler) {
          var self = this;

          
          self.sexp = sexp;
          self.type = sexp.$type();
          self.level = level;
          return (self.compiler = compiler);
        }, $Base_initialize$8.$$arity = 3);
        
        Opal.def(self, '$children', $Base_children$9 = function $$children() {
          var self = this;

          return self.sexp.$children()
        }, $Base_children$9.$$arity = 0);
        
        Opal.def(self, '$compile_to_fragments', $Base_compile_to_fragments$10 = function $$compile_to_fragments() {
          var $a, self = this;

          
          if ($truthy((($a = self['fragments'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
            return self.fragments};
          self.fragments = [];
          self.$compile();
          return self.fragments;
        }, $Base_compile_to_fragments$10.$$arity = 0);
        
        Opal.def(self, '$compile', $Base_compile$11 = function $$compile() {
          var self = this;

          return self.$raise("Not Implemented")
        }, $Base_compile$11.$$arity = 0);
        
        Opal.def(self, '$push', $Base_push$12 = function $$push($a) {
          var $post_args, strs, $$13, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          strs = $post_args;;
          return $send(strs, 'each', [], ($$13 = function(str){var self = $$13.$$s || this;
            if (self.fragments == null) self.fragments = nil;

          
            
            if (str == null) {
              str = nil;
            };
            if ($truthy(str['$is_a?']($$($nesting, 'String')))) {
              str = self.$fragment(str)};
            return self.fragments['$<<'](str);}, $$13.$$s = self, $$13.$$arity = 1, $$13));
        }, $Base_push$12.$$arity = -1);
        
        Opal.def(self, '$unshift', $Base_unshift$14 = function $$unshift($a) {
          var $post_args, strs, $$15, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          strs = $post_args;;
          return $send(strs.$reverse(), 'each', [], ($$15 = function(str){var self = $$15.$$s || this;
            if (self.fragments == null) self.fragments = nil;

          
            
            if (str == null) {
              str = nil;
            };
            if ($truthy(str['$is_a?']($$($nesting, 'String')))) {
              str = self.$fragment(str)};
            return self.fragments.$unshift(str);}, $$15.$$s = self, $$15.$$arity = 1, $$15));
        }, $Base_unshift$14.$$arity = -1);
        
        Opal.def(self, '$wrap', $Base_wrap$16 = function $$wrap(pre, post) {
          var self = this;

          
          self.$unshift(pre);
          return self.$push(post);
        }, $Base_wrap$16.$$arity = 2);
        
        Opal.def(self, '$fragment', $Base_fragment$17 = function $$fragment(str) {
          var self = this;

          return $$$($$($nesting, 'Opal'), 'Fragment').$new(str, self.$scope(), self.sexp)
        }, $Base_fragment$17.$$arity = 1);
        
        Opal.def(self, '$error', $Base_error$18 = function $$error(msg) {
          var self = this;

          return self.compiler.$error(msg)
        }, $Base_error$18.$$arity = 1);
        
        Opal.def(self, '$scope', $Base_scope$19 = function $$scope() {
          var self = this;

          return self.compiler.$scope()
        }, $Base_scope$19.$$arity = 0);
        
        Opal.def(self, '$s', $Base_s$20 = function $$s($a) {
          var $post_args, args, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self.compiler, 's', Opal.to_a(args));
        }, $Base_s$20.$$arity = -1);
        
        Opal.def(self, '$expr?', $Base_expr$ques$21 = function() {
          var self = this;

          return self.level['$==']("expr")
        }, $Base_expr$ques$21.$$arity = 0);
        
        Opal.def(self, '$recv?', $Base_recv$ques$22 = function() {
          var self = this;

          return self.level['$==']("recv")
        }, $Base_recv$ques$22.$$arity = 0);
        
        Opal.def(self, '$stmt?', $Base_stmt$ques$23 = function() {
          var self = this;

          return self.level['$==']("stmt")
        }, $Base_stmt$ques$23.$$arity = 0);
        
        Opal.def(self, '$process', $Base_process$24 = function $$process(sexp, level) {
          var self = this;

          
          
          if (level == null) {
            level = "expr";
          };
          return self.compiler.$process(sexp, level);
        }, $Base_process$24.$$arity = -2);
        
        Opal.def(self, '$expr', $Base_expr$25 = function $$expr(sexp) {
          var self = this;

          return self.compiler.$process(sexp, "expr")
        }, $Base_expr$25.$$arity = 1);
        
        Opal.def(self, '$recv', $Base_recv$26 = function $$recv(sexp) {
          var self = this;

          return self.compiler.$process(sexp, "recv")
        }, $Base_recv$26.$$arity = 1);
        
        Opal.def(self, '$stmt', $Base_stmt$27 = function $$stmt(sexp) {
          var self = this;

          return self.compiler.$process(sexp, "stmt")
        }, $Base_stmt$27.$$arity = 1);
        
        Opal.def(self, '$expr_or_nil', $Base_expr_or_nil$28 = function $$expr_or_nil(sexp) {
          var self = this;

          if ($truthy(sexp)) {
            return self.$expr(sexp)
          } else {
            return "nil"
          }
        }, $Base_expr_or_nil$28.$$arity = 1);
        
        Opal.def(self, '$add_local', $Base_add_local$29 = function $$add_local(name) {
          var self = this;

          return self.$scope().$add_scope_local(name.$to_sym())
        }, $Base_add_local$29.$$arity = 1);
        
        Opal.def(self, '$add_ivar', $Base_add_ivar$30 = function $$add_ivar(name) {
          var self = this;

          return self.$scope().$add_scope_ivar(name)
        }, $Base_add_ivar$30.$$arity = 1);
        
        Opal.def(self, '$add_gvar', $Base_add_gvar$31 = function $$add_gvar(name) {
          var self = this;

          return self.$scope().$add_scope_gvar(name)
        }, $Base_add_gvar$31.$$arity = 1);
        
        Opal.def(self, '$add_temp', $Base_add_temp$32 = function $$add_temp(temp) {
          var self = this;

          return self.$scope().$add_scope_temp(temp)
        }, $Base_add_temp$32.$$arity = 1);
        
        Opal.def(self, '$helper', $Base_helper$33 = function $$helper(name) {
          var self = this;

          return self.compiler.$helper(name)
        }, $Base_helper$33.$$arity = 1);
        
        Opal.def(self, '$with_temp', $Base_with_temp$34 = function $$with_temp() {
          var $iter = $Base_with_temp$34.$$p, block = $iter || nil, self = this;

          if ($iter) $Base_with_temp$34.$$p = null;
          
          
          if ($iter) $Base_with_temp$34.$$p = null;;
          return $send(self.compiler, 'with_temp', [], block.$to_proc());
        }, $Base_with_temp$34.$$arity = 0);
        
        Opal.def(self, '$in_while?', $Base_in_while$ques$35 = function() {
          var self = this;

          return self.compiler['$in_while?']()
        }, $Base_in_while$ques$35.$$arity = 0);
        
        Opal.def(self, '$while_loop', $Base_while_loop$36 = function $$while_loop() {
          var self = this;

          return self.compiler.$instance_variable_get("@while_loop")
        }, $Base_while_loop$36.$$arity = 0);
        
        Opal.def(self, '$has_rescue_else?', $Base_has_rescue_else$ques$37 = function() {
          var self = this;

          return self.$scope()['$has_rescue_else?']()
        }, $Base_has_rescue_else$ques$37.$$arity = 0);
        
        Opal.def(self, '$in_ensure', $Base_in_ensure$38 = function $$in_ensure() {
          var $iter = $Base_in_ensure$38.$$p, block = $iter || nil, self = this;

          if ($iter) $Base_in_ensure$38.$$p = null;
          
          
          if ($iter) $Base_in_ensure$38.$$p = null;;
          return $send(self.$scope(), 'in_ensure', [], block.$to_proc());
        }, $Base_in_ensure$38.$$arity = 0);
        
        Opal.def(self, '$in_ensure?', $Base_in_ensure$ques$39 = function() {
          var self = this;

          return self.$scope()['$in_ensure?']()
        }, $Base_in_ensure$ques$39.$$arity = 0);
        
        Opal.def(self, '$class_variable_owner_nesting_level', $Base_class_variable_owner_nesting_level$40 = function $$class_variable_owner_nesting_level() {
          var $a, $b, self = this, cvar_scope = nil, nesting_level = nil;

          
          cvar_scope = self.$scope();
          nesting_level = 0;
          while ($truthy(($truthy($b = cvar_scope) ? cvar_scope['$class_scope?']()['$!']() : $b))) {
            
            if ($truthy(cvar_scope['$sclass?']())) {
              nesting_level = $rb_plus(nesting_level, 1)};
            cvar_scope = cvar_scope.$parent();
          };
          return nesting_level;
        }, $Base_class_variable_owner_nesting_level$40.$$arity = 0);
        
        Opal.def(self, '$class_variable_owner', $Base_class_variable_owner$41 = function $$class_variable_owner() {
          var self = this;

          if ($truthy(self.$scope())) {
            return "" + "$nesting[" + (self.$class_variable_owner_nesting_level()) + "]"
          } else {
            return "Opal.Object"
          }
        }, $Base_class_variable_owner$41.$$arity = 0);
        return (Opal.def(self, '$comments', $Base_comments$42 = function $$comments() {
          var self = this;

          return self.$compiler().$comments()['$[]'](self.sexp.$loc())
        }, $Base_comments$42.$$arity = 0), nil) && 'comments';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/literal"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $lambda = Opal.lambda;

  Opal.add_stubs(['$require', '$handle', '$push', '$to_s', '$type', '$children', '$value', '$recv?', '$wrap', '$freeze', '$join', '$keys', '$gsub', '$even?', '$length', '$last_match', '$+', '$chop', '$[]', '$encoding', '$!=', '$inspect', '$to_i', '$to_utf16', '$translate_escape_chars', '$name', '$upcase', '$<=', '$call', '$-', '$>>', '$&', '$attr_accessor', '$extract_flags_and_value', '$select!', '$flags', '$=~', '$warning', '$compiler', '$===', '$compile_dynamic_regexp', '$compile_static_regexp', '$any?', '$expr', '$new', '$map', '$to_proc', '$flags=', '$s', '$value=', '$include?', '$is_a?', '$==', '$updated', '$delete', '$source', '$expression', '$loc', '$regexp', '$each', '$compile_inline?', '$helper', '$compile_inline', '$compile_range_initialize', '$start', '$finish', '$raise', '$numerator', '$denominator', '$real', '$imag']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ValueNode');

        var $nesting = [self].concat($parent_nesting), $ValueNode_compile$1, $ValueNode_truthy_optimize$ques$2;

        
        self.$handle("true", "false", "self", "nil");
        
        Opal.def(self, '$compile', $ValueNode_compile$1 = function $$compile() {
          var self = this;

          return self.$push(self.$type().$to_s())
        }, $ValueNode_compile$1.$$arity = 0);
        return (Opal.defs(self, '$truthy_optimize?', $ValueNode_truthy_optimize$ques$2 = function() {
          var self = this;

          return true
        }, $ValueNode_truthy_optimize$ques$2.$$arity = 0), nil) && 'truthy_optimize?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NumericNode');

        var $nesting = [self].concat($parent_nesting), $NumericNode_compile$3, $NumericNode_truthy_optimize$ques$4;

        
        self.$handle("int", "float");
        self.$children("value");
        
        Opal.def(self, '$compile', $NumericNode_compile$3 = function $$compile() {
          var self = this;

          
          self.$push(self.$value().$to_s());
          if ($truthy(self['$recv?']())) {
            return self.$wrap("(", ")")
          } else {
            return nil
          };
        }, $NumericNode_compile$3.$$arity = 0);
        return (Opal.defs(self, '$truthy_optimize?', $NumericNode_truthy_optimize$ques$4 = function() {
          var self = this;

          return true
        }, $NumericNode_truthy_optimize$ques$4.$$arity = 0), nil) && 'truthy_optimize?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'StringNode');

        var $nesting = [self].concat($parent_nesting), $StringNode_translate_escape_chars$5, $StringNode_compile$7, $StringNode_to_utf16$9;

        
        self.$handle("str");
        self.$children("value");
        Opal.const_set($nesting[0], 'ESCAPE_CHARS', $hash2(["a", "e"], {"a": "\\u0007", "e": "\\u001b"}).$freeze());
        Opal.const_set($nesting[0], 'ESCAPE_REGEX', new RegExp("" + "(\\\\+)([" + ($$($nesting, 'ESCAPE_CHARS').$keys().$join("")) + "])"));
        
        Opal.def(self, '$translate_escape_chars', $StringNode_translate_escape_chars$5 = function $$translate_escape_chars(inspect_string) {
          var $$6, self = this;

          return $send(inspect_string, 'gsub', [$$($nesting, 'ESCAPE_REGEX')], ($$6 = function(original){var self = $$6.$$s || this;

          
            
            if (original == null) {
              original = nil;
            };
            if ($truthy($$($nesting, 'Regexp').$last_match(1).$length()['$even?']())) {
              return original
            } else {
              return $rb_plus($$($nesting, 'Regexp').$last_match(1).$chop(), $$($nesting, 'ESCAPE_CHARS')['$[]']($$($nesting, 'Regexp').$last_match(2)))
            };}, $$6.$$s = self, $$6.$$arity = 1, $$6))
        }, $StringNode_translate_escape_chars$5.$$arity = 1);
        
        Opal.def(self, '$compile', $StringNode_compile$7 = function $$compile() {
          var $$8, $a, self = this, string_value = nil, encoding = nil, should_encode = nil, sanitized_value = nil;

          
          string_value = self.$value();
          encoding = string_value.$encoding();
          should_encode = encoding['$!=']($$$($$($nesting, 'Encoding'), 'UTF_8'));
          sanitized_value = $send(string_value.$inspect(), 'gsub', [/\\u\{([0-9a-f]+)\}/], ($$8 = function(){var self = $$8.$$s || this, code_point = nil;

          
            code_point = $$($nesting, 'Regexp').$last_match(1).$to_i(16);
            return self.$to_utf16(code_point);}, $$8.$$s = self, $$8.$$arity = 0, $$8));
          self.$push(self.$translate_escape_chars(sanitized_value));
          if ($truthy(($truthy($a = should_encode) ? $$($nesting, 'RUBY_ENGINE')['$!=']("opal") : $a))) {
            return self.$push(".$force_encoding(\"", encoding.$name(), "\")")
          } else {
            return nil
          };
        }, $StringNode_compile$7.$$arity = 0);
        return (Opal.def(self, '$to_utf16', $StringNode_to_utf16$9 = function $$to_utf16(code_point) {
          var $$10, self = this, ten_bits = nil, u = nil, lead_surrogate = nil, tail_surrogate = nil;

          
          ten_bits = 1023;
          u = $lambda(($$10 = function(code_unit){var self = $$10.$$s || this;

          
            
            if (code_unit == null) {
              code_unit = nil;
            };
            return $rb_plus("\\u", code_unit.$to_s(16).$upcase());}, $$10.$$s = self, $$10.$$arity = 1, $$10));
          if ($truthy($rb_le(code_point, 65535))) {
            return u.$call(code_point)};
          code_point = $rb_minus(code_point, 65536);
          lead_surrogate = $rb_plus(55296, code_point['$>>'](10));
          tail_surrogate = $rb_plus(56320, code_point['$&'](ten_bits));
          return $rb_plus(u.$call(lead_surrogate), u.$call(tail_surrogate));
        }, $StringNode_to_utf16$9.$$arity = 1), nil) && 'to_utf16';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SymbolNode');

        var $nesting = [self].concat($parent_nesting), $SymbolNode_compile$11;

        
        self.$handle("sym");
        self.$children("value");
        return (Opal.def(self, '$compile', $SymbolNode_compile$11 = function $$compile() {
          var self = this;

          return self.$push(self.$value().$to_s().$inspect())
        }, $SymbolNode_compile$11.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RegexpNode');

        var $nesting = [self].concat($parent_nesting), $RegexpNode_initialize$12, $RegexpNode_compile$13, $RegexpNode_compile_dynamic_regexp$15, $RegexpNode_compile_static_regexp$16, $RegexpNode_extract_flags_and_value$17, $RegexpNode_raw_value$19;

        self.$$prototype.sexp = nil;
        
        self.$handle("regexp");
        self.$attr_accessor("value", "flags");
        Opal.const_set($nesting[0], 'SUPPORTED_FLAGS', /[gimuy]/);
        
        Opal.def(self, '$initialize', $RegexpNode_initialize$12 = function $$initialize($a) {
          var $post_args, $iter = $RegexpNode_initialize$12.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $RegexpNode_initialize$12.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $RegexpNode_initialize$12, false), $zuper, $iter);
          return self.$extract_flags_and_value();
        }, $RegexpNode_initialize$12.$$arity = -1);
        
        Opal.def(self, '$compile', $RegexpNode_compile$13 = function $$compile() {
          var $$14, self = this, $case = nil;

          
          $send(self.$flags(), 'select!', [], ($$14 = function(flag){var self = $$14.$$s || this;

          
            
            if (flag == null) {
              flag = nil;
            };
            if ($truthy($$($nesting, 'SUPPORTED_FLAGS')['$=~'](flag))) {
              return true
            } else {
              
              self.$compiler().$warning("" + "Skipping the '" + (flag) + "' Regexp flag as it's not widely supported by JavaScript vendors.");
              return false;
            };}, $$14.$$s = self, $$14.$$arity = 1, $$14));
          return (function() {$case = self.$value().$type();
          if ("dstr"['$===']($case) || "begin"['$===']($case)) {return self.$compile_dynamic_regexp()}
          else if ("str"['$===']($case)) {return self.$compile_static_regexp()}
          else { return nil }})();
        }, $RegexpNode_compile$13.$$arity = 0);
        
        Opal.def(self, '$compile_dynamic_regexp', $RegexpNode_compile_dynamic_regexp$15 = function $$compile_dynamic_regexp() {
          var self = this;

          if ($truthy(self.$flags()['$any?']())) {
            return self.$push("new RegExp(", self.$expr(self.$value()), "" + ", '" + (self.$flags().$join()) + "')")
          } else {
            return self.$push("new RegExp(", self.$expr(self.$value()), ")")
          }
        }, $RegexpNode_compile_dynamic_regexp$15.$$arity = 0);
        
        Opal.def(self, '$compile_static_regexp', $RegexpNode_compile_static_regexp$16 = function $$compile_static_regexp() {
          var self = this, value = nil, $case = nil, message = nil;

          
          value = self.$value().$children()['$[]'](0);
          return (function() {$case = value;
          if (""['$===']($case)) {return self.$push("/(?:)/")}
          else if (/\?<\w+\>/['$===']($case)) {
          message = "" + "named captures are not supported in javascript: " + (value.$inspect());
          return self.$push("" + "self.$raise(new SyntaxError('" + (message) + "'))");}
          else {return self.$push("" + ($$($nesting, 'Regexp').$new(value).$inspect()) + (self.$flags().$join()))}})();
        }, $RegexpNode_compile_static_regexp$16.$$arity = 0);
        
        Opal.def(self, '$extract_flags_and_value', $RegexpNode_extract_flags_and_value$17 = function $$extract_flags_and_value() {
          var $a, $b, $$18, self = this, values = nil, flags_sexp = nil, $writer = nil, $case = nil, parts = nil;

          
          $a = [].concat(Opal.to_a(self.$children())), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (values = $slice.call($a, 0, $b)), (flags_sexp = ($a[$b] == null ? nil : $a[$b])), $a;
          
          $writer = [$send(flags_sexp.$children(), 'map', [], "to_s".$to_proc())];
          $send(self, 'flags=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [(function() {$case = values.$length();
          if ((0)['$===']($case)) {return self.$s("str", "")}
          else if ((1)['$===']($case)) {return values['$[]'](0)}
          else {return $send(self, 's', ["dstr"].concat(Opal.to_a(values)))}})()];
          $send(self, 'value=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(self.$flags()['$include?']("x"))) {
            
            parts = $send(self.$value().$children(), 'map', [], ($$18 = function(part){var self = $$18.$$s || this, $c, trimmed_value = nil;

            
              
              if (part == null) {
                part = nil;
              };
              if ($truthy(($truthy($c = part['$is_a?']($$$($$$($$$('::', 'Opal'), 'AST'), 'Node'))) ? part.$type()['$==']("str") : $c))) {
                
                trimmed_value = part.$children()['$[]'](0).$gsub(/^\s*\#.*/, "").$gsub(/\s/, "");
                return self.$s("str", trimmed_value);
              } else {
                return part
              };}, $$18.$$s = self, $$18.$$arity = 1, $$18));
            
            $writer = [self.$value().$updated(nil, parts)];
            $send(self, 'value=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.$flags().$delete("x");};
          if (self.$value().$type()['$==']("str")) {
            
            $writer = [self.$s("str", self.$value().$children()['$[]'](0).$gsub("\\A", "^").$gsub("\\z", "$"))];
            $send(self, 'value=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            return nil
          };
        }, $RegexpNode_extract_flags_and_value$17.$$arity = 0);
        return (Opal.def(self, '$raw_value', $RegexpNode_raw_value$19 = function $$raw_value() {
          var self = this, $writer = nil;

          
          $writer = [self.sexp.$loc().$expression().$source()];
          $send(self, 'value=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, $RegexpNode_raw_value$19.$$arity = 0), nil) && 'raw_value';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'MatchCurrentLineNode');

        var $nesting = [self].concat($parent_nesting), $MatchCurrentLineNode_compile$20;

        
        self.$handle("match_current_line");
        self.$children("regexp");
        return (Opal.def(self, '$compile', $MatchCurrentLineNode_compile$20 = function $$compile() {
          var self = this, gvar_sexp = nil, send_node = nil;

          
          gvar_sexp = self.$s("gvar", "$_");
          send_node = self.$s("send", gvar_sexp, "=~", self.$regexp());
          return self.$push(self.$expr(send_node));
        }, $MatchCurrentLineNode_compile$20.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DynamicStringNode');

        var $nesting = [self].concat($parent_nesting), $DynamicStringNode_compile$21;

        
        self.$handle("dstr");
        return (Opal.def(self, '$compile', $DynamicStringNode_compile$21 = function $$compile() {
          var $$22, self = this;

          
          self.$push("\"\"");
          return $send(self.$children(), 'each', [], ($$22 = function(part){var self = $$22.$$s || this;

          
            
            if (part == null) {
              part = nil;
            };
            self.$push(" + ");
            if (part.$type()['$==']("str")) {
              self.$push(part.$children()['$[]'](0).$inspect())
            } else {
              self.$push("(", self.$expr(part), ")")
            };
            if ($truthy(self['$recv?']())) {
              return self.$wrap("(", ")")
            } else {
              return nil
            };}, $$22.$$s = self, $$22.$$arity = 1, $$22));
        }, $DynamicStringNode_compile$21.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DynamicSymbolNode');

        var $nesting = [self].concat($parent_nesting);

        return self.$handle("dsym")
      })($nesting[0], $$($nesting, 'DynamicStringNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RangeNode');

        var $nesting = [self].concat($parent_nesting), $RangeNode_compile$23, $RangeNode_compile_inline$ques$24, $RangeNode_compile_inline$25, $RangeNode_compile_range_initialize$26;

        
        self.$children("start", "finish");
        Opal.const_set($nesting[0], 'SIMPLE_CHILDREN_TYPES', ["int", "float", "str", "sym"].$freeze());
        
        Opal.def(self, '$compile', $RangeNode_compile$23 = function $$compile() {
          var self = this;

          if ($truthy(self['$compile_inline?']())) {
            
            self.$helper("range");
            return self.$compile_inline();
          } else {
            return self.$compile_range_initialize()
          }
        }, $RangeNode_compile$23.$$arity = 0);
        
        Opal.def(self, '$compile_inline?', $RangeNode_compile_inline$ques$24 = function() {
          var $a, $b, self = this;

          return ($truthy($a = (($b = self.$start().$type()['$=='](self.$finish().$type())) ? $$($nesting, 'SIMPLE_CHILDREN_TYPES')['$include?'](self.$start().$type()) : self.$start().$type()['$=='](self.$finish().$type()))) ? $$($nesting, 'SIMPLE_CHILDREN_TYPES')['$include?'](self.$finish().$type()) : $a)
        }, $RangeNode_compile_inline$ques$24.$$arity = 0);
        
        Opal.def(self, '$compile_inline', $RangeNode_compile_inline$25 = function $$compile_inline() {
          var self = this;

          return self.$raise($$($nesting, 'NotImplementedError'))
        }, $RangeNode_compile_inline$25.$$arity = 0);
        return (Opal.def(self, '$compile_range_initialize', $RangeNode_compile_range_initialize$26 = function $$compile_range_initialize() {
          var self = this;

          return self.$raise($$($nesting, 'NotImplementedError'))
        }, $RangeNode_compile_range_initialize$26.$$arity = 0), nil) && 'compile_range_initialize';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'InclusiveRangeNode');

        var $nesting = [self].concat($parent_nesting), $InclusiveRangeNode_compile_inline$27, $InclusiveRangeNode_compile_range_initialize$28;

        
        self.$handle("irange");
        
        Opal.def(self, '$compile_inline', $InclusiveRangeNode_compile_inline$27 = function $$compile_inline() {
          var self = this;

          return self.$push("$range(", self.$expr(self.$start()), ", ", self.$expr(self.$finish()), ", false)")
        }, $InclusiveRangeNode_compile_inline$27.$$arity = 0);
        return (Opal.def(self, '$compile_range_initialize', $InclusiveRangeNode_compile_range_initialize$28 = function $$compile_range_initialize() {
          var self = this;

          return self.$push("Opal.Range.$new(", self.$expr(self.$start()), ", ", self.$expr(self.$finish()), ", false)")
        }, $InclusiveRangeNode_compile_range_initialize$28.$$arity = 0), nil) && 'compile_range_initialize';
      })($nesting[0], $$($nesting, 'RangeNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ExclusiveRangeNode');

        var $nesting = [self].concat($parent_nesting), $ExclusiveRangeNode_compile_inline$29, $ExclusiveRangeNode_compile_range_initialize$30;

        
        self.$handle("erange");
        
        Opal.def(self, '$compile_inline', $ExclusiveRangeNode_compile_inline$29 = function $$compile_inline() {
          var self = this;

          return self.$push("$range(", self.$expr(self.$start()), ", ", self.$expr(self.$finish()), ", true)")
        }, $ExclusiveRangeNode_compile_inline$29.$$arity = 0);
        return (Opal.def(self, '$compile_range_initialize', $ExclusiveRangeNode_compile_range_initialize$30 = function $$compile_range_initialize() {
          var self = this;

          return self.$push("Opal.Range.$new(", self.$expr(self.$start()), ",", self.$expr(self.$finish()), ", true)")
        }, $ExclusiveRangeNode_compile_range_initialize$30.$$arity = 0), nil) && 'compile_range_initialize';
      })($nesting[0], $$($nesting, 'RangeNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RationalNode');

        var $nesting = [self].concat($parent_nesting), $RationalNode_compile$31;

        
        self.$handle("rational");
        self.$children("value");
        return (Opal.def(self, '$compile', $RationalNode_compile$31 = function $$compile() {
          var self = this;

          return self.$push("" + "Opal.Rational.$new(" + (self.$value().$numerator()) + ", " + (self.$value().$denominator()) + ")")
        }, $RationalNode_compile$31.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ComplexNode');

        var $nesting = [self].concat($parent_nesting), $ComplexNode_compile$32;

        
        self.$handle("complex");
        self.$children("value");
        return (Opal.def(self, '$compile', $ComplexNode_compile$32 = function $$compile() {
          var self = this;

          return self.$push("" + "Opal.Complex.$new(" + (self.$value().$real()) + ", " + (self.$value().$imag()) + ")")
        }, $ComplexNode_compile$32.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/variables"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$irb?', '$compiler', '$top?', '$scope', '$using_irb?', '$push', '$to_s', '$var_name', '$with_temp', '$property', '$wrap', '$add_local', '$expr', '$value', '$recv?', '$expr?', '$[]', '$name', '$add_ivar', '$helper', '$add_gvar', '$===', '$handle_global_match', '$handle_post_match', '$handle_pre_match', '$raise', '$index', '$class_variable_owner']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'LocalVariableNode');

        var $nesting = [self].concat($parent_nesting), $LocalVariableNode_using_irb$ques$1, $LocalVariableNode_compile$2;

        
        self.$handle("lvar");
        self.$children("var_name");
        
        Opal.def(self, '$using_irb?', $LocalVariableNode_using_irb$ques$1 = function() {
          var $a, self = this;

          return ($truthy($a = self.$compiler()['$irb?']()) ? self.$scope()['$top?']() : $a)
        }, $LocalVariableNode_using_irb$ques$1.$$arity = 0);
        return (Opal.def(self, '$compile', $LocalVariableNode_compile$2 = function $$compile() {
          var $$3, self = this;

          
          if ($truthy(self['$using_irb?']())) {
          } else {
            return self.$push(self.$var_name().$to_s())
          };
          return $send(self, 'with_temp', [], ($$3 = function(tmp){var self = $$3.$$s || this;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            self.$push(self.$property(self.$var_name().$to_s()));
            return self.$wrap("" + "((" + (tmp) + " = Opal.irb_vars", "" + ") == null ? nil : " + (tmp) + ")");}, $$3.$$s = self, $$3.$$arity = 1, $$3));
        }, $LocalVariableNode_compile$2.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'LocalAssignNode');

        var $nesting = [self].concat($parent_nesting), $LocalAssignNode_using_irb$ques$4, $LocalAssignNode_compile$5;

        
        self.$handle("lvasgn");
        self.$children("var_name", "value");
        
        Opal.def(self, '$using_irb?', $LocalAssignNode_using_irb$ques$4 = function() {
          var $a, self = this;

          return ($truthy($a = self.$compiler()['$irb?']()) ? self.$scope()['$top?']() : $a)
        }, $LocalAssignNode_using_irb$ques$4.$$arity = 0);
        return (Opal.def(self, '$compile', $LocalAssignNode_compile$5 = function $$compile() {
          var $a, $b, self = this;

          
          if ($truthy(self['$using_irb?']())) {
            self.$push("" + "Opal.irb_vars" + (self.$property(self.$var_name().$to_s())) + " = ")
          } else {
            
            self.$add_local(self.$var_name().$to_s());
            self.$push("" + (self.$var_name()) + " = ");
          };
          self.$push(self.$expr(self.$value()));
          if ($truthy(($truthy($a = ($truthy($b = self['$recv?']()) ? $b : self['$expr?']())) ? self.$value() : $a))) {
            return self.$wrap("(", ")")
          } else {
            return nil
          };
        }, $LocalAssignNode_compile$5.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'LocalDeclareNode');

        var $nesting = [self].concat($parent_nesting), $LocalDeclareNode_compile$6;

        
        self.$handle("lvdeclare");
        self.$children("var_name");
        return (Opal.def(self, '$compile', $LocalDeclareNode_compile$6 = function $$compile() {
          var self = this;

          
          self.$add_local(self.$var_name().$to_s());
          return nil;
        }, $LocalDeclareNode_compile$6.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'InstanceVariableNode');

        var $nesting = [self].concat($parent_nesting), $InstanceVariableNode_var_name$7, $InstanceVariableNode_compile$8;

        
        self.$handle("ivar");
        self.$children("name");
        
        Opal.def(self, '$var_name', $InstanceVariableNode_var_name$7 = function $$var_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false))
        }, $InstanceVariableNode_var_name$7.$$arity = 0);
        return (Opal.def(self, '$compile', $InstanceVariableNode_compile$8 = function $$compile() {
          var self = this, name = nil;

          
          name = self.$property(self.$var_name());
          self.$add_ivar(name);
          return self.$push("" + "self" + (name));
        }, $InstanceVariableNode_compile$8.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'InstanceAssignNode');

        var $nesting = [self].concat($parent_nesting), $InstanceAssignNode_var_name$9, $InstanceAssignNode_compile$10;

        
        self.$handle("ivasgn");
        self.$children("name", "value");
        
        Opal.def(self, '$var_name', $InstanceAssignNode_var_name$9 = function $$var_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false))
        }, $InstanceAssignNode_var_name$9.$$arity = 0);
        return (Opal.def(self, '$compile', $InstanceAssignNode_compile$10 = function $$compile() {
          var $a, $b, self = this, name = nil;

          
          name = self.$property(self.$var_name());
          self.$push("" + "self" + (name) + " = ");
          self.$push(self.$expr(self.$value()));
          if ($truthy(($truthy($a = ($truthy($b = self['$recv?']()) ? $b : self['$expr?']())) ? self.$value() : $a))) {
            return self.$wrap("(", ")")
          } else {
            return nil
          };
        }, $InstanceAssignNode_compile$10.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'GlobalVariableNode');

        var $nesting = [self].concat($parent_nesting), $GlobalVariableNode_var_name$11, $GlobalVariableNode_compile$12;

        
        self.$handle("gvar");
        self.$children("name");
        
        Opal.def(self, '$var_name', $GlobalVariableNode_var_name$11 = function $$var_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false))
        }, $GlobalVariableNode_var_name$11.$$arity = 0);
        return (Opal.def(self, '$compile', $GlobalVariableNode_compile$12 = function $$compile() {
          var self = this, name = nil;

          
          self.$helper("gvars");
          name = self.$property(self.$var_name());
          self.$add_gvar(name);
          return self.$push("" + "$gvars" + (name));
        }, $GlobalVariableNode_compile$12.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BackRefNode');

        var $nesting = [self].concat($parent_nesting), $BackRefNode_compile$13, $BackRefNode_handle_global_match$14, $BackRefNode_handle_pre_match$16, $BackRefNode_handle_post_match$18;

        
        self.$handle("back_ref");
        
        Opal.def(self, '$compile', $BackRefNode_compile$13 = function $$compile() {
          var $iter = $BackRefNode_compile$13.$$p, $yield = $iter || nil, self = this, $case = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $BackRefNode_compile$13.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          self.$helper("gvars");
          return (function() {$case = self.$var_name();
          if ("&"['$===']($case)) {return self.$handle_global_match()}
          else if ("'"['$===']($case)) {return self.$handle_post_match()}
          else if ("`"['$===']($case)) {return self.$handle_pre_match()}
          else if ("+"['$===']($case)) {return $send(self, Opal.find_super_dispatcher(self, 'compile', $BackRefNode_compile$13, false), $zuper, $iter)}
          else {return self.$raise($$($nesting, 'NotImplementedError'))}})();
        }, $BackRefNode_compile$13.$$arity = 0);
        
        Opal.def(self, '$handle_global_match', $BackRefNode_handle_global_match$14 = function $$handle_global_match() {
          var $$15, self = this;

          return $send(self, 'with_temp', [], ($$15 = function(tmp){var self = $$15.$$s || this;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            return self.$push("" + "((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + "['$[]'](0))");}, $$15.$$s = self, $$15.$$arity = 1, $$15))
        }, $BackRefNode_handle_global_match$14.$$arity = 0);
        
        Opal.def(self, '$handle_pre_match', $BackRefNode_handle_pre_match$16 = function $$handle_pre_match() {
          var $$17, self = this;

          return $send(self, 'with_temp', [], ($$17 = function(tmp){var self = $$17.$$s || this;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            return self.$push("" + "((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + ".$pre_match())");}, $$17.$$s = self, $$17.$$arity = 1, $$17))
        }, $BackRefNode_handle_pre_match$16.$$arity = 0);
        return (Opal.def(self, '$handle_post_match', $BackRefNode_handle_post_match$18 = function $$handle_post_match() {
          var $$19, self = this;

          return $send(self, 'with_temp', [], ($$19 = function(tmp){var self = $$19.$$s || this;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            return self.$push("" + "((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + ".$post_match())");}, $$19.$$s = self, $$19.$$arity = 1, $$19))
        }, $BackRefNode_handle_post_match$18.$$arity = 0), nil) && 'handle_post_match';
      })($nesting[0], $$($nesting, 'GlobalVariableNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'GlobalAssignNode');

        var $nesting = [self].concat($parent_nesting), $GlobalAssignNode_var_name$20, $GlobalAssignNode_compile$21;

        
        self.$handle("gvasgn");
        self.$children("name", "value");
        
        Opal.def(self, '$var_name', $GlobalAssignNode_var_name$20 = function $$var_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false))
        }, $GlobalAssignNode_var_name$20.$$arity = 0);
        return (Opal.def(self, '$compile', $GlobalAssignNode_compile$21 = function $$compile() {
          var $a, $b, self = this, name = nil;

          
          self.$helper("gvars");
          name = self.$property(self.$var_name());
          self.$push("" + "$gvars" + (name) + " = ");
          self.$push(self.$expr(self.$value()));
          if ($truthy(($truthy($a = ($truthy($b = self['$recv?']()) ? $b : self['$expr?']())) ? self.$value() : $a))) {
            return self.$wrap("(", ")")
          } else {
            return nil
          };
        }, $GlobalAssignNode_compile$21.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NthrefNode');

        var $nesting = [self].concat($parent_nesting), $NthrefNode_compile$22;

        
        self.$handle("nth_ref");
        self.$children("index");
        return (Opal.def(self, '$compile', $NthrefNode_compile$22 = function $$compile() {
          var $$23, self = this;

          
          self.$helper("gvars");
          return $send(self, 'with_temp', [], ($$23 = function(tmp){var self = $$23.$$s || this;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            return self.$push("" + "((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + "['$[]'](" + (self.$index()) + "))");}, $$23.$$s = self, $$23.$$arity = 1, $$23));
        }, $NthrefNode_compile$22.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ClassVariableNode');

        var $nesting = [self].concat($parent_nesting), $ClassVariableNode_compile$24;

        
        self.$handle("cvar");
        self.$children("name");
        return (Opal.def(self, '$compile', $ClassVariableNode_compile$24 = function $$compile() {
          var $$25, self = this;

          return $send(self, 'with_temp', [], ($$25 = function(tmp){var self = $$25.$$s || this;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            return self.$push("" + "((" + (tmp) + " = " + (self.$class_variable_owner()) + ".$$cvars['" + (self.$name()) + "']) == null ? nil : " + (tmp) + ")");}, $$25.$$s = self, $$25.$$arity = 1, $$25))
        }, $ClassVariableNode_compile$24.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ClassVarAssignNode');

        var $nesting = [self].concat($parent_nesting), $ClassVarAssignNode_compile$26;

        
        self.$handle("cvasgn");
        self.$children("name", "value");
        return (Opal.def(self, '$compile', $ClassVarAssignNode_compile$26 = function $$compile() {
          var self = this;

          return self.$push("" + "(Opal.class_variable_set(" + (self.$class_variable_owner()) + ", '" + (self.$name()) + "', ", self.$expr(self.$value()), "))")
        }, $ClassVarAssignNode_compile$26.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/constants"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$magical_data_const?', '$push', '$const_scope', '$recv', '$name', '$eval?', '$compiler', '$nil?', '$==', '$eof_content', '$base', '$expr', '$value']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ConstNode');

        var $nesting = [self].concat($parent_nesting), $ConstNode_compile$1, $ConstNode_magical_data_const$ques$2;

        
        self.$handle("const");
        self.$children("const_scope", "name");
        
        Opal.def(self, '$compile', $ConstNode_compile$1 = function $$compile() {
          var self = this;

          if ($truthy(self['$magical_data_const?']())) {
            return self.$push("$__END__")
          } else if ($truthy(self.$const_scope())) {
            return self.$push("$$$(", self.$recv(self.$const_scope()), "" + ", '" + (self.$name()) + "')")
          } else if ($truthy(self.$compiler()['$eval?']())) {
            return self.$push("" + "$$($nesting, '" + (self.$name()) + "')")
          } else {
            return self.$push("" + "$$($nesting, '" + (self.$name()) + "')")
          }
        }, $ConstNode_compile$1.$$arity = 0);
        return (Opal.def(self, '$magical_data_const?', $ConstNode_magical_data_const$ques$2 = function() {
          var $a, $b, self = this;

          return ($truthy($a = ($truthy($b = self.$const_scope()['$nil?']()) ? self.$name()['$==']("DATA") : $b)) ? self.$compiler().$eof_content() : $a)
        }, $ConstNode_magical_data_const$ques$2.$$arity = 0), nil) && 'magical_data_const?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'CbaseNode');

        var $nesting = [self].concat($parent_nesting), $CbaseNode_compile$3;

        
        self.$handle("cbase");
        return (Opal.def(self, '$compile', $CbaseNode_compile$3 = function $$compile() {
          var self = this;

          return self.$push("'::'")
        }, $CbaseNode_compile$3.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ConstAssignNode');

        var $nesting = [self].concat($parent_nesting), $ConstAssignNode_compile$4;

        
        self.$handle("casgn");
        self.$children("base", "name", "value");
        return (Opal.def(self, '$compile', $ConstAssignNode_compile$4 = function $$compile() {
          var self = this;

          if ($truthy(self.$base())) {
            return self.$push("Opal.const_set(", self.$expr(self.$base()), "" + ", '" + (self.$name()) + "', ", self.$expr(self.$value()), ")")
          } else {
            return self.$push("" + "Opal.const_set($nesting[0], '" + (self.$name()) + "', ", self.$expr(self.$value()), ")")
          }
        }, $ConstAssignNode_compile$4.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/runtime_helpers"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$new', '$children', '$==', '$s', '$include?', '$to_sym', '$<<', '$define_method', '$to_proc', '$meth', '$__send__', '$raise', '$helper', '$[]', '$arglist', '$js_truthy', '$js_falsy']);
  
  self.$require("set");
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RuntimeHelpers');

        var $nesting = [self].concat($parent_nesting), $RuntimeHelpers_s$1, $RuntimeHelpers_compatible$ques$2, $RuntimeHelpers_helper$3, $RuntimeHelpers_compile$4, $RuntimeHelpers$5, $RuntimeHelpers$6;

        
        Opal.const_set($nesting[0], 'HELPERS', $$($nesting, 'Set').$new());
        self.$children("recvr", "meth", "arglist");
        Opal.defs(self, '$s', $RuntimeHelpers_s$1 = function $$s(type, $a) {
          var $post_args, children, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          children = $post_args;;
          return $$$($$$($$$('::', 'Opal'), 'AST'), 'Node').$new(type, children);
        }, $RuntimeHelpers_s$1.$$arity = -2);
        Opal.defs(self, '$compatible?', $RuntimeHelpers_compatible$ques$2 = function(recvr, meth) {
          var $a, self = this;

          return (($a = recvr['$=='](self.$s("const", nil, "Opal"))) ? $$($nesting, 'HELPERS')['$include?'](meth.$to_sym()) : recvr['$=='](self.$s("const", nil, "Opal")))
        }, $RuntimeHelpers_compatible$ques$2.$$arity = 2);
        Opal.defs(self, '$helper', $RuntimeHelpers_helper$3 = function $$helper(name) {
          var $iter = $RuntimeHelpers_helper$3.$$p, block = $iter || nil, self = this;

          if ($iter) $RuntimeHelpers_helper$3.$$p = null;
          
          
          if ($iter) $RuntimeHelpers_helper$3.$$p = null;;
          $$($nesting, 'HELPERS')['$<<'](name);
          return $send(self, 'define_method', ["" + "compile_" + (name)], block.$to_proc());
        }, $RuntimeHelpers_helper$3.$$arity = 1);
        
        Opal.def(self, '$compile', $RuntimeHelpers_compile$4 = function $$compile() {
          var self = this;

          if ($truthy($$($nesting, 'HELPERS')['$include?'](self.$meth().$to_sym()))) {
            return self.$__send__("" + "compile_" + (self.$meth()))
          } else {
            return self.$raise("" + "Helper not supported: " + (self.$meth()))
          }
        }, $RuntimeHelpers_compile$4.$$arity = 0);
        $send(self, 'helper', ["truthy?"], ($RuntimeHelpers$5 = function(){var self = $RuntimeHelpers$5.$$s || this, sexp = nil;

        
          if ($truthy((sexp = self.$arglist().$children()['$[]'](0)))) {
          } else {
            self.$raise("truthy? requires an object")
          };
          return self.$js_truthy(sexp);}, $RuntimeHelpers$5.$$s = self, $RuntimeHelpers$5.$$arity = 0, $RuntimeHelpers$5));
        return $send(self, 'helper', ["falsy?"], ($RuntimeHelpers$6 = function(){var self = $RuntimeHelpers$6.$$s || this, sexp = nil;

        
          if ($truthy((sexp = self.$arglist().$children()['$[]'](0)))) {
          } else {
            self.$raise("falsy? requires an object")
          };
          return self.$js_falsy(sexp);}, $RuntimeHelpers$6.$$s = self, $RuntimeHelpers$6.$$arity = 0, $RuntimeHelpers$6));
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/rewriters/break_finder"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require']);
  
  self.$require("opal/rewriter");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BreakFinder');

        var $nesting = [self].concat($parent_nesting), $BreakFinder_initialize$1, $BreakFinder_found_break$ques$2, $BreakFinder_on_break$3, $BreakFinder_stop_lookup$4;

        self.$$prototype.found_break = nil;
        
        
        Opal.def(self, '$initialize', $BreakFinder_initialize$1 = function $$initialize() {
          var self = this;

          return (self.found_break = false)
        }, $BreakFinder_initialize$1.$$arity = 0);
        
        Opal.def(self, '$found_break?', $BreakFinder_found_break$ques$2 = function() {
          var self = this;

          return self.found_break
        }, $BreakFinder_found_break$ques$2.$$arity = 0);
        
        Opal.def(self, '$on_break', $BreakFinder_on_break$3 = function $$on_break(node) {
          var self = this;

          
          self.found_break = true;
          return node;
        }, $BreakFinder_on_break$3.$$arity = 1);
        
        Opal.def(self, '$stop_lookup', $BreakFinder_stop_lookup$4 = function $$stop_lookup(node) {
          var self = this;

          return nil
        }, $BreakFinder_stop_lookup$4.$$arity = 1);
        Opal.alias(self, "on_for", "stop_lookup");
        Opal.alias(self, "on_while", "stop_lookup");
        Opal.alias(self, "on_while_post", "stop_lookup");
        Opal.alias(self, "on_until", "stop_lookup");
        Opal.alias(self, "on_until_post", "stop_lookup");
        return Opal.alias(self, "on_block", "stop_lookup");
      })($nesting[0], $$$($$$($$($nesting, 'Opal'), 'Rewriters'), 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/call"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$attr_reader', '$freeze', '$[]=', '$-', '$define_method', '$to_proc', '$include?', '$type', '$s', '$handle_special', '$record_method?', '$<<', '$method_calls', '$compiler', '$to_sym', '$meth', '$using_irb?', '$compile_irb_var', '$default_compile', '$private', '$iter', '$new', '$process', '$found_break?', '$splat?', '$invoke_using_send?', '$compile_using_send', '$compile_simple_call_chain', '$compile_break_catcher', '$helper', '$push', '$compile_receiver', '$compile_method_name', '$compile_arguments', '$compile_block_pass', '$recv', '$receiver_sexp', '$expr', '$arglist', '$empty?', '$children', '$iter_has_break?', '$unshift', '$line', '$method_jsid', '$any?', '$==', '$recvr', '$mid_to_jsid', '$to_s', '$with_temp', '$intern', '$irb?', '$top?', '$scope', '$nil?', '$updated', '$method', '$arity', '$[]', '$compatible?', '$compile', '$sexp_with_arglist', '$each', '$add_special', '$inline_operators?', '$operator_helpers', '$fragment', '$call', '$resolve', '$requires', '$file', '$dirname', '$cleanpath', '$join', '$Pathname', '$inspect', '$class_scope?', '$required_trees', '$force_encoding', '$encoding', '$+', '$handle_block_given_call', '$def?', '$mid', '$arity_check?', '$push_nesting?', '$first', '$size', '$last', '$handle_part', '$map', '$is_a?', '$expand_path', '$split', '$dynamic_require_severity', '$===', '$error', '$warning', '$each_with_object', '$pop']);
  
  self.$require("set");
  self.$require("pathname");
  self.$require("opal/nodes/base");
  self.$require("opal/nodes/runtime_helpers");
  self.$require("opal/rewriters/break_finder");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'CallNode');

        var $nesting = [self].concat($parent_nesting), $CallNode_add_special$1, $CallNode_initialize$2, $CallNode_compile$3, $CallNode_iter_has_break$ques$5, $CallNode_invoke_using_send$ques$6, $CallNode_default_compile$7, $CallNode_compile_using_send$8, $CallNode_compile_receiver$9, $CallNode_compile_method_name$10, $CallNode_compile_arguments$11, $CallNode_compile_block_pass$12, $CallNode_compile_break_catcher$13, $CallNode_compile_simple_call_chain$14, $CallNode_splat$ques$15, $CallNode_receiver_sexp$17, $CallNode_method_jsid$18, $CallNode_record_method$ques$19, $CallNode_compile_irb_var$20, $CallNode_using_irb$ques$22, $CallNode_sexp_with_arglist$23, $CallNode_handle_special$24, $CallNode$25, $CallNode$27, $CallNode$28, $CallNode$29, $CallNode$30, $CallNode$31, $CallNode$32, $CallNode$33, $CallNode$34, $CallNode$35, $CallNode$36, $CallNode$37, $CallNode_push_nesting$ques$38;

        self.$$prototype.sexp = self.$$prototype.compiler = self.$$prototype.level = nil;
        
        self.$handle("send");
        self.$attr_reader("recvr", "meth", "arglist", "iter");
        Opal.const_set($nesting[0], 'SPECIALS', $hash2([], {}));
        Opal.const_set($nesting[0], 'OPERATORS', $hash2(["+", "-", "*", "/", "<", "<=", ">", ">="], {"+": "plus", "-": "minus", "*": "times", "/": "divide", "<": "lt", "<=": "le", ">": "gt", ">=": "ge"}).$freeze());
        Opal.defs(self, '$add_special', $CallNode_add_special$1 = function $$add_special(name, options) {
          var $iter = $CallNode_add_special$1.$$p, handler = $iter || nil, self = this, $writer = nil;

          if ($iter) $CallNode_add_special$1.$$p = null;
          
          
          if ($iter) $CallNode_add_special$1.$$p = null;;
          
          if (options == null) {
            options = $hash2([], {});
          };
          
          $writer = [name, options];
          $send($$($nesting, 'SPECIALS'), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return $send(self, 'define_method', ["" + "handle_" + (name)], handler.$to_proc());
        }, $CallNode_add_special$1.$$arity = -2);
        
        Opal.def(self, '$initialize', $CallNode_initialize$2 = function $$initialize($a) {
          var $post_args, $b, $c, $iter = $CallNode_initialize$2.$$p, $yield = $iter || nil, self = this, args = nil, rest = nil, last_arg = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $CallNode_initialize$2.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $CallNode_initialize$2, false), $zuper, $iter);
          $b = [].concat(Opal.to_a(self.sexp)), (self.recvr = ($b[0] == null ? nil : $b[0])), (self.meth = ($b[1] == null ? nil : $b[1])), (args = $slice.call($b, 2)), $b;
          $b = [].concat(Opal.to_a(args)), $c = $b.length - 1, $c = ($c < 0) ? 0 : $c, (rest = $slice.call($b, 0, $c)), (last_arg = ($b[$c] == null ? nil : $b[$c])), $b;
          if ($truthy(($truthy($b = last_arg) ? ["iter", "block_pass"]['$include?'](last_arg.$type()) : $b))) {
            
            self.iter = last_arg;
            args = rest;
          } else {
            self.iter = nil
          };
          return (self.arglist = $send(self, 's', ["arglist"].concat(Opal.to_a(args))));
        }, $CallNode_initialize$2.$$arity = -1);
        
        Opal.def(self, '$compile', $CallNode_compile$3 = function $$compile() {try {

          var $$4, self = this;

          return $send(self, 'handle_special', [], ($$4 = function(){var self = $$4.$$s || this;

          
            if ($truthy(self['$record_method?']())) {
              self.$compiler().$method_calls()['$<<'](self.$meth().$to_sym())};
            if ($truthy(self['$using_irb?']())) {
              Opal.ret(self.$compile_irb_var())};
            return self.$default_compile();}, $$4.$$s = self, $$4.$$arity = 0, $$4))
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, $CallNode_compile$3.$$arity = 0);
        self.$private();
        
        Opal.def(self, '$iter_has_break?', $CallNode_iter_has_break$ques$5 = function() {
          var self = this, finder = nil;

          
          if ($truthy(self.$iter())) {
          } else {
            return false
          };
          finder = $$$($$$($$($nesting, 'Opal'), 'Rewriters'), 'BreakFinder').$new();
          finder.$process(self.$iter());
          return finder['$found_break?']();
        }, $CallNode_iter_has_break$ques$5.$$arity = 0);
        
        Opal.def(self, '$invoke_using_send?', $CallNode_invoke_using_send$ques$6 = function() {
          var $a, self = this;

          return ($truthy($a = self.$iter()) ? $a : self['$splat?']())
        }, $CallNode_invoke_using_send$ques$6.$$arity = 0);
        
        Opal.def(self, '$default_compile', $CallNode_default_compile$7 = function $$default_compile() {
          var self = this;

          
          if ($truthy(self['$invoke_using_send?']())) {
            self.$compile_using_send()
          } else {
            self.$compile_simple_call_chain()
          };
          return self.$compile_break_catcher();
        }, $CallNode_default_compile$7.$$arity = 0);
        
        Opal.def(self, '$compile_using_send', $CallNode_compile_using_send$8 = function $$compile_using_send() {
          var self = this;

          
          self.$helper("send");
          self.$push("$send(");
          self.$compile_receiver();
          self.$compile_method_name();
          self.$compile_arguments();
          self.$compile_block_pass();
          return self.$push(")");
        }, $CallNode_compile_using_send$8.$$arity = 0);
        
        Opal.def(self, '$compile_receiver', $CallNode_compile_receiver$9 = function $$compile_receiver() {
          var self = this;

          return self.$push(self.$recv(self.$receiver_sexp()))
        }, $CallNode_compile_receiver$9.$$arity = 0);
        
        Opal.def(self, '$compile_method_name', $CallNode_compile_method_name$10 = function $$compile_method_name() {
          var self = this;

          return self.$push("" + ", '" + (self.$meth()) + "'")
        }, $CallNode_compile_method_name$10.$$arity = 0);
        
        Opal.def(self, '$compile_arguments', $CallNode_compile_arguments$11 = function $$compile_arguments() {
          var self = this;

          
          self.$push(", ");
          if ($truthy(self['$splat?']())) {
            return self.$push(self.$expr(self.$arglist()))
          } else if ($truthy(self.$arglist().$children()['$empty?']())) {
            return self.$push("[]")
          } else {
            return self.$push("[", self.$expr(self.$arglist()), "]")
          };
        }, $CallNode_compile_arguments$11.$$arity = 0);
        
        Opal.def(self, '$compile_block_pass', $CallNode_compile_block_pass$12 = function $$compile_block_pass() {
          var self = this;

          if ($truthy(self.$iter())) {
            return self.$push(", ", self.$expr(self.$iter()))
          } else {
            return nil
          }
        }, $CallNode_compile_block_pass$12.$$arity = 0);
        
        Opal.def(self, '$compile_break_catcher', $CallNode_compile_break_catcher$13 = function $$compile_break_catcher() {
          var self = this;

          if ($truthy(self['$iter_has_break?']())) {
            
            self.$unshift("return ");
            self.$unshift("(function(){var $brk = Opal.new_brk(); try {");
            return self.$line("} catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()");
          } else {
            return nil
          }
        }, $CallNode_compile_break_catcher$13.$$arity = 0);
        
        Opal.def(self, '$compile_simple_call_chain', $CallNode_compile_simple_call_chain$14 = function $$compile_simple_call_chain() {
          var self = this;

          return self.$push(self.$recv(self.$receiver_sexp()), self.$method_jsid(), "(", self.$expr(self.$arglist()), ")")
        }, $CallNode_compile_simple_call_chain$14.$$arity = 0);
        
        Opal.def(self, '$splat?', $CallNode_splat$ques$15 = function() {
          var $$16, self = this;

          return $send(self.$arglist().$children(), 'any?', [], ($$16 = function(a){var self = $$16.$$s || this;

          
            
            if (a == null) {
              a = nil;
            };
            return a.$type()['$==']("splat");}, $$16.$$s = self, $$16.$$arity = 1, $$16))
        }, $CallNode_splat$ques$15.$$arity = 0);
        
        Opal.def(self, '$receiver_sexp', $CallNode_receiver_sexp$17 = function $$receiver_sexp() {
          var $a, self = this;

          return ($truthy($a = self.$recvr()) ? $a : self.$s("self"))
        }, $CallNode_receiver_sexp$17.$$arity = 0);
        
        Opal.def(self, '$method_jsid', $CallNode_method_jsid$18 = function $$method_jsid() {
          var self = this;

          return self.$mid_to_jsid(self.$meth().$to_s())
        }, $CallNode_method_jsid$18.$$arity = 0);
        
        Opal.def(self, '$record_method?', $CallNode_record_method$ques$19 = function() {
          var self = this;

          return true
        }, $CallNode_record_method$ques$19.$$arity = 0);
        
        Opal.def(self, '$compile_irb_var', $CallNode_compile_irb_var$20 = function $$compile_irb_var() {
          var $$21, self = this;

          return $send(self, 'with_temp', [], ($$21 = function(tmp){var self = $$21.$$s || this, lvar = nil, call = nil;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            lvar = self.$meth();
            call = self.$s("send", self.$s("self"), self.$meth().$intern(), self.$s("arglist"));
            return self.$push("" + "((" + (tmp) + " = Opal.irb_vars." + (lvar) + ") == null ? ", self.$expr(call), "" + " : " + (tmp) + ")");}, $$21.$$s = self, $$21.$$arity = 1, $$21))
        }, $CallNode_compile_irb_var$20.$$arity = 0);
        
        Opal.def(self, '$using_irb?', $CallNode_using_irb$ques$22 = function() {
          var $a, $b, $c, $d, self = this;

          return ($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = self.compiler['$irb?']()) ? self.$scope()['$top?']() : $d)) ? self.$arglist()['$=='](self.$s("arglist")) : $c)) ? self.$recvr()['$nil?']() : $b)) ? self.$iter()['$nil?']() : $a)
        }, $CallNode_using_irb$ques$22.$$arity = 0);
        
        Opal.def(self, '$sexp_with_arglist', $CallNode_sexp_with_arglist$23 = function $$sexp_with_arglist() {
          var self = this;

          return self.sexp.$updated(nil, [self.$recvr(), self.$meth(), self.$arglist()])
        }, $CallNode_sexp_with_arglist$23.$$arity = 0);
        
        Opal.def(self, '$handle_special', $CallNode_handle_special$24 = function $$handle_special() {
          var $iter = $CallNode_handle_special$24.$$p, compile_default = $iter || nil, self = this, method = nil;

          if ($iter) $CallNode_handle_special$24.$$p = null;
          
          
          if ($iter) $CallNode_handle_special$24.$$p = null;;
          if ($truthy($$($nesting, 'SPECIALS')['$include?'](self.$meth()))) {
            
            method = self.$method("" + "handle_" + (self.$meth()));
            if (method.$arity()['$=='](1)) {
              return method['$[]'](compile_default)
            } else {
              return method['$[]']()
            };
          } else if ($truthy($$($nesting, 'RuntimeHelpers')['$compatible?'](self.$recvr(), self.$meth()))) {
            return self.$push($$($nesting, 'RuntimeHelpers').$new(self.$sexp_with_arglist(), self.level, self.compiler).$compile())
          } else {
            return Opal.yieldX(compile_default, []);
          };
        }, $CallNode_handle_special$24.$$arity = 0);
        $send($$($nesting, 'OPERATORS'), 'each', [], ($CallNode$25 = function(operator, name){var self = $CallNode$25.$$s || this, $$26;

        
          
          if (operator == null) {
            operator = nil;
          };
          
          if (name == null) {
            name = nil;
          };
          return $send(self, 'add_special', [operator.$to_sym()], ($$26 = function(compile_default){var self = $$26.$$s || this, $a, lhs = nil, rhs = nil;

          
            
            if (compile_default == null) {
              compile_default = nil;
            };
            if ($truthy(self.$compiler()['$inline_operators?']())) {
              
              if ($truthy(self['$record_method?']())) {
                self.$compiler().$method_calls()['$<<'](operator.$to_sym())};
              self.$compiler().$operator_helpers()['$<<'](operator.$to_sym());
              $a = [self.$expr(self.$recvr()), self.$expr(self.$arglist())], (lhs = $a[0]), (rhs = $a[1]), $a;
              self.$push(self.$fragment("" + "$rb_" + (name) + "("));
              self.$push(lhs);
              self.$push(self.$fragment(", "));
              self.$push(rhs);
              return self.$push(self.$fragment(")"));
            } else {
              return compile_default.$call()
            };}, $$26.$$s = self, $$26.$$arity = 1, $$26));}, $CallNode$25.$$s = self, $CallNode$25.$$arity = 2, $CallNode$25));
        $send(self, 'add_special', ["require"], ($CallNode$27 = function(compile_default){var self = $CallNode$27.$$s || this, str = nil;

        
          
          if (compile_default == null) {
            compile_default = nil;
          };
          str = $$($nesting, 'DependencyResolver').$new(self.$compiler(), self.$arglist().$children()['$[]'](0)).$resolve();
          if ($truthy(str['$nil?']())) {
          } else {
            self.$compiler().$requires()['$<<'](str)
          };
          return compile_default.$call();}, $CallNode$27.$$s = self, $CallNode$27.$$arity = 1, $CallNode$27));
        $send(self, 'add_special', ["require_relative"], ($CallNode$28 = function(){var self = $CallNode$28.$$s || this, arg = nil, file = nil, dir = nil;

        
          arg = self.$arglist().$children()['$[]'](0);
          file = self.$compiler().$file();
          if (arg.$type()['$==']("str")) {
            
            dir = $$($nesting, 'File').$dirname(file);
            self.$compiler().$requires()['$<<'](self.$Pathname(dir).$join(arg.$children()['$[]'](0)).$cleanpath().$to_s());};
          self.$push(self.$fragment("" + "self.$require(" + (file.$inspect()) + "+ '/../' + "));
          self.$push(self.$process(self.$arglist()));
          return self.$push(self.$fragment(")"));}, $CallNode$28.$$s = self, $CallNode$28.$$arity = 0, $CallNode$28));
        $send(self, 'add_special', ["autoload"], ($CallNode$29 = function(compile_default){var self = $CallNode$29.$$s || this, str = nil;

        
          
          if (compile_default == null) {
            compile_default = nil;
          };
          if ($truthy(self.$scope()['$class_scope?']())) {
            
            str = $$($nesting, 'DependencyResolver').$new(self.$compiler(), self.$arglist().$children()['$[]'](1)).$resolve();
            if ($truthy(str['$nil?']())) {
            } else {
              self.$compiler().$requires()['$<<'](str)
            };
            return compile_default.$call();
          } else {
            return nil
          };}, $CallNode$29.$$s = self, $CallNode$29.$$arity = 1, $CallNode$29));
        $send(self, 'add_special', ["require_tree"], ($CallNode$30 = function(compile_default){var self = $CallNode$30.$$s || this, $a, first_arg = nil, rest = nil, relative_path = nil, dir = nil, full_path = nil;

        
          
          if (compile_default == null) {
            compile_default = nil;
          };
          $a = [].concat(Opal.to_a(self.$arglist().$children())), (first_arg = ($a[0] == null ? nil : $a[0])), (rest = $slice.call($a, 1)), $a;
          if (first_arg.$type()['$==']("str")) {
            
            relative_path = first_arg.$children()['$[]'](0);
            self.$compiler().$required_trees()['$<<'](relative_path);
            dir = $$($nesting, 'File').$dirname(self.$compiler().$file());
            full_path = self.$Pathname(dir).$join(relative_path).$cleanpath().$to_s();
            full_path.$force_encoding(relative_path.$encoding());
            first_arg = first_arg.$updated(nil, [full_path]);};
          self.arglist = self.$arglist().$updated(nil, $rb_plus([first_arg], rest));
          return compile_default.$call();}, $CallNode$30.$$s = self, $CallNode$30.$$arity = 1, $CallNode$30));
        $send(self, 'add_special', ["block_given?"], ($CallNode$31 = function(){var self = $CallNode$31.$$s || this;
          if (self.sexp == null) self.sexp = nil;

        return self.$push(self.$compiler().$handle_block_given_call(self.sexp))}, $CallNode$31.$$s = self, $CallNode$31.$$arity = 0, $CallNode$31));
        $send(self, 'add_special', ["__callee__"], ($CallNode$32 = function(){var self = $CallNode$32.$$s || this;

        if ($truthy(self.$scope()['$def?']())) {
            return self.$push(self.$fragment(self.$scope().$mid().$to_s().$inspect()))
          } else {
            return self.$push(self.$fragment("nil"))
          }}, $CallNode$32.$$s = self, $CallNode$32.$$arity = 0, $CallNode$32));
        $send(self, 'add_special', ["__method__"], ($CallNode$33 = function(){var self = $CallNode$33.$$s || this;

        if ($truthy(self.$scope()['$def?']())) {
            return self.$push(self.$fragment(self.$scope().$mid().$to_s().$inspect()))
          } else {
            return self.$push(self.$fragment("nil"))
          }}, $CallNode$33.$$s = self, $CallNode$33.$$arity = 0, $CallNode$33));
        $send(self, 'add_special', ["debugger"], ($CallNode$34 = function(){var self = $CallNode$34.$$s || this;

        return self.$push(self.$fragment("debugger"))}, $CallNode$34.$$s = self, $CallNode$34.$$arity = 0, $CallNode$34));
        $send(self, 'add_special', ["__OPAL_COMPILER_CONFIG__"], ($CallNode$35 = function(){var self = $CallNode$35.$$s || this;

        return self.$push(self.$fragment("" + "Opal.hash({ arity_check: " + (self.$compiler()['$arity_check?']()) + " })"))}, $CallNode$35.$$s = self, $CallNode$35.$$arity = 0, $CallNode$35));
        $send(self, 'add_special', ["nesting"], ($CallNode$36 = function(compile_default){var self = $CallNode$36.$$s || this, push_nesting = nil;

        
          
          if (compile_default == null) {
            compile_default = nil;
          };
          push_nesting = self['$push_nesting?']();
          if ($truthy(push_nesting)) {
            self.$push("(Opal.Module.$$nesting = $nesting, ")};
          compile_default.$call();
          if ($truthy(push_nesting)) {
            return self.$push(")")
          } else {
            return nil
          };}, $CallNode$36.$$s = self, $CallNode$36.$$arity = 1, $CallNode$36));
        $send(self, 'add_special', ["constants"], ($CallNode$37 = function(compile_default){var self = $CallNode$37.$$s || this, push_nesting = nil;

        
          
          if (compile_default == null) {
            compile_default = nil;
          };
          push_nesting = self['$push_nesting?']();
          if ($truthy(push_nesting)) {
            self.$push("(Opal.Module.$$nesting = $nesting, ")};
          compile_default.$call();
          if ($truthy(push_nesting)) {
            return self.$push(")")
          } else {
            return nil
          };}, $CallNode$37.$$s = self, $CallNode$37.$$arity = 1, $CallNode$37));
        
        Opal.def(self, '$push_nesting?', $CallNode_push_nesting$ques$38 = function() {
          var $a, $b, $c, self = this, recv = nil;

          
          recv = self.$children().$first();
          return (($a = self.$children().$size()['$=='](2)) ? ($truthy($b = recv['$nil?']()) ? $b : (($c = recv.$type()['$==']("const")) ? recv.$children().$last()['$==']("Module") : recv.$type()['$==']("const"))) : self.$children().$size()['$=='](2));
        }, $CallNode_push_nesting$ques$38.$$arity = 0);
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'DependencyResolver');

          var $nesting = [self].concat($parent_nesting), $DependencyResolver_initialize$39, $DependencyResolver_resolve$40, $DependencyResolver_handle_part$41, $DependencyResolver_expand_path$43;

          self.$$prototype.sexp = self.$$prototype.compiler = nil;
          
          
          Opal.def(self, '$initialize', $DependencyResolver_initialize$39 = function $$initialize(compiler, sexp) {
            var self = this;

            
            self.compiler = compiler;
            return (self.sexp = sexp);
          }, $DependencyResolver_initialize$39.$$arity = 2);
          
          Opal.def(self, '$resolve', $DependencyResolver_resolve$40 = function $$resolve() {
            var self = this;

            return self.$handle_part(self.sexp)
          }, $DependencyResolver_resolve$40.$$arity = 0);
          
          Opal.def(self, '$handle_part', $DependencyResolver_handle_part$41 = function $$handle_part(sexp) {
            var $a, $b, $$42, self = this, type = nil, recv = nil, meth = nil, args = nil, parts = nil, msg = nil, $case = nil;

            
            type = sexp.$type();
            if (type['$==']("str")) {
              return sexp.$children()['$[]'](0)
            } else if (type['$==']("send")) {
              
              $b = sexp.$children(), $a = Opal.to_ary($b), (recv = ($a[0] == null ? nil : $a[0])), (meth = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $b;
              parts = $send(args, 'map', [], ($$42 = function(s){var self = $$42.$$s || this;

              
                
                if (s == null) {
                  s = nil;
                };
                return self.$handle_part(s);}, $$42.$$s = self, $$42.$$arity = 1, $$42));
              if ($truthy(($truthy($a = ($truthy($b = recv['$is_a?']($$$($$$($$$('::', 'Opal'), 'AST'), 'Node'))) ? recv.$type()['$==']("const") : $b)) ? recv.$children().$last()['$==']("File") : $a))) {
                if (meth['$==']("expand_path")) {
                  return $send(self, 'expand_path', Opal.to_a(parts))
                } else if (meth['$==']("join")) {
                  return self.$expand_path(parts.$join("/"))
                } else if (meth['$==']("dirname")) {
                  return self.$expand_path(parts['$[]'](0).$split("/")['$[]']($range(0, -1, true)).$join("/"))}};};
            msg = "Cannot handle dynamic require";
            return (function() {$case = self.compiler.$dynamic_require_severity();
            if ("error"['$===']($case)) {return self.compiler.$error(msg, self.sexp.$line())}
            else if ("warning"['$===']($case)) {return self.compiler.$warning(msg, self.sexp.$line())}
            else { return nil }})();
          }, $DependencyResolver_handle_part$41.$$arity = 1);
          return (Opal.def(self, '$expand_path', $DependencyResolver_expand_path$43 = function $$expand_path(path, base) {
            var $$44, self = this;

            
            
            if (base == null) {
              base = "";
            };
            return $send(((("" + (base)) + "/") + (path)).$split("/"), 'each_with_object', [[]], ($$44 = function(part, p){var self = $$44.$$s || this;

            
              
              if (part == null) {
                part = nil;
              };
              
              if (p == null) {
                p = nil;
              };
              if (part['$==']("")) {
                return nil
              } else if (part['$==']("..")) {
                return p.$pop()
              } else {
                return p['$<<'](part)
              };}, $$44.$$s = self, $$44.$$arity = 2, $$44)).$join("/");
          }, $DependencyResolver_expand_path$43.$$arity = -2), nil) && 'expand_path';
        })($nesting[0], null, $nesting);
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/csend"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$helper', '$conditional_send', '$recv', '$receiver_sexp', '$push', '$compile_method_name', '$compile_arguments', '$compile_block_pass']);
  
  self.$require("opal/nodes/call");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'CSendNode');

        var $nesting = [self].concat($parent_nesting), $CSendNode_default_compile$1;

        
        self.$handle("csend");
        return (Opal.def(self, '$default_compile', $CSendNode_default_compile$1 = function $$default_compile() {
          var $$2, self = this;

          
          self.$helper("send");
          return $send(self, 'conditional_send', [self.$recv(self.$receiver_sexp())], ($$2 = function(receiver_temp){var self = $$2.$$s || this;

          
            
            if (receiver_temp == null) {
              receiver_temp = nil;
            };
            self.$push("$send(", receiver_temp);
            self.$compile_method_name();
            self.$compile_arguments();
            self.$compile_block_pass();
            return self.$push(")");}, $$2.$$s = self, $$2.$$arity = 1, $$2));
        }, $CSendNode_default_compile$1.$$arity = 0), nil) && 'default_compile';
      })($nesting[0], $$($nesting, 'CallNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/call_special"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$push', '$recv', '$recvr', '$expr', '$property', '$value', '$<<', '$default_compile', '$meth', '$receiver_sexp', '$method_jsid', '$compile_arguments', '$iter', '$s', '$lhs', '$rhs', '$process']);
  
  self.$require("opal/nodes/base");
  self.$require("opal/nodes/call");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JsAttrNode');

        var $nesting = [self].concat($parent_nesting), $JsAttrNode_compile$1;

        
        self.$handle("jsattr");
        self.$children("recvr", "property");
        return (Opal.def(self, '$compile', $JsAttrNode_compile$1 = function $$compile() {
          var self = this;

          return self.$push(self.$recv(self.$recvr()), "[", self.$expr(self.$property()), "]")
        }, $JsAttrNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JsAttrAsgnNode');

        var $nesting = [self].concat($parent_nesting), $JsAttrAsgnNode_compile$2;

        
        self.$handle("jsattrasgn");
        self.$children("recvr", "property", "value");
        return (Opal.def(self, '$compile', $JsAttrAsgnNode_compile$2 = function $$compile() {
          var self = this;

          return self.$push(self.$recv(self.$recvr()), "[", self.$expr(self.$property()), "] = ", self.$expr(self.$value()))
        }, $JsAttrAsgnNode_compile$2.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JsCallNode');

        var $nesting = [self].concat($parent_nesting), $JsCallNode_initialize$3, $JsCallNode_compile$4, $JsCallNode_method_jsid$5, $JsCallNode_compile_using_send$6;

        self.$$prototype.iter = self.$$prototype.arglist = nil;
        
        self.$handle("jscall");
        
        Opal.def(self, '$initialize', $JsCallNode_initialize$3 = function $$initialize($a) {
          var $post_args, $iter = $JsCallNode_initialize$3.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $JsCallNode_initialize$3.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $JsCallNode_initialize$3, false), $zuper, $iter);
          if ($truthy(self.iter)) {
            self.arglist = self.arglist['$<<'](self.iter)};
          return (self.iter = nil);
        }, $JsCallNode_initialize$3.$$arity = -1);
        
        Opal.def(self, '$compile', $JsCallNode_compile$4 = function $$compile() {
          var self = this;

          return self.$default_compile()
        }, $JsCallNode_compile$4.$$arity = 0);
        
        Opal.def(self, '$method_jsid', $JsCallNode_method_jsid$5 = function $$method_jsid() {
          var self = this;

          return "" + "." + (self.$meth())
        }, $JsCallNode_method_jsid$5.$$arity = 0);
        return (Opal.def(self, '$compile_using_send', $JsCallNode_compile_using_send$6 = function $$compile_using_send() {
          var self = this;

          
          self.$push(self.$recv(self.$receiver_sexp()), self.$method_jsid(), ".apply(null");
          self.$compile_arguments();
          if ($truthy(self.$iter())) {
            self.$push(".concat(", self.$expr(self.$iter()), ")")};
          return self.$push(")");
        }, $JsCallNode_compile_using_send$6.$$arity = 0), nil) && 'compile_using_send';
      })($nesting[0], $$($nesting, 'CallNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Match3Node');

        var $nesting = [self].concat($parent_nesting), $Match3Node_compile$7;

        self.$$prototype.level = nil;
        
        self.$handle("match_with_lvasgn");
        self.$children("lhs", "rhs");
        return (Opal.def(self, '$compile', $Match3Node_compile$7 = function $$compile() {
          var self = this, sexp = nil;

          
          sexp = self.$s("send", self.$lhs(), "=~", self.$rhs());
          return self.$push(self.$process(sexp, self.level));
        }, $Match3Node_compile$7.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/scope"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$attr_accessor', '$attr_reader', '$indent', '$scope', '$compiler', '$scope=', '$-', '$==', '$!', '$class?', '$dup', '$push', '$map', '$ivars', '$gvars', '$parser_indent', '$empty?', '$join', '$+', '$fragment', '$def_in_class?', '$add_proto_ivar', '$include?', '$<<', '$has_local?', '$has_temp?', '$pop', '$next_temp', '$loop', '$succ', '$uses_block!', '$identify!', '$compact', '$parent', '$name', '$scope_name', '$mid', '$unique_temp', '$add_scope_temp', '$def?', '$type', '$nil?', '$rescue_else_sexp']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ScopeNode');

        var $nesting = [self].concat($parent_nesting), $ScopeNode_initialize$1, $ScopeNode_in_scope$2, $ScopeNode_class_scope$ques$4, $ScopeNode_class$ques$5, $ScopeNode_module$ques$6, $ScopeNode_sclass$ques$7, $ScopeNode_top$ques$8, $ScopeNode_iter$ques$9, $ScopeNode_def$ques$10, $ScopeNode_def_in_class$ques$11, $ScopeNode_to_vars$12, $ScopeNode_add_scope_ivar$17, $ScopeNode_add_scope_gvar$18, $ScopeNode_add_proto_ivar$19, $ScopeNode_add_arg$20, $ScopeNode_add_scope_local$21, $ScopeNode_has_local$ques$22, $ScopeNode_add_scope_temp$23, $ScopeNode_has_temp$ques$24, $ScopeNode_new_temp$25, $ScopeNode_next_temp$26, $ScopeNode_queue_temp$28, $ScopeNode_push_while$29, $ScopeNode_pop_while$30, $ScopeNode_in_while$ques$31, $ScopeNode_uses_block$excl$32, $ScopeNode_identify$excl$33, $ScopeNode_find_parent_def$34, $ScopeNode_super_chain$35, $ScopeNode_uses_block$ques$36, $ScopeNode_has_rescue_else$ques$37, $ScopeNode_in_ensure$38, $ScopeNode_in_ensure$ques$39;

        self.$$prototype.type = self.$$prototype.defs = self.$$prototype.parent = self.$$prototype.temps = self.$$prototype.locals = self.$$prototype.compiler = self.$$prototype.proto_ivars = self.$$prototype.ivars = self.$$prototype.gvars = self.$$prototype.args = self.$$prototype.queue = self.$$prototype.while_stack = self.$$prototype.identity = self.$$prototype.uses_block = self.$$prototype.in_ensure = nil;
        
        self.$attr_accessor("parent");
        self.$attr_accessor("name");
        self.$attr_accessor("block_name");
        self.$attr_reader("scope_name");
        self.$attr_reader("locals");
        self.$attr_reader("ivars");
        self.$attr_reader("gvars");
        self.$attr_accessor("mid");
        self.$attr_accessor("defs");
        self.$attr_reader("methods");
        self.$attr_accessor("uses_super");
        self.$attr_accessor("uses_zuper");
        self.$attr_accessor("catch_return", "has_break");
        self.$attr_accessor("rescue_else_sexp");
        
        Opal.def(self, '$initialize', $ScopeNode_initialize$1 = function $$initialize($a) {
          var $post_args, $iter = $ScopeNode_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $ScopeNode_initialize$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $ScopeNode_initialize$1, false), $zuper, $iter);
          self.locals = [];
          self.temps = [];
          self.args = [];
          self.ivars = [];
          self.gvars = [];
          self.parent = nil;
          self.queue = [];
          self.unique = "a";
          self.while_stack = [];
          self.identity = nil;
          self.defs = nil;
          self.methods = [];
          self.uses_block = false;
          self.in_ensure = false;
          return (self.proto_ivars = []);
        }, $ScopeNode_initialize$1.$$arity = -1);
        
        Opal.def(self, '$in_scope', $ScopeNode_in_scope$2 = function $$in_scope() {
          var $$3, $iter = $ScopeNode_in_scope$2.$$p, $yield = $iter || nil, self = this;

          if ($iter) $ScopeNode_in_scope$2.$$p = null;
          return $send(self, 'indent', [], ($$3 = function(){var self = $$3.$$s || this, $writer = nil;
            if (self.parent == null) self.parent = nil;

          
            self.parent = self.$compiler().$scope();
            
            $writer = [self];
            $send(self.$compiler(), 'scope=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            Opal.yield1($yield, self);
            
            $writer = [self.parent];
            $send(self.$compiler(), 'scope=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, $$3.$$s = self, $$3.$$arity = 0, $$3))
        }, $ScopeNode_in_scope$2.$$arity = 0);
        
        Opal.def(self, '$class_scope?', $ScopeNode_class_scope$ques$4 = function() {
          var $a, self = this;

          return ($truthy($a = self.type['$==']("class")) ? $a : self.type['$==']("module"))
        }, $ScopeNode_class_scope$ques$4.$$arity = 0);
        
        Opal.def(self, '$class?', $ScopeNode_class$ques$5 = function() {
          var self = this;

          return self.type['$==']("class")
        }, $ScopeNode_class$ques$5.$$arity = 0);
        
        Opal.def(self, '$module?', $ScopeNode_module$ques$6 = function() {
          var self = this;

          return self.type['$==']("module")
        }, $ScopeNode_module$ques$6.$$arity = 0);
        
        Opal.def(self, '$sclass?', $ScopeNode_sclass$ques$7 = function() {
          var self = this;

          return self.type['$==']("sclass")
        }, $ScopeNode_sclass$ques$7.$$arity = 0);
        
        Opal.def(self, '$top?', $ScopeNode_top$ques$8 = function() {
          var self = this;

          return self.type['$==']("top")
        }, $ScopeNode_top$ques$8.$$arity = 0);
        
        Opal.def(self, '$iter?', $ScopeNode_iter$ques$9 = function() {
          var self = this;

          return self.type['$==']("iter")
        }, $ScopeNode_iter$ques$9.$$arity = 0);
        
        Opal.def(self, '$def?', $ScopeNode_def$ques$10 = function() {
          var $a, self = this;

          return ($truthy($a = self.type['$==']("def")) ? $a : self.type['$==']("defs"))
        }, $ScopeNode_def$ques$10.$$arity = 0);
        
        Opal.def(self, '$def_in_class?', $ScopeNode_def_in_class$ques$11 = function() {
          var $a, $b, $c, self = this;

          return ($truthy($a = ($truthy($b = ($truthy($c = self.defs['$!']()) ? self.type['$==']("def") : $c)) ? self.parent : $b)) ? self.parent['$class?']() : $a)
        }, $ScopeNode_def_in_class$ques$11.$$arity = 0);
        
        Opal.def(self, '$to_vars', $ScopeNode_to_vars$12 = function $$to_vars() {
          var $$13, $$14, $$15, $a, $$16, self = this, vars = nil, iv = nil, gv = nil, indent = nil, str = nil, pvars = nil, result = nil;

          
          vars = self.temps.$dup();
          $send(vars, 'push', Opal.to_a($send(self.locals, 'map', [], ($$13 = function(l){var self = $$13.$$s || this;

          
            
            if (l == null) {
              l = nil;
            };
            return "" + (l) + " = nil";}, $$13.$$s = self, $$13.$$arity = 1, $$13))));
          iv = $send(self.$ivars(), 'map', [], ($$14 = function(ivar){var self = $$14.$$s || this;

          
            
            if (ivar == null) {
              ivar = nil;
            };
            return "" + "if (self" + (ivar) + " == null) self" + (ivar) + " = nil;\n";}, $$14.$$s = self, $$14.$$arity = 1, $$14));
          gv = $send(self.$gvars(), 'map', [], ($$15 = function(gvar){var self = $$15.$$s || this;

          
            
            if (gvar == null) {
              gvar = nil;
            };
            return "" + "if ($gvars" + (gvar) + " == null) $gvars" + (gvar) + " = nil;\n";}, $$15.$$s = self, $$15.$$arity = 1, $$15));
          indent = self.compiler.$parser_indent();
          str = (function() {if ($truthy(vars['$empty?']())) {
            return ""
          } else {
            return "" + "var " + (vars.$join(", ")) + ";\n"
          }; return nil; })();
          if ($truthy(self.$ivars()['$empty?']())) {
          } else {
            str = $rb_plus(str, "" + (indent) + (iv.$join(indent)))
          };
          if ($truthy(self.$gvars()['$empty?']())) {
          } else {
            str = $rb_plus(str, "" + (indent) + (gv.$join(indent)))
          };
          if ($truthy(($truthy($a = self['$class?']()) ? self.proto_ivars['$empty?']()['$!']() : $a))) {
            
            pvars = $send(self.proto_ivars, 'map', [], ($$16 = function(i){var self = $$16.$$s || this;

            
              
              if (i == null) {
                i = nil;
              };
              return "" + "self.$$prototype" + (i);}, $$16.$$s = self, $$16.$$arity = 1, $$16)).$join(" = ");
            result = "" + (str) + "\n" + (indent) + (pvars) + " = nil;";
          } else {
            result = str
          };
          return self.$fragment(result);
        }, $ScopeNode_to_vars$12.$$arity = 0);
        
        Opal.def(self, '$add_scope_ivar', $ScopeNode_add_scope_ivar$17 = function $$add_scope_ivar(ivar) {
          var self = this;

          if ($truthy(self['$def_in_class?']())) {
            return self.parent.$add_proto_ivar(ivar)
          } else if ($truthy(self.ivars['$include?'](ivar))) {
            return nil
          } else {
            return self.ivars['$<<'](ivar)
          }
        }, $ScopeNode_add_scope_ivar$17.$$arity = 1);
        
        Opal.def(self, '$add_scope_gvar', $ScopeNode_add_scope_gvar$18 = function $$add_scope_gvar(gvar) {
          var self = this;

          if ($truthy(self.gvars['$include?'](gvar))) {
            return nil
          } else {
            return self.gvars['$<<'](gvar)
          }
        }, $ScopeNode_add_scope_gvar$18.$$arity = 1);
        
        Opal.def(self, '$add_proto_ivar', $ScopeNode_add_proto_ivar$19 = function $$add_proto_ivar(ivar) {
          var self = this;

          if ($truthy(self.proto_ivars['$include?'](ivar))) {
            return nil
          } else {
            return self.proto_ivars['$<<'](ivar)
          }
        }, $ScopeNode_add_proto_ivar$19.$$arity = 1);
        
        Opal.def(self, '$add_arg', $ScopeNode_add_arg$20 = function $$add_arg(arg) {
          var self = this;

          
          if ($truthy(self.args['$include?'](arg))) {
          } else {
            self.args['$<<'](arg)
          };
          return arg;
        }, $ScopeNode_add_arg$20.$$arity = 1);
        
        Opal.def(self, '$add_scope_local', $ScopeNode_add_scope_local$21 = function $$add_scope_local(local) {
          var self = this;

          
          if ($truthy(self['$has_local?'](local))) {
            return nil};
          return self.locals['$<<'](local);
        }, $ScopeNode_add_scope_local$21.$$arity = 1);
        
        Opal.def(self, '$has_local?', $ScopeNode_has_local$ques$22 = function(local) {
          var $a, $b, self = this;

          
          if ($truthy(($truthy($a = ($truthy($b = self.locals['$include?'](local)) ? $b : self.args['$include?'](local))) ? $a : self.temps['$include?'](local)))) {
            return true};
          if ($truthy(($truthy($a = self.parent) ? self.type['$==']("iter") : $a))) {
            return self.parent['$has_local?'](local)};
          return false;
        }, $ScopeNode_has_local$ques$22.$$arity = 1);
        
        Opal.def(self, '$add_scope_temp', $ScopeNode_add_scope_temp$23 = function $$add_scope_temp(tmp) {
          var self = this;

          
          if ($truthy(self['$has_temp?'](tmp))) {
            return nil};
          return self.temps.$push(tmp);
        }, $ScopeNode_add_scope_temp$23.$$arity = 1);
        
        Opal.def(self, '$has_temp?', $ScopeNode_has_temp$ques$24 = function(tmp) {
          var self = this;

          return self.temps['$include?'](tmp)
        }, $ScopeNode_has_temp$ques$24.$$arity = 1);
        
        Opal.def(self, '$new_temp', $ScopeNode_new_temp$25 = function $$new_temp() {
          var self = this, tmp = nil;

          
          if ($truthy(self.queue['$empty?']())) {
          } else {
            return self.queue.$pop()
          };
          tmp = self.$next_temp();
          self.temps['$<<'](tmp);
          return tmp;
        }, $ScopeNode_new_temp$25.$$arity = 0);
        
        Opal.def(self, '$next_temp', $ScopeNode_next_temp$26 = function $$next_temp() {
          var $$27, self = this, tmp = nil;

          
          tmp = nil;
          (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$27 = function(){var self = $$27.$$s || this;
            if (self.unique == null) self.unique = nil;

          
            tmp = "" + "$" + (self.unique);
            self.unique = self.unique.$succ();
            if ($truthy(self['$has_local?'](tmp))) {
              return nil
            } else {
              
              Opal.brk(nil, $brk)
            };}, $$27.$$s = self, $$27.$$brk = $brk, $$27.$$arity = 0, $$27))
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return tmp;
        }, $ScopeNode_next_temp$26.$$arity = 0);
        
        Opal.def(self, '$queue_temp', $ScopeNode_queue_temp$28 = function $$queue_temp(name) {
          var self = this;

          return self.queue['$<<'](name)
        }, $ScopeNode_queue_temp$28.$$arity = 1);
        
        Opal.def(self, '$push_while', $ScopeNode_push_while$29 = function $$push_while() {
          var self = this, info = nil;

          
          info = $hash2([], {});
          self.while_stack.$push(info);
          return info;
        }, $ScopeNode_push_while$29.$$arity = 0);
        
        Opal.def(self, '$pop_while', $ScopeNode_pop_while$30 = function $$pop_while() {
          var self = this;

          return self.while_stack.$pop()
        }, $ScopeNode_pop_while$30.$$arity = 0);
        
        Opal.def(self, '$in_while?', $ScopeNode_in_while$ques$31 = function() {
          var self = this;

          return self.while_stack['$empty?']()['$!']()
        }, $ScopeNode_in_while$ques$31.$$arity = 0);
        
        Opal.def(self, '$uses_block!', $ScopeNode_uses_block$excl$32 = function() {
          var $a, self = this;

          if ($truthy((($a = self.type['$==']("iter")) ? self.parent : self.type['$==']("iter")))) {
            return self.parent['$uses_block!']()
          } else {
            
            self.uses_block = true;
            return self['$identify!']();
          }
        }, $ScopeNode_uses_block$excl$32.$$arity = 0);
        
        Opal.def(self, '$identify!', $ScopeNode_identify$excl$33 = function(name) {
          var $a, $b, $c, self = this;

          
          
          if (name == null) {
            name = nil;
          };
          if ($truthy(self.identity)) {
            return self.identity};
          name = ($truthy($a = name) ? $a : [($truthy($b = self.$parent()) ? ($truthy($c = self.$parent().$name()) ? $c : self.$parent().$scope_name()) : $b), self.$mid()].$compact().$join("_"));
          self.identity = self.compiler.$unique_temp(name);
          if ($truthy(self.parent)) {
            self.parent.$add_scope_temp(self.identity)};
          return self.identity;
        }, $ScopeNode_identify$excl$33.$$arity = -1);
        self.$attr_reader("identity");
        
        Opal.def(self, '$find_parent_def', $ScopeNode_find_parent_def$34 = function $$find_parent_def() {
          var $a, self = this, scope = nil;

          
          scope = self;
          while ($truthy((scope = scope.$parent()))) {
            if ($truthy(scope['$def?']())) {
              return scope}
          };
          return nil;
        }, $ScopeNode_find_parent_def$34.$$arity = 0);
        
        Opal.def(self, '$super_chain', $ScopeNode_super_chain$35 = function $$super_chain() {
          var $a, self = this, chain = nil, scope = nil, defn = nil, mid = nil;

          
          $a = [[], self, "null", "null"], (chain = $a[0]), (scope = $a[1]), (defn = $a[2]), (mid = $a[3]), $a;
          while ($truthy(scope)) {
            if (scope.$type()['$==']("iter")) {
              
              chain['$<<'](scope['$identify!']());
              if ($truthy(scope.$parent())) {
                scope = scope.$parent()};
            } else if ($truthy(["def", "defs"]['$include?'](scope.$type()))) {
              
              defn = scope['$identify!']();
              mid = "" + "'" + (scope.$mid()) + "'";
              break;;
            } else {
              break;
            }
          };
          return [chain, defn, mid];
        }, $ScopeNode_super_chain$35.$$arity = 0);
        
        Opal.def(self, '$uses_block?', $ScopeNode_uses_block$ques$36 = function() {
          var self = this;

          return self.uses_block
        }, $ScopeNode_uses_block$ques$36.$$arity = 0);
        
        Opal.def(self, '$has_rescue_else?', $ScopeNode_has_rescue_else$ques$37 = function() {
          var self = this;

          return self.$rescue_else_sexp()['$nil?']()['$!']()
        }, $ScopeNode_has_rescue_else$ques$37.$$arity = 0);
        
        Opal.def(self, '$in_ensure', $ScopeNode_in_ensure$38 = function $$in_ensure() {
          var $iter = $ScopeNode_in_ensure$38.$$p, $yield = $iter || nil, self = this, result = nil;

          if ($iter) $ScopeNode_in_ensure$38.$$p = null;
          
          if (($yield !== nil)) {
          } else {
            return nil
          };
          self.in_ensure = true;
          result = Opal.yieldX($yield, []);
          self.in_ensure = false;
          return result;
        }, $ScopeNode_in_ensure$38.$$arity = 0);
        return (Opal.def(self, '$in_ensure?', $ScopeNode_in_ensure$ques$39 = function() {
          var self = this;

          return self.in_ensure
        }, $ScopeNode_in_ensure$ques$39.$$arity = 0), nil) && 'in_ensure?';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/module"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$name_and_base', '$helper', '$push', '$line', '$in_scope', '$name=', '$scope', '$-', '$add_temp', '$stmt', '$body', '$s', '$empty_line', '$to_vars', '$cid', '$nil?', '$expr']);
  
  self.$require("opal/nodes/scope");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ModuleNode');

        var $nesting = [self].concat($parent_nesting), $ModuleNode_compile$1, $ModuleNode_name_and_base$3;

        
        self.$handle("module");
        self.$children("cid", "body");
        
        Opal.def(self, '$compile', $ModuleNode_compile$1 = function $$compile() {
          var $a, $b, $$2, self = this, name = nil, base = nil;

          
          $b = self.$name_and_base(), $a = Opal.to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (base = ($a[1] == null ? nil : $a[1])), $b;
          self.$helper("module");
          self.$push("(function($base, $parent_nesting) {");
          self.$line("" + "  var self = $module($base, '" + (name) + "');");
          $send(self, 'in_scope', [], ($$2 = function(){var self = $$2.$$s || this, $c, $writer = nil, body_code = nil;

          
            
            $writer = [name];
            $send(self.$scope(), 'name=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.$add_temp("$nesting = [self].concat($parent_nesting)");
            body_code = self.$stmt(($truthy($c = self.$body()) ? $c : self.$s("nil")));
            self.$empty_line();
            self.$line(self.$scope().$to_vars());
            return self.$line(body_code);}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          return self.$line("})(", base, ", $nesting)");
        }, $ModuleNode_compile$1.$$arity = 0);
        return (Opal.def(self, '$name_and_base', $ModuleNode_name_and_base$3 = function $$name_and_base() {
          var $a, $b, self = this, base = nil, name = nil;

          
          $b = self.$cid().$children(), $a = Opal.to_ary($b), (base = ($a[0] == null ? nil : $a[0])), (name = ($a[1] == null ? nil : $a[1])), $b;
          if ($truthy(base['$nil?']())) {
            return [name, "$nesting[0]"]
          } else {
            return [name, self.$expr(base)]
          };
        }, $ModuleNode_name_and_base$3.$$arity = 0), nil) && 'name_and_base';
      })($nesting[0], $$($nesting, 'ScopeNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/class"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$name_and_base', '$helper', '$push', '$line', '$in_scope', '$name=', '$scope', '$-', '$add_temp', '$body_code', '$empty_line', '$to_vars', '$super_code', '$sup', '$expr', '$stmt', '$returns', '$compiler', '$body', '$s']);
  
  self.$require("opal/nodes/module");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ClassNode');

        var $nesting = [self].concat($parent_nesting), $ClassNode_compile$1, $ClassNode_super_code$3, $ClassNode_body_code$4;

        
        self.$handle("class");
        self.$children("cid", "sup", "body");
        
        Opal.def(self, '$compile', $ClassNode_compile$1 = function $$compile() {
          var $a, $b, $$2, self = this, name = nil, base = nil;

          
          $b = self.$name_and_base(), $a = Opal.to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (base = ($a[1] == null ? nil : $a[1])), $b;
          self.$helper("klass");
          self.$push("(function($base, $super, $parent_nesting) {");
          self.$line("" + "  var self = $klass($base, $super, '" + (name) + "');");
          $send(self, 'in_scope', [], ($$2 = function(){var self = $$2.$$s || this, $writer = nil, body_code = nil;

          
            
            $writer = [name];
            $send(self.$scope(), 'name=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.$add_temp("$nesting = [self].concat($parent_nesting)");
            body_code = self.$body_code();
            self.$empty_line();
            self.$line(self.$scope().$to_vars());
            return self.$line(body_code);}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          return self.$line("})(", base, ", ", self.$super_code(), ", $nesting)");
        }, $ClassNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$super_code', $ClassNode_super_code$3 = function $$super_code() {
          var self = this;

          if ($truthy(self.$sup())) {
            return self.$expr(self.$sup())
          } else {
            return "null"
          }
        }, $ClassNode_super_code$3.$$arity = 0);
        return (Opal.def(self, '$body_code', $ClassNode_body_code$4 = function $$body_code() {
          var $a, self = this;

          return self.$stmt(self.$compiler().$returns(($truthy($a = self.$body()) ? $a : self.$s("nil"))))
        }, $ClassNode_body_code$4.$$arity = 0), nil) && 'body_code';
      })($nesting[0], $$($nesting, 'ModuleNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/singleton_class"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$children', '$push', '$in_scope', '$add_temp', '$stmt', '$returns', '$compiler', '$body', '$line', '$to_vars', '$scope', '$recv', '$object']);
  
  self.$require("opal/nodes/scope");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SingletonClassNode');

        var $nesting = [self].concat($parent_nesting), $SingletonClassNode_compile$1;

        
        self.$handle("sclass");
        self.$children("object", "body");
        return (Opal.def(self, '$compile', $SingletonClassNode_compile$1 = function $$compile() {
          var $$2, self = this;

          
          self.$push("(function(self, $parent_nesting) {");
          $send(self, 'in_scope', [], ($$2 = function(){var self = $$2.$$s || this, body_stmt = nil;

          
            self.$add_temp("$nesting = [self].concat($parent_nesting)");
            body_stmt = self.$stmt(self.$compiler().$returns(self.$body()));
            self.$line(self.$scope().$to_vars());
            return self.$line(body_stmt);}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          return self.$line("})(Opal.get_singleton_class(", self.$recv(self.$object()), "), $nesting)");
        }, $SingletonClassNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'ScopeNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/args/arg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$add_arg', '$scope', '$name', '$push', '$to_s']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ArgNode');

          var $nesting = [self].concat($parent_nesting), $ArgNode_compile$1;

          
          self.$handle("arg");
          self.$children("name");
          return (Opal.def(self, '$compile', $ArgNode_compile$1 = function $$compile() {
            var self = this;

            
            self.$scope().$add_arg(self.$name());
            return self.$push(self.$name().$to_s());
          }, $ArgNode_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/args/arity_check"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$new', '$args_node', '$args', '$optargs', '$restarg', '$postargs', '$kwargs', '$kwoptargs', '$kwrestarg', '$arity', '$arity=', '$scope', '$-', '$arity_check?', '$compiler', '$empty?', '$arity_checks', '$inspect', '$to_s', '$mid', '$line', '$push', '$join', '$compact', '$size', '$all_args', '$!', '$-@', '$<', '$+', '$>', '$<<', '$any?', '$has_only_optional_kwargs?', '$negative_arity', '$positive_arity', '$select', '$include?', '$type', '$has_required_kwargs?', '$all?', '$==', '$def?', '$class_scope?', '$top?', '$parent', '$class?', '$name', '$module?', '$identity']);
  
  self.$require("opal/nodes/base");
  self.$require("opal/rewriters/arguments");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ArityCheckNode');

        var $nesting = [self].concat($parent_nesting), $ArityCheckNode_initialize$1, $ArityCheckNode_compile$2, $ArityCheckNode_kwargs$3, $ArityCheckNode_all_args$4, $ArityCheckNode_arity_checks$5, $ArityCheckNode_arity$6, $ArityCheckNode_negative_arity$7, $ArityCheckNode_positive_arity$9, $ArityCheckNode_has_only_optional_kwargs$ques$10, $ArityCheckNode_has_required_kwargs$ques$12;

        self.$$prototype.kwargs = self.$$prototype.kwoptargs = self.$$prototype.kwrestarg = self.$$prototype.all_args = self.$$prototype.args = self.$$prototype.optargs = self.$$prototype.restarg = self.$$prototype.postargs = self.$$prototype.arity_checks = nil;
        
        self.$handle("arity_check");
        self.$children("args_node");
        
        Opal.def(self, '$initialize', $ArityCheckNode_initialize$1 = function $$initialize($a) {
          var $post_args, $iter = $ArityCheckNode_initialize$1.$$p, $yield = $iter || nil, self = this, arguments$ = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $ArityCheckNode_initialize$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $ArityCheckNode_initialize$1, false), $zuper, $iter);
          arguments$ = $$$($$($nesting, 'Rewriters'), 'Arguments').$new(self.$args_node().$children());
          self.args = arguments$.$args();
          self.optargs = arguments$.$optargs();
          self.restarg = arguments$.$restarg();
          self.postargs = arguments$.$postargs();
          self.kwargs = arguments$.$kwargs();
          self.kwoptargs = arguments$.$kwoptargs();
          return (self.kwrestarg = arguments$.$kwrestarg());
        }, $ArityCheckNode_initialize$1.$$arity = -1);
        
        Opal.def(self, '$compile', $ArityCheckNode_compile$2 = function $$compile() {
          var self = this, $writer = nil, meth = nil;

          
          
          $writer = [self.$arity()];
          $send(self.$scope(), 'arity=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(self.$compiler()['$arity_check?']())) {
          } else {
            return nil
          };
          if ($truthy(self.$arity_checks()['$empty?']())) {
            return nil
          } else {
            
            meth = self.$scope().$mid().$to_s().$inspect();
            self.$line("var $arity = arguments.length;");
            return self.$push("" + " if (" + (self.$arity_checks().$join(" || ")) + ") { Opal.ac($arity, " + (self.$arity()) + ", this, " + (meth) + "); }");
          };
        }, $ArityCheckNode_compile$2.$$arity = 0);
        
        Opal.def(self, '$kwargs', $ArityCheckNode_kwargs$3 = function $$kwargs() {
          var self = this;

          return [].concat(Opal.to_a(self.kwargs)).concat(Opal.to_a(self.kwoptargs)).concat([self.kwrestarg]).$compact()
        }, $ArityCheckNode_kwargs$3.$$arity = 0);
        
        Opal.def(self, '$all_args', $ArityCheckNode_all_args$4 = function $$all_args() {
          var $a, self = this;

          return (self.all_args = ($truthy($a = self.all_args) ? $a : [].concat(Opal.to_a(self.args)).concat(Opal.to_a(self.optargs)).concat([self.restarg]).concat(Opal.to_a(self.postargs)).concat(Opal.to_a(self.$kwargs())).$compact()))
        }, $ArityCheckNode_all_args$4.$$arity = 0);
        
        Opal.def(self, '$arity_checks', $ArityCheckNode_arity_checks$5 = function $$arity_checks() {
          var $a, $b, $c, self = this, arity = nil, min_arity = nil, max_arity = nil;

          
          if ($truthy((($a = self['arity_checks'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
            return self.arity_checks};
          arity = self.$all_args().$size();
          arity = $rb_minus(arity, self.optargs.$size());
          if ($truthy(self.restarg)) {
            arity = $rb_minus(arity, 1)};
          arity = $rb_minus(arity, self.$kwargs().$size());
          if ($truthy(($truthy($b = ($truthy($c = self.optargs['$empty?']()['$!']()) ? $c : self.$kwargs()['$empty?']()['$!']())) ? $b : self.restarg))) {
            arity = $rb_minus(arity['$-@'](), 1)};
          self.arity_checks = [];
          if ($truthy($rb_lt(arity, 0))) {
            
            min_arity = $rb_plus(arity, 1)['$-@']();
            max_arity = self.$all_args().$size();
            if ($truthy($rb_gt(min_arity, 0))) {
              self.arity_checks['$<<']("" + "$arity < " + (min_arity))};
            if ($truthy(self.restarg)) {
            } else {
              self.arity_checks['$<<']("" + "$arity > " + (max_arity))
            };
          } else {
            self.arity_checks['$<<']("" + "$arity !== " + (arity))
          };
          return self.arity_checks;
        }, $ArityCheckNode_arity_checks$5.$$arity = 0);
        
        Opal.def(self, '$arity', $ArityCheckNode_arity$6 = function $$arity() {
          var $a, $b, self = this;

          if ($truthy(($truthy($a = ($truthy($b = self.restarg) ? $b : self.optargs['$any?']())) ? $a : self['$has_only_optional_kwargs?']()))) {
            return self.$negative_arity()
          } else {
            return self.$positive_arity()
          }
        }, $ArityCheckNode_arity$6.$$arity = 0);
        
        Opal.def(self, '$negative_arity', $ArityCheckNode_negative_arity$7 = function $$negative_arity() {
          var $$8, self = this, required_plain_args = nil, result = nil;

          
          required_plain_args = $send(self.$all_args(), 'select', [], ($$8 = function(arg){var self = $$8.$$s || this;

          
            
            if (arg == null) {
              arg = nil;
            };
            return ["arg", "mlhs"]['$include?'](arg.$type());}, $$8.$$s = self, $$8.$$arity = 1, $$8));
          result = required_plain_args.$size();
          if ($truthy(self['$has_required_kwargs?']())) {
            result = $rb_plus(result, 1)};
          result = $rb_minus(result['$-@'](), 1);
          return result;
        }, $ArityCheckNode_negative_arity$7.$$arity = 0);
        
        Opal.def(self, '$positive_arity', $ArityCheckNode_positive_arity$9 = function $$positive_arity() {
          var self = this, result = nil;

          
          result = self.$all_args().$size();
          result = $rb_minus(result, self.$kwargs().$size());
          if ($truthy(self.$kwargs()['$any?']())) {
            result = $rb_plus(result, 1)};
          return result;
        }, $ArityCheckNode_positive_arity$9.$$arity = 0);
        
        Opal.def(self, '$has_only_optional_kwargs?', $ArityCheckNode_has_only_optional_kwargs$ques$10 = function() {
          var $a, $$11, self = this;

          return ($truthy($a = self.$kwargs()['$any?']()) ? $send(self.$kwargs(), 'all?', [], ($$11 = function(arg){var self = $$11.$$s || this;

          
            
            if (arg == null) {
              arg = nil;
            };
            return ["kwoptarg", "kwrestarg"]['$include?'](arg.$type());}, $$11.$$s = self, $$11.$$arity = 1, $$11)) : $a)
        }, $ArityCheckNode_has_only_optional_kwargs$ques$10.$$arity = 0);
        return (Opal.def(self, '$has_required_kwargs?', $ArityCheckNode_has_required_kwargs$ques$12 = function() {
          var $$13, self = this;

          return $send(self.$kwargs(), 'any?', [], ($$13 = function(arg){var self = $$13.$$s || this;

          
            
            if (arg == null) {
              arg = nil;
            };
            return arg.$type()['$==']("kwarg");}, $$13.$$s = self, $$13.$$arity = 1, $$13))
        }, $ArityCheckNode_has_required_kwargs$ques$12.$$arity = 0), nil) && 'has_required_kwargs?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'IterArityCheckNode');

        var $nesting = [self].concat($parent_nesting), $IterArityCheckNode_compile$14;

        
        self.$handle("iter_arity_check");
        return (Opal.def(self, '$compile', $IterArityCheckNode_compile$14 = function $$compile() {
          var $a, $b, $c, self = this, $writer = nil, parent_scope = nil, context = nil, identity = nil;

          
          
          $writer = [self.$arity()];
          $send(self.$scope(), 'arity=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(self.$compiler()['$arity_check?']())) {
          } else {
            return nil
          };
          if ($truthy(self.$arity_checks()['$empty?']())) {
            return nil
          } else {
            
            parent_scope = self.$scope();
            while (!($truthy(($truthy($b = ($truthy($c = parent_scope['$def?']()) ? $c : parent_scope['$class_scope?']())) ? $b : parent_scope['$top?']())))) {
              parent_scope = parent_scope.$parent()
            };
            context = (function() {if ($truthy(parent_scope['$top?']())) {
              return "'<main>'"
            } else if ($truthy(parent_scope['$def?']())) {
              return "" + "'" + (parent_scope.$mid()) + "'"
            } else if ($truthy(parent_scope['$class?']())) {
              return "" + "'<class:" + (parent_scope.$name()) + ">'"
            } else if ($truthy(parent_scope['$module?']())) {
              return "" + "'<module:" + (parent_scope.$name()) + ">'"
            } else {
              return nil
            }; return nil; })();
            identity = self.$scope().$identity();
            self.$line("" + "if (" + (identity) + ".$$is_lambda || " + (identity) + ".$$define_meth) {");
            self.$line("  var $arity = arguments.length;");
            self.$line("" + "  if (" + (self.$arity_checks().$join(" || ")) + ") { Opal.block_ac($arity, " + (self.$arity()) + ", " + (context) + "); }");
            return self.$line("}");
          };
        }, $IterArityCheckNode_compile$14.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'ArityCheckNode'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/args/ensure_kwargs_are_kwargs"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$helper', '$line']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'EnsureKwargsAreKwargs');

          var $nesting = [self].concat($parent_nesting), $EnsureKwargsAreKwargs_compile$1;

          
          self.$handle("ensure_kwargs_are_kwargs");
          return (Opal.def(self, '$compile', $EnsureKwargsAreKwargs_compile$1 = function $$compile() {
            var self = this;

            
            self.$helper("hash2");
            self.$line("if ($kwargs == null) {");
            self.$line("  $kwargs = $hash2([], {});");
            self.$line("} else if (!$kwargs.$$is_hash) {");
            self.$line("  throw Opal.ArgumentError.$new('expected kwargs');");
            return self.$line("}");
          }, $EnsureKwargsAreKwargs_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/args/extract_block_arg"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$children', '$uses_block!', '$scope', '$add_arg', '$name', '$block_name=', '$-', '$identity', '$block_name', '$add_temp', '$line']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractBlockarg');

          var $nesting = [self].concat($parent_nesting), $ExtractBlockarg_compile$1;

          
          self.$handle("extract_blockarg");
          self.$children("name");
          return (Opal.def(self, '$compile', $ExtractBlockarg_compile$1 = function $$compile() {
            var self = this, $writer = nil, scope_name = nil, yielder = nil;

            
            self.$scope()['$uses_block!']();
            self.$scope().$add_arg(self.$name());
            
            $writer = [self.$name()];
            $send(self.$scope(), 'block_name=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            scope_name = self.$scope().$identity();
            yielder = self.$scope().$block_name();
            self.$add_temp("" + "$iter = " + (scope_name) + ".$$p");
            self.$add_temp("" + (yielder) + " = $iter || nil");
            return self.$line("" + "if ($iter) " + (scope_name) + ".$$p = null;");
          }, $ExtractBlockarg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/args/extract_kwarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$[]', '$meta', '$<<', '$used_kwargs', '$scope', '$add_temp', '$lvar_name', '$line', '$inspect', '$to_s']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractKwarg');

          var $nesting = [self].concat($parent_nesting), $ExtractKwarg_compile$1;

          self.$$prototype.sexp = nil;
          
          self.$handle("extract_kwarg");
          self.$children("lvar_name");
          return (Opal.def(self, '$compile', $ExtractKwarg_compile$1 = function $$compile() {
            var self = this, key_name = nil;

            
            key_name = self.sexp.$meta()['$[]']("arg_name");
            self.$scope().$used_kwargs()['$<<'](key_name);
            self.$add_temp(self.$lvar_name());
            self.$line("" + "if (!Opal.hasOwnProperty.call($kwargs.$$smap, '" + (key_name) + "')) {");
            self.$line("" + "  throw Opal.ArgumentError.$new('missing keyword: " + (key_name) + "');");
            self.$line("}");
            return self.$line("" + (self.$lvar_name()) + " = $kwargs.$$smap[" + (key_name.$to_s().$inspect()) + "];");
          }, $ExtractKwarg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/args/extract_kwargs"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$add_temp', '$line']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractKwargs');

          var $nesting = [self].concat($parent_nesting), $ExtractKwargs_compile$1;

          
          self.$handle("extract_kwargs");
          return (Opal.def(self, '$compile', $ExtractKwargs_compile$1 = function $$compile() {
            var self = this;

            
            self.$add_temp("$kwargs");
            return self.$line("$kwargs = Opal.extract_kwargs($post_args)");
          }, $ExtractKwargs_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/args/extract_kwoptarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$[]', '$meta', '$<<', '$used_kwargs', '$scope', '$add_temp', '$lvar_name', '$line', '$inspect', '$to_s', '$==', '$default_value', '$expr']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractKwoptarg');

          var $nesting = [self].concat($parent_nesting), $ExtractKwoptarg_compile$1;

          self.$$prototype.sexp = nil;
          
          self.$handle("extract_kwoptarg");
          self.$children("lvar_name", "default_value");
          return (Opal.def(self, '$compile', $ExtractKwoptarg_compile$1 = function $$compile() {
            var self = this, key_name = nil;

            
            key_name = self.sexp.$meta()['$[]']("arg_name");
            self.$scope().$used_kwargs()['$<<'](key_name);
            self.$add_temp(self.$lvar_name());
            self.$line("" + (self.$lvar_name()) + " = $kwargs.$$smap[" + (key_name.$to_s().$inspect()) + "];");
            if (self.$default_value().$children()['$[]'](1)['$==']("undefined")) {
              return nil};
            self.$line("" + "if (" + (self.$lvar_name()) + " == null) {");
            self.$line("" + "  " + (self.$lvar_name()) + " = ", self.$expr(self.$default_value()));
            return self.$line("}");
          }, $ExtractKwoptarg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/args/extract_kwrestarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$children', '$name', '$add_temp', '$line', '$used_kwargs', '$map', '$scope', '$join']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractKwrestarg');

          var $nesting = [self].concat($parent_nesting), $ExtractKwrestarg_compile$1, $ExtractKwrestarg_used_kwargs$2;

          
          self.$handle("extract_kwrestarg");
          self.$children("name");
          
          Opal.def(self, '$compile', $ExtractKwrestarg_compile$1 = function $$compile() {
            var self = this;

            if ($truthy(self.$name())) {
              
              self.$add_temp(self.$name());
              return self.$line("" + (self.$name()) + " = Opal.kwrestargs($kwargs, " + (self.$used_kwargs()) + ");");
            } else {
              return nil
            }
          }, $ExtractKwrestarg_compile$1.$$arity = 0);
          return (Opal.def(self, '$used_kwargs', $ExtractKwrestarg_used_kwargs$2 = function $$used_kwargs() {
            var $$3, self = this, args = nil;

            
            args = $send(self.$scope().$used_kwargs(), 'map', [], ($$3 = function(arg_name){var self = $$3.$$s || this;

            
              
              if (arg_name == null) {
                arg_name = nil;
              };
              return "" + "'" + (arg_name) + "': true";}, $$3.$$s = self, $$3.$$arity = 1, $$3));
            return "" + "{" + (args.$join(",")) + "}";
          }, $ExtractKwrestarg_used_kwargs$2.$$arity = 0), nil) && 'used_kwargs';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/args/extract_optarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$==', '$[]', '$default_value', '$line', '$name', '$expr']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractOptargNode');

          var $nesting = [self].concat($parent_nesting), $ExtractOptargNode_compile$1;

          
          self.$handle("extract_optarg");
          self.$children("name", "default_value");
          return (Opal.def(self, '$compile', $ExtractOptargNode_compile$1 = function $$compile() {
            var self = this;

            
            if (self.$default_value().$children()['$[]'](1)['$==']("undefined")) {
              return nil};
            self.$line("" + "if (" + (self.$name()) + " == null) {");
            self.$line("" + "  " + (self.$name()) + " = ", self.$expr(self.$default_value()), ";");
            return self.$line("}");
          }, $ExtractOptargNode_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/args/extract_post_arg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$add_temp', '$name', '$line']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractPostArg');

          var $nesting = [self].concat($parent_nesting), $ExtractPostArg_compile$1;

          
          self.$handle("extract_post_arg");
          self.$children("name");
          return (Opal.def(self, '$compile', $ExtractPostArg_compile$1 = function $$compile() {
            var self = this;

            
            self.$add_temp(self.$name());
            self.$line("" + (self.$name()) + " = $post_args[0];");
            self.$line("$post_args.splice(0, 1);");
            self.$line("" + "if (" + (self.$name()) + " == null) {");
            self.$line("" + "  " + (self.$name()) + " = nil");
            return self.$line("}");
          }, $ExtractPostArg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/args/extract_post_optarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$add_temp', '$name', '$line', '$args_to_keep', '$==', '$[]', '$default_value', '$expr']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractPostOptarg');

          var $nesting = [self].concat($parent_nesting), $ExtractPostOptarg_compile$1;

          
          self.$handle("extract_post_optarg");
          self.$children("name", "default_value", "args_to_keep");
          return (Opal.def(self, '$compile', $ExtractPostOptarg_compile$1 = function $$compile() {
            var self = this;

            
            self.$add_temp(self.$name());
            self.$line("" + "if ($post_args.length > " + (self.$args_to_keep()) + ") {");
            self.$line("" + "  " + (self.$name()) + " = $post_args[0];");
            self.$line("  $post_args.splice(0, 1);");
            self.$line("}");
            if (self.$default_value().$children()['$[]'](1)['$==']("undefined")) {
              return nil};
            self.$line("" + "if (" + (self.$name()) + " == null) {");
            self.$line("" + "  " + (self.$name()) + " = ", self.$expr(self.$default_value()), ";");
            return self.$line("}");
          }, $ExtractPostOptarg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/args/extract_restarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$name', '$add_temp', '$==', '$args_to_keep', '$line', '$!=']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractRestarg');

          var $nesting = [self].concat($parent_nesting), $ExtractRestarg_compile$1;

          
          self.$handle("extract_restarg");
          self.$children("name", "args_to_keep");
          return (Opal.def(self, '$compile', $ExtractRestarg_compile$1 = function $$compile() {
            var self = this;

            if ($truthy(self.$name())) {
              
              self.$add_temp(self.$name());
              if (self.$args_to_keep()['$=='](0)) {
                return self.$line("" + (self.$name()) + " = $post_args;")
              } else {
                return self.$line("" + (self.$name()) + " = $post_args.splice(0, $post_args.length - " + (self.$args_to_keep()) + ");")
              };
            } else if ($truthy(self.$args_to_keep()['$!='](0))) {
              return self.$line("" + "$post_args.splice(0, $post_args.length - " + (self.$args_to_keep()) + ");")
            } else {
              return nil
            }
          }, $ExtractRestarg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/args/fake_arg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$next_temp', '$scope', '$add_arg', '$push']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'FakeArgNode');

          var $nesting = [self].concat($parent_nesting), $FakeArgNode_compile$1;

          
          self.$handle("fake_arg");
          return (Opal.def(self, '$compile', $FakeArgNode_compile$1 = function $$compile() {
            var self = this, name = nil;

            
            name = self.$scope().$next_temp();
            self.$scope().$add_arg(name);
            return self.$push(name);
          }, $FakeArgNode_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/args/initialize_iterarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$line', '$name']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'InitializeIterarg');

          var $nesting = [self].concat($parent_nesting), $InitializeIterarg_compile$1;

          
          self.$handle("initialize_iter_arg");
          self.$children("name");
          return (Opal.def(self, '$compile', $InitializeIterarg_compile$1 = function $$compile() {
            var self = this;

            
            self.$line("" + "if (" + (self.$name()) + " == null) {");
            self.$line("" + "  " + (self.$name()) + " = nil;");
            return self.$line("}");
          }, $InitializeIterarg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/args/initialize_shadowarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$<<', '$locals', '$scope', '$name', '$add_arg', '$line']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'InitializeShadowarg');

          var $nesting = [self].concat($parent_nesting), $InitializeShadowarg_compile$1;

          
          self.$handle("initialize_shadowarg");
          self.$children("name");
          return (Opal.def(self, '$compile', $InitializeShadowarg_compile$1 = function $$compile() {
            var self = this;

            
            self.$scope().$locals()['$<<'](self.$name());
            self.$scope().$add_arg(self.$name());
            return self.$line("" + (self.$name()) + " = nil;");
          }, $InitializeShadowarg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/args/parameters"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$children', '$map', '$public_send', '$type', '$join', '$compact']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Parameters');

          var $nesting = [self].concat($parent_nesting), $Parameters_initialize$1, $Parameters_to_code$2, $Parameters_on_arg$4, $Parameters_on_mlhs$5, $Parameters_on_optarg$6, $Parameters_on_restarg$7, $Parameters_on_kwarg$8, $Parameters_on_kwoptarg$9, $Parameters_on_kwrestarg$10, $Parameters_on_blockarg$11, $Parameters_on_shadowarg$12;

          self.$$prototype.args = nil;
          
          
          Opal.def(self, '$initialize', $Parameters_initialize$1 = function $$initialize(args) {
            var self = this;

            return (self.args = args.$children())
          }, $Parameters_initialize$1.$$arity = 1);
          
          Opal.def(self, '$to_code', $Parameters_to_code$2 = function $$to_code() {
            var $$3, self = this, stringified_parameters = nil;

            
            stringified_parameters = $send(self.args, 'map', [], ($$3 = function(arg){var self = $$3.$$s || this;

            
              
              if (arg == null) {
                arg = nil;
              };
              return $send(self, 'public_send', ["" + "on_" + (arg.$type())].concat(Opal.to_a(arg)));}, $$3.$$s = self, $$3.$$arity = 1, $$3));
            return "" + "[" + (stringified_parameters.$compact().$join(", ")) + "]";
          }, $Parameters_to_code$2.$$arity = 0);
          
          Opal.def(self, '$on_arg', $Parameters_on_arg$4 = function $$on_arg(arg_name) {
            var self = this;

            return "" + "['req', '" + (arg_name) + "']"
          }, $Parameters_on_arg$4.$$arity = 1);
          
          Opal.def(self, '$on_mlhs', $Parameters_on_mlhs$5 = function $$on_mlhs($a) {
            var $post_args, self = this;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            ;
            return "['req']";
          }, $Parameters_on_mlhs$5.$$arity = -1);
          
          Opal.def(self, '$on_optarg', $Parameters_on_optarg$6 = function $$on_optarg(arg_name, _default_value) {
            var self = this;

            return "" + "['opt', '" + (arg_name) + "']"
          }, $Parameters_on_optarg$6.$$arity = 2);
          
          Opal.def(self, '$on_restarg', $Parameters_on_restarg$7 = function $$on_restarg(arg_name) {
            var self = this;

            
            
            if (arg_name == null) {
              arg_name = nil;
            };
            if ($truthy(arg_name)) {
              return "" + "['rest', '" + (arg_name) + "']"
            } else {
              return "['rest']"
            };
          }, $Parameters_on_restarg$7.$$arity = -1);
          
          Opal.def(self, '$on_kwarg', $Parameters_on_kwarg$8 = function $$on_kwarg(arg_name) {
            var self = this;

            return "" + "['keyreq', '" + (arg_name) + "']"
          }, $Parameters_on_kwarg$8.$$arity = 1);
          
          Opal.def(self, '$on_kwoptarg', $Parameters_on_kwoptarg$9 = function $$on_kwoptarg(arg_name, _default_value) {
            var self = this;

            return "" + "['key', '" + (arg_name) + "']"
          }, $Parameters_on_kwoptarg$9.$$arity = 2);
          
          Opal.def(self, '$on_kwrestarg', $Parameters_on_kwrestarg$10 = function $$on_kwrestarg(arg_name) {
            var self = this;

            
            
            if (arg_name == null) {
              arg_name = nil;
            };
            if ($truthy(arg_name)) {
              return "" + "['keyrest', '" + (arg_name) + "']"
            } else {
              return "['keyrest']"
            };
          }, $Parameters_on_kwrestarg$10.$$arity = -1);
          
          Opal.def(self, '$on_blockarg', $Parameters_on_blockarg$11 = function $$on_blockarg(arg_name) {
            var self = this;

            return "" + "['block', '" + (arg_name) + "']"
          }, $Parameters_on_blockarg$11.$$arity = 1);
          return (Opal.def(self, '$on_shadowarg', $Parameters_on_shadowarg$12 = function $$on_shadowarg(_arg_name) {
            var self = this;

            return nil
          }, $Parameters_on_shadowarg$12.$$arity = 1), nil) && 'on_shadowarg';
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/args/prepare_post_args"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$add_temp', '$line', '$offset']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'PreparePostArgs');

          var $nesting = [self].concat($parent_nesting), $PreparePostArgs_compile$1;

          
          self.$handle("prepare_post_args");
          self.$children("offset");
          return (Opal.def(self, '$compile', $PreparePostArgs_compile$1 = function $$compile() {
            var self = this;

            
            self.$add_temp("$post_args");
            return self.$line("" + "$post_args = Opal.slice.call(arguments, " + (self.$offset()) + ", arguments.length)");
          }, $PreparePostArgs_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/args"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$each_with_index', '$children', '$!=', '$push', '$process']);
  
  self.$require("opal/nodes/base");
  self.$require("opal/nodes/args/arg");
  self.$require("opal/nodes/args/arity_check");
  self.$require("opal/nodes/args/ensure_kwargs_are_kwargs");
  self.$require("opal/nodes/args/extract_block_arg");
  self.$require("opal/nodes/args/extract_kwarg");
  self.$require("opal/nodes/args/extract_kwargs");
  self.$require("opal/nodes/args/extract_kwoptarg");
  self.$require("opal/nodes/args/extract_kwrestarg");
  self.$require("opal/nodes/args/extract_optarg");
  self.$require("opal/nodes/args/extract_post_arg");
  self.$require("opal/nodes/args/extract_post_optarg");
  self.$require("opal/nodes/args/extract_restarg");
  self.$require("opal/nodes/args/fake_arg");
  self.$require("opal/nodes/args/initialize_iterarg");
  self.$require("opal/nodes/args/initialize_shadowarg");
  self.$require("opal/nodes/args/parameters");
  self.$require("opal/nodes/args/prepare_post_args");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ArgsNode');

        var $nesting = [self].concat($parent_nesting), $ArgsNode_compile$1;

        
        self.$handle("args");
        return (Opal.def(self, '$compile', $ArgsNode_compile$1 = function $$compile() {
          var $$2, self = this;

          return $send(self.$children(), 'each_with_index', [], ($$2 = function(arg, idx){var self = $$2.$$s || this;

          
            
            if (arg == null) {
              arg = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if ($truthy(idx['$!='](0))) {
              self.$push(", ")};
            return self.$push(self.$process(arg));}, $$2.$$s = self, $$2.$$arity = 2, $$2))
        }, $ArgsNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/node_with_args"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$attr_reader', '$attr_accessor', '$[]', '$meta', '$s', '$original_args', '$push', '$process', '$arity_check_node', '$uses_block?', '$scope', '$identity', '$block_name', '$add_temp', '$line', '$to_code', '$new']);
  
  self.$require("opal/nodes/scope");
  self.$require("opal/nodes/args/parameters");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NodeWithArgs');

        var $nesting = [self].concat($parent_nesting), $NodeWithArgs_initialize$1, $NodeWithArgs_arity_check_node$2, $NodeWithArgs_compile_arity_check$3, $NodeWithArgs_compile_block_arg$4, $NodeWithArgs_parameters_code$5;

        self.$$prototype.sexp = nil;
        
        self.$attr_reader("used_kwargs");
        self.$attr_accessor("arity");
        self.$attr_reader("original_args");
        
        Opal.def(self, '$initialize', $NodeWithArgs_initialize$1 = function $$initialize($a) {
          var $post_args, $iter = $NodeWithArgs_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $NodeWithArgs_initialize$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $NodeWithArgs_initialize$1, false), $zuper, $iter);
          self.original_args = self.sexp.$meta()['$[]']("original_args");
          self.used_kwargs = [];
          return (self.arity = 0);
        }, $NodeWithArgs_initialize$1.$$arity = -1);
        
        Opal.def(self, '$arity_check_node', $NodeWithArgs_arity_check_node$2 = function $$arity_check_node() {
          var self = this;

          return self.$s("arity_check", self.$original_args())
        }, $NodeWithArgs_arity_check_node$2.$$arity = 0);
        
        Opal.def(self, '$compile_arity_check', $NodeWithArgs_compile_arity_check$3 = function $$compile_arity_check() {
          var self = this;

          return self.$push(self.$process(self.$arity_check_node()))
        }, $NodeWithArgs_compile_arity_check$3.$$arity = 0);
        
        Opal.def(self, '$compile_block_arg', $NodeWithArgs_compile_block_arg$4 = function $$compile_block_arg() {
          var $a, self = this, scope_name = nil, yielder = nil;

          if ($truthy(self.$scope()['$uses_block?']())) {
            
            scope_name = self.$scope().$identity();
            yielder = ($truthy($a = self.$scope().$block_name()) ? $a : "$yield");
            self.$add_temp("" + "$iter = " + (scope_name) + ".$$p");
            self.$add_temp("" + (yielder) + " = $iter || nil");
            return self.$line("" + "if ($iter) " + (scope_name) + ".$$p = null;");
          } else {
            return nil
          }
        }, $NodeWithArgs_compile_block_arg$4.$$arity = 0);
        return (Opal.def(self, '$parameters_code', $NodeWithArgs_parameters_code$5 = function $$parameters_code() {
          var self = this;

          return $$$($$($nesting, 'Args'), 'Parameters').$new(self.$original_args()).$to_code()
        }, $NodeWithArgs_parameters_code$5.$$arity = 0), nil) && 'parameters_code';
      })($nesting[0], $$($nesting, 'ScopeNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/iter"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$in_scope', '$identify!', '$scope', '$add_temp', '$process', '$inline_args', '$compile_arity_check', '$stmt', '$returned_body', '$to_vars', '$line', '$unshift', '$push', '$contains_break?', '$arity', '$arity_check?', '$compiler', '$parameters_code', '$has_top_level_mlhs_arg?', '$has_trailing_comma_in_args?', '$block_arg', '$block_name=', '$-', '$each', '$args', '$first', '$==', '$<<', '$updated', '$body', '$returns', '$s', '$any?', '$original_args', '$type', '$loc', '$expression', '$source', '$match', '$new', '$found_break?']);
  
  self.$require("opal/nodes/node_with_args");
  self.$require("opal/rewriters/break_finder");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'IterNode');

        var $nesting = [self].concat($parent_nesting), $IterNode_compile$1, $IterNode_compile_block_arg$3, $IterNode_extract_underscore_args$4, $IterNode_returned_body$6, $IterNode_has_top_level_mlhs_arg$ques$7, $IterNode_has_trailing_comma_in_args$ques$9, $IterNode_arity_check_node$10, $IterNode_contains_break$ques$11;

        self.$$prototype.sexp = nil;
        
        self.$handle("iter");
        self.$children("inline_args", "body");
        
        Opal.def(self, '$compile', $IterNode_compile$1 = function $$compile() {
          var $$2, self = this, inline_params = nil, to_vars = nil, identity = nil, body_code = nil;

          
          inline_params = nil;
          to_vars = (identity = (body_code = nil));
          $send(self, 'in_scope', [], ($$2 = function(){var self = $$2.$$s || this;

          
            identity = self.$scope()['$identify!']();
            self.$add_temp("" + "self = " + (identity) + ".$$s || this");
            inline_params = self.$process(self.$inline_args());
            self.$compile_arity_check();
            body_code = self.$stmt(self.$returned_body());
            return (to_vars = self.$scope().$to_vars());}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          self.$line(body_code);
          self.$unshift(to_vars);
          self.$unshift("" + "(" + (identity) + " = function(", inline_params, "){");
          self.$push("" + "}, " + (identity) + ".$$s = self,");
          if ($truthy(self['$contains_break?']())) {
            self.$push("" + " " + (identity) + ".$$brk = $brk,")};
          self.$push("" + " " + (identity) + ".$$arity = " + (self.$arity()) + ",");
          if ($truthy(self.$compiler()['$arity_check?']())) {
            self.$push("" + " " + (identity) + ".$$parameters = " + (self.$parameters_code()) + ",")};
          if ($truthy(self['$has_top_level_mlhs_arg?']())) {
            self.$push("" + " " + (identity) + ".$$has_top_level_mlhs_arg = true,")};
          if ($truthy(self['$has_trailing_comma_in_args?']())) {
            self.$push("" + " " + (identity) + ".$$has_trailing_comma_in_args = true,")};
          return self.$push("" + " " + (identity) + ")");
        }, $IterNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$compile_block_arg', $IterNode_compile_block_arg$3 = function $$compile_block_arg() {
          var self = this, $writer = nil, scope_name = nil;

          if ($truthy(self.$block_arg())) {
            
            
            $writer = [self.$block_arg()];
            $send(self.$scope(), 'block_name=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.$scope().$add_temp(self.$block_arg());
            scope_name = self.$scope()['$identify!']();
            self.$line("" + (self.$block_arg()) + " = " + (scope_name) + ".$$p || nil;");
            return self.$line("" + "if (" + (self.$block_arg()) + ") " + (scope_name) + ".$$p = null;");
          } else {
            return nil
          }
        }, $IterNode_compile_block_arg$3.$$arity = 0);
        
        Opal.def(self, '$extract_underscore_args', $IterNode_extract_underscore_args$4 = function $$extract_underscore_args() {
          var $$5, self = this, valid_args = nil, caught_blank_argument = nil;

          
          valid_args = [];
          caught_blank_argument = false;
          $send(self.$args().$children(), 'each', [], ($$5 = function(arg){var self = $$5.$$s || this, arg_name = nil;

          
            
            if (arg == null) {
              arg = nil;
            };
            arg_name = arg.$children().$first();
            if (arg_name['$==']("_")) {
              if ($truthy(caught_blank_argument)) {
                return nil
              } else {
                
                caught_blank_argument = true;
                return valid_args['$<<'](arg);
              }
            } else {
              return valid_args['$<<'](arg)
            };}, $$5.$$s = self, $$5.$$arity = 1, $$5));
          return (self.sexp = self.sexp.$updated(nil, [self.$args().$updated(nil, valid_args), self.$body()]));
        }, $IterNode_extract_underscore_args$4.$$arity = 0);
        
        Opal.def(self, '$returned_body', $IterNode_returned_body$6 = function $$returned_body() {
          var $a, self = this;

          return self.$compiler().$returns(($truthy($a = self.$body()) ? $a : self.$s("nil")))
        }, $IterNode_returned_body$6.$$arity = 0);
        
        Opal.def(self, '$has_top_level_mlhs_arg?', $IterNode_has_top_level_mlhs_arg$ques$7 = function() {
          var $$8, self = this;

          return $send(self.$original_args().$children(), 'any?', [], ($$8 = function(arg){var self = $$8.$$s || this;

          
            
            if (arg == null) {
              arg = nil;
            };
            return arg.$type()['$==']("mlhs");}, $$8.$$s = self, $$8.$$arity = 1, $$8))
        }, $IterNode_has_top_level_mlhs_arg$ques$7.$$arity = 0);
        
        Opal.def(self, '$has_trailing_comma_in_args?', $IterNode_has_trailing_comma_in_args$ques$9 = function() {
          var $a, self = this, args_source = nil;

          if ($truthy(($truthy($a = self.$original_args().$loc()) ? self.$original_args().$loc().$expression() : $a))) {
            
            args_source = self.$original_args().$loc().$expression().$source();
            return args_source.$match(/,\s*\|/);
          } else {
            return nil
          }
        }, $IterNode_has_trailing_comma_in_args$ques$9.$$arity = 0);
        
        Opal.def(self, '$arity_check_node', $IterNode_arity_check_node$10 = function $$arity_check_node() {
          var self = this;

          return self.$s("iter_arity_check", self.$original_args())
        }, $IterNode_arity_check_node$10.$$arity = 0);
        return (Opal.def(self, '$contains_break?', $IterNode_contains_break$ques$11 = function() {
          var self = this, finder = nil;

          
          finder = $$$($$$($$($nesting, 'Opal'), 'Rewriters'), 'BreakFinder').$new();
          finder.$process(self.sexp);
          return finder['$found_break?']();
        }, $IterNode_contains_break$ques$11.$$arity = 0), nil) && 'contains_break?';
      })($nesting[0], $$($nesting, 'NodeWithArgs'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/def"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$in_scope', '$mid', '$mid=', '$scope', '$-', '$==', '$type', '$defs=', '$identify!', '$identity', '$block_name=', '$process', '$inline_args', '$stmt', '$returns', '$compiler', '$stmts', '$compile_block_arg', '$add_temp', '$compile_arity_check', '$uses_zuper', '$prepare_super', '$unshift', '$current_indent', '$to_vars', '$line', '$catch_return', '$push', '$valid_name?', '$arity', '$arity_check?', '$parameters_code', '$parse_comments?', '$comments_code', '$enable_source_location?', '$source_location', '$wrap_with_definition', '$wrap', '$expr?', '$name', '$source_buffer', '$expression', '$loc', '$+', '$join', '$map', '$comments', '$inspect', '$text', '$add_local']);
  
  self.$require("opal/nodes/node_with_args");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DefNode');

        var $nesting = [self].concat($parent_nesting), $DefNode_compile$1, $DefNode_wrap_with_definition$3, $DefNode_source_location$4, $DefNode_comments_code$5, $DefNode_prepare_super$7;

        self.$$prototype.sexp = nil;
        
        self.$handle("def");
        self.$children("mid", "inline_args", "stmts");
        
        Opal.def(self, '$compile', $DefNode_compile$1 = function $$compile() {
          var $$2, self = this, inline_params = nil, scope_name = nil, function_name = nil;

          
          inline_params = nil;
          scope_name = nil;
          $send(self, 'in_scope', [], ($$2 = function(){var self = $$2.$$s || this, $writer = nil, stmt_code = nil;
            if (self.sexp == null) self.sexp = nil;

          
            
            $writer = [self.$mid()];
            $send(self.$scope(), 'mid=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if (self.sexp.$type()['$==']("defs")) {
              
              $writer = [true];
              $send(self.$scope(), 'defs=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            self.$scope()['$identify!']();
            scope_name = self.$scope().$identity();
            
            $writer = ["$yield"];
            $send(self.$scope(), 'block_name=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            inline_params = self.$process(self.$inline_args());
            stmt_code = self.$stmt(self.$compiler().$returns(self.$stmts()));
            self.$compile_block_arg();
            self.$add_temp("self = this");
            self.$compile_arity_check();
            if ($truthy(self.$scope().$uses_zuper())) {
              self.$prepare_super()};
            self.$unshift("" + "\n" + (self.$current_indent()), self.$scope().$to_vars());
            self.$line(stmt_code);
            if ($truthy(self.$scope().$catch_return())) {
              
              self.$unshift("try {\n");
              self.$line("} catch ($returner) { if ($returner === Opal.returner) { return $returner.$v }");
              return self.$push(" throw $returner; }");
            } else {
              return nil
            };}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          function_name = (function() {if ($truthy(self['$valid_name?'](self.$mid()))) {
            return "" + " $$" + (self.$mid())
          } else {
            return ""
          }; return nil; })();
          self.$unshift(") {");
          self.$unshift(inline_params);
          self.$unshift("" + "function" + (function_name) + "(");
          if ($truthy(scope_name)) {
            self.$unshift("" + (scope_name) + " = ")};
          self.$line("}");
          self.$push("" + ", " + (scope_name) + ".$$arity = " + (self.$arity()));
          if ($truthy(self.$compiler()['$arity_check?']())) {
            self.$push("" + ", " + (scope_name) + ".$$parameters = " + (self.$parameters_code()))};
          if ($truthy(self.$compiler()['$parse_comments?']())) {
            self.$push("" + ", " + (scope_name) + ".$$comments = " + (self.$comments_code()))};
          if ($truthy(self.$compiler()['$enable_source_location?']())) {
            self.$push("" + ", " + (scope_name) + ".$$source_location = " + (self.$source_location()))};
          return self.$wrap_with_definition();
        }, $DefNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$wrap_with_definition', $DefNode_wrap_with_definition$3 = function $$wrap_with_definition() {
          var self = this;

          
          self.$wrap("" + "Opal.def(self, '$" + (self.$mid()) + "', ", ")");
          if ($truthy(self['$expr?']())) {
            return self.$wrap("(", "" + ", nil) && '" + (self.$mid()) + "'")
          } else {
            return self.$unshift("" + "\n" + (self.$current_indent()))
          };
        }, $DefNode_wrap_with_definition$3.$$arity = 0);
        
        Opal.def(self, '$source_location', $DefNode_source_location$4 = function $$source_location() {
          var self = this, file = nil, line = nil;

          
          file = self.sexp.$loc().$expression().$source_buffer().$name();
          line = self.sexp.$loc().$line();
          return "" + "['" + (file) + "', " + (line) + "]";
        }, $DefNode_source_location$4.$$arity = 0);
        
        Opal.def(self, '$comments_code', $DefNode_comments_code$5 = function $$comments_code() {
          var $$6, self = this;

          return $rb_plus($rb_plus("[", $send(self.$comments(), 'map', [], ($$6 = function(comment){var self = $$6.$$s || this;

          
            
            if (comment == null) {
              comment = nil;
            };
            return comment.$text().$inspect();}, $$6.$$s = self, $$6.$$arity = 1, $$6)).$join(", ")), "]")
        }, $DefNode_comments_code$5.$$arity = 0);
        return (Opal.def(self, '$prepare_super', $DefNode_prepare_super$7 = function $$prepare_super() {
          var self = this;

          
          self.$add_local("$zuper");
          self.$add_local("$zuper_i");
          self.$add_local("$zuper_ii");
          self.$line("// Prepare super implicit arguments");
          self.$line("for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {");
          self.$line("  $zuper[$zuper_i] = arguments[$zuper_i];");
          return self.$line("}");
        }, $DefNode_prepare_super$7.$$arity = 0), nil) && 'prepare_super';
      })($nesting[0], $$($nesting, 'NodeWithArgs'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/defs"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$unshift', '$expr', '$recvr', '$mid', '$push', '$expr?', '$wrap']);
  
  self.$require("opal/nodes/def");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DefsNode');

        var $nesting = [self].concat($parent_nesting), $DefsNode_wrap_with_definition$1;

        
        self.$handle("defs");
        self.$children("recvr", "mid", "inline_args", "stmts");
        return (Opal.def(self, '$wrap_with_definition', $DefsNode_wrap_with_definition$1 = function $$wrap_with_definition() {
          var self = this;

          
          self.$unshift("Opal.defs(", self.$expr(self.$recvr()), "" + ", '$" + (self.$mid()) + "', ");
          self.$push(")");
          if ($truthy(self['$expr?']())) {
            return self.$wrap("(", "" + ", nil) && '" + (self.$mid()) + "'")
          } else {
            return nil
          };
        }, $DefsNode_wrap_with_definition$1.$$arity = 0), nil) && 'wrap_with_definition';
      })($nesting[0], $$($nesting, 'DefNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/if"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$children', '$truthy', '$falsy', '$push', '$js_truthy', '$test', '$indent', '$line', '$stmt', '$==', '$type', '$needs_wrapper?', '$wrap', '$returns', '$compiler', '$true_body', '$s', '$false_body', '$expr?', '$recv?']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'IfNode');

        var $nesting = [self].concat($parent_nesting), $IfNode_compile$1, $IfNode_truthy$4, $IfNode_falsy$5, $IfNode_needs_wrapper$ques$6;

        
        self.$handle("if");
        self.$children("test", "true_body", "false_body");
        
        Opal.def(self, '$compile', $IfNode_compile$1 = function $$compile() {
          var $$2, $$3, self = this, truthy = nil, falsy = nil;

          
          truthy = self.$truthy();
          falsy = self.$falsy();
          self.$push("if (", self.$js_truthy(self.$test()), ") {");
          if ($truthy(truthy)) {
            $send(self, 'indent', [], ($$2 = function(){var self = $$2.$$s || this;

            return self.$line(self.$stmt(truthy))}, $$2.$$s = self, $$2.$$arity = 0, $$2))};
          if ($truthy(falsy)) {
            if (falsy.$type()['$==']("if")) {
              self.$line("} else ", self.$stmt(falsy))
            } else {
              
              self.$line("} else {");
              $send(self, 'indent', [], ($$3 = function(){var self = $$3.$$s || this;

              return self.$line(self.$stmt(falsy))}, $$3.$$s = self, $$3.$$arity = 0, $$3));
              self.$line("}");
            }
          } else {
            self.$push("}")
          };
          if ($truthy(self['$needs_wrapper?']())) {
            return self.$wrap("(function() {", "; return nil; })()")
          } else {
            return nil
          };
        }, $IfNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$truthy', $IfNode_truthy$4 = function $$truthy() {
          var $a, self = this;

          if ($truthy(self['$needs_wrapper?']())) {
            return self.$compiler().$returns(($truthy($a = self.$true_body()) ? $a : self.$s("nil")))
          } else {
            return self.$true_body()
          }
        }, $IfNode_truthy$4.$$arity = 0);
        
        Opal.def(self, '$falsy', $IfNode_falsy$5 = function $$falsy() {
          var $a, self = this;

          if ($truthy(self['$needs_wrapper?']())) {
            return self.$compiler().$returns(($truthy($a = self.$false_body()) ? $a : self.$s("nil")))
          } else {
            return self.$false_body()
          }
        }, $IfNode_falsy$5.$$arity = 0);
        return (Opal.def(self, '$needs_wrapper?', $IfNode_needs_wrapper$ques$6 = function() {
          var $a, self = this;

          return ($truthy($a = self['$expr?']()) ? $a : self['$recv?']())
        }, $IfNode_needs_wrapper$ques$6.$$arity = 0), nil) && 'needs_wrapper?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'IFlipFlop');

        var $nesting = [self].concat($parent_nesting), $IFlipFlop_compile$7;

        
        self.$handle("iflipflop");
        return (Opal.def(self, '$compile', $IFlipFlop_compile$7 = function $$compile() {
          var self = this;

          return self.$push("true")
        }, $IFlipFlop_compile$7.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'EFlipFlop');

        var $nesting = [self].concat($parent_nesting), $EFlipFlop_compile$8;

        
        self.$handle("eflipflop");
        return (Opal.def(self, '$compile', $EFlipFlop_compile$8 = function $$compile() {
          var self = this;

          return self.$push("true")
        }, $EFlipFlop_compile$8.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/logic"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$in_while?', '$push', '$expr_or_nil', '$value', '$wrap', '$size', '$children', '$===', '$s', '$first', '$compile_while', '$iter?', '$scope', '$compile_iter', '$error', '$[]', '$while_loop', '$stmt?', '$line', '$break_val', '$nil?', '$expr', '$[]=', '$-', '$identity', '$==', '$empty_splat?', '$recv', '$type', '$rhs', '$compile_if', '$compile_ternary', '$raise', '$helper', '$with_temp', '$lhs', '$indent', '$js_truthy_optimize', '$>', '$find_parent_def', '$expr?', '$def?', '$return_in_iter?', '$return_expr_in_def?', '$scope_to_catch_return', '$catch_return=', '$return_val', '$to_s']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NextNode');

        var $nesting = [self].concat($parent_nesting), $NextNode_compile$1, $NextNode_value$2;

        
        self.$handle("next");
        
        Opal.def(self, '$compile', $NextNode_compile$1 = function $$compile() {
          var self = this;

          if ($truthy(self['$in_while?']())) {
            return self.$push("continue;")
          } else {
            
            self.$push(self.$expr_or_nil(self.$value()));
            return self.$wrap("return ", ";");
          }
        }, $NextNode_compile$1.$$arity = 0);
        return (Opal.def(self, '$value', $NextNode_value$2 = function $$value() {
          var self = this, $case = nil;

          return (function() {$case = self.$children().$size();
          if ((0)['$===']($case)) {return self.$s("nil")}
          else if ((1)['$===']($case)) {return self.$children().$first()}
          else {return $send(self, 's', ["array"].concat(Opal.to_a(self.$children())))}})()
        }, $NextNode_value$2.$$arity = 0), nil) && 'value';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BreakNode');

        var $nesting = [self].concat($parent_nesting), $BreakNode_compile$3, $BreakNode_compile_while$4, $BreakNode_compile_iter$5, $BreakNode_break_val$6;

        
        self.$handle("break");
        self.$children("value");
        
        Opal.def(self, '$compile', $BreakNode_compile$3 = function $$compile() {
          var self = this;

          if ($truthy(self['$in_while?']())) {
            return self.$compile_while()
          } else if ($truthy(self.$scope()['$iter?']())) {
            return self.$compile_iter()
          } else {
            return self.$error("void value expression: cannot use break outside of iter/while")
          }
        }, $BreakNode_compile$3.$$arity = 0);
        
        Opal.def(self, '$compile_while', $BreakNode_compile_while$4 = function $$compile_while() {
          var self = this;

          if ($truthy(self.$while_loop()['$[]']("closure"))) {
            return self.$push("return ", self.$expr_or_nil(self.$value()))
          } else {
            return self.$push("break;")
          }
        }, $BreakNode_compile_while$4.$$arity = 0);
        
        Opal.def(self, '$compile_iter', $BreakNode_compile_iter$5 = function $$compile_iter() {
          var self = this;

          
          if ($truthy(self['$stmt?']())) {
          } else {
            self.$error("break must be used as a statement")
          };
          return self.$line("Opal.brk(", self.$break_val(), ", $brk)");
        }, $BreakNode_compile_iter$5.$$arity = 0);
        return (Opal.def(self, '$break_val', $BreakNode_break_val$6 = function $$break_val() {
          var self = this;

          if ($truthy(self.$value()['$nil?']())) {
            return self.$expr(self.$s("nil"))
          } else {
            return self.$expr(self.$value())
          }
        }, $BreakNode_break_val$6.$$arity = 0), nil) && 'break_val';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RedoNode');

        var $nesting = [self].concat($parent_nesting), $RedoNode_compile$7, $RedoNode_compile_while$8, $RedoNode_compile_iter$9;

        
        self.$handle("redo");
        
        Opal.def(self, '$compile', $RedoNode_compile$7 = function $$compile() {
          var self = this;

          if ($truthy(self['$in_while?']())) {
            return self.$compile_while()
          } else if ($truthy(self.$scope()['$iter?']())) {
            return self.$compile_iter()
          } else {
            return self.$push("REDO()")
          }
        }, $RedoNode_compile$7.$$arity = 0);
        
        Opal.def(self, '$compile_while', $RedoNode_compile_while$8 = function $$compile_while() {
          var self = this, $writer = nil;

          
          
          $writer = ["use_redo", true];
          $send(self.$while_loop(), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return self.$push("" + (self.$while_loop()['$[]']("redo_var")) + " = true; continue;");
        }, $RedoNode_compile_while$8.$$arity = 0);
        return (Opal.def(self, '$compile_iter', $RedoNode_compile_iter$9 = function $$compile_iter() {
          var self = this;

          return self.$push("" + "return " + (self.$scope().$identity()) + ".apply(null, $slice.call(arguments))")
        }, $RedoNode_compile_iter$9.$$arity = 0), nil) && 'compile_iter';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SplatNode');

        var $nesting = [self].concat($parent_nesting), $SplatNode_empty_splat$ques$10, $SplatNode_compile$11;

        
        self.$handle("splat");
        self.$children("value");
        
        Opal.def(self, '$empty_splat?', $SplatNode_empty_splat$ques$10 = function() {
          var self = this;

          return self.$value()['$=='](self.$s("array"))
        }, $SplatNode_empty_splat$ques$10.$$arity = 0);
        return (Opal.def(self, '$compile', $SplatNode_compile$11 = function $$compile() {
          var self = this;

          if ($truthy(self['$empty_splat?']())) {
            return self.$push("[]")
          } else {
            return self.$push("Opal.to_a(", self.$recv(self.$value()), ")")
          }
        }, $SplatNode_compile$11.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BinaryOp');

        var $nesting = [self].concat($parent_nesting), $BinaryOp_compile$12, $BinaryOp_compile_ternary$13, $BinaryOp_compile_if$14;

        
        
        Opal.def(self, '$compile', $BinaryOp_compile$12 = function $$compile() {
          var self = this;

          if (self.$rhs().$type()['$==']("break")) {
            return self.$compile_if()
          } else {
            return self.$compile_ternary()
          }
        }, $BinaryOp_compile$12.$$arity = 0);
        
        Opal.def(self, '$compile_ternary', $BinaryOp_compile_ternary$13 = function $$compile_ternary() {
          var self = this;

          return self.$raise($$($nesting, 'NotImplementedError'))
        }, $BinaryOp_compile_ternary$13.$$arity = 0);
        return (Opal.def(self, '$compile_if', $BinaryOp_compile_if$14 = function $$compile_if() {
          var self = this;

          return self.$raise($$($nesting, 'NotImplementedError'))
        }, $BinaryOp_compile_if$14.$$arity = 0), nil) && 'compile_if';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'OrNode');

        var $nesting = [self].concat($parent_nesting), $OrNode_compile_ternary$15, $OrNode_compile_if$17;

        
        self.$handle("or");
        self.$children("lhs", "rhs");
        
        Opal.def(self, '$compile_ternary', $OrNode_compile_ternary$15 = function $$compile_ternary() {
          var $$16, self = this;

          
          self.$helper("truthy");
          return $send(self, 'with_temp', [], ($$16 = function(tmp){var self = $$16.$$s || this;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            return self.$push("" + "($truthy(" + (tmp) + " = ", self.$expr(self.$lhs()), "" + ") ? " + (tmp) + " : ", self.$expr(self.$rhs()), ")");}, $$16.$$s = self, $$16.$$arity = 1, $$16));
        }, $OrNode_compile_ternary$15.$$arity = 0);
        return (Opal.def(self, '$compile_if', $OrNode_compile_if$17 = function $$compile_if() {
          var $$18, self = this;

          
          self.$helper("truthy");
          return $send(self, 'with_temp', [], ($$18 = function(tmp){var self = $$18.$$s || this, $$19, $$20;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            self.$push("" + "if ($truthy(" + (tmp) + " = ", self.$expr(self.$lhs()), ")) {");
            $send(self, 'indent', [], ($$19 = function(){var self = $$19.$$s || this;

            return self.$line(tmp)}, $$19.$$s = self, $$19.$$arity = 0, $$19));
            self.$line("} else {");
            $send(self, 'indent', [], ($$20 = function(){var self = $$20.$$s || this;

            return self.$line(self.$expr(self.$rhs()))}, $$20.$$s = self, $$20.$$arity = 0, $$20));
            return self.$line("}");}, $$18.$$s = self, $$18.$$arity = 1, $$18));
        }, $OrNode_compile_if$17.$$arity = 0), nil) && 'compile_if';
      })($nesting[0], $$($nesting, 'BinaryOp'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'AndNode');

        var $nesting = [self].concat($parent_nesting), $AndNode_compile_ternary$21, $AndNode_compile_if$23;

        
        self.$handle("and");
        self.$children("lhs", "rhs");
        
        Opal.def(self, '$compile_ternary', $AndNode_compile_ternary$21 = function $$compile_ternary() {
          var $$22, self = this, truthy_opt = nil;

          
          truthy_opt = nil;
          return $send(self, 'with_temp', [], ($$22 = function(tmp){var self = $$22.$$s || this;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            if ($truthy((truthy_opt = self.$js_truthy_optimize(self.$lhs())))) {
              
              self.$push("" + "((" + (tmp) + " = ", truthy_opt);
              self.$push(") ? ");
              self.$push(self.$expr(self.$rhs()));
              return self.$push(" : ", self.$expr(self.$lhs()), ")");
            } else {
              
              self.$helper("truthy");
              return self.$push("" + "($truthy(" + (tmp) + " = ", self.$expr(self.$lhs()), ") ? ", self.$expr(self.$rhs()), "" + " : " + (tmp) + ")");
            };}, $$22.$$s = self, $$22.$$arity = 1, $$22));
        }, $AndNode_compile_ternary$21.$$arity = 0);
        return (Opal.def(self, '$compile_if', $AndNode_compile_if$23 = function $$compile_if() {
          var $a, $$24, $$25, self = this, condition = nil;

          
          self.$helper("truthy");
          condition = ($truthy($a = self.$js_truthy_optimize(self.$lhs())) ? $a : self.$expr(self.$lhs()));
          self.$line("if ($truthy(", condition, ")) {");
          $send(self, 'indent', [], ($$24 = function(){var self = $$24.$$s || this;

          return self.$line(self.$expr(self.$rhs()))}, $$24.$$s = self, $$24.$$arity = 0, $$24));
          self.$line("} else {");
          $send(self, 'indent', [], ($$25 = function(){var self = $$25.$$s || this;

          return self.$line(self.$expr(self.$lhs()))}, $$25.$$s = self, $$25.$$arity = 0, $$25));
          return self.$line("}");
        }, $AndNode_compile_if$23.$$arity = 0), nil) && 'compile_if';
      })($nesting[0], $$($nesting, 'BinaryOp'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ReturnNode');

        var $nesting = [self].concat($parent_nesting), $ReturnNode_return_val$26, $ReturnNode_return_in_iter$ques$27, $ReturnNode_return_expr_in_def$ques$28, $ReturnNode_scope_to_catch_return$29, $ReturnNode_compile$30;

        
        self.$handle("return");
        self.$children("value");
        
        Opal.def(self, '$return_val', $ReturnNode_return_val$26 = function $$return_val() {
          var self = this;

          if ($truthy(self.$value()['$nil?']())) {
            return self.$expr(self.$s("nil"))
          } else if ($truthy($rb_gt(self.$children().$size(), 1))) {
            return self.$expr($send(self, 's', ["array"].concat(Opal.to_a(self.$children()))))
          } else {
            return self.$expr(self.$value())
          }
        }, $ReturnNode_return_val$26.$$arity = 0);
        
        Opal.def(self, '$return_in_iter?', $ReturnNode_return_in_iter$ques$27 = function() {
          var $a, self = this, parent_def = nil;

          if ($truthy(($truthy($a = self.$scope()['$iter?']()) ? (parent_def = self.$scope().$find_parent_def()) : $a))) {
            return parent_def
          } else {
            return nil
          }
        }, $ReturnNode_return_in_iter$ques$27.$$arity = 0);
        
        Opal.def(self, '$return_expr_in_def?', $ReturnNode_return_expr_in_def$ques$28 = function() {
          var $a, self = this;

          if ($truthy(($truthy($a = self['$expr?']()) ? self.$scope()['$def?']() : $a))) {
            return self.$scope()
          } else {
            return nil
          }
        }, $ReturnNode_return_expr_in_def$ques$28.$$arity = 0);
        
        Opal.def(self, '$scope_to_catch_return', $ReturnNode_scope_to_catch_return$29 = function $$scope_to_catch_return() {
          var $a, self = this;

          return ($truthy($a = self['$return_in_iter?']()) ? $a : self['$return_expr_in_def?']())
        }, $ReturnNode_scope_to_catch_return$29.$$arity = 0);
        return (Opal.def(self, '$compile', $ReturnNode_compile$30 = function $$compile() {
          var self = this, def_scope = nil, $writer = nil;

          if ($truthy((def_scope = self.$scope_to_catch_return()))) {
            
            
            $writer = [true];
            $send(def_scope, 'catch_return=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return self.$push("Opal.ret(", self.$return_val(), ")");
          } else if ($truthy(self['$stmt?']())) {
            return self.$push("return ", self.$return_val())
          } else {
            return self.$raise($$($nesting, 'SyntaxError'), "void value expression: cannot return as an expression")
          }
        }, $ReturnNode_compile$30.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JSReturnNode');

        var $nesting = [self].concat($parent_nesting), $JSReturnNode_compile$31;

        
        self.$handle("js_return");
        self.$children("value");
        return (Opal.def(self, '$compile', $JSReturnNode_compile$31 = function $$compile() {
          var self = this;

          
          self.$push("return ");
          return self.$push(self.$expr(self.$value()));
        }, $JSReturnNode_compile$31.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JSTempNode');

        var $nesting = [self].concat($parent_nesting), $JSTempNode_compile$32;

        
        self.$handle("js_tmp");
        self.$children("value");
        return (Opal.def(self, '$compile', $JSTempNode_compile$32 = function $$compile() {
          var self = this;

          return self.$push(self.$value().$to_s())
        }, $JSTempNode_compile$32.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BlockPassNode');

        var $nesting = [self].concat($parent_nesting), $BlockPassNode_compile$33;

        
        self.$handle("block_pass");
        self.$children("value");
        return (Opal.def(self, '$compile', $BlockPassNode_compile$33 = function $$compile() {
          var self = this;

          return self.$push(self.$expr(self.$s("send", self.$value(), "to_proc", self.$s("arglist"))))
        }, $BlockPassNode_compile$33.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/definitions"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$each', '$line', '$expr', '$push', '$new_name', '$old_name', '$empty?', '$stmt?', '$compile_children', '$simple_children?', '$compile_inline_children', '$>', '$size', '$wrap', '$==', '$returned_children', '$+', '$returns', '$compiler', '$s', '$process', '$freeze', '$none?', '$include?', '$type', '$map', '$each_with_index', '$reject', '$to_proc']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'UndefNode');

        var $nesting = [self].concat($parent_nesting), $UndefNode_compile$1;

        
        self.$handle("undef");
        self.$children("value");
        return (Opal.def(self, '$compile', $UndefNode_compile$1 = function $$compile() {
          var $$2, self = this;

          return $send(self.$children(), 'each', [], ($$2 = function(child){var self = $$2.$$s || this;

          
            
            if (child == null) {
              child = nil;
            };
            return self.$line("Opal.udef(self, '$' + ", self.$expr(child), ");");}, $$2.$$s = self, $$2.$$arity = 1, $$2))
        }, $UndefNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'AliasNode');

        var $nesting = [self].concat($parent_nesting), $AliasNode_compile$3;

        
        self.$handle("alias");
        self.$children("new_name", "old_name");
        return (Opal.def(self, '$compile', $AliasNode_compile$3 = function $$compile() {
          var self = this;

          return self.$push("Opal.alias(self, ", self.$expr(self.$new_name()), ", ", self.$expr(self.$old_name()), ")")
        }, $AliasNode_compile$3.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BeginNode');

        var $nesting = [self].concat($parent_nesting), $BeginNode_compile$4, $BeginNode_returned_children$5, $BeginNode_compile_children$6, $BeginNode_simple_children$ques$8, $BeginNode_compile_inline_children$10;

        self.$$prototype.level = self.$$prototype.returned_children = nil;
        
        self.$handle("begin");
        
        Opal.def(self, '$compile', $BeginNode_compile$4 = function $$compile() {
          var self = this;

          
          if ($truthy(self.$children()['$empty?']())) {
            return self.$push("nil")};
          if ($truthy(self['$stmt?']())) {
            return self.$compile_children(self.$children(), self.level)
          } else if ($truthy(self['$simple_children?']())) {
            
            self.$compile_inline_children(self.$children(), self.level);
            if ($truthy($rb_gt(self.$children().$size(), 1))) {
              return self.$wrap("(", ")")
            } else {
              return nil
            };
          } else if (self.$children().$size()['$=='](1)) {
            return self.$compile_inline_children(self.$returned_children(), self.level)
          } else {
            
            self.$compile_children(self.$returned_children(), self.level);
            return self.$wrap("(function() {", "})()");
          };
        }, $BeginNode_compile$4.$$arity = 0);
        
        Opal.def(self, '$returned_children', $BeginNode_returned_children$5 = function $$returned_children() {
          var $a, $b, $c, self = this, rest = nil, last_child = nil;

          return (self.returned_children = ($truthy($a = self.returned_children) ? $a : ($b = [].concat(Opal.to_a(self.$children())), $c = $b.length - 1, $c = ($c < 0) ? 0 : $c, (rest = $slice.call($b, 0, $c)), (last_child = ($b[$c] == null ? nil : $b[$c])), $b, (function() {if ($truthy(last_child)) {
            return $rb_plus(rest, [self.$compiler().$returns(last_child)])
          } else {
            return [self.$s("nil")]
          }; return nil; })())))
        }, $BeginNode_returned_children$5.$$arity = 0);
        
        Opal.def(self, '$compile_children', $BeginNode_compile_children$6 = function $$compile_children(children, level) {
          var $$7, self = this;

          return $send(children, 'each', [], ($$7 = function(child){var self = $$7.$$s || this;

          
            
            if (child == null) {
              child = nil;
            };
            return self.$line(self.$process(child, level), ";");}, $$7.$$s = self, $$7.$$arity = 1, $$7))
        }, $BeginNode_compile_children$6.$$arity = 2);
        Opal.const_set($nesting[0], 'COMPLEX_CHILDREN', ["while", "while_post", "until", "until_post", "js_return"].$freeze());
        
        Opal.def(self, '$simple_children?', $BeginNode_simple_children$ques$8 = function() {
          var $$9, self = this;

          return $send(self.$children(), 'none?', [], ($$9 = function(child){var self = $$9.$$s || this;

          
            
            if (child == null) {
              child = nil;
            };
            return $$($nesting, 'COMPLEX_CHILDREN')['$include?'](child.$type());}, $$9.$$s = self, $$9.$$arity = 1, $$9))
        }, $BeginNode_simple_children$ques$8.$$arity = 0);
        return (Opal.def(self, '$compile_inline_children', $BeginNode_compile_inline_children$10 = function $$compile_inline_children(children, level) {
          var $$11, $$12, self = this, processed_children = nil;

          
          processed_children = $send(children, 'map', [], ($$11 = function(child){var self = $$11.$$s || this;

          
            
            if (child == null) {
              child = nil;
            };
            return self.$process(child, level);}, $$11.$$s = self, $$11.$$arity = 1, $$11));
          return $send($send(processed_children, 'reject', [], "empty?".$to_proc()), 'each_with_index', [], ($$12 = function(child, idx){var self = $$12.$$s || this;

          
            
            if (child == null) {
              child = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if (idx['$=='](0)) {
            } else {
              self.$push(", ")
            };
            return self.$push(child);}, $$12.$$s = self, $$12.$$arity = 2, $$12));
        }, $BeginNode_compile_inline_children$10.$$arity = 2), nil) && 'compile_inline_children';
      })($nesting[0], $$($nesting, 'ScopeNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'KwBeginNode');

        var $nesting = [self].concat($parent_nesting);

        return self.$handle("kwbegin")
      })($nesting[0], $$($nesting, 'BeginNode'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/yield"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$find_yielding_scope', '$uses_block!', '$block_name', '$block_name=', '$-', '$yields_single_arg?', '$children', '$push', '$expr', '$first', '$wrap', '$s', '$uses_splat?', '$scope', '$def?', '$parent', '$!', '$==', '$size', '$any?', '$type', '$handle', '$compile_call']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BaseYieldNode');

        var $nesting = [self].concat($parent_nesting), $BaseYieldNode_compile_call$1, $BaseYieldNode_find_yielding_scope$2, $BaseYieldNode_yields_single_arg$ques$3, $BaseYieldNode_uses_splat$ques$4;

        
        
        Opal.def(self, '$compile_call', $BaseYieldNode_compile_call$1 = function $$compile_call() {
          var $a, self = this, yielding_scope = nil, $writer = nil, block_name = nil;

          
          yielding_scope = self.$find_yielding_scope();
          yielding_scope['$uses_block!']();
          ($truthy($a = yielding_scope.$block_name()) ? $a : (($writer = ["$yield"]), $send(yielding_scope, 'block_name=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          block_name = yielding_scope.$block_name();
          if ($truthy(self['$yields_single_arg?'](self.$children()))) {
            
            self.$push(self.$expr(self.$children().$first()));
            return self.$wrap("" + "Opal.yield1(" + (block_name) + ", ", ")");
          } else {
            
            self.$push(self.$expr($send(self, 's', ["arglist"].concat(Opal.to_a(self.$children())))));
            if ($truthy(self['$uses_splat?'](self.$children()))) {
              return self.$wrap("" + "Opal.yieldX(" + (block_name) + ", ", ")")
            } else {
              return self.$wrap("" + "Opal.yieldX(" + (block_name) + ", [", "])")
            };
          };
        }, $BaseYieldNode_compile_call$1.$$arity = 0);
        
        Opal.def(self, '$find_yielding_scope', $BaseYieldNode_find_yielding_scope$2 = function $$find_yielding_scope() {
          var $a, $b, self = this, working = nil;

          
          working = self.$scope();
          while ($truthy(working)) {
            
            if ($truthy(($truthy($b = working.$block_name()) ? $b : working['$def?']()))) {
              break;};
            working = working.$parent();
          };
          return working;
        }, $BaseYieldNode_find_yielding_scope$2.$$arity = 0);
        
        Opal.def(self, '$yields_single_arg?', $BaseYieldNode_yields_single_arg$ques$3 = function(children) {
          var $a, self = this;

          return ($truthy($a = self['$uses_splat?'](children)['$!']()) ? children.$size()['$=='](1) : $a)
        }, $BaseYieldNode_yields_single_arg$ques$3.$$arity = 1);
        return (Opal.def(self, '$uses_splat?', $BaseYieldNode_uses_splat$ques$4 = function(children) {
          var $$5, self = this;

          return $send(children, 'any?', [], ($$5 = function(child){var self = $$5.$$s || this;

          
            
            if (child == null) {
              child = nil;
            };
            return child.$type()['$==']("splat");}, $$5.$$s = self, $$5.$$arity = 1, $$5))
        }, $BaseYieldNode_uses_splat$ques$4.$$arity = 1), nil) && 'uses_splat?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'YieldNode');

        var $nesting = [self].concat($parent_nesting), $YieldNode_compile$6;

        
        self.$handle("yield");
        return (Opal.def(self, '$compile', $YieldNode_compile$6 = function $$compile() {
          var self = this;

          return self.$compile_call()
        }, $YieldNode_compile$6.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'BaseYieldNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ReturnableYieldNode');

        var $nesting = [self].concat($parent_nesting), $ReturnableYieldNode_compile$7;

        
        self.$handle("returnable_yield");
        return (Opal.def(self, '$compile', $ReturnableYieldNode_compile$7 = function $$compile() {
          var self = this;

          
          self.$compile_call();
          return self.$wrap("return ", ";");
        }, $ReturnableYieldNode_compile$7.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'BaseYieldNode'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/rescue"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$push', '$in_ensure', '$line', '$stmt', '$body_sexp', '$indent', '$has_rescue_else?', '$unshift', '$rescue_else_code', '$process', '$compiler', '$ensr_sexp', '$wrap_in_closure?', '$wrap', '$returns', '$begn', '$ensr', '$s', '$recv?', '$expr?', '$rescue_else_sexp', '$scope', '$stmt?', '$detect', '$[]', '$!=', '$type', '$rescue_else_sexp=', '$-', '$handle_rescue_else_manually?', '$body_code', '$each_with_index', '$==', '$nil?', '$body', '$!', '$in_ensure?', '$expr', '$klasses', '$lvar', '$rescue_body', '$klasses_sexp']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'EnsureNode');

        var $nesting = [self].concat($parent_nesting), $EnsureNode_compile$1, $EnsureNode_body_sexp$6, $EnsureNode_ensr_sexp$7, $EnsureNode_wrap_in_closure$ques$8, $EnsureNode_rescue_else_code$9;

        
        self.$handle("ensure");
        self.$children("begn", "ensr");
        
        Opal.def(self, '$compile', $EnsureNode_compile$1 = function $$compile() {
          var $$2, $$3, self = this;

          
          self.$push("try {");
          $send(self, 'in_ensure', [], ($$2 = function(){var self = $$2.$$s || this;

          return self.$line(self.$stmt(self.$body_sexp()))}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          self.$line("} finally {");
          $send(self, 'indent', [], ($$3 = function(){var self = $$3.$$s || this, $$4;
            if (self.level == null) self.level = nil;

          if ($truthy(self['$has_rescue_else?']())) {
              
              self.$unshift("var $no_errors = true; ");
              self.$line("var $rescue_else_result;");
              self.$line("if ($no_errors) { ");
              $send(self, 'indent', [], ($$4 = function(){var self = $$4.$$s || this, $$5;

              
                self.$line("$rescue_else_result = (function() {");
                $send(self, 'indent', [], ($$5 = function(){var self = $$5.$$s || this;

                return self.$line(self.$stmt(self.$rescue_else_code()))}, $$5.$$s = self, $$5.$$arity = 0, $$5));
                return self.$line("})();");}, $$4.$$s = self, $$4.$$arity = 0, $$4));
              self.$line("}");
              self.$line(self.$compiler().$process(self.$ensr_sexp(), self.level));
              return self.$line("if ($no_errors) { return $rescue_else_result; }");
            } else {
              return self.$line(self.$compiler().$process(self.$ensr_sexp(), self.level))
            }}, $$3.$$s = self, $$3.$$arity = 0, $$3));
          self.$line("}");
          if ($truthy(self['$wrap_in_closure?']())) {
            return self.$wrap("(function() { ", "; })()")
          } else {
            return nil
          };
        }, $EnsureNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$body_sexp', $EnsureNode_body_sexp$6 = function $$body_sexp() {
          var self = this;

          if ($truthy(self['$wrap_in_closure?']())) {
            return self.$compiler().$returns(self.$begn())
          } else {
            return self.$begn()
          }
        }, $EnsureNode_body_sexp$6.$$arity = 0);
        
        Opal.def(self, '$ensr_sexp', $EnsureNode_ensr_sexp$7 = function $$ensr_sexp() {
          var $a, self = this;

          return ($truthy($a = self.$ensr()) ? $a : self.$s("nil"))
        }, $EnsureNode_ensr_sexp$7.$$arity = 0);
        
        Opal.def(self, '$wrap_in_closure?', $EnsureNode_wrap_in_closure$ques$8 = function() {
          var $a, $b, self = this;

          return ($truthy($a = ($truthy($b = self['$recv?']()) ? $b : self['$expr?']())) ? $a : self['$has_rescue_else?']())
        }, $EnsureNode_wrap_in_closure$ques$8.$$arity = 0);
        return (Opal.def(self, '$rescue_else_code', $EnsureNode_rescue_else_code$9 = function $$rescue_else_code() {
          var self = this, rescue_else_code = nil;

          
          rescue_else_code = self.$scope().$rescue_else_sexp();
          if ($truthy(self['$stmt?']())) {
          } else {
            rescue_else_code = self.$compiler().$returns(rescue_else_code)
          };
          return rescue_else_code;
        }, $EnsureNode_rescue_else_code$9.$$arity = 0), nil) && 'rescue_else_code';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RescueNode');

        var $nesting = [self].concat($parent_nesting), $RescueNode_compile$10, $RescueNode_body_code$17, $RescueNode_rescue_else_code$18, $RescueNode_handle_rescue_else_manually$ques$19;

        
        self.$handle("rescue");
        self.$children("body");
        
        Opal.def(self, '$compile', $RescueNode_compile$10 = function $$compile() {
          var $$11, $$12, $$13, $$15, $a, self = this, $writer = nil, _has_rescue_handlers = nil;

          
          
          $writer = [$send(self.$children()['$[]']($range(1, -1, false)), 'detect', [], ($$11 = function(sexp){var self = $$11.$$s || this, $a;

          
            
            if (sexp == null) {
              sexp = nil;
            };
            return ($truthy($a = sexp) ? sexp.$type()['$!=']("resbody") : $a);}, $$11.$$s = self, $$11.$$arity = 1, $$11))];
          $send(self.$scope(), 'rescue_else_sexp=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _has_rescue_handlers = false;
          if ($truthy(self['$handle_rescue_else_manually?']())) {
            self.$line("var $no_errors = true;")};
          self.$push("try {");
          $send(self, 'indent', [], ($$12 = function(){var self = $$12.$$s || this;

          return self.$line(self.$stmt(self.$body_code()))}, $$12.$$s = self, $$12.$$arity = 0, $$12));
          self.$line("} catch ($err) {");
          $send(self, 'indent', [], ($$13 = function(){var self = $$13.$$s || this, $$14;

          
            if ($truthy(self['$has_rescue_else?']())) {
              self.$line("$no_errors = false;")};
            $send(self.$children()['$[]']($range(1, -1, false)), 'each_with_index', [], ($$14 = function(child, idx){var self = $$14.$$s || this, $a;
              if (self.level == null) self.level = nil;

            
              
              if (child == null) {
                child = nil;
              };
              
              if (idx == null) {
                idx = nil;
              };
              if ($truthy(($truthy($a = child) ? child.$type()['$==']("resbody") : $a))) {
              } else {
                return nil;
              };
              _has_rescue_handlers = true;
              if (idx['$=='](0)) {
              } else {
                self.$push(" else ")
              };
              return self.$line(self.$process(child, self.level));}, $$14.$$s = self, $$14.$$arity = 2, $$14));
            return self.$push(" else { throw $err; }");}, $$13.$$s = self, $$13.$$arity = 0, $$13));
          self.$line("}");
          if ($truthy(self['$handle_rescue_else_manually?']())) {
            
            self.$push("finally {");
            $send(self, 'indent', [], ($$15 = function(){var self = $$15.$$s || this, $$16;

            
              self.$line("if ($no_errors) { ");
              $send(self, 'indent', [], ($$16 = function(){var self = $$16.$$s || this;

              return self.$line(self.$stmt(self.$rescue_else_code()))}, $$16.$$s = self, $$16.$$arity = 0, $$16));
              return self.$line("}");}, $$15.$$s = self, $$15.$$arity = 0, $$15));
            self.$push("}");};
          if ($truthy(($truthy($a = self['$expr?']()) ? $a : self['$recv?']()))) {
            return self.$wrap("(function() { ", "})()")
          } else {
            return nil
          };
        }, $RescueNode_compile$10.$$arity = 0);
        
        Opal.def(self, '$body_code', $RescueNode_body_code$17 = function $$body_code() {
          var $a, self = this, body_code = nil;

          
          body_code = (function() {if ($truthy(($truthy($a = self.$body()['$nil?']()) ? $a : self.$body().$type()['$==']("resbody")))) {
            return self.$s("nil")
          } else {
            return self.$body()
          }; return nil; })();
          if ($truthy(self['$stmt?']())) {
          } else {
            body_code = self.$compiler().$returns(body_code)
          };
          return body_code;
        }, $RescueNode_body_code$17.$$arity = 0);
        
        Opal.def(self, '$rescue_else_code', $RescueNode_rescue_else_code$18 = function $$rescue_else_code() {
          var self = this, rescue_else_code = nil;

          
          rescue_else_code = self.$scope().$rescue_else_sexp();
          if ($truthy(self['$stmt?']())) {
          } else {
            rescue_else_code = self.$compiler().$returns(rescue_else_code)
          };
          return rescue_else_code;
        }, $RescueNode_rescue_else_code$18.$$arity = 0);
        return (Opal.def(self, '$handle_rescue_else_manually?', $RescueNode_handle_rescue_else_manually$ques$19 = function() {
          var $a, self = this;

          return ($truthy($a = self.$scope()['$in_ensure?']()['$!']()) ? self.$scope()['$has_rescue_else?']() : $a)
        }, $RescueNode_handle_rescue_else_manually$ques$19.$$arity = 0), nil) && 'handle_rescue_else_manually?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ResBodyNode');

        var $nesting = [self].concat($parent_nesting), $ResBodyNode_compile$20, $ResBodyNode_klasses$23, $ResBodyNode_rescue_body$24;

        
        self.$handle("resbody");
        self.$children("klasses_sexp", "lvar", "body");
        
        Opal.def(self, '$compile', $ResBodyNode_compile$20 = function $$compile() {
          var $$21, self = this;

          
          self.$push("if (Opal.rescue($err, ", self.$expr(self.$klasses()), ")) {");
          $send(self, 'indent', [], ($$21 = function(){var self = $$21.$$s || this, $$22;

          
            if ($truthy(self.$lvar())) {
              self.$push(self.$expr(self.$lvar()), "$err;")};
            self.$line("try {");
            $send(self, 'indent', [], ($$22 = function(){var self = $$22.$$s || this;

            return self.$line(self.$stmt(self.$rescue_body()))}, $$22.$$s = self, $$22.$$arity = 0, $$22));
            return self.$line("} finally { Opal.pop_exception() }");}, $$21.$$s = self, $$21.$$arity = 0, $$21));
          return self.$line("}");
        }, $ResBodyNode_compile$20.$$arity = 0);
        
        Opal.def(self, '$klasses', $ResBodyNode_klasses$23 = function $$klasses() {
          var $a, self = this;

          return ($truthy($a = self.$klasses_sexp()) ? $a : self.$s("array", self.$s("const", nil, "StandardError")))
        }, $ResBodyNode_klasses$23.$$arity = 0);
        return (Opal.def(self, '$rescue_body', $ResBodyNode_rescue_body$24 = function $$rescue_body() {
          var $a, self = this, body_code = nil;

          
          body_code = ($truthy($a = self.$body()) ? $a : self.$s("nil"));
          if ($truthy(self['$stmt?']())) {
          } else {
            body_code = self.$compiler().$returns(body_code)
          };
          return body_code;
        }, $ResBodyNode_rescue_body$24.$$arity = 0), nil) && 'rescue_body';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RetryNode');

        var $nesting = [self].concat($parent_nesting), $RetryNode_compile$25;

        
        self.$handle("retry");
        return (Opal.def(self, '$compile', $RetryNode_compile$25 = function $$compile() {
          var self = this;

          return self.$push(self.$stmt(self.$s("send", nil, "retry")))
        }, $RetryNode_compile$25.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/case"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$in_case', '$compiler', '$compile_code', '$needs_closure?', '$wrap', '$condition', '$[]=', '$case_stmt', '$-', '$add_local', '$push', '$expr', '$each_with_index', '$case_parts', '$line', '$type', '$===', '$returns', '$==', '$stmt', '$!', '$stmt?', '$[]', '$when_checks', '$js_truthy', '$s', '$process', '$body_code', '$last']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'CaseNode');

        var $nesting = [self].concat($parent_nesting), $CaseNode_compile$1, $CaseNode_compile_code$3, $CaseNode_needs_closure$ques$5, $CaseNode_case_parts$6, $CaseNode_case_stmt$7;

        
        self.$handle("case");
        self.$children("condition");
        
        Opal.def(self, '$compile', $CaseNode_compile$1 = function $$compile() {
          var $$2, self = this;

          return $send(self.$compiler(), 'in_case', [], ($$2 = function(){var self = $$2.$$s || this;

          
            self.$compile_code();
            if ($truthy(self['$needs_closure?']())) {
              return self.$wrap("(function() {", "})()")
            } else {
              return nil
            };}, $$2.$$s = self, $$2.$$arity = 0, $$2))
        }, $CaseNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$compile_code', $CaseNode_compile_code$3 = function $$compile_code() {
          var $$4, $a, self = this, handled_else = nil, $writer = nil;

          
          handled_else = false;
          if ($truthy(self.$condition())) {
            
            
            $writer = ["cond", true];
            $send(self.$case_stmt(), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.$add_local("$case");
            self.$push("$case = ", self.$expr(self.$condition()), ";");};
          $send(self.$case_parts(), 'each_with_index', [], ($$4 = function(wen, idx){var self = $$4.$$s || this, $case = nil;

          
            
            if (wen == null) {
              wen = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if ($truthy(wen)) {
            } else {
              return nil;
            };
            self.$line();
            return (function() {$case = wen.$type();
            if ("when"['$===']($case)) {
            if ($truthy(self['$needs_closure?']())) {
              wen = self.$compiler().$returns(wen)};
            if (idx['$=='](0)) {
            } else {
              self.$push("else ")
            };
            return self.$push(self.$stmt(wen));}
            else {
            handled_else = true;
            if ($truthy(self['$needs_closure?']())) {
              wen = self.$compiler().$returns(wen)};
            return self.$push("else {", self.$stmt(wen), "}");}})();}, $$4.$$s = self, $$4.$$arity = 2, $$4));
          if ($truthy(($truthy($a = self['$needs_closure?']()) ? handled_else['$!']() : $a))) {
            
            self.$line();
            return self.$push("else { return nil }");
          } else {
            return nil
          };
        }, $CaseNode_compile_code$3.$$arity = 0);
        
        Opal.def(self, '$needs_closure?', $CaseNode_needs_closure$ques$5 = function() {
          var self = this;

          return self['$stmt?']()['$!']()
        }, $CaseNode_needs_closure$ques$5.$$arity = 0);
        
        Opal.def(self, '$case_parts', $CaseNode_case_parts$6 = function $$case_parts() {
          var self = this;

          return self.$children()['$[]']($range(1, -1, false))
        }, $CaseNode_case_parts$6.$$arity = 0);
        return (Opal.def(self, '$case_stmt', $CaseNode_case_stmt$7 = function $$case_stmt() {
          var self = this;

          return self.$compiler().$case_stmt()
        }, $CaseNode_case_stmt$7.$$arity = 0), nil) && 'case_stmt';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'WhenNode');

        var $nesting = [self].concat($parent_nesting), $WhenNode_compile$8, $WhenNode_when_checks$10, $WhenNode_case_stmt$11, $WhenNode_body_code$12;

        self.$$prototype.level = nil;
        
        self.$handle("when");
        self.$children("whens", "body");
        
        Opal.def(self, '$compile', $WhenNode_compile$8 = function $$compile() {
          var $$9, self = this;

          
          self.$push("if (");
          $send(self.$when_checks(), 'each_with_index', [], ($$9 = function(check, idx){var self = $$9.$$s || this, call = nil;

          
            
            if (check == null) {
              check = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if (idx['$=='](0)) {
            } else {
              self.$push(" || ")
            };
            if (check.$type()['$==']("splat")) {
              
              self.$push("(function($splt) { for (var i = 0, ii = $splt.length; i < ii; i++) {");
              if ($truthy(self.$case_stmt()['$[]']("cond"))) {
                self.$push("if ($splt[i]['$===']($case)) { return true; }")
              } else {
                self.$push("if (", self.$js_truthy(check), ")) { return true; }")
              };
              return self.$push("} return false; })(", self.$expr(check.$children()['$[]'](0)), ")");
            } else if ($truthy(self.$case_stmt()['$[]']("cond"))) {
              
              call = self.$s("send", check, "===", self.$s("arglist", self.$s("js_tmp", "$case")));
              return self.$push(self.$expr(call));
            } else {
              return self.$push(self.$js_truthy(check))
            };}, $$9.$$s = self, $$9.$$arity = 2, $$9));
          return self.$push(") {", self.$process(self.$body_code(), self.level), "}");
        }, $WhenNode_compile$8.$$arity = 0);
        
        Opal.def(self, '$when_checks', $WhenNode_when_checks$10 = function $$when_checks() {
          var self = this;

          return self.$children()['$[]']($range(0, -2, false))
        }, $WhenNode_when_checks$10.$$arity = 0);
        
        Opal.def(self, '$case_stmt', $WhenNode_case_stmt$11 = function $$case_stmt() {
          var self = this;

          return self.$compiler().$case_stmt()
        }, $WhenNode_case_stmt$11.$$arity = 0);
        return (Opal.def(self, '$body_code', $WhenNode_body_code$12 = function $$body_code() {
          var $a, self = this;

          return ($truthy($a = self.$children().$last()) ? $a : self.$s("nil"))
        }, $WhenNode_body_code$12.$$arity = 0), nil) && 'body_code';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/super"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$include?', '$type', '$s', '$helper', '$push', '$compile_receiver', '$compile_method', '$compile_arguments', '$compile_block_pass', '$private', '$def?', '$scope', '$find_parent_def', '$==', '$raise_exception?', '$implicit_args?', '$to_s', '$mid', '$def_scope', '$identify!', '$defs', '$method_id', '$def_scope_identity', '$defined_check_param', '$super_chain', '$join', '$map', '$implicit_arguments_param', '$super_method_invocation', '$iter?', '$super_block_invocation', '$raise', '$handle', '$wrap', '$uses_block!', '$compile_using_send', '$iter', '$uses_zuper=', '$-', '$block_name', '$!', '$<<', '$empty?', '$children', '$arglist', '$expr', '$===']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BaseSuperNode');

        var $nesting = [self].concat($parent_nesting), $BaseSuperNode_initialize$1, $BaseSuperNode_compile_using_send$2, $BaseSuperNode_def_scope$3, $BaseSuperNode_raise_exception$ques$4, $BaseSuperNode_defined_check_param$5, $BaseSuperNode_implicit_args$ques$6, $BaseSuperNode_implicit_arguments_param$7, $BaseSuperNode_method_id$8, $BaseSuperNode_def_scope_identity$9, $BaseSuperNode_super_method_invocation$10, $BaseSuperNode_super_block_invocation$11, $BaseSuperNode_compile_method$13;

        self.$$prototype.sexp = self.$$prototype.def_scope = nil;
        
        
        Opal.def(self, '$initialize', $BaseSuperNode_initialize$1 = function $$initialize($a) {
          var $post_args, $b, $c, $iter = $BaseSuperNode_initialize$1.$$p, $yield = $iter || nil, self = this, args = nil, rest = nil, last_child = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $BaseSuperNode_initialize$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $BaseSuperNode_initialize$1, false), $zuper, $iter);
          args = [].concat(Opal.to_a(self.sexp));
          $b = [].concat(Opal.to_a(args)), $c = $b.length - 1, $c = ($c < 0) ? 0 : $c, (rest = $slice.call($b, 0, $c)), (last_child = ($b[$c] == null ? nil : $b[$c])), $b;
          if ($truthy(($truthy($b = last_child) ? ["iter", "block_pass"]['$include?'](last_child.$type()) : $b))) {
            
            self.iter = last_child;
            args = rest;
          } else {
            self.iter = self.$s("js_tmp", "null")
          };
          self.arglist = $send(self, 's', ["arglist"].concat(Opal.to_a(args)));
          return (self.recvr = self.$s("self"));
        }, $BaseSuperNode_initialize$1.$$arity = -1);
        
        Opal.def(self, '$compile_using_send', $BaseSuperNode_compile_using_send$2 = function $$compile_using_send() {
          var self = this;

          
          self.$helper("send");
          self.$push("$send(");
          self.$compile_receiver();
          self.$compile_method();
          self.$compile_arguments();
          self.$compile_block_pass();
          return self.$push(")");
        }, $BaseSuperNode_compile_using_send$2.$$arity = 0);
        self.$private();
        
        Opal.def(self, '$def_scope', $BaseSuperNode_def_scope$3 = function $$def_scope() {
          var $a, self = this;

          return (self.def_scope = ($truthy($a = self.def_scope) ? $a : (function() {if ($truthy(self.$scope()['$def?']())) {
            return self.$scope()
          } else {
            return self.$scope().$find_parent_def()
          }; return nil; })()))
        }, $BaseSuperNode_def_scope$3.$$arity = 0);
        
        Opal.def(self, '$raise_exception?', $BaseSuperNode_raise_exception$ques$4 = function() {
          var self = this;

          return self.sexp.$type()['$==']("defined_super")
        }, $BaseSuperNode_raise_exception$ques$4.$$arity = 0);
        
        Opal.def(self, '$defined_check_param', $BaseSuperNode_defined_check_param$5 = function $$defined_check_param() {
          var self = this;

          if ($truthy(self['$raise_exception?']())) {
            return "true"
          } else {
            return "false"
          }
        }, $BaseSuperNode_defined_check_param$5.$$arity = 0);
        
        Opal.def(self, '$implicit_args?', $BaseSuperNode_implicit_args$ques$6 = function() {
          var self = this;

          return self.sexp.$type()['$==']("zsuper")
        }, $BaseSuperNode_implicit_args$ques$6.$$arity = 0);
        
        Opal.def(self, '$implicit_arguments_param', $BaseSuperNode_implicit_arguments_param$7 = function $$implicit_arguments_param() {
          var self = this;

          if ($truthy(self['$implicit_args?']())) {
            return "true"
          } else {
            return "false"
          }
        }, $BaseSuperNode_implicit_arguments_param$7.$$arity = 0);
        
        Opal.def(self, '$method_id', $BaseSuperNode_method_id$8 = function $$method_id() {
          var self = this;

          return self.$def_scope().$mid().$to_s()
        }, $BaseSuperNode_method_id$8.$$arity = 0);
        
        Opal.def(self, '$def_scope_identity', $BaseSuperNode_def_scope_identity$9 = function $$def_scope_identity() {
          var self = this;

          return self.$def_scope()['$identify!'](self.$def_scope().$mid())
        }, $BaseSuperNode_def_scope_identity$9.$$arity = 0);
        
        Opal.def(self, '$super_method_invocation', $BaseSuperNode_super_method_invocation$10 = function $$super_method_invocation() {
          var self = this;

          if ($truthy(self.$def_scope().$defs())) {
            return "" + "Opal.find_super_dispatcher(self, '" + (self.$method_id()) + "', " + (self.$def_scope_identity()) + ", " + (self.$defined_check_param()) + ", self.$$class.$$prototype)"
          } else {
            return "" + "Opal.find_super_dispatcher(self, '" + (self.$method_id()) + "', " + (self.$def_scope_identity()) + ", " + (self.$defined_check_param()) + ")"
          }
        }, $BaseSuperNode_super_method_invocation$10.$$arity = 0);
        
        Opal.def(self, '$super_block_invocation', $BaseSuperNode_super_block_invocation$11 = function $$super_block_invocation() {
          var $a, $b, $$12, self = this, chain = nil, cur_defn = nil, mid = nil, trys = nil;

          
          $b = self.$scope().$super_chain(), $a = Opal.to_ary($b), (chain = ($a[0] == null ? nil : $a[0])), (cur_defn = ($a[1] == null ? nil : $a[1])), (mid = ($a[2] == null ? nil : $a[2])), $b;
          trys = $send(chain, 'map', [], ($$12 = function(c){var self = $$12.$$s || this;

          
            
            if (c == null) {
              c = nil;
            };
            return "" + (c) + ".$$def";}, $$12.$$s = self, $$12.$$arity = 1, $$12)).$join(" || ");
          return "" + "Opal.find_iter_super_dispatcher(self, " + (mid) + ", (" + (trys) + " || " + (cur_defn) + "), " + (self.$defined_check_param()) + ", " + (self.$implicit_arguments_param()) + ")";
        }, $BaseSuperNode_super_block_invocation$11.$$arity = 0);
        return (Opal.def(self, '$compile_method', $BaseSuperNode_compile_method$13 = function $$compile_method() {
          var self = this;

          
          self.$push(", ");
          if ($truthy(self.$scope()['$def?']())) {
            return self.$push(self.$super_method_invocation())
          } else if ($truthy(self.$scope()['$iter?']())) {
            return self.$push(self.$super_block_invocation())
          } else {
            return self.$raise("super must be called from method body or block")
          };
        }, $BaseSuperNode_compile_method$13.$$arity = 0), nil) && 'compile_method';
      })($nesting[0], $$($nesting, 'CallNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DefinedSuperNode');

        var $nesting = [self].concat($parent_nesting), $DefinedSuperNode_compile$14;

        
        self.$handle("defined_super");
        return (Opal.def(self, '$compile', $DefinedSuperNode_compile$14 = function $$compile() {
          var self = this;

          
          self.$compile_receiver();
          self.$compile_method();
          return self.$wrap("((", ") != null ? \"super\" : nil)");
        }, $DefinedSuperNode_compile$14.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'BaseSuperNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SuperNode');

        var $nesting = [self].concat($parent_nesting), $SuperNode_initialize$15, $SuperNode_compile$16;

        
        self.$handle("super");
        
        Opal.def(self, '$initialize', $SuperNode_initialize$15 = function $$initialize($a) {
          var $post_args, $iter = $SuperNode_initialize$15.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $SuperNode_initialize$15.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $SuperNode_initialize$15, false), $zuper, $iter);
          if ($truthy(self.$scope()['$def?']())) {
            return self.$scope()['$uses_block!']()
          } else {
            return nil
          };
        }, $SuperNode_initialize$15.$$arity = -1);
        return (Opal.def(self, '$compile', $SuperNode_compile$16 = function $$compile() {
          var self = this;

          return self.$compile_using_send()
        }, $SuperNode_compile$16.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'BaseSuperNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ZsuperNode');

        var $nesting = [self].concat($parent_nesting), $ZsuperNode_initialize$17, $ZsuperNode_compile$18, $ZsuperNode_compile_arguments$19, $ZsuperNode_block_name$20;

        
        self.$handle("zsuper");
        
        Opal.def(self, '$initialize', $ZsuperNode_initialize$17 = function $$initialize($a) {
          var $post_args, $iter = $ZsuperNode_initialize$17.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $ZsuperNode_initialize$17.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $ZsuperNode_initialize$17, false), $zuper, $iter);
          if (self.$iter().$type()['$==']("iter")) {
            return nil
          } else {
            
            self.$scope()['$uses_block!']();
            return (self.iter = self.$s("js_tmp", "$iter"));
          };
        }, $ZsuperNode_initialize$17.$$arity = -1);
        
        Opal.def(self, '$compile', $ZsuperNode_compile$18 = function $$compile() {
          var $a, self = this, $writer = nil, implicit_args = nil, block_pass = nil;

          
          if ($truthy(self.$def_scope())) {
            
            
            $writer = [true];
            $send(self.$def_scope(), 'uses_zuper=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            implicit_args = [self.$s("js_tmp", "$zuper")];
            if ($truthy(($truthy($a = self.$block_name()) ? self.$iter()['$!']() : $a))) {
              
              block_pass = self.$s("block_pass", self.$s("lvar", self.$block_name()));
              implicit_args['$<<'](block_pass);};
            self.arglist = $send(self, 's', ["arglist"].concat(Opal.to_a(implicit_args)));};
          return self.$compile_using_send();
        }, $ZsuperNode_compile$18.$$arity = 0);
        
        Opal.def(self, '$compile_arguments', $ZsuperNode_compile_arguments$19 = function $$compile_arguments() {
          var self = this;

          
          self.$push(", ");
          if ($truthy(self.$arglist().$children()['$empty?']())) {
            return self.$push("[]")
          } else {
            return self.$push(self.$expr(self.$arglist()))
          };
        }, $ZsuperNode_compile_arguments$19.$$arity = 0);
        return (Opal.def(self, '$block_name', $ZsuperNode_block_name$20 = function $$block_name() {
          var self = this, $case = nil;

          return (function() {$case = self.$def_scope();
          if ($$$($$$($$($nesting, 'Opal'), 'Nodes'), 'IterNode')['$===']($case)) {return self.$def_scope().$block_name()}
          else if ($$$($$$($$($nesting, 'Opal'), 'Nodes'), 'DefNode')['$===']($case)) {return self.$def_scope().$block_name()}
          else {return self.$raise("" + "Don't know what to do with super in the scope " + (self.$def_scope()))}})()
        }, $ZsuperNode_block_name$20.$$arity = 0), nil) && 'block_name';
      })($nesting[0], $$($nesting, 'SuperNode'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/version"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    Opal.const_set($nesting[0], 'VERSION', "0.11.99.dev")
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/top"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$push', '$version_comment', '$opening', '$in_scope', '$stmt', '$stmts', '$is_a?', '$eval?', '$compiler', '$add_temp', '$add_used_helpers', '$add_used_operators', '$line', '$to_vars', '$scope', '$compile_method_stubs', '$compile_irb_vars', '$compile_end_construct', '$closing', '$requirable?', '$inspect', '$module_name', '$file', '$returns', '$body', '$irb?', '$to_a', '$helpers', '$each', '$operator_helpers', '$[]', '$method_missing?', '$method_calls', '$join', '$map', '$empty?', '$eof_content']);
  
  self.$require("pathname");
  self.$require("opal/version");
  self.$require("opal/nodes/scope");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'TopNode');

        var $nesting = [self].concat($parent_nesting), $TopNode_compile$1, $TopNode_opening$3, $TopNode_closing$4, $TopNode_stmts$5, $TopNode_compile_irb_vars$6, $TopNode_add_used_helpers$7, $TopNode_add_used_operators$9, $TopNode_compile_method_stubs$11, $TopNode_compile_end_construct$13, $TopNode_version_comment$14;

        
        self.$handle("top");
        self.$children("body");
        
        Opal.def(self, '$compile', $TopNode_compile$1 = function $$compile() {
          var $$2, self = this;

          
          self.$push(self.$version_comment());
          self.$opening();
          $send(self, 'in_scope', [], ($$2 = function(){var self = $$2.$$s || this, body_code = nil;

          
            body_code = self.$stmt(self.$stmts());
            if ($truthy(body_code['$is_a?']($$($nesting, 'Array')))) {
            } else {
              body_code = [body_code]
            };
            if ($truthy(self.$compiler()['$eval?']())) {
              self.$add_temp("$nesting = self.$$is_a_module ? [self] : [self.$$class]")
            } else {
              
              self.$add_temp("self = Opal.top");
              self.$add_temp("$nesting = []");
            };
            self.$add_temp("nil = Opal.nil");
            self.$add_temp("$$$ = Opal.const_get_qualified");
            self.$add_temp("$$ = Opal.const_get_relative");
            self.$add_used_helpers();
            self.$add_used_operators();
            self.$line(self.$scope().$to_vars());
            self.$compile_method_stubs();
            self.$compile_irb_vars();
            self.$compile_end_construct();
            return self.$line(body_code);}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          return self.$closing();
        }, $TopNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$opening', $TopNode_opening$3 = function $$opening() {
          var self = this;

          if ($truthy(self.$compiler()['$requirable?']())) {
            return self.$line("" + "Opal.modules[" + ($$$($$($nesting, 'Opal'), 'Compiler').$module_name(self.$compiler().$file()).$inspect()) + "] = function(Opal) {")
          } else if ($truthy(self.$compiler()['$eval?']())) {
            return self.$line("(function(Opal, self) {")
          } else {
            return self.$line("(function(Opal) {")
          }
        }, $TopNode_opening$3.$$arity = 0);
        
        Opal.def(self, '$closing', $TopNode_closing$4 = function $$closing() {
          var self = this;

          if ($truthy(self.$compiler()['$requirable?']())) {
            return self.$line("};\n")
          } else if ($truthy(self.$compiler()['$eval?']())) {
            return self.$line("})(Opal, self)")
          } else {
            return self.$line("})(Opal);\n")
          }
        }, $TopNode_closing$4.$$arity = 0);
        
        Opal.def(self, '$stmts', $TopNode_stmts$5 = function $$stmts() {
          var self = this;

          return self.$compiler().$returns(self.$body())
        }, $TopNode_stmts$5.$$arity = 0);
        
        Opal.def(self, '$compile_irb_vars', $TopNode_compile_irb_vars$6 = function $$compile_irb_vars() {
          var self = this;

          if ($truthy(self.$compiler()['$irb?']())) {
            return self.$line("if (!Opal.irb_vars) { Opal.irb_vars = {}; }")
          } else {
            return nil
          }
        }, $TopNode_compile_irb_vars$6.$$arity = 0);
        
        Opal.def(self, '$add_used_helpers', $TopNode_add_used_helpers$7 = function $$add_used_helpers() {
          var $$8, self = this, helpers = nil;

          
          helpers = self.$compiler().$helpers().$to_a();
          return $send(helpers.$to_a(), 'each', [], ($$8 = function(h){var self = $$8.$$s || this;

          
            
            if (h == null) {
              h = nil;
            };
            return self.$add_temp("" + "$" + (h) + " = Opal." + (h));}, $$8.$$s = self, $$8.$$arity = 1, $$8));
        }, $TopNode_add_used_helpers$7.$$arity = 0);
        
        Opal.def(self, '$add_used_operators', $TopNode_add_used_operators$9 = function $$add_used_operators() {
          var $$10, self = this, operators = nil;

          
          operators = self.$compiler().$operator_helpers().$to_a();
          return $send(operators, 'each', [], ($$10 = function(op){var self = $$10.$$s || this, name = nil;

          
            
            if (op == null) {
              op = nil;
            };
            name = $$$($$$($$($nesting, 'Nodes'), 'CallNode'), 'OPERATORS')['$[]'](op);
            self.$line("" + "function $rb_" + (name) + "(lhs, rhs) {");
            self.$line("" + "  return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs " + (op) + " rhs : lhs['$" + (op) + "'](rhs);");
            return self.$line("}");}, $$10.$$s = self, $$10.$$arity = 1, $$10));
        }, $TopNode_add_used_operators$9.$$arity = 0);
        
        Opal.def(self, '$compile_method_stubs', $TopNode_compile_method_stubs$11 = function $$compile_method_stubs() {
          var $$12, self = this, calls = nil, stubs = nil;

          if ($truthy(self.$compiler()['$method_missing?']())) {
            
            calls = self.$compiler().$method_calls();
            stubs = $send(calls.$to_a(), 'map', [], ($$12 = function(k){var self = $$12.$$s || this;

            
              
              if (k == null) {
                k = nil;
              };
              return "" + "'$" + (k) + "'";}, $$12.$$s = self, $$12.$$arity = 1, $$12)).$join(", ");
            if ($truthy(stubs['$empty?']())) {
              return nil
            } else {
              return self.$line("" + "Opal.add_stubs([" + (stubs) + "]);")
            };
          } else {
            return nil
          }
        }, $TopNode_compile_method_stubs$11.$$arity = 0);
        
        Opal.def(self, '$compile_end_construct', $TopNode_compile_end_construct$13 = function $$compile_end_construct() {
          var self = this, content = nil;

          if ($truthy((content = self.$compiler().$eof_content()))) {
            
            self.$line("var $__END__ = Opal.Object.$new();");
            return self.$line("" + "$__END__.$read = function() { return " + (content.$inspect()) + "; };");
          } else {
            return nil
          }
        }, $TopNode_compile_end_construct$13.$$arity = 0);
        return (Opal.def(self, '$version_comment', $TopNode_version_comment$14 = function $$version_comment() {
          var self = this;

          return "" + "/* Generated by Opal " + ($$$($$($nesting, 'Opal'), 'VERSION')) + " */"
        }, $TopNode_version_comment$14.$$arity = 0), nil) && 'version_comment';
      })($nesting[0], $$($nesting, 'ScopeNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/while"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$with_temp', '$js_truthy', '$test', '$in_while', '$compiler', '$wrap_in_closure?', '$[]=', '$while_loop', '$-', '$stmt', '$body', '$uses_redo?', '$push', '$while_open', '$while_close', '$line', '$wrap', '$[]', '$expr?', '$recv?']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'WhileNode');

        var $nesting = [self].concat($parent_nesting), $WhileNode_compile$1, $WhileNode_while_open$4, $WhileNode_while_close$5, $WhileNode_uses_redo$ques$6, $WhileNode_wrap_in_closure$ques$7;

        
        self.$handle("while");
        self.$children("test", "body");
        
        Opal.def(self, '$compile', $WhileNode_compile$1 = function $$compile() {
          var $$2, self = this;

          
          $send(self, 'with_temp', [], ($$2 = function(redo_var){var self = $$2.$$s || this, $$3, test_code = nil;

          
            
            if (redo_var == null) {
              redo_var = nil;
            };
            test_code = self.$js_truthy(self.$test());
            $send(self.$compiler(), 'in_while', [], ($$3 = function(){var self = $$3.$$s || this, $writer = nil, body_code = nil;

            
              if ($truthy(self['$wrap_in_closure?']())) {
                
                $writer = ["closure", true];
                $send(self.$while_loop(), '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              
              $writer = ["redo_var", redo_var];
              $send(self.$while_loop(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              body_code = self.$stmt(self.$body());
              if ($truthy(self['$uses_redo?']())) {
                
                self.$push("" + (redo_var) + " = false; " + (self.$while_open()) + (redo_var) + " || ");
                self.$push(test_code);
                self.$push(self.$while_close());
              } else {
                self.$push(self.$while_open(), test_code, self.$while_close())
              };
              if ($truthy(self['$uses_redo?']())) {
                self.$push("" + (redo_var) + " = false;")};
              return self.$line(body_code);}, $$3.$$s = self, $$3.$$arity = 0, $$3));
            return self.$line("}");}, $$2.$$s = self, $$2.$$arity = 1, $$2));
          if ($truthy(self['$wrap_in_closure?']())) {
            return self.$wrap("(function() {", "; return nil; })()")
          } else {
            return nil
          };
        }, $WhileNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$while_open', $WhileNode_while_open$4 = function $$while_open() {
          var self = this;

          return "while ("
        }, $WhileNode_while_open$4.$$arity = 0);
        
        Opal.def(self, '$while_close', $WhileNode_while_close$5 = function $$while_close() {
          var self = this;

          return ") {"
        }, $WhileNode_while_close$5.$$arity = 0);
        
        Opal.def(self, '$uses_redo?', $WhileNode_uses_redo$ques$6 = function() {
          var self = this;

          return self.$while_loop()['$[]']("use_redo")
        }, $WhileNode_uses_redo$ques$6.$$arity = 0);
        return (Opal.def(self, '$wrap_in_closure?', $WhileNode_wrap_in_closure$ques$7 = function() {
          var $a, self = this;

          return ($truthy($a = self['$expr?']()) ? $a : self['$recv?']())
        }, $WhileNode_wrap_in_closure$ques$7.$$arity = 0), nil) && 'wrap_in_closure?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'WhilePostNode');

        var $nesting = [self].concat($parent_nesting);

        return self.$handle("while_post")
      })($nesting[0], $$($nesting, 'WhileNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'UntilNode');

        var $nesting = [self].concat($parent_nesting), $UntilNode_while_open$8, $UntilNode_while_close$9;

        
        self.$handle("until");
        
        Opal.def(self, '$while_open', $UntilNode_while_open$8 = function $$while_open() {
          var self = this;

          return "while (!("
        }, $UntilNode_while_open$8.$$arity = 0);
        return (Opal.def(self, '$while_close', $UntilNode_while_close$9 = function $$while_close() {
          var self = this;

          return ")) {"
        }, $UntilNode_while_close$9.$$arity = 0), nil) && 'while_close';
      })($nesting[0], $$($nesting, 'WhileNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'UntilPostNode');

        var $nesting = [self].concat($parent_nesting);

        return self.$handle("until_post")
      })($nesting[0], $$($nesting, 'UntilNode'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/hash"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$handle', '$attr_accessor', '$each', '$children', '$type', '$===', '$<<', '$[]', '$all?', '$keys', '$include?', '$has_kwsplat', '$compile_merge', '$simple_keys?', '$compile_hash2', '$compile_hash', '$helper', '$==', '$empty?', '$expr', '$s', '$each_with_index', '$push', '$wrap', '$times', '$size', '$inspect', '$to_s', '$values', '$[]=', '$-', '$join', '$value']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'HashNode');

        var $nesting = [self].concat($parent_nesting), $HashNode_initialize$1, $HashNode_simple_keys$ques$3, $HashNode_compile$5, $HashNode_compile_merge$6, $HashNode_compile_hash$9, $HashNode_compile_hash2$11;

        
        self.$handle("hash");
        self.$attr_accessor("has_kwsplat", "keys", "values");
        
        Opal.def(self, '$initialize', $HashNode_initialize$1 = function $$initialize($a) {
          var $post_args, $$2, $iter = $HashNode_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $HashNode_initialize$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $HashNode_initialize$1, false), $zuper, $iter);
          self.has_kwsplat = false;
          self.keys = [];
          self.values = [];
          return $send(self.$children(), 'each', [], ($$2 = function(child){var self = $$2.$$s || this, $case = nil;
            if (self.keys == null) self.keys = nil;
            if (self.values == null) self.values = nil;

          
            
            if (child == null) {
              child = nil;
            };
            return (function() {$case = child.$type();
            if ("kwsplat"['$===']($case)) {return (self.has_kwsplat = true)}
            else if ("pair"['$===']($case)) {
            self.keys['$<<'](child.$children()['$[]'](0));
            return self.values['$<<'](child.$children()['$[]'](1));}
            else { return nil }})();}, $$2.$$s = self, $$2.$$arity = 1, $$2));
        }, $HashNode_initialize$1.$$arity = -1);
        
        Opal.def(self, '$simple_keys?', $HashNode_simple_keys$ques$3 = function() {
          var $$4, self = this;

          return $send(self.$keys(), 'all?', [], ($$4 = function(key){var self = $$4.$$s || this;

          
            
            if (key == null) {
              key = nil;
            };
            return ["sym", "str"]['$include?'](key.$type());}, $$4.$$s = self, $$4.$$arity = 1, $$4))
        }, $HashNode_simple_keys$ques$3.$$arity = 0);
        
        Opal.def(self, '$compile', $HashNode_compile$5 = function $$compile() {
          var self = this;

          if ($truthy(self.$has_kwsplat())) {
            return self.$compile_merge()
          } else if ($truthy(self['$simple_keys?']())) {
            return self.$compile_hash2()
          } else {
            return self.$compile_hash()
          }
        }, $HashNode_compile$5.$$arity = 0);
        
        Opal.def(self, '$compile_merge', $HashNode_compile_merge$6 = function $$compile_merge() {
          var $a, $$7, $$8, self = this, result = nil, seq = nil;

          
          self.$helper("hash");
          $a = [[], []], (result = $a[0]), (seq = $a[1]), $a;
          $send(self.$children(), 'each', [], ($$7 = function(child){var self = $$7.$$s || this;

          
            
            if (child == null) {
              child = nil;
            };
            if (child.$type()['$==']("kwsplat")) {
              
              if ($truthy(seq['$empty?']())) {
              } else {
                result['$<<'](self.$expr($send(self, 's', ["hash"].concat(Opal.to_a(seq)))))
              };
              result['$<<'](self.$expr(child));
              return (seq = []);
            } else {
              return seq['$<<'](child)
            };}, $$7.$$s = self, $$7.$$arity = 1, $$7));
          if ($truthy(seq['$empty?']())) {
          } else {
            result['$<<'](self.$expr($send(self, 's', ["hash"].concat(Opal.to_a(seq)))))
          };
          return $send(result, 'each_with_index', [], ($$8 = function(fragment, idx){var self = $$8.$$s || this;

          
            
            if (fragment == null) {
              fragment = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if (idx['$=='](0)) {
              return self.$push(fragment)
            } else {
              return self.$push(".$merge(", fragment, ")")
            };}, $$8.$$s = self, $$8.$$arity = 2, $$8));
        }, $HashNode_compile_merge$6.$$arity = 0);
        
        Opal.def(self, '$compile_hash', $HashNode_compile_hash$9 = function $$compile_hash() {
          var $$10, self = this;

          
          self.$helper("hash");
          $send(self.$children(), 'each_with_index', [], ($$10 = function(pair, idx){var self = $$10.$$s || this, $a, $b, key = nil, value = nil;

          
            
            if (pair == null) {
              pair = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            $b = pair.$children(), $a = Opal.to_ary($b), (key = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;
            if (idx['$=='](0)) {
            } else {
              self.$push(", ")
            };
            return self.$push(self.$expr(key), ", ", self.$expr(value));}, $$10.$$s = self, $$10.$$arity = 2, $$10));
          return self.$wrap("$hash(", ")");
        }, $HashNode_compile_hash$9.$$arity = 0);
        return (Opal.def(self, '$compile_hash2', $HashNode_compile_hash2$11 = function $$compile_hash2() {
          var $a, $$12, $$13, self = this, hash_obj = nil, hash_keys = nil;

          
          $a = [$hash2([], {}), []], (hash_obj = $a[0]), (hash_keys = $a[1]), $a;
          self.$helper("hash2");
          $send(self.$keys().$size(), 'times', [], ($$12 = function(idx){var self = $$12.$$s || this, key = nil, $writer = nil;

          
            
            if (idx == null) {
              idx = nil;
            };
            key = self.$keys()['$[]'](idx).$children()['$[]'](0).$to_s().$inspect();
            if ($truthy(hash_obj['$include?'](key))) {
            } else {
              hash_keys['$<<'](key)
            };
            
            $writer = [key, self.$expr(self.$values()['$[]'](idx))];
            $send(hash_obj, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, $$12.$$s = self, $$12.$$arity = 1, $$12));
          $send(hash_keys, 'each_with_index', [], ($$13 = function(key, idx){var self = $$13.$$s || this;

          
            
            if (key == null) {
              key = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if (idx['$=='](0)) {
            } else {
              self.$push(", ")
            };
            self.$push("" + (key) + ": ");
            return self.$push(hash_obj['$[]'](key));}, $$13.$$s = self, $$13.$$arity = 2, $$13));
          return self.$wrap("" + "$hash2([" + (hash_keys.$join(", ")) + "], {", "})");
        }, $HashNode_compile_hash2$11.$$arity = 0), nil) && 'compile_hash2';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'KwSplatNode');

        var $nesting = [self].concat($parent_nesting), $KwSplatNode_compile$14;

        
        self.$handle("kwsplat");
        self.$children("value");
        return (Opal.def(self, '$compile', $KwSplatNode_compile$14 = function $$compile() {
          var self = this;

          return self.$push("Opal.to_hash(", self.$expr(self.$value()), ")")
        }, $KwSplatNode_compile$14.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/array"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$empty?', '$children', '$push', '$each', '$==', '$type', '$expr', '$<<', '$fragment']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ArrayNode');

        var $nesting = [self].concat($parent_nesting), $ArrayNode_compile$1;

        
        self.$handle("array");
        return (Opal.def(self, '$compile', $ArrayNode_compile$1 = function $$compile() {
          var $a, $$2, self = this, code = nil, work = nil, join = nil;

          
          if ($truthy(self.$children()['$empty?']())) {
            return self.$push("[]")};
          $a = [[], []], (code = $a[0]), (work = $a[1]), $a;
          $send(self.$children(), 'each', [], ($$2 = function(child){var self = $$2.$$s || this, splat = nil, part = nil;

          
            
            if (child == null) {
              child = nil;
            };
            splat = child.$type()['$==']("splat");
            part = self.$expr(child);
            if ($truthy(splat)) {
              
              if ($truthy(work['$empty?']())) {
                if ($truthy(code['$empty?']())) {
                  code['$<<'](self.$fragment("[].concat("))['$<<'](part)['$<<'](self.$fragment(")"))
                } else {
                  code['$<<'](self.$fragment(".concat("))['$<<'](part)['$<<'](self.$fragment(")"))
                }
              } else {
                
                if ($truthy(code['$empty?']())) {
                  code['$<<'](self.$fragment("["))['$<<'](work)['$<<'](self.$fragment("]"))
                } else {
                  code['$<<'](self.$fragment(".concat(["))['$<<'](work)['$<<'](self.$fragment("])"))
                };
                code['$<<'](self.$fragment(".concat("))['$<<'](part)['$<<'](self.$fragment(")"));
              };
              return (work = []);
            } else {
              
              if ($truthy(work['$empty?']())) {
              } else {
                work['$<<'](self.$fragment(", "))
              };
              return work['$<<'](part);
            };}, $$2.$$s = self, $$2.$$arity = 1, $$2));
          if ($truthy(work['$empty?']())) {
          } else {
            
            join = [self.$fragment("["), work, self.$fragment("]")];
            if ($truthy(code['$empty?']())) {
              code = join
            } else {
              code.$push([self.$fragment(".concat("), join, self.$fragment(")")])
            };
          };
          return self.$push(code);
        }, $ArrayNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/defined"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$type', '$value', '$===', '$push', '$inspect', '$to_s', '$==', '$size', '$[]', '$compile_defined_send', '$wrap', '$compile_defined_ivar', '$compile_defined_super', '$compile_defined_yield', '$compile_defined_xstr', '$compile_defined_const', '$compile_defined_cvar', '$compile_defined_gvar', '$compile_defined_back_ref', '$compile_defined_nth_ref', '$compile_defined_array', '$respond_to?', '$__send__', '$new_temp', '$scope', '$expr', '$wrap_with_try_catch', '$mid_to_jsid', '$compile_defined', '$compile_send_recv_doesnt_raise', '$each', '$s', '$uses_block!', '$block_name', '$find_parent_def', '$nil?', '$class_variable_owner', '$helper', '$include?', '$each_with_index']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DefinedNode');

        var $nesting = [self].concat($parent_nesting), $DefinedNode_compile$1, $DefinedNode_compile_defined$2, $DefinedNode_wrap_with_try_catch$3, $DefinedNode_compile_send_recv_doesnt_raise$4, $DefinedNode_compile_defined_send$5, $DefinedNode_compile_defined_ivar$7, $DefinedNode_compile_defined_super$8, $DefinedNode_compile_defined_yield$9, $DefinedNode_compile_defined_xstr$10, $DefinedNode_compile_defined_const$11, $DefinedNode_compile_defined_cvar$12, $DefinedNode_compile_defined_gvar$13, $DefinedNode_compile_defined_back_ref$14, $DefinedNode_compile_defined_nth_ref$15, $DefinedNode_compile_defined_array$16;

        
        self.$handle("defined?");
        self.$children("value");
        
        Opal.def(self, '$compile', $DefinedNode_compile$1 = function $$compile() {
          var $a, self = this, $case = nil;

          return (function() {$case = self.$value().$type();
          if ("self"['$===']($case) || "nil"['$===']($case) || "false"['$===']($case) || "true"['$===']($case)) {return self.$push(self.$value().$type().$to_s().$inspect())}
          else if ("lvasgn"['$===']($case) || "ivasgn"['$===']($case) || "gvasgn"['$===']($case) || "cvasgn"['$===']($case) || "casgn"['$===']($case) || "op_asgn"['$===']($case) || "or_asgn"['$===']($case) || "and_asgn"['$===']($case)) {return self.$push("'assignment'")}
          else if ("lvar"['$===']($case)) {return self.$push("'local-variable'")}
          else if ("begin"['$===']($case)) {if ($truthy((($a = self.$value().$children().$size()['$=='](1)) ? self.$value().$children()['$[]'](0).$type()['$==']("masgn") : self.$value().$children().$size()['$=='](1)))) {
            return self.$push("'assignment'")
          } else {
            return self.$push("'expression'")
          }}
          else if ("send"['$===']($case)) {
          self.$compile_defined_send(self.$value());
          return self.$wrap("(", " ? 'method' : nil)");}
          else if ("ivar"['$===']($case)) {
          self.$compile_defined_ivar(self.$value());
          return self.$wrap("(", " ? 'instance-variable' : nil)");}
          else if ("zsuper"['$===']($case) || "super"['$===']($case)) {return self.$compile_defined_super()}
          else if ("yield"['$===']($case)) {
          self.$compile_defined_yield();
          return self.$wrap("(", " ? 'yield' : nil)");}
          else if ("xstr"['$===']($case)) {return self.$compile_defined_xstr(self.$value())}
          else if ("const"['$===']($case)) {
          self.$compile_defined_const(self.$value());
          return self.$wrap("(", " ? 'constant' : nil)");}
          else if ("cvar"['$===']($case)) {
          self.$compile_defined_cvar(self.$value());
          return self.$wrap("(", " ? 'class variable' : nil)");}
          else if ("gvar"['$===']($case)) {
          self.$compile_defined_gvar(self.$value());
          return self.$wrap("(", " ? 'global-variable' : nil)");}
          else if ("back_ref"['$===']($case)) {
          self.$compile_defined_back_ref();
          return self.$wrap("(", " ? 'global-variable' : nil)");}
          else if ("nth_ref"['$===']($case)) {
          self.$compile_defined_nth_ref();
          return self.$wrap("(", " ? 'global-variable' : nil)");}
          else if ("array"['$===']($case)) {
          self.$compile_defined_array(self.$value());
          return self.$wrap("(", " ? 'expression' : nil)");}
          else {return self.$push("'expression'")}})()
        }, $DefinedNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$compile_defined', $DefinedNode_compile_defined$2 = function $$compile_defined(node) {
          var self = this, type = nil, node_tmp = nil;

          
          type = node.$type();
          if ($truthy(self['$respond_to?']("" + "compile_defined_" + (type)))) {
            return self.$__send__("" + "compile_defined_" + (type), node)
          } else {
            
            node_tmp = self.$scope().$new_temp();
            self.$push("" + "(" + (node_tmp) + " = ", self.$expr(node), ")");
            return node_tmp;
          };
        }, $DefinedNode_compile_defined$2.$$arity = 1);
        
        Opal.def(self, '$wrap_with_try_catch', $DefinedNode_wrap_with_try_catch$3 = function $$wrap_with_try_catch(code) {
          var self = this, returning_tmp = nil;

          
          returning_tmp = self.$scope().$new_temp();
          self.$push("" + "(" + (returning_tmp) + " = (function() { try {");
          self.$push("" + "  return " + (code) + ";");
          self.$push("} catch ($err) {");
          self.$push("  if (Opal.rescue($err, [Opal.Exception])) {");
          self.$push("    try {");
          self.$push("      return false;");
          self.$push("    } finally { Opal.pop_exception() }");
          self.$push("  } else { throw $err; }");
          self.$push("}})())");
          return returning_tmp;
        }, $DefinedNode_wrap_with_try_catch$3.$$arity = 1);
        
        Opal.def(self, '$compile_send_recv_doesnt_raise', $DefinedNode_compile_send_recv_doesnt_raise$4 = function $$compile_send_recv_doesnt_raise(recv_code) {
          var self = this;

          return self.$wrap_with_try_catch(recv_code)
        }, $DefinedNode_compile_send_recv_doesnt_raise$4.$$arity = 1);
        
        Opal.def(self, '$compile_defined_send', $DefinedNode_compile_defined_send$5 = function $$compile_defined_send(node) {
          var $a, $$6, self = this, recv = nil, method_name = nil, args = nil, mid = nil, recv_code = nil, recv_tmp = nil, recv_value_tmp = nil, meth_tmp = nil;

          
          $a = [].concat(Opal.to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (method_name = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
          mid = self.$mid_to_jsid(method_name.$to_s());
          if ($truthy(recv)) {
            
            recv_code = self.$compile_defined(recv);
            self.$push(" && ");
            if (recv.$type()['$==']("send")) {
              
              recv_code = self.$compile_send_recv_doesnt_raise(recv_code);
              self.$push(" && ");};
            recv_tmp = self.$scope().$new_temp();
            self.$push("" + "(" + (recv_tmp) + " = ", recv_code, "" + ", " + (recv_tmp) + ") && ");
          } else {
            recv_tmp = "self"
          };
          recv_value_tmp = self.$scope().$new_temp();
          self.$push("" + "(" + (recv_value_tmp) + " = " + (recv_tmp) + ") && ");
          meth_tmp = self.$scope().$new_temp();
          self.$push("" + "(((" + (meth_tmp) + " = " + (recv_value_tmp) + (mid) + ") && !" + (meth_tmp) + ".$$stub)");
          self.$push("" + " || " + (recv_value_tmp) + "['$respond_to_missing?']('" + (method_name) + "'))");
          $send(args, 'each', [], ($$6 = function(arg){var self = $$6.$$s || this, $case = nil;

          
            
            if (arg == null) {
              arg = nil;
            };
            return (function() {$case = arg.$type();
            if ("block_pass"['$===']($case)) {return nil}
            else {
            self.$push(" && ");
            return self.$compile_defined(arg);}})();}, $$6.$$s = self, $$6.$$arity = 1, $$6));
          self.$wrap("(", ")");
          return "" + (meth_tmp) + "()";
        }, $DefinedNode_compile_defined_send$5.$$arity = 1);
        
        Opal.def(self, '$compile_defined_ivar', $DefinedNode_compile_defined_ivar$7 = function $$compile_defined_ivar(node) {
          var self = this, name = nil, tmp = nil;

          
          name = node.$children()['$[]'](0).$to_s()['$[]']($range(1, -1, false));
          tmp = self.$scope().$new_temp();
          self.$push("" + "(" + (tmp) + " = self['" + (name) + "'], " + (tmp) + " != null && " + (tmp) + " !== nil)");
          return tmp;
        }, $DefinedNode_compile_defined_ivar$7.$$arity = 1);
        
        Opal.def(self, '$compile_defined_super', $DefinedNode_compile_defined_super$8 = function $$compile_defined_super() {
          var self = this;

          return self.$push(self.$expr(self.$s("defined_super")))
        }, $DefinedNode_compile_defined_super$8.$$arity = 0);
        
        Opal.def(self, '$compile_defined_yield', $DefinedNode_compile_defined_yield$9 = function $$compile_defined_yield() {
          var $a, self = this, block_name = nil;

          
          self.$scope()['$uses_block!']();
          block_name = ($truthy($a = self.$scope().$block_name()) ? $a : self.$scope().$find_parent_def().$block_name());
          self.$push("" + "(" + (block_name) + " != null && " + (block_name) + " !== nil)");
          return block_name;
        }, $DefinedNode_compile_defined_yield$9.$$arity = 0);
        
        Opal.def(self, '$compile_defined_xstr', $DefinedNode_compile_defined_xstr$10 = function $$compile_defined_xstr(node) {
          var self = this;

          return self.$push("(typeof(", self.$expr(node), ") !== \"undefined\")")
        }, $DefinedNode_compile_defined_xstr$10.$$arity = 1);
        
        Opal.def(self, '$compile_defined_const', $DefinedNode_compile_defined_const$11 = function $$compile_defined_const(node) {
          var $a, self = this, const_scope = nil, const_name = nil, const_tmp = nil, const_scope_tmp = nil;

          
          $a = [].concat(Opal.to_a(node)), (const_scope = ($a[0] == null ? nil : $a[0])), (const_name = ($a[1] == null ? nil : $a[1])), $a;
          const_tmp = self.$scope().$new_temp();
          if ($truthy(const_scope['$nil?']())) {
            self.$push("" + "(" + (const_tmp) + " = $$($nesting, '" + (const_name) + "', 'skip_raise'))")
          } else if (const_scope['$=='](self.$s("cbase"))) {
            self.$push("" + "(" + (const_tmp) + " = $$$('::', '" + (const_name) + "', 'skip_raise'))")
          } else {
            
            const_scope_tmp = self.$compile_defined(const_scope);
            self.$push("" + " && (" + (const_tmp) + " = $$$(" + (const_scope_tmp) + ", '" + (const_name) + "', 'skip_raise'))");
          };
          return const_tmp;
        }, $DefinedNode_compile_defined_const$11.$$arity = 1);
        
        Opal.def(self, '$compile_defined_cvar', $DefinedNode_compile_defined_cvar$12 = function $$compile_defined_cvar(node) {
          var $a, self = this, cvar_name = nil, _ = nil, cvar_tmp = nil;

          
          $a = [].concat(Opal.to_a(node)), (cvar_name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          cvar_tmp = self.$scope().$new_temp();
          self.$push("" + "(" + (cvar_tmp) + " = " + (self.$class_variable_owner()) + ".$$cvars['" + (cvar_name) + "'], " + (cvar_tmp) + " != null)");
          return cvar_tmp;
        }, $DefinedNode_compile_defined_cvar$12.$$arity = 1);
        
        Opal.def(self, '$compile_defined_gvar', $DefinedNode_compile_defined_gvar$13 = function $$compile_defined_gvar(node) {
          var self = this, name = nil, gvar_temp = nil;

          
          self.$helper("gvars");
          name = node.$children()['$[]'](0).$to_s()['$[]']($range(1, -1, false));
          gvar_temp = self.$scope().$new_temp();
          if ($truthy(["~", "!"]['$include?'](name))) {
            self.$push("" + "(" + (gvar_temp) + " = ", self.$expr(node), " || true)")
          } else {
            self.$push("" + "(" + (gvar_temp) + " = $gvars[" + (name.$inspect()) + "], " + (gvar_temp) + " != null)")
          };
          return gvar_temp;
        }, $DefinedNode_compile_defined_gvar$13.$$arity = 1);
        
        Opal.def(self, '$compile_defined_back_ref', $DefinedNode_compile_defined_back_ref$14 = function $$compile_defined_back_ref() {
          var self = this, back_ref_temp = nil;

          
          self.$helper("gvars");
          back_ref_temp = self.$scope().$new_temp();
          self.$push("" + "(" + (back_ref_temp) + " = $gvars['~'], " + (back_ref_temp) + " != null && " + (back_ref_temp) + " !== nil)");
          return back_ref_temp;
        }, $DefinedNode_compile_defined_back_ref$14.$$arity = 0);
        
        Opal.def(self, '$compile_defined_nth_ref', $DefinedNode_compile_defined_nth_ref$15 = function $$compile_defined_nth_ref() {
          var self = this, nth_ref_tmp = nil;

          
          self.$helper("gvars");
          nth_ref_tmp = self.$scope().$new_temp();
          self.$push("" + "(" + (nth_ref_tmp) + " = $gvars['~'], " + (nth_ref_tmp) + " != null && " + (nth_ref_tmp) + " != nil)");
          return nth_ref_tmp;
        }, $DefinedNode_compile_defined_nth_ref$15.$$arity = 0);
        return (Opal.def(self, '$compile_defined_array', $DefinedNode_compile_defined_array$16 = function $$compile_defined_array(node) {
          var $$17, self = this;

          return $send(node.$children(), 'each_with_index', [], ($$17 = function(child, idx){var self = $$17.$$s || this;

          
            
            if (child == null) {
              child = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if (idx['$=='](0)) {
            } else {
              self.$push(" && ")
            };
            return self.$compile_defined(child);}, $$17.$$s = self, $$17.$$arity = 2, $$17))
        }, $DefinedNode_compile_defined_array$16.$$arity = 1), nil) && 'compile_defined_array';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/masgn"] = function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$freeze', '$handle', '$children', '$new_temp', '$scope', '$==', '$type', '$rhs', '$push', '$expr', '$any?', '$size', '$compile_masgn', '$lhs', '$queue_temp', '$take_while', '$!=', '$drop', '$each_with_index', '$compile_assignment', '$empty?', '$shift', '$[]', '$<<', '$dup', '$s', '$!', '$>=', '$updated', '$include?', '$+', '$last', '$raise']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'MassAssignNode');

        var $nesting = [self].concat($parent_nesting), $MassAssignNode_compile$1, $MassAssignNode_compile_masgn$3, $MassAssignNode_compile_assignment$7;

        
        Opal.const_set($nesting[0], 'SIMPLE_ASSIGNMENT', ["lvasgn", "ivasgn", "lvar", "gvasgn", "cdecl", "casgn"].$freeze());
        self.$handle("masgn");
        self.$children("lhs", "rhs");
        
        Opal.def(self, '$compile', $MassAssignNode_compile$1 = function $$compile() {
          var $$2, self = this, array = nil, rhs_len = nil, retval = nil;

          
          array = self.$scope().$new_temp();
          if (self.$rhs().$type()['$==']("array")) {
            
            self.$push("" + (array) + " = ", self.$expr(self.$rhs()));
            rhs_len = (function() {if ($truthy($send(self.$rhs().$children(), 'any?', [], ($$2 = function(c){var self = $$2.$$s || this;

            
              
              if (c == null) {
                c = nil;
              };
              return c.$type()['$==']("splat");}, $$2.$$s = self, $$2.$$arity = 1, $$2)))) {
              return nil
            } else {
              return self.$rhs().$children().$size()
            }; return nil; })();
            self.$compile_masgn(self.$lhs().$children(), array, rhs_len);
            self.$push("" + ", " + (array));
          } else if (self.$rhs().$type()['$==']("begin")) {
            
            retval = self.$scope().$new_temp();
            self.$push("" + (retval) + " = ", self.$expr(self.$rhs()));
            self.$push("" + ", " + (array) + " = Opal.to_ary(" + (retval) + ")");
            self.$compile_masgn(self.$lhs().$children(), array);
            self.$push("" + ", " + (retval));
            self.$scope().$queue_temp(retval);
          } else {
            
            retval = self.$scope().$new_temp();
            self.$push("" + (retval) + " = ", self.$expr(self.$rhs()));
            self.$push("" + ", " + (array) + " = Opal.to_ary(" + (retval) + ")");
            self.$compile_masgn(self.$lhs().$children(), array);
            self.$push("" + ", " + (retval));
            self.$scope().$queue_temp(retval);
          };
          return self.$scope().$queue_temp(array);
        }, $MassAssignNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$compile_masgn', $MassAssignNode_compile_masgn$3 = function $$compile_masgn(lhs_items, array, len) {
          var $$4, $$5, $$6, self = this, pre_splat = nil, post_splat = nil, splat = nil, part = nil, tmp = nil;

          
          
          if (len == null) {
            len = nil;
          };
          pre_splat = $send(lhs_items, 'take_while', [], ($$4 = function(child){var self = $$4.$$s || this;

          
            
            if (child == null) {
              child = nil;
            };
            return child.$type()['$!=']("splat");}, $$4.$$s = self, $$4.$$arity = 1, $$4));
          post_splat = lhs_items.$drop(pre_splat.$size());
          $send(pre_splat, 'each_with_index', [], ($$5 = function(child, idx){var self = $$5.$$s || this;

          
            
            if (child == null) {
              child = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            return self.$compile_assignment(child, array, idx, len);}, $$5.$$s = self, $$5.$$arity = 2, $$5));
          if ($truthy(post_splat['$empty?']())) {
            return nil
          } else {
            
            splat = post_splat.$shift();
            if ($truthy(post_splat['$empty?']())) {
              if ($truthy((part = splat.$children()['$[]'](0)))) {
                
                part = part.$dup()['$<<'](self.$s("js_tmp", "" + "$slice.call(" + (array) + ", " + (pre_splat.$size()) + ")"));
                self.$push(", ");
                return self.$push(self.$expr(part));
              } else {
                return nil
              }
            } else {
              
              tmp = self.$scope().$new_temp();
              self.$push("" + ", " + (tmp) + " = " + (array) + ".length - " + (post_splat.$size()));
              self.$push("" + ", " + (tmp) + " = (" + (tmp) + " < " + (pre_splat.$size()) + ") ? " + (pre_splat.$size()) + " : " + (tmp));
              if ($truthy((part = splat.$children()['$[]'](0)))) {
                
                part = part.$dup()['$<<'](self.$s("js_tmp", "" + "$slice.call(" + (array) + ", " + (pre_splat.$size()) + ", " + (tmp) + ")"));
                self.$push(", ");
                self.$push(self.$expr(part));};
              $send(post_splat, 'each_with_index', [], ($$6 = function(child, idx){var self = $$6.$$s || this;

              
                
                if (child == null) {
                  child = nil;
                };
                
                if (idx == null) {
                  idx = nil;
                };
                if (idx['$=='](0)) {
                  return self.$compile_assignment(child, array, tmp)
                } else {
                  return self.$compile_assignment(child, array, "" + (tmp) + " + " + (idx))
                };}, $$6.$$s = self, $$6.$$arity = 2, $$6));
              return self.$scope().$queue_temp(tmp);
            };
          };
        }, $MassAssignNode_compile_masgn$3.$$arity = -3);
        return (Opal.def(self, '$compile_assignment', $MassAssignNode_compile_assignment$7 = function $$compile_assignment(child, array, idx, len) {
          var $a, self = this, assign = nil, part = nil, tmp = nil;

          
          
          if (len == null) {
            len = nil;
          };
          assign = (function() {if ($truthy(($truthy($a = len['$!']()) ? $a : $rb_ge(idx, len)))) {
            return self.$s("js_tmp", "" + "(" + (array) + "[" + (idx) + "] == null ? nil : " + (array) + "[" + (idx) + "])")
          } else {
            return self.$s("js_tmp", "" + (array) + "[" + (idx) + "]")
          }; return nil; })();
          part = child.$updated();
          if ($truthy($$($nesting, 'SIMPLE_ASSIGNMENT')['$include?'](child.$type()))) {
            part = part.$updated(nil, $rb_plus(part.$children(), [assign]))
          } else if (child.$type()['$==']("send")) {
            part = part.$updated(nil, $rb_plus(part.$children(), [assign]))
          } else if (child.$type()['$==']("attrasgn")) {
            part.$last()['$<<'](assign)
          } else if (child.$type()['$==']("mlhs")) {
            
            tmp = self.$scope().$new_temp();
            self.$push("" + ", (" + (tmp) + " = Opal.to_ary(" + (assign.$children()['$[]'](0)) + ")");
            self.$compile_masgn(child.$children(), tmp);
            self.$push(")");
            self.$scope().$queue_temp(tmp);
            return nil;
          } else {
            self.$raise("" + "Bad child node in masgn LHS: " + (child) + ". LHS: " + (self.$lhs()))
          };
          self.$push(", ");
          return self.$push(self.$expr(part));
        }, $MassAssignNode_compile_assignment$7.$$arity = -4), nil) && 'compile_assignment';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/arglist"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$each', '$children', '$==', '$type', '$expr', '$empty?', '$<<', '$fragment', '$push']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ArglistNode');

        var $nesting = [self].concat($parent_nesting), $ArglistNode_compile$1;

        
        self.$handle("arglist");
        return (Opal.def(self, '$compile', $ArglistNode_compile$1 = function $$compile() {
          var $a, $$2, self = this, code = nil, work = nil, join = nil;

          
          $a = [[], []], (code = $a[0]), (work = $a[1]), $a;
          $send(self.$children(), 'each', [], ($$2 = function(current){var self = $$2.$$s || this, splat = nil, arg = nil;

          
            
            if (current == null) {
              current = nil;
            };
            splat = current.$type()['$==']("splat");
            arg = self.$expr(current);
            if ($truthy(splat)) {
              
              if ($truthy(work['$empty?']())) {
                if ($truthy(code['$empty?']())) {
                  code['$<<'](arg)
                } else {
                  code['$<<'](self.$fragment(".concat("))['$<<'](arg)['$<<'](self.$fragment(")"))
                }
              } else {
                
                if ($truthy(code['$empty?']())) {
                  code['$<<'](self.$fragment("["))['$<<'](work)['$<<'](self.$fragment("]"))
                } else {
                  code['$<<'](self.$fragment(".concat(["))['$<<'](work)['$<<'](self.$fragment("])"))
                };
                code['$<<'](self.$fragment(".concat("))['$<<'](arg)['$<<'](self.$fragment(")"));
              };
              return (work = []);
            } else {
              
              if ($truthy(work['$empty?']())) {
              } else {
                work['$<<'](self.$fragment(", "))
              };
              return work['$<<'](arg);
            };}, $$2.$$s = self, $$2.$$arity = 1, $$2));
          if ($truthy(work['$empty?']())) {
          } else {
            
            join = work;
            if ($truthy(code['$empty?']())) {
              code = join
            } else {
              code['$<<'](self.$fragment(".concat(["))['$<<'](join)['$<<'](self.$fragment("])"))
            };
          };
          return $send(self, 'push', Opal.to_a(code));
        }, $ArglistNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/x_string"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $lambda = Opal.lambda;

  Opal.add_stubs(['$handle', '$unpack_return', '$children', '$strip_empty_children', '$single_line?', '$compile_single_line', '$each', '$compile_child', '$recv?', '$wrap', '$push', '$private', '$type', '$===', '$source', '$expression', '$loc', '$new', '$scope', '$expr', '$raise', '$shift', '$empty?', '$s', '$==', '$strip', '$=~', '$!', '$pop', '$extract_last_value', '$rstrip', '$expr?', '$end_with?', '$warning', '$compiler', '$line', '$[]', '$size', '$none?', '$first', '$dup', '$nil?', '$any?', '$last']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'XStringNode');

        var $nesting = [self].concat($parent_nesting), $XStringNode_compile$1, $XStringNode_compile_child$3, $XStringNode_compile_single_line$4, $XStringNode_extract_last_value$6, $XStringNode_single_line$ques$7, $XStringNode_unpack_return$9, $XStringNode_strip_empty_children$10;

        self.$$prototype.should_add_semicolon = self.$$prototype.returning = nil;
        
        self.$handle("xstr");
        
        Opal.def(self, '$compile', $XStringNode_compile$1 = function $$compile() {
          var $$2, self = this, unpacked_children = nil, stripped_children = nil;

          
          self.should_add_semicolon = false;
          unpacked_children = self.$unpack_return(self.$children());
          stripped_children = self.$strip_empty_children(unpacked_children);
          if ($truthy(self['$single_line?'](stripped_children))) {
            self.$compile_single_line(stripped_children)
          } else {
            $send(unpacked_children, 'each', [], ($$2 = function(c){var self = $$2.$$s || this;

            
              
              if (c == null) {
                c = nil;
              };
              return self.$compile_child(c);}, $$2.$$s = self, $$2.$$arity = 1, $$2))
          };
          if ($truthy(self['$recv?']())) {
            self.$wrap("(", ")")};
          if ($truthy(self.should_add_semicolon)) {
            return self.$push(";")
          } else {
            return nil
          };
        }, $XStringNode_compile$1.$$arity = 0);
        self.$private();
        
        Opal.def(self, '$compile_child', $XStringNode_compile_child$3 = function $$compile_child(child) {
          var self = this, $case = nil, value = nil;

          return (function() {$case = child.$type();
          if ("str"['$===']($case)) {
          value = child.$loc().$expression().$source();
          return self.$push($$($nesting, 'Fragment').$new(value, self.$scope(), child));}
          else if ("begin"['$===']($case) || "gvar"['$===']($case) || "ivar"['$===']($case) || "nil"['$===']($case)) {return self.$push(self.$expr(child))}
          else {return self.$raise("" + "Unsupported xstr part: " + (child.$type()))}})()
        }, $XStringNode_compile_child$3.$$arity = 1);
        
        Opal.def(self, '$compile_single_line', $XStringNode_compile_single_line$4 = function $$compile_single_line(children) {
          var $a, $$5, self = this, has_embeded_return = nil, first_child = nil, single_child = nil, first_value = nil, last_child = nil, last_value = nil;

          
          has_embeded_return = false;
          first_child = children.$shift();
          single_child = children['$empty?']();
          first_child = ($truthy($a = first_child) ? $a : self.$s("nil"));
          if (first_child.$type()['$==']("str")) {
            
            first_value = first_child.$loc().$expression().$source().$strip();
            has_embeded_return = first_value['$=~'](/^return\b/);};
          if ($truthy(($truthy($a = self.returning) ? has_embeded_return['$!']() : $a))) {
            self.$push("return ")};
          last_child = ($truthy($a = children.$pop()) ? $a : first_child);
          if (last_child.$type()['$==']("str")) {
            last_value = self.$extract_last_value(last_child)};
          if ($truthy(single_child)) {
          } else {
            
            self.should_add_semicolon = false;
            self.$compile_child(first_child);
            $send(children, 'each', [], ($$5 = function(c){var self = $$5.$$s || this;

            
              
              if (c == null) {
                c = nil;
              };
              return self.$compile_child(c);}, $$5.$$s = self, $$5.$$arity = 1, $$5));
          };
          if (last_child.$type()['$==']("str")) {
            return self.$push($$($nesting, 'Fragment').$new(last_value, self.$scope(), last_child))
          } else {
            return self.$compile_child(last_child)
          };
        }, $XStringNode_compile_single_line$4.$$arity = 1);
        
        Opal.def(self, '$extract_last_value', $XStringNode_extract_last_value$6 = function $$extract_last_value(last_child) {
          var $a, $b, self = this, last_value = nil;

          
          last_value = last_child.$loc().$expression().$source().$rstrip();
          if ($truthy(($truthy($a = ($truthy($b = self.returning) ? $b : self['$expr?']())) ? last_value['$end_with?'](";") : $a))) {
            
            self.$compiler().$warning("Removed semicolon ending x-string expression, interpreted as unintentional", last_child.$line());
            last_value = last_value['$[]']($range(0, -2, false));};
          if ($truthy(self.returning)) {
            self.should_add_semicolon = true};
          return last_value;
        }, $XStringNode_extract_last_value$6.$$arity = 1);
        
        Opal.def(self, '$single_line?', $XStringNode_single_line$ques$7 = function(children) {
          var $a, $$8, self = this;

          return ($truthy($a = children.$size()['$=='](1)) ? $a : $send(children, 'none?', [], ($$8 = function(c){var self = $$8.$$s || this, $b;

          
            
            if (c == null) {
              c = nil;
            };
            return (($b = c.$type()['$==']("str")) ? c.$loc().$expression().$source()['$end_with?']("\n") : c.$type()['$==']("str"));}, $$8.$$s = self, $$8.$$arity = 1, $$8)))
        }, $XStringNode_single_line$ques$7.$$arity = 1);
        
        Opal.def(self, '$unpack_return', $XStringNode_unpack_return$9 = function $$unpack_return(children) {
          var self = this, first_child = nil;

          
          first_child = children.$first();
          self.returning = false;
          if (first_child.$type()['$==']("js_return")) {
            
            self.returning = true;
            children = first_child.$children();};
          return children;
        }, $XStringNode_unpack_return$9.$$arity = 1);
        return (Opal.def(self, '$strip_empty_children', $XStringNode_strip_empty_children$10 = function $$strip_empty_children(children) {
          var $$11, $a, $b, self = this, empty_line = nil;

          
          children = children.$dup();
          empty_line = $lambda(($$11 = function(child){var self = $$11.$$s || this, $a, $b;

          
            
            if (child == null) {
              child = nil;
            };
            return ($truthy($a = child['$nil?']()) ? $a : (($b = child.$type()['$==']("str")) ? child.$loc().$expression().$source().$rstrip()['$empty?']() : child.$type()['$==']("str")));}, $$11.$$s = self, $$11.$$arity = 1, $$11));
          while ($truthy(($truthy($b = children['$any?']()) ? empty_line['$[]'](children.$first()) : $b))) {
            children.$shift()
          };
          while ($truthy(($truthy($b = children['$any?']()) ? empty_line['$[]'](children.$last()) : $b))) {
            children.$pop()
          };
          return children;
        }, $XStringNode_strip_empty_children$10.$$arity = 1), nil) && 'strip_empty_children';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes/lambda"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$helper', '$push', '$expr', '$iter']);
  
  self.$require("opal/nodes/call");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'LambdaNode');

        var $nesting = [self].concat($parent_nesting), $LambdaNode_compile$1;

        
        self.$handle("lambda");
        self.$children("iter");
        return (Opal.def(self, '$compile', $LambdaNode_compile$1 = function $$compile() {
          var self = this;

          
          self.$helper("lambda");
          return self.$push("$lambda(", self.$expr(self.$iter()), ")");
        }, $LambdaNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/nodes"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("opal/nodes/base");
  self.$require("opal/nodes/literal");
  self.$require("opal/nodes/variables");
  self.$require("opal/nodes/constants");
  self.$require("opal/nodes/call");
  self.$require("opal/nodes/csend");
  self.$require("opal/nodes/call_special");
  self.$require("opal/nodes/module");
  self.$require("opal/nodes/class");
  self.$require("opal/nodes/singleton_class");
  self.$require("opal/nodes/args");
  self.$require("opal/nodes/args/arity_check");
  self.$require("opal/nodes/iter");
  self.$require("opal/nodes/def");
  self.$require("opal/nodes/defs");
  self.$require("opal/nodes/if");
  self.$require("opal/nodes/logic");
  self.$require("opal/nodes/definitions");
  self.$require("opal/nodes/yield");
  self.$require("opal/nodes/rescue");
  self.$require("opal/nodes/case");
  self.$require("opal/nodes/super");
  self.$require("opal/nodes/top");
  self.$require("opal/nodes/while");
  self.$require("opal/nodes/hash");
  self.$require("opal/nodes/array");
  self.$require("opal/nodes/defined");
  self.$require("opal/nodes/masgn");
  self.$require("opal/nodes/arglist");
  self.$require("opal/nodes/x_string");
  return self.$require("opal/nodes/lambda");
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/eof_content"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$empty?', '$[]', '$last_token_position', '$drop_while', '$lines', '$==', '$join', '$private', '$last', '$end_pos']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'EofContent');

      var $nesting = [self].concat($parent_nesting), $EofContent_initialize$1, $EofContent_eof$2, $EofContent_last_token_position$4;

      self.$$prototype.tokens = self.$$prototype.source = nil;
      
      Opal.const_set($nesting[0], 'DATA_SEPARATOR', "__END__\n");
      
      Opal.def(self, '$initialize', $EofContent_initialize$1 = function $$initialize(tokens, source) {
        var self = this;

        
        self.tokens = tokens;
        return (self.source = source);
      }, $EofContent_initialize$1.$$arity = 2);
      
      Opal.def(self, '$eof', $EofContent_eof$2 = function $$eof() {
        var $$3, $a, self = this, eof_content = nil;

        
        if ($truthy(self.tokens['$empty?']())) {
          return nil};
        eof_content = self.source['$[]'](Opal.Range.$new(self.$last_token_position(), -1, false));
        if ($truthy(eof_content)) {
        } else {
          return nil
        };
        eof_content = $send(eof_content.$lines(), 'drop_while', [], ($$3 = function(line){var self = $$3.$$s || this;

        
          
          if (line == null) {
            line = nil;
          };
          return line['$==']("\n");}, $$3.$$s = self, $$3.$$arity = 1, $$3));
        if (eof_content['$[]'](0)['$==']("__END__\n")) {
          
          eof_content = ($truthy($a = eof_content['$[]']($range(1, -1, false))) ? $a : []);
          return eof_content.$join();
        } else if (eof_content['$=='](["__END__"])) {
          return ""
        } else {
          return nil
        };
      }, $EofContent_eof$2.$$arity = 0);
      self.$private();
      return (Opal.def(self, '$last_token_position', $EofContent_last_token_position$4 = function $$last_token_position() {
        var $a, $b, self = this, _ = nil, last_token_info = nil, last_token_range = nil;

        
        $b = self.tokens.$last(), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (last_token_info = ($a[1] == null ? nil : $a[1])), $b;
        $b = last_token_info, $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (last_token_range = ($a[1] == null ? nil : $a[1])), $b;
        return last_token_range.$end_pos();
      }, $EofContent_last_token_position$4.$$arity = 0), nil) && 'last_token_position';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/errors"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$attr_accessor', '$new', '$respond_to?', '$location', '$location=', '$-', '$diagnostic', '$diagnostic=', '$to_a', '$backtrace', '$unshift', '$to_s', '$set_backtrace', '$path', '$lineno', '$+', '$label', '$line', '$lineno=', '$source_line', '$label=', '$expression']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting), $Opal_opal_location_from_error$2, $Opal_add_opal_location_to_error$3;

    
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Error');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'StandardError'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'GemNotFound');

      var $nesting = [self].concat($parent_nesting), $GemNotFound_initialize$1;

      
      self.$attr_reader("gem_name");
      return (Opal.def(self, '$initialize', $GemNotFound_initialize$1 = function $$initialize(gem_name) {
        var $iter = $GemNotFound_initialize$1.$$p, $yield = $iter || nil, self = this;

        if ($iter) $GemNotFound_initialize$1.$$p = null;
        
        self.gem_name = gem_name;
        return $send(self, Opal.find_super_dispatcher(self, 'initialize', $GemNotFound_initialize$1, false), ["" + "can't find gem " + (gem_name)], null);
      }, $GemNotFound_initialize$1.$$arity = 1), nil) && 'initialize';
    })($nesting[0], $$($nesting, 'Error'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'CompilationError');

      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("location")
    })($nesting[0], $$($nesting, 'Error'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ParsingError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'CompilationError'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'RewritingError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'ParsingError'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'SyntaxError');

      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("location")
    })($nesting[0], $$$('::', 'SyntaxError'), $nesting);
    Opal.defs(self, '$opal_location_from_error', $Opal_opal_location_from_error$2 = function $$opal_location_from_error(error) {
      var self = this, opal_location = nil, $writer = nil;

      
      opal_location = $$($nesting, 'OpalBacktraceLocation').$new();
      if ($truthy(error['$respond_to?']("location"))) {
        
        $writer = [error.$location()];
        $send(opal_location, 'location=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];};
      if ($truthy(error['$respond_to?']("diagnostic"))) {
        
        $writer = [error.$diagnostic()];
        $send(opal_location, 'diagnostic=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];};
      return opal_location;
    }, $Opal_opal_location_from_error$2.$$arity = 1);
    Opal.defs(self, '$add_opal_location_to_error', $Opal_add_opal_location_to_error$3 = function $$add_opal_location_to_error(opal_location, error) {
      var self = this, backtrace = nil;

      
      backtrace = error.$backtrace().$to_a();
      backtrace.$unshift(opal_location.$to_s());
      error.$set_backtrace(backtrace);
      return error;
    }, $Opal_add_opal_location_to_error$3.$$arity = 2);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'OpalBacktraceLocation');

      var $nesting = [self].concat($parent_nesting), $OpalBacktraceLocation_initialize$4, $OpalBacktraceLocation_to_s$5, $OpalBacktraceLocation_diagnostic$eq$6, $OpalBacktraceLocation_location$eq$7;

      
      self.$attr_accessor("path", "lineno", "label");
      
      Opal.def(self, '$initialize', $OpalBacktraceLocation_initialize$4 = function $$initialize(path, lineno, label) {
        var $a, self = this;

        
        
        if (path == null) {
          path = nil;
        };
        
        if (lineno == null) {
          lineno = nil;
        };
        
        if (label == null) {
          label = nil;
        };
        return $a = [path, lineno, label], (self.path = $a[0]), (self.lineno = $a[1]), (self.label = $a[2]), $a;
      }, $OpalBacktraceLocation_initialize$4.$$arity = -1);
      
      Opal.def(self, '$to_s', $OpalBacktraceLocation_to_s$5 = function $$to_s() {
        var self = this, string = nil;

        
        string = self.$path();
        if ($truthy(self.$lineno())) {
          string = $rb_plus(string, "" + ":" + (self.$lineno()))};
        string = $rb_plus(string, ":in ");
        if ($truthy(self.$label())) {
          string = $rb_plus(string, "" + "`" + (self.$label()) + "'")
        } else {
          string = $rb_plus(string, "unknown")
        };
        return string;
      }, $OpalBacktraceLocation_to_s$5.$$arity = 0);
      Opal.alias(self, "line", "lineno");
      
      Opal.def(self, '$diagnostic=', $OpalBacktraceLocation_diagnostic$eq$6 = function(diagnostic) {
        var self = this, $writer = nil;

        
        if ($truthy(diagnostic)) {
        } else {
          return nil
        };
        
        $writer = [diagnostic.$location()];
        $send(self, 'location=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, $OpalBacktraceLocation_diagnostic$eq$6.$$arity = 1);
      return (Opal.def(self, '$location=', $OpalBacktraceLocation_location$eq$7 = function(location) {
        var self = this, $writer = nil;

        
        if ($truthy(location)) {
        } else {
          return nil
        };
        
        $writer = [location.$line()];
        $send(self, 'lineno=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(location['$respond_to?']("source_line"))) {
          
          $writer = [location.$source_line()];
          $send(self, 'label=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else if ($truthy(location['$respond_to?']("expression"))) {
          
          $writer = [location.$expression().$source_line()];
          $send(self, 'label=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else {
          return nil
        };
      }, $OpalBacktraceLocation_location$eq$7.$$arity = 1), nil) && 'location=';
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/compiler"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$compile', '$new', '$freeze', '$join', '$dirname', '$first', '$split', '$basename', '$to_s', '$cleanpath', '$Pathname', '$[]', '$define_method', '$fetch', '$!', '$include?', '$raise', '$inspect', '$compiler_option', '$attr_reader', '$attr_accessor', '$parse', '$re_raise_with_location', '$flatten', '$process', '$end_with?', '$code', '$last', '$<<', '$fragment', '$s', '$map', '$to_proc', '$file', '$source=', '$-', '$default_parser', '$tokenize', '$associate_locations', '$eof', '$location=', '$opal_location_from_error', '$path=', '$label', '$strip', '$lines', '$to_i', '$line', '$label=', '$message', '$set_backtrace', '$backtrace', '$add_opal_location_to_error', '$warn', '$empty?', '$gsub', '$+', '$start_with?', '$helpers', '$new_temp', '$queue_temp', '$push_while', '$indent', '$pop_while', '$in_while?', '$nil?', '$scope', '$handlers', '$type', '$compile_to_fragments', '$error', '$returns', '$===', '$updated', '$children', '$loc', '$uses_block!', '$block_name', '$find_parent_def']);
  
  self.$require("set");
  self.$require("opal/parser");
  self.$require("opal/fragment");
  self.$require("opal/nodes");
  self.$require("opal/eof_content");
  self.$require("opal/errors");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting), $Opal_compile$1;

    
    Opal.defs(self, '$compile', $Opal_compile$1 = function $$compile(source, options) {
      var self = this;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      return $$($nesting, 'Compiler').$new(source, options).$compile();
    }, $Opal_compile$1.$$arity = -2);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Compiler');

      var $nesting = [self].concat($parent_nesting), $Compiler_module_name$2, $Compiler_compiler_option$3, $Compiler_initialize$6, $Compiler_compile$7, $Compiler_parse$9, $Compiler_source_map$11, $Compiler_helpers$12, $Compiler_operator_helpers$13, $Compiler_method_calls$14, $Compiler_error$15, $Compiler_re_raise_with_location$16, $Compiler_warning$17, $Compiler_parser_indent$18, $Compiler_s$19, $Compiler_fragment$20, $Compiler_unique_temp$21, $Compiler_helper$22, $Compiler_indent$23, $Compiler_with_temp$24, $Compiler_in_while$25, $Compiler_in_case$27, $Compiler_in_while$ques$28, $Compiler_process$29, $Compiler_handlers$30, $Compiler_requires$31, $Compiler_required_trees$32, $Compiler_returns$33, $Compiler_handle_block_given_call$35;

      self.$$prototype.fragments = self.$$prototype.source = self.$$prototype.buffer = self.$$prototype.helpers = self.$$prototype.operator_helpers = self.$$prototype.method_calls = self.$$prototype.indent = self.$$prototype.unique = self.$$prototype.scope = self.$$prototype.case_stmt = self.$$prototype.handlers = self.$$prototype.requires = self.$$prototype.required_trees = nil;
      
      Opal.const_set($nesting[0], 'INDENT', "  ");
      Opal.const_set($nesting[0], 'COMPARE', ["<", ">", "<=", ">="].$freeze());
      Opal.defs(self, '$module_name', $Compiler_module_name$2 = function $$module_name(path) {
        var self = this;

        
        path = $$($nesting, 'File').$join($$($nesting, 'File').$dirname(path), $$($nesting, 'File').$basename(path).$split(".").$first());
        return self.$Pathname(path).$cleanpath().$to_s();
      }, $Compiler_module_name$2.$$arity = 1);
      Opal.defs(self, '$compiler_option', $Compiler_compiler_option$3 = function $$compiler_option(name, default_value, options) {
        var $a, $$4, self = this, mid = nil, valid_values = nil;

        
        
        if (options == null) {
          options = $hash2([], {});
        };
        mid = options['$[]']("as");
        valid_values = options['$[]']("valid_values");
        return $send(self, 'define_method', [($truthy($a = mid) ? $a : name)], ($$4 = function(){var self = $$4.$$s || this, $$5, $b, value = nil;
          if (self.options == null) self.options = nil;

        
          value = $send(self.options, 'fetch', [name], ($$5 = function(){var self = $$5.$$s || this;

          return default_value}, $$5.$$s = self, $$5.$$arity = 0, $$5));
          if ($truthy(($truthy($b = valid_values) ? valid_values['$include?'](value)['$!']() : $b))) {
            self.$raise($$($nesting, 'ArgumentError'), "" + ("" + "invalid value " + (value.$inspect()) + " for option " + (name.$inspect()) + " ") + ("" + "(valid values: " + (valid_values.$inspect()) + ")"))};
          return value;}, $$4.$$s = self, $$4.$$arity = 0, $$4));
      }, $Compiler_compiler_option$3.$$arity = -3);
      self.$compiler_option("file", "(file)");
      self.$compiler_option("method_missing", true, $hash2(["as"], {"as": "method_missing?"}));
      self.$compiler_option("arity_check", false, $hash2(["as"], {"as": "arity_check?"}));
      self.$compiler_option("freezing", true, $hash2(["as"], {"as": "freezing?"}));
      self.$compiler_option("tainting", true, $hash2(["as"], {"as": "tainting?"}));
      self.$compiler_option("irb", false, $hash2(["as"], {"as": "irb?"}));
      self.$compiler_option("dynamic_require_severity", "ignore", $hash2(["valid_values"], {"valid_values": ["error", "warning", "ignore"]}));
      self.$compiler_option("requirable", false, $hash2(["as"], {"as": "requirable?"}));
      self.$compiler_option("inline_operators", true, $hash2(["as"], {"as": "inline_operators?"}));
      self.$compiler_option("eval", false, $hash2(["as"], {"as": "eval?"}));
      self.$compiler_option("enable_source_location", false, $hash2(["as"], {"as": "enable_source_location?"}));
      self.$compiler_option("parse_comments", false, $hash2(["as"], {"as": "parse_comments?"}));
      self.$attr_reader("result");
      self.$attr_reader("fragments");
      self.$attr_accessor("scope");
      self.$attr_reader("case_stmt");
      self.$attr_reader("eof_content");
      self.$attr_reader("comments");
      
      Opal.def(self, '$initialize', $Compiler_initialize$6 = function $$initialize(source, options) {
        var self = this;

        
        
        if (options == null) {
          options = $hash2([], {});
        };
        self.source = source;
        self.indent = "";
        self.unique = 0;
        self.options = options;
        self.comments = $$($nesting, 'Hash').$new([]);
        return (self.case_stmt = nil);
      }, $Compiler_initialize$6.$$arity = -2);
      
      Opal.def(self, '$compile', $Compiler_compile$7 = function $$compile() {
        var $$8, self = this;

        
        self.$parse();
        self.fragments = $send(self, 're_raise_with_location', [], ($$8 = function(){var self = $$8.$$s || this;
          if (self.sexp == null) self.sexp = nil;

        return self.$process(self.sexp).$flatten()}, $$8.$$s = self, $$8.$$arity = 0, $$8));
        if ($truthy(self.fragments.$last().$code()['$end_with?']("\n"))) {
        } else {
          self.fragments['$<<'](self.$fragment("\n", nil, self.$s("newline")))
        };
        return (self.result = $send(self.fragments, 'map', [], "code".$to_proc()).$join(""));
      }, $Compiler_compile$7.$$arity = 0);
      
      Opal.def(self, '$parse', $Compiler_parse$9 = function $$parse() {
        var $a, $b, $$10, self = this, $writer = nil, sexp = nil, comments = nil, tokens = nil;

        
        self.buffer = $$$($$$($$$('::', 'Opal'), 'Parser'), 'SourceBuffer').$new(self.$file(), 1);
        
        $writer = [self.source];
        $send(self.buffer, 'source=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.parser = $$$($$($nesting, 'Opal'), 'Parser').$default_parser();
        $b = $send(self, 're_raise_with_location', [], ($$10 = function(){var self = $$10.$$s || this;
          if (self.parser == null) self.parser = nil;
          if (self.buffer == null) self.buffer = nil;

        return self.parser.$tokenize(self.buffer)}, $$10.$$s = self, $$10.$$arity = 0, $$10)), $a = Opal.to_ary($b), (sexp = ($a[0] == null ? nil : $a[0])), (comments = ($a[1] == null ? nil : $a[1])), (tokens = ($a[2] == null ? nil : $a[2])), $b;
        self.sexp = self.$s("top", ($truthy($a = sexp) ? $a : self.$s("nil")));
        self.comments = $$$($$$($$$('::', 'Parser'), 'Source'), 'Comment').$associate_locations(sexp, comments);
        return (self.eof_content = $$($nesting, 'EofContent').$new(tokens, self.source).$eof());
      }, $Compiler_parse$9.$$arity = 0);
      
      Opal.def(self, '$source_map', $Compiler_source_map$11 = function $$source_map() {
        var self = this;

        return $$$($$$($$$('::', 'Opal'), 'SourceMap'), 'File').$new(self.fragments, self.$file(), self.source)
      }, $Compiler_source_map$11.$$arity = 0);
      
      Opal.def(self, '$helpers', $Compiler_helpers$12 = function $$helpers() {
        var $a, self = this;

        return (self.helpers = ($truthy($a = self.helpers) ? $a : $$($nesting, 'Set').$new(["breaker", "slice"])))
      }, $Compiler_helpers$12.$$arity = 0);
      
      Opal.def(self, '$operator_helpers', $Compiler_operator_helpers$13 = function $$operator_helpers() {
        var $a, self = this;

        return (self.operator_helpers = ($truthy($a = self.operator_helpers) ? $a : $$($nesting, 'Set').$new()))
      }, $Compiler_operator_helpers$13.$$arity = 0);
      
      Opal.def(self, '$method_calls', $Compiler_method_calls$14 = function $$method_calls() {
        var $a, self = this;

        return (self.method_calls = ($truthy($a = self.method_calls) ? $a : $$($nesting, 'Set').$new()))
      }, $Compiler_method_calls$14.$$arity = 0);
      
      Opal.def(self, '$error', $Compiler_error$15 = function $$error(msg, line) {
        var self = this, error = nil, $writer = nil;

        
        
        if (line == null) {
          line = nil;
        };
        error = $$$($$$('::', 'Opal'), 'SyntaxError').$new(msg);
        
        $writer = [$$$($$($nesting, 'Opal'), 'OpalBacktraceLocation').$new(self.$file(), line)];
        $send(error, 'location=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return self.$raise(error);
      }, $Compiler_error$15.$$arity = -2);
      
      Opal.def(self, '$re_raise_with_location', $Compiler_re_raise_with_location$16 = function $$re_raise_with_location() {
        var $a, $iter = $Compiler_re_raise_with_location$16.$$p, $yield = $iter || nil, self = this, error = nil, opal_location = nil, $writer = nil, new_error = nil;

        if ($iter) $Compiler_re_raise_with_location$16.$$p = null;
        try {
          return Opal.yieldX($yield, []);
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'StandardError'), $$$($$$('::', 'Opal'), 'SyntaxError')])) {error = $err;
            try {
              
              opal_location = $$$('::', 'Opal').$opal_location_from_error(error);
              
              $writer = [self.$file()];
              $send(opal_location, 'path=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              ($truthy($a = opal_location.$label()) ? $a : (($writer = [self.source.$lines()['$[]']($rb_minus(opal_location.$line().$to_i(), 1)).$strip()]), $send(opal_location, 'label=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
              new_error = $$$($$$('::', 'Opal'), 'SyntaxError').$new(error.$message());
              new_error.$set_backtrace(error.$backtrace());
              $$$('::', 'Opal').$add_opal_location_to_error(opal_location, new_error);
              return self.$raise(new_error);
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }
      }, $Compiler_re_raise_with_location$16.$$arity = 0);
      
      Opal.def(self, '$warning', $Compiler_warning$17 = function $$warning(msg, line) {
        var self = this;

        
        
        if (line == null) {
          line = nil;
        };
        return self.$warn("" + "warning: " + (msg) + " -- " + (self.$file()) + ":" + (line));
      }, $Compiler_warning$17.$$arity = -2);
      
      Opal.def(self, '$parser_indent', $Compiler_parser_indent$18 = function $$parser_indent() {
        var self = this;

        return self.indent
      }, $Compiler_parser_indent$18.$$arity = 0);
      
      Opal.def(self, '$s', $Compiler_s$19 = function $$s(type, $a) {
        var $post_args, children, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        children = $post_args;;
        return $$$($$$($$$('::', 'Opal'), 'AST'), 'Node').$new(type, children);
      }, $Compiler_s$19.$$arity = -2);
      
      Opal.def(self, '$fragment', $Compiler_fragment$20 = function $$fragment(str, scope, sexp) {
        var self = this;

        
        
        if (sexp == null) {
          sexp = nil;
        };
        return $$($nesting, 'Fragment').$new(str, scope, sexp);
      }, $Compiler_fragment$20.$$arity = -3);
      
      Opal.def(self, '$unique_temp', $Compiler_unique_temp$21 = function $$unique_temp(name) {
        var $a, self = this, unique = nil;

        
        name = name.$to_s();
        if ($truthy(($truthy($a = name) ? name['$empty?']()['$!']() : $a))) {
          name = name.$to_s().$gsub("<=>", "$lt_eq_gt").$gsub("===", "$eq_eq_eq").$gsub("==", "$eq_eq").$gsub("=~", "$eq_tilde").$gsub("!~", "$excl_tilde").$gsub("!=", "$not_eq").$gsub("<=", "$lt_eq").$gsub(">=", "$gt_eq").$gsub("=", "$eq").$gsub("?", "$ques").$gsub("!", "$excl").$gsub("/", "$slash").$gsub("%", "$percent").$gsub("+", "$plus").$gsub("-", "$minus").$gsub("<", "$lt").$gsub(">", "$gt").$gsub(/[^\w\$]/, "$")};
        unique = (self.unique = $rb_plus(self.unique, 1));
        return "" + ((function() {if ($truthy(name['$start_with?']("$"))) {
          return nil
        } else {
          return "$"
        }; return nil; })()) + (name) + "$" + (unique);
      }, $Compiler_unique_temp$21.$$arity = 1);
      
      Opal.def(self, '$helper', $Compiler_helper$22 = function $$helper(name) {
        var self = this;

        return self.$helpers()['$<<'](name)
      }, $Compiler_helper$22.$$arity = 1);
      
      Opal.def(self, '$indent', $Compiler_indent$23 = function $$indent() {
        var $iter = $Compiler_indent$23.$$p, $yield = $iter || nil, self = this, indent = nil, res = nil;

        if ($iter) $Compiler_indent$23.$$p = null;
        
        indent = self.indent;
        self.indent = $rb_plus(self.indent, $$($nesting, 'INDENT'));
        self.space = "" + "\n" + (self.indent);
        res = Opal.yieldX($yield, []);
        self.indent = indent;
        self.space = "" + "\n" + (self.indent);
        return res;
      }, $Compiler_indent$23.$$arity = 0);
      
      Opal.def(self, '$with_temp', $Compiler_with_temp$24 = function $$with_temp() {
        var $iter = $Compiler_with_temp$24.$$p, $yield = $iter || nil, self = this, tmp = nil, res = nil;

        if ($iter) $Compiler_with_temp$24.$$p = null;
        
        tmp = self.scope.$new_temp();
        res = Opal.yield1($yield, tmp);
        self.scope.$queue_temp(tmp);
        return res;
      }, $Compiler_with_temp$24.$$arity = 0);
      
      Opal.def(self, '$in_while', $Compiler_in_while$25 = function $$in_while() {
        var $$26, $iter = $Compiler_in_while$25.$$p, $yield = $iter || nil, self = this, result = nil;

        if ($iter) $Compiler_in_while$25.$$p = null;
        
        if (($yield !== nil)) {
        } else {
          return nil
        };
        self.while_loop = self.scope.$push_while();
        result = $send(self, 'indent', [], ($$26 = function(){var self = $$26.$$s || this;

        return Opal.yieldX($yield, []);}, $$26.$$s = self, $$26.$$arity = 0, $$26));
        self.scope.$pop_while();
        return result;
      }, $Compiler_in_while$25.$$arity = 0);
      
      Opal.def(self, '$in_case', $Compiler_in_case$27 = function $$in_case() {
        var $iter = $Compiler_in_case$27.$$p, $yield = $iter || nil, self = this, old = nil;

        if ($iter) $Compiler_in_case$27.$$p = null;
        
        if (($yield !== nil)) {
        } else {
          return nil
        };
        old = self.case_stmt;
        self.case_stmt = $hash2([], {});
        Opal.yieldX($yield, []);
        return (self.case_stmt = old);
      }, $Compiler_in_case$27.$$arity = 0);
      
      Opal.def(self, '$in_while?', $Compiler_in_while$ques$28 = function() {
        var self = this;

        return self.scope['$in_while?']()
      }, $Compiler_in_while$ques$28.$$arity = 0);
      
      Opal.def(self, '$process', $Compiler_process$29 = function $$process(sexp, level) {
        var self = this, handler = nil;

        
        
        if (level == null) {
          level = "expr";
        };
        if ($truthy(sexp['$nil?']())) {
          return self.$fragment("", self.$scope())};
        if ($truthy((handler = self.$handlers()['$[]'](sexp.$type())))) {
          return handler.$new(sexp, level, self).$compile_to_fragments()
        } else {
          return self.$error("" + "Unsupported sexp: " + (sexp.$type()))
        };
      }, $Compiler_process$29.$$arity = -2);
      
      Opal.def(self, '$handlers', $Compiler_handlers$30 = function $$handlers() {
        var $a, self = this;

        return (self.handlers = ($truthy($a = self.handlers) ? $a : $$$($$$($$($nesting, 'Opal'), 'Nodes'), 'Base').$handlers()))
      }, $Compiler_handlers$30.$$arity = 0);
      
      Opal.def(self, '$requires', $Compiler_requires$31 = function $$requires() {
        var $a, self = this;

        return (self.requires = ($truthy($a = self.requires) ? $a : []))
      }, $Compiler_requires$31.$$arity = 0);
      
      Opal.def(self, '$required_trees', $Compiler_required_trees$32 = function $$required_trees() {
        var $a, self = this;

        return (self.required_trees = ($truthy($a = self.required_trees) ? $a : []))
      }, $Compiler_required_trees$32.$$arity = 0);
      
      Opal.def(self, '$returns', $Compiler_returns$33 = function $$returns(sexp) {
        var $a, $b, $$34, self = this, $case = nil, when_sexp = nil, then_sexp = nil, body_sexp = nil, resbodies = nil, else_sexp = nil, klass = nil, lvar = nil, body = nil, rescue_sexp = nil, ensure_body = nil, rest = nil, last = nil, cond = nil, true_body = nil, false_body = nil;

        
        if ($truthy(sexp)) {
        } else {
          return self.$returns(self.$s("nil"))
        };
        return (function() {$case = sexp.$type();
        if ("undef"['$===']($case)) {return self.$returns(self.$s("begin", sexp, self.$s("nil")))}
        else if ("break"['$===']($case) || "next"['$===']($case) || "redo"['$===']($case)) {return sexp}
        else if ("yield"['$===']($case)) {return sexp.$updated("returnable_yield", nil)}
        else if ("when"['$===']($case)) {
        $a = [].concat(Opal.to_a(sexp)), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (when_sexp = $slice.call($a, 0, $b)), (then_sexp = ($a[$b] == null ? nil : $a[$b])), $a;
        return sexp.$updated(nil, [].concat(Opal.to_a(when_sexp)).concat([self.$returns(then_sexp)]));}
        else if ("rescue"['$===']($case)) {
        $a = [].concat(Opal.to_a(sexp)), (body_sexp = ($a[0] == null ? nil : $a[0])), $b = $a.length - 1, $b = ($b < 1) ? 1 : $b, (resbodies = $slice.call($a, 1, $b)), (else_sexp = ($a[$b] == null ? nil : $a[$b])), $a;
        resbodies = $send(resbodies, 'map', [], ($$34 = function(resbody){var self = $$34.$$s || this;

        
          
          if (resbody == null) {
            resbody = nil;
          };
          return self.$returns(resbody);}, $$34.$$s = self, $$34.$$arity = 1, $$34));
        if ($truthy(else_sexp)) {
          else_sexp = self.$returns(else_sexp)};
        return sexp.$updated(nil, [self.$returns(body_sexp)].concat(Opal.to_a(resbodies)).concat([else_sexp]));}
        else if ("resbody"['$===']($case)) {
        $a = [].concat(Opal.to_a(sexp)), (klass = ($a[0] == null ? nil : $a[0])), (lvar = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
        return sexp.$updated(nil, [klass, lvar, self.$returns(body)]);}
        else if ("ensure"['$===']($case)) {
        $a = [].concat(Opal.to_a(sexp)), (rescue_sexp = ($a[0] == null ? nil : $a[0])), (ensure_body = ($a[1] == null ? nil : $a[1])), $a;
        sexp = sexp.$updated(nil, [self.$returns(rescue_sexp), ensure_body]);
        return self.$s("js_return", sexp);}
        else if ("begin"['$===']($case) || "kwbegin"['$===']($case)) {
        $a = [].concat(Opal.to_a(sexp)), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (rest = $slice.call($a, 0, $b)), (last = ($a[$b] == null ? nil : $a[$b])), $a;
        return sexp.$updated(nil, [].concat(Opal.to_a(rest)).concat([self.$returns(last)]));}
        else if ("while"['$===']($case) || "until"['$===']($case) || "while_post"['$===']($case) || "until_post"['$===']($case)) {return sexp}
        else if ("return"['$===']($case) || "js_return"['$===']($case) || "returnable_yield"['$===']($case)) {return sexp}
        else if ("xstr"['$===']($case)) {return sexp.$updated(nil, [$send(self, 's', ["js_return"].concat(Opal.to_a(sexp.$children())))])}
        else if ("if"['$===']($case)) {
        $a = [].concat(Opal.to_a(sexp)), (cond = ($a[0] == null ? nil : $a[0])), (true_body = ($a[1] == null ? nil : $a[1])), (false_body = ($a[2] == null ? nil : $a[2])), $a;
        return sexp.$updated(nil, [cond, self.$returns(true_body), self.$returns(false_body)]);}
        else {return self.$s("js_return", sexp).$updated(nil, nil, $hash2(["location"], {"location": sexp.$loc()}))}})();
      }, $Compiler_returns$33.$$arity = 1);
      return (Opal.def(self, '$handle_block_given_call', $Compiler_handle_block_given_call$35 = function $$handle_block_given_call(sexp) {
        var $a, self = this, scope = nil;

        
        self.scope['$uses_block!']();
        if ($truthy(self.scope.$block_name())) {
          return self.$fragment("" + "(" + (self.scope.$block_name()) + " !== nil)", self.$scope(), sexp)
        } else if ($truthy(($truthy($a = (scope = self.scope.$find_parent_def())) ? scope.$block_name() : $a))) {
          return self.$fragment("" + "(" + (scope.$block_name()) + " !== nil)", scope, sexp)
        } else {
          return self.$fragment("false", scope, sexp)
        };
      }, $Compiler_handle_block_given_call$35.$$arity = 1), nil) && 'handle_block_given_call';
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/erb"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$compile', '$new', '$fix_quotes', '$find_contents', '$find_code', '$wrap_compiled', '$require_erb', '$prepared_source', '$gsub', '$+', '$last_match', '$=~', '$sub']);
  
  self.$require("opal/compiler");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'ERB');

      var $nesting = [self].concat($parent_nesting), $ERB_compile$1;

      
      Opal.defs(self, '$compile', $ERB_compile$1 = function $$compile(source, file_name) {
        var self = this;

        
        
        if (file_name == null) {
          file_name = "(erb)";
        };
        return $$($nesting, 'Compiler').$new(source, file_name).$compile();
      }, $ERB_compile$1.$$arity = -2);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Compiler');

        var $nesting = [self].concat($parent_nesting), $Compiler_initialize$2, $Compiler_prepared_source$3, $Compiler_compile$4, $Compiler_fix_quotes$5, $Compiler_require_erb$6, $Compiler_find_contents$7, $Compiler_find_code$9, $Compiler_wrap_compiled$11;

        self.$$prototype.prepared_source = self.$$prototype.source = self.$$prototype.file_name = nil;
        
        Opal.const_set($nesting[0], 'BLOCK_EXPR', /\s+(do|\{)(\s*\|[^|]*\|)?\s*\Z/);
        
        Opal.def(self, '$initialize', $Compiler_initialize$2 = function $$initialize(source, file_name) {
          var $a, self = this;

          
          
          if (file_name == null) {
            file_name = "(erb)";
          };
          return $a = [source, file_name, source], (self.source = $a[0]), (self.file_name = $a[1]), (self.result = $a[2]), $a;
        }, $Compiler_initialize$2.$$arity = -2);
        
        Opal.def(self, '$prepared_source', $Compiler_prepared_source$3 = function $$prepared_source() {
          var $a, self = this, source = nil;

          return (self.prepared_source = ($truthy($a = self.prepared_source) ? $a : ((source = self.source), (source = self.$fix_quotes(source)), (source = self.$find_contents(source)), (source = self.$find_code(source)), (source = self.$wrap_compiled(source)), (source = self.$require_erb(source)), source)))
        }, $Compiler_prepared_source$3.$$arity = 0);
        
        Opal.def(self, '$compile', $Compiler_compile$4 = function $$compile() {
          var self = this;

          return $$($nesting, 'Opal').$compile(self.$prepared_source())
        }, $Compiler_compile$4.$$arity = 0);
        
        Opal.def(self, '$fix_quotes', $Compiler_fix_quotes$5 = function $$fix_quotes(result) {
          var self = this;

          return result.$gsub("\"", "\\\"")
        }, $Compiler_fix_quotes$5.$$arity = 1);
        
        Opal.def(self, '$require_erb', $Compiler_require_erb$6 = function $$require_erb(result) {
          var self = this;

          return $rb_plus("require \"erb\";", result)
        }, $Compiler_require_erb$6.$$arity = 1);
        
        Opal.def(self, '$find_contents', $Compiler_find_contents$7 = function $$find_contents(result) {
          var $$8, self = this;

          return $send(result, 'gsub', [/<%=([\s\S]+?)%>/], ($$8 = function(){var self = $$8.$$s || this, inner = nil;

          
            inner = $$($nesting, 'Regexp').$last_match(1).$gsub(/\\'/, "'").$gsub(/\\"/, "\"");
            if ($truthy(inner['$=~']($$($nesting, 'BLOCK_EXPR')))) {
              return "" + "\")\noutput_buffer.append= " + (inner) + "\noutput_buffer.append(\""
            } else {
              return "" + "\")\noutput_buffer.append=(" + (inner) + ")\noutput_buffer.append(\""
            };}, $$8.$$s = self, $$8.$$arity = 0, $$8))
        }, $Compiler_find_contents$7.$$arity = 1);
        
        Opal.def(self, '$find_code', $Compiler_find_code$9 = function $$find_code(result) {
          var $$10, self = this;

          return $send(result, 'gsub', [/<%([\s\S]+?)%>/], ($$10 = function(){var self = $$10.$$s || this, inner = nil;

          
            inner = $$($nesting, 'Regexp').$last_match(1).$gsub(/\\"/, "\"");
            return "" + "\")\n" + (inner) + "\noutput_buffer.append(\"";}, $$10.$$s = self, $$10.$$arity = 0, $$10))
        }, $Compiler_find_code$9.$$arity = 1);
        return (Opal.def(self, '$wrap_compiled', $Compiler_wrap_compiled$11 = function $$wrap_compiled(result) {
          var self = this, path = nil;

          
          path = self.file_name.$sub(new RegExp("" + "\\.opalerb" + ($$($nesting, 'REGEXP_END'))), "");
          return "" + "Template.new('" + (path) + "') do |output_buffer|\noutput_buffer.append(\"" + (result) + "\")\noutput_buffer.join\nend\n";
        }, $Compiler_wrap_compiled$11.$$arity = 1), nil) && 'wrap_compiled';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal/builder_processors"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$end_with?', '$+', '$attr_reader', '$to_s', '$source', '$join', '$==', '$size', '$new', '$register_processor', '$is_a?', '$match', '$match_regexp', '$raise', '$inspect', '$handles', '$map', '$with_index', '$each_line', '$index', '$filename', '$mark_as_required', '$result', '$compiled', '$source_map', '$compiler_for', '$compile', '$merge', '$requires', '$required_trees', '$extname', '$prepare', '$private', '$prepared_source', '$module_name']);
  
  self.$require("opal/compiler");
  self.$require("opal/erb");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'BuilderProcessors');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Processor');

        var $nesting = [self].concat($parent_nesting), $Processor_initialize$1, $Processor_to_s$2, $Processor_mark_as_required$6;

        
        
        Opal.def(self, '$initialize', $Processor_initialize$1 = function $$initialize(source, filename, options) {
          var $a, self = this;

          
          
          if (options == null) {
            options = $hash2([], {});
          };
          if ($truthy(source['$end_with?']("\n"))) {
          } else {
            source = $rb_plus(source, "\n")
          };
          $a = [source, filename, options], (self.source = $a[0]), (self.filename = $a[1]), (self.options = $a[2]), $a;
          self.requires = [];
          return (self.required_trees = []);
        }, $Processor_initialize$1.$$arity = -3);
        self.$attr_reader("source", "filename", "options", "requires", "required_trees");
        
        Opal.def(self, '$to_s', $Processor_to_s$2 = function $$to_s() {
          var self = this;

          return self.$source().$to_s()
        }, $Processor_to_s$2.$$arity = 0);
        (function(self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting), $handles$3, $match$ques$4, $match_regexp$5;

          
          self.$attr_reader("extensions");
          
          Opal.def(self, '$handles', $handles$3 = function $$handles($a) {
            var $post_args, extensions, self = this, matches = nil;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            extensions = $post_args;;
            self.extensions = extensions;
            matches = extensions.$join("|");
            if (extensions.$size()['$=='](1)) {
              matches = "" + "(" + (matches) + ")"};
            self.match_regexp = $$($nesting, 'Regexp').$new("" + "\\." + (matches) + ($$($nesting, 'REGEXP_END')));
            $$$($$$('::', 'Opal'), 'Builder').$register_processor(self, extensions);
            return nil;
          }, $handles$3.$$arity = -1);
          
          Opal.def(self, '$match?', $match$ques$4 = function(other) {
            var $a, self = this;

            return ($truthy($a = other['$is_a?']($$($nesting, 'String'))) ? other.$match(self.$match_regexp()) : $a)
          }, $match$ques$4.$$arity = 1);
          return (Opal.def(self, '$match_regexp', $match_regexp$5 = function $$match_regexp() {
            var $a, self = this;
            if (self.match_regexp == null) self.match_regexp = nil;

            return ($truthy($a = self.match_regexp) ? $a : self.$raise($$($nesting, 'NotImplementedError')))
          }, $match_regexp$5.$$arity = 0), nil) && 'match_regexp';
        })(Opal.get_singleton_class(self), $nesting);
        return (Opal.def(self, '$mark_as_required', $Processor_mark_as_required$6 = function $$mark_as_required(filename) {
          var self = this;

          return "" + "Opal.loaded([" + (filename.$to_s().$inspect()) + "]);"
        }, $Processor_mark_as_required$6.$$arity = 1), nil) && 'mark_as_required';
      })($nesting[0], null, $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JsProcessor');

        var $nesting = [self].concat($parent_nesting), $JsProcessor_source_map$7, $JsProcessor_source$9;

        self.$$prototype.source_map = self.$$prototype.source = self.$$prototype.filename = nil;
        
        self.$handles("js");
        Opal.const_set($nesting[0], 'ManualFragment', $$($nesting, 'Struct').$new("line", "column", "code", "source_map_name"));
        
        Opal.def(self, '$source_map', $JsProcessor_source_map$7 = function $$source_map() {
          var $a, $$8, self = this, manual_fragments = nil;

          return (self.source_map = ($truthy($a = self.source_map) ? $a : ((manual_fragments = $send(self.$source().$each_line().$with_index(), 'map', [], ($$8 = function(line_source, index){var self = $$8.$$s || this, column = nil, line = nil;

          
            
            if (line_source == null) {
              line_source = nil;
            };
            
            if (index == null) {
              index = nil;
            };
            column = line_source.$index(/\S/);
            line = $rb_plus(index, 1);
            return $$($nesting, 'ManualFragment').$new(line, column, line_source, nil);}, $$8.$$s = self, $$8.$$arity = 2, $$8))), $$$($$$($$$('::', 'Opal'), 'SourceMap'), 'File').$new(manual_fragments, self.$filename(), self.$source()))))
        }, $JsProcessor_source_map$7.$$arity = 0);
        return (Opal.def(self, '$source', $JsProcessor_source$9 = function $$source() {
          var self = this;

          return $rb_plus(self.source.$to_s(), self.$mark_as_required(self.filename))
        }, $JsProcessor_source$9.$$arity = 0), nil) && 'source';
      })($nesting[0], $$($nesting, 'Processor'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RubyProcessor');

        var $nesting = [self].concat($parent_nesting), $RubyProcessor_source$10, $RubyProcessor_source_map$11, $RubyProcessor_compiled$12, $RubyProcessor_compiler_for$13, $RubyProcessor_requires$14, $RubyProcessor_required_trees$15, $RubyProcessor_match$ques$16;

        self.$$prototype.compiled = self.$$prototype.source = self.$$prototype.filename = self.$$prototype.options = nil;
        
        self.$handles("rb", "opal");
        
        Opal.def(self, '$source', $RubyProcessor_source$10 = function $$source() {
          var self = this;

          return self.$compiled().$result()
        }, $RubyProcessor_source$10.$$arity = 0);
        
        Opal.def(self, '$source_map', $RubyProcessor_source_map$11 = function $$source_map() {
          var self = this;

          return self.$compiled().$source_map()
        }, $RubyProcessor_source_map$11.$$arity = 0);
        
        Opal.def(self, '$compiled', $RubyProcessor_compiled$12 = function $$compiled() {
          var $a, self = this, compiler = nil;

          return (self.compiled = ($truthy($a = self.compiled) ? $a : ((compiler = self.$compiler_for(self.source, $hash2(["file"], {"file": self.filename}))), compiler.$compile(), compiler)))
        }, $RubyProcessor_compiled$12.$$arity = 0);
        
        Opal.def(self, '$compiler_for', $RubyProcessor_compiler_for$13 = function $$compiler_for(source, options) {
          var self = this;

          
          
          if (options == null) {
            options = $hash2([], {});
          };
          return $$$($$$('::', 'Opal'), 'Compiler').$new(source, self.options.$merge(options));
        }, $RubyProcessor_compiler_for$13.$$arity = -2);
        
        Opal.def(self, '$requires', $RubyProcessor_requires$14 = function $$requires() {
          var self = this;

          return self.$compiled().$requires()
        }, $RubyProcessor_requires$14.$$arity = 0);
        
        Opal.def(self, '$required_trees', $RubyProcessor_required_trees$15 = function $$required_trees() {
          var self = this;

          return self.$compiled().$required_trees()
        }, $RubyProcessor_required_trees$15.$$arity = 0);
        return (Opal.defs(self, '$match?', $RubyProcessor_match$ques$16 = function(other) {
          var $a, $iter = $RubyProcessor_match$ques$16.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $RubyProcessor_match$ques$16.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          return ($truthy($a = $send(self, Opal.find_super_dispatcher(self, 'match?', $RubyProcessor_match$ques$16, false, self.$$class.$$prototype), $zuper, $iter)) ? $a : $$($nesting, 'File').$extname(other.$to_s())['$=='](""))
        }, $RubyProcessor_match$ques$16.$$arity = 1), nil) && 'match?';
      })($nesting[0], $$($nesting, 'Processor'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'OpalERBProcessor');

        var $nesting = [self].concat($parent_nesting), $OpalERBProcessor_initialize$17, $OpalERBProcessor_requires$18, $OpalERBProcessor_prepare$19;

        self.$$prototype.source = self.$$prototype.filename = nil;
        
        self.$handles("opalerb");
        
        Opal.def(self, '$initialize', $OpalERBProcessor_initialize$17 = function $$initialize($a) {
          var $post_args, args, $iter = $OpalERBProcessor_initialize$17.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $OpalERBProcessor_initialize$17.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $OpalERBProcessor_initialize$17, false), $zuper, $iter);
          return (self.source = self.$prepare(self.source, self.filename));
        }, $OpalERBProcessor_initialize$17.$$arity = -1);
        
        Opal.def(self, '$requires', $OpalERBProcessor_requires$18 = function $$requires() {
          var $iter = $OpalERBProcessor_requires$18.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $OpalERBProcessor_requires$18.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          return $rb_plus(["erb"], $send(self, Opal.find_super_dispatcher(self, 'requires', $OpalERBProcessor_requires$18, false), $zuper, $iter))
        }, $OpalERBProcessor_requires$18.$$arity = 0);
        self.$private();
        return (Opal.def(self, '$prepare', $OpalERBProcessor_prepare$19 = function $$prepare(source, path) {
          var self = this;

          return $$$($$$($$$('::', 'Opal'), 'ERB'), 'Compiler').$new(source, path).$prepared_source()
        }, $OpalERBProcessor_prepare$19.$$arity = 2), nil) && 'prepare';
      })($nesting[0], $$($nesting, 'RubyProcessor'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ERBProcessor');

        var $nesting = [self].concat($parent_nesting), $ERBProcessor_source$20;

        self.$$prototype.source = self.$$prototype.filename = nil;
        
        self.$handles("erb");
        return (Opal.def(self, '$source', $ERBProcessor_source$20 = function $$source() {
          var self = this, result = nil, module_name = nil;

          
          result = $$$('::', 'ERB').$new(self.source.$to_s()).$result();
          module_name = $$$($$$('::', 'Opal'), 'Compiler').$module_name(self.filename);
          return "" + "Opal.modules[" + (module_name.$inspect()) + "] = function() {" + (result) + "};";
        }, $ERBProcessor_source$20.$$arity = 0), nil) && 'source';
      })($nesting[0], $$($nesting, 'Processor'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/pack_unpack/format_string_parser"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$raise']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'PackUnpack');

    var $nesting = [self].concat($parent_nesting);

    
    var directives = [
      // Integer
      'C',
      'S',
      'L',
      'Q',
      'J',

      'c',
      's',
      'l',
      'q',
      'j',

      'n',
      'N',
      'v',
      'V',

      'U',
      'w',

      // Float
      'D',
      'd',
      'F',
      'f',
      'E',
      'e',
      'G',
      'g',

      // String
      'A',
      'a',
      'Z',
      'B',
      'b',
      'H',
      'h',
      'u',
      'M',
      'm',

      'P',
      'p',

      // Misc
      '@',
      'X',
      'x'
    ];

    var modifiers = [
      '!', // ignored
      '_', // ignored
      '>', // big endian
      '<'  // little endian
    ];

    self.eachDirectiveAndCount = function(format, callback) {
      var currentDirective,
          currentCount,
          currentModifiers,
          countSpecified;

      function reset() {
        currentDirective = null;
        currentCount = 0;
        currentModifiers = [];
        countSpecified = false;
      }

      reset();

      function yieldAndReset() {
        if (currentDirective == null) {
          reset();
          return;
        }

        var directiveSupportsModifiers = /[sSiIlLqQjJ]/.test(currentDirective);

        if (!directiveSupportsModifiers && currentModifiers.length > 0) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "'" + (currentModifiers[0]) + "' allowed only after types sSiIlLqQjJ")
        }

        if (currentModifiers.indexOf('<') !== -1 && currentModifiers.indexOf('>') !== -1) {
          self.$raise($$($nesting, 'RangeError'), "Can't use both '<' and '>'")
        }

        if (!countSpecified) {
          currentCount = 1;
        }

        if (currentModifiers.indexOf('>') !== -1) {
          currentDirective = currentDirective + '>';
        }

        callback(currentDirective, currentCount);

        reset();
      }

      for (var i = 0; i < format.length; i++) {
        var currentChar = format[i];

        if (directives.indexOf(currentChar) !== -1) {
          // Directive char always resets current state
          yieldAndReset();
          currentDirective = currentChar;
        } else if (currentDirective) {
          if (/\d/.test(currentChar)) {
            // Count can be represented as a sequence of digits
            currentCount = currentCount * 10 + parseInt(currentChar, 10);
            countSpecified = true;
          } else if (currentChar === '*' && countSpecified === false) {
            // Count can be represented by a star character
            currentCount = Infinity;
            countSpecified = true;
          } else if (modifiers.indexOf(currentChar) !== -1 && countSpecified === false) {
            // Directives can be specified only after directive and before count
            currentModifiers.push(currentChar);
          } else {
            yieldAndReset();
          }
        }
      }

      yieldAndReset();
    }
  
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["corelib/string/unpack"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$flatten', '$decode64', '$raise', '$delete', '$gsub', '$coerce_to!', '$inspect', '$[]', '$unpack']);
  
  self.$require("corelib/pack_unpack/format_string_parser");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $a, $String_unpack$1, $String_unpack1$2, expected = nil, given = nil;

    
    
    // Format Parser
    var eachDirectiveAndCount = Opal.PackUnpack.eachDirectiveAndCount;

    function flattenArray(callback) {
      return function(data) {
        var array = callback(data);
        return (array).$flatten();
      }
    }

    function mapChunksToWords(callback) {
      return function(data) {
        var chunks = callback(data);

        return chunks.map(function(chunk) {
          return chunk.reverse().reduce(function(result, singleByte) {
            return result * 256 + singleByte;
          }, 0);
        });
      }
    }

    function chunkBy(chunkSize, callback) {
      return function(data) {
        var array = callback(data),
            chunks = [],
            chunksCount = (array.length / chunkSize);

        for (var i = 0; i < chunksCount; i++) {
          var chunk = array.splice(0, chunkSize);
          if (chunk.length === chunkSize) {
            chunks.push(chunk);
          }
        }

        return chunks;
      }
    }

    function utf16LEToBytes(string) {
      var utf8 = [];
      for (var i=0; i < string.length; i++) {
        var charcode = string.charCodeAt(i);
        if (charcode < 0x100) utf8.push(charcode);
        else if (charcode < 0x800) {
          utf8.push(0xc0 | (charcode >> 6),
                    0x80 | (charcode & 0x3f));
        }
        else if (charcode < 0xd800 || charcode >= 0xe000) {
          utf8.push(0xe0 | (charcode >> 12),
                    0x80 | ((charcode>>6) & 0x3f),
                    0x80 | (charcode & 0x3f));
        }
        // surrogate pair
        else {
          i++;
          // UTF-16 encodes 0x10000-0x10FFFF by
          // subtracting 0x10000 and splitting the
          // 20 bits of 0x0-0xFFFFF into two halves
          charcode = 0x10000 + (((charcode & 0x3ff)<<10)
                    | (string.charCodeAt(i) & 0x3ff))
          utf8.push(0xf0 | (charcode >>18),
                    0x80 | ((charcode>>12) & 0x3f),
                    0x80 | ((charcode>>6) & 0x3f),
                    0x80 | (charcode & 0x3f));
        }
      }

      return utf8;
    }

    function toNByteSigned(bytesCount, callback) {
      return function(data) {
        var unsignedBits = callback(data),
            bitsCount = bytesCount * 8,
            limit = Math.pow(2, bitsCount);

        return unsignedBits.map(function(n) {
          if (n >= limit / 2) {
            n -= limit;
          }

          return n;
        });
      }
    }

    function bytesToAsciiChars(callback) {
      return function(data) {
        var bytes = callback(data);

        return bytes.map(function(singleByte) {
          return String.fromCharCode(singleByte);
        });
      }
    }

    function joinChars(callback) {
      return function(data) {
        var chars = callback(data);
        return chars.join('');
      }
    }

    function wrapIntoArray(callback) {
      return function(data) {
        var object = callback(data);
        return [object];
      }
    }

    function filterTrailingChars(chars) {
      var charCodesToFilter = chars.map(function(s) { return s.charCodeAt(0); });

      return function(callback) {
        return function(data) {
          var charCodes = callback(data);

          while (charCodesToFilter.indexOf(charCodes[charCodes.length - 1]) !== -1) {
            charCodes = charCodes.slice(0, charCodes.length - 1);
          }

          return charCodes;
        }
      }
    }

    var filterTrailingZerosAndSpaces = filterTrailingChars(["\u0000", " "]);

    function invertChunks(callback) {
      return function(data) {
        var chunks = callback(data);

        return chunks.map(function(chunk) {
          return chunk.reverse();
        });
      }
    }

    function uudecode(callback) {
      return function(data) {
        var bytes = callback(data);

        var stop = false;
        var i = 0, length = 0;

        var result = [];

        do {
          if (i < bytes.length) {
            var n = bytes[i] - 32 & 0x3F;

            ++i;

            if (bytes[i] === 10) {
              continue;
            }

            if (n > 45) {
              return '';
            }

            length += n;

            while (n > 0) {
              var c1 = bytes[i];
              var c2 = bytes[i + 1];
              var c3 = bytes[i + 2];
              var c4 = bytes[i + 3];

              var b1 = (c1 - 32 & 0x3F) << 2 | (c2 - 32 & 0x3F) >> 4;
              var b2 = (c2 - 32 & 0x3F) << 4 | (c3 - 32 & 0x3F) >> 2;
              var b3 = (c3 - 32 & 0x3F) << 6 | c4 - 32 & 0x3F;

              result.push(b1 & 0xFF);
              result.push(b2 & 0xFF);
              result.push(b3 & 0xFF);

              i += 4;
              n -= 3;
            }

            ++i;
          } else {
            break;
          }
        } while (true);

        return result.slice(0, length);
      }
    }

    function toBits(callback) {
      return function(data) {
        var bytes = callback(data);

        var bits = bytes.map(function(singleByte) {
          return singleByte.toString(2);
        });

        return bits;
      }
    }

    function decodeBERCompressedIntegers(callback) {
      return function(data) {
        var bytes = callback(data), result = [], buffer = '';

        for (var i = 0; i < bytes.length; i++) {
          var singleByte = bytes[i],
              bits = singleByte.toString(2);

          bits = Array(8 - bits.length + 1).join('0').concat(bits);

          var firstBit = bits[0];
          bits = bits.slice(1, bits.length);

          buffer = buffer.concat(bits);

          if (firstBit === '0') {
            var decoded = parseInt(buffer, 2);
            result.push(decoded);
            buffer = ''
          }
        }

        return result;
      }
    }

    function base64Decode(callback) {
      return function(data) {
        var string = callback(data);
        if (typeof(atob) === 'function') {
          // Browser
          return atob(string);
        } else if (typeof(Buffer) === 'function') {
          // Node
          if (typeof(Buffer.from) === 'function') {
            // Node 5.10+
            return Buffer.from(string, 'base64').toString();
          } else {
            return new Buffer(string, 'base64').toString();
          }
        } else if ((($a = $$($nesting, 'Base64', 'skip_raise')) ? 'constant' : nil)) {
          return $$($nesting, 'Base64').$decode64(string);
        } else {
          self.$raise("To use String#unpack('m'), you must first require 'base64'.")
        }
      }
    }

    // quoted-printable decode
    function qpdecode(callback) {
      return function(data) {
        var string = callback(data);

        return string
          .replace(/[\t\x20]$/gm, '')
          .replace(/=(?:\r\n?|\n|$)/g, '')
          .replace(/=([a-fA-F0-9]{2})/g, function($0, $1) {
            var codePoint = parseInt($1, 16);
            return String.fromCharCode(codePoint);
          });
      }
    }

    function identityFunction(value) { return value; }

    var handlers = {
      // Integer
      'C': identityFunction,
      'S': mapChunksToWords(chunkBy(2, identityFunction)),
      'L': mapChunksToWords(chunkBy(4, identityFunction)),
      'Q': mapChunksToWords(chunkBy(8, identityFunction)),
      'J': null,

      'S>': mapChunksToWords(invertChunks(chunkBy(2, identityFunction))),
      'L>': mapChunksToWords(invertChunks(chunkBy(4, identityFunction))),
      'Q>': mapChunksToWords(invertChunks(chunkBy(8, identityFunction))),

      'c': toNByteSigned(1, identityFunction),
      's': toNByteSigned(2, mapChunksToWords(chunkBy(2, identityFunction))),
      'l': toNByteSigned(4, mapChunksToWords(chunkBy(4, identityFunction))),
      'q': toNByteSigned(8, mapChunksToWords(chunkBy(8, identityFunction))),
      'j': null,

      's>': toNByteSigned(2, mapChunksToWords(invertChunks(chunkBy(2, identityFunction)))),
      'l>': toNByteSigned(4, mapChunksToWords(invertChunks(chunkBy(4, identityFunction)))),
      'q>': toNByteSigned(8, mapChunksToWords(invertChunks(chunkBy(8, identityFunction)))),

      'n': null, // aliased later
      'N': null, // aliased later
      'v': null, // aliased later
      'V': null, // aliased later

      'U': identityFunction,
      'w': decodeBERCompressedIntegers(identityFunction),

      // Float
      'D': null,
      'd': null,
      'F': null,
      'f': null,
      'E': null,
      'e': null,
      'G': null,
      'g': null,

      // String
      'A': wrapIntoArray(joinChars(bytesToAsciiChars(filterTrailingZerosAndSpaces(identityFunction)))),
      'a': wrapIntoArray(joinChars(bytesToAsciiChars(identityFunction))),
      'Z': joinChars(bytesToAsciiChars(identityFunction)),
      'B': joinChars(identityFunction),
      'b': joinChars(identityFunction),
      'H': joinChars(identityFunction),
      'h': joinChars(identityFunction),
      'u': joinChars(bytesToAsciiChars(uudecode(identityFunction))),
      'M': qpdecode(joinChars(bytesToAsciiChars(identityFunction))),
      'm': base64Decode(joinChars(bytesToAsciiChars(identityFunction))),

      'P': null,
      'p': null
    };

    function readBytes(n) {
      return function(bytes) {
        var chunk = bytes.slice(0, n);
        bytes = bytes.slice(n, bytes.length);
        return { chunk: chunk, rest: bytes };
      }
    }

    function readUnicodeCharChunk(bytes) {
      function readByte() {
        var result = bytes[0];
        bytes = bytes.slice(1, bytes.length);
        return result;
      }

      var c = readByte(), extraLength;

      if (c >> 7 == 0) {
        // 0xxx xxxx
        return { chunk: [c], rest: bytes };
      }

      if (c >> 6 == 0x02) {
        self.$raise($$($nesting, 'ArgumentError'), "malformed UTF-8 character")
      }

      if (c >> 5 == 0x06) {
        // 110x xxxx (two bytes)
        extraLength = 1;
      } else if (c >> 4 == 0x0e) {
        // 1110 xxxx (three bytes)
        extraLength = 2;
      } else if (c >> 3 == 0x1e) {
        // 1111 0xxx (four bytes)
        extraLength = 3;
      } else if (c >> 2 == 0x3e) {
        // 1111 10xx (five bytes)
        extraLength = 4;
      } else if (c >> 1 == 0x7e) {
        // 1111 110x (six bytes)
        extraLength = 5;
      } else {
        self.$raise("malformed UTF-8 character")
      }

      if (extraLength > bytes.length) {
        ((expected = extraLength + 1), (given = bytes.length + 1), self.$raise($$($nesting, 'ArgumentError'), "" + "malformed UTF-8 character (expected " + (expected) + " bytes, given " + (given) + " bytes)"))
      }

      // Remove the UTF-8 prefix from the char
      var mask = (1 << (8 - extraLength - 1)) - 1,
          result = c & mask;

      for (var i = 0; i < extraLength; i++) {
        c = readByte();

        if (c >> 6 != 0x02) {
          self.$raise("Invalid multibyte sequence")
        }

        result = (result << 6) | (c & 0x3f);
      }

      if (result <= 0xffff) {
        return { chunk: [result], rest: bytes };
      } else {
        result -= 0x10000;
        var high = ((result >> 10) & 0x3ff) + 0xd800,
            low = (result & 0x3ff) + 0xdc00;
        return { chunk: [high, low], rest: bytes };
      }
    }

    function readUuencodingChunk(buffer) {
      var length = buffer.indexOf(32); // 32 = space

      if (length === -1) {
        return { chunk: buffer, rest: [] };
      } else {
        return { chunk: buffer.slice(0, length), rest: buffer.slice(length, buffer.length) };
      }
    }

    function readNBitsLSBFirst(buffer, count) {
      var result = '';

      while (count > 0 && buffer.length > 0) {
        var singleByte = buffer[0],
            bitsToTake = Math.min(count, 8),
            bytesToTake = Math.ceil(bitsToTake / 8);

        buffer = buffer.slice(1, buffer.length);

        if (singleByte != null) {
          var bits = singleByte.toString(2);
          bits = Array(8 - bits.length + 1).join('0').concat(bits).split('').reverse().join('');

          for (var j = 0; j < bitsToTake; j++) {
            result += bits[j] || '0';
            count--;
          }
        }
      }

      return { chunk: [result], rest: buffer };
    }

    function readNBitsMSBFirst(buffer, count) {
      var result = '';

      while (count > 0 && buffer.length > 0) {
        var singleByte = buffer[0],
            bitsToTake = Math.min(count, 8),
            bytesToTake = Math.ceil(bitsToTake / 8);

        buffer = buffer.slice(1, buffer.length);

        if (singleByte != null) {
          var bits = singleByte.toString(2);
          bits = Array(8 - bits.length + 1).join('0').concat(bits);

          for (var j = 0; j < bitsToTake; j++) {
            result += bits[j] || '0';
            count--;
          }
        }
      }

      return { chunk: [result], rest: buffer };
    }

    function readWhileFirstBitIsOne(buffer) {
      var result = [];

      for (var i = 0; i < buffer.length; i++) {
        var singleByte = buffer[i];

        result.push(singleByte);

        if ((singleByte & 128) === 0) {
          break;
        }
      }

      return { chunk: result, rest: buffer.slice(result.length, buffer.length) };
    }

    function readTillNullCharacter(buffer, count) {
      var result = [];

      for (var i = 0; i < count && i < buffer.length; i++) {
        var singleByte = buffer[i];

        if (singleByte === 0) {
          break;
        } else {
          result.push(singleByte);
        }
      }

      if (count === Infinity) {
        count = result.length;
      }

      if (buffer[count] === 0) {
        count++;
      }

      buffer = buffer.slice(count, buffer.length);

      return { chunk: result, rest: buffer };
    }

    function readHexCharsHighNibbleFirst(buffer, count) {
      var result = [];

      while (count > 0 && buffer.length > 0) {
        var singleByte = buffer[0],
            hex = singleByte.toString(16);

        buffer = buffer.slice(1, buffer.length);
        hex = Array(2 - hex.length + 1).join('0').concat(hex);

        if (count === 1) {
          result.push(hex[0]);
          count--;
        } else {
          result.push(hex[0], hex[1]);
          count -= 2;
        }
      }

      return { chunk: result, rest: buffer };
    }

    function readHexCharsLowNibbleFirst(buffer, count) {
      var result = [];

      while (count > 0 && buffer.length > 0) {
        var singleByte = buffer[0],
            hex = singleByte.toString(16);

        buffer = buffer.slice(1, buffer.length);
        hex = Array(2 - hex.length + 1).join('0').concat(hex);

        if (count === 1) {
          result.push(hex[1]);
          count--;
        } else {
          result.push(hex[1], hex[0]);
          count -= 2;
        }
      }

      return { chunk: result, rest: buffer };
    }

    function readNTimesAndMerge(callback) {
      return function(buffer, count) {
        var chunk = [], chunkData;

        if (count === Infinity) {
          while (buffer.length > 0) {
            chunkData = callback(buffer);
            buffer = chunkData.rest;
            chunk = chunk.concat(chunkData.chunk);
          }
        } else {
          for (var i = 0; i < count; i++) {
            chunkData = callback(buffer);
            buffer = chunkData.rest;
            chunk = chunk.concat(chunkData.chunk);
          }
        }

        return { chunk: chunk, rest: buffer };
      }
    }

    function readAll(buffer, count) {
      return { chunk: buffer, rest: [] };
    }

    var readChunk = {
      // Integer
      'C': readNTimesAndMerge(readBytes(1)),
      'S': readNTimesAndMerge(readBytes(2)),
      'L': readNTimesAndMerge(readBytes(4)),
      'Q': readNTimesAndMerge(readBytes(8)),
      'J': null,

      'S>': readNTimesAndMerge(readBytes(2)),
      'L>': readNTimesAndMerge(readBytes(4)),
      'Q>': readNTimesAndMerge(readBytes(8)),

      'c': readNTimesAndMerge(readBytes(1)),
      's': readNTimesAndMerge(readBytes(2)),
      'l': readNTimesAndMerge(readBytes(4)),
      'q': readNTimesAndMerge(readBytes(8)),
      'j': null,

      's>': readNTimesAndMerge(readBytes(2)),
      'l>': readNTimesAndMerge(readBytes(4)),
      'q>': readNTimesAndMerge(readBytes(8)),

      'n': null, // aliased later
      'N': null, // aliased later
      'v': null, // aliased later
      'V': null, // aliased later

      'U': readNTimesAndMerge(readUnicodeCharChunk),
      'w': readNTimesAndMerge(readWhileFirstBitIsOne),

      // Float
      'D': null,
      'd': null,
      'F': null,
      'f': null,
      'E': null,
      'e': null,
      'G': null,
      'g': null,

      // String
      'A': readNTimesAndMerge(readBytes(1)),
      'a': readNTimesAndMerge(readBytes(1)),
      'Z': readTillNullCharacter,
      'B': readNBitsMSBFirst,
      'b': readNBitsLSBFirst,
      'H': readHexCharsHighNibbleFirst,
      'h': readHexCharsLowNibbleFirst,
      'u': readNTimesAndMerge(readUuencodingChunk),
      'M': readAll,
      'm': readAll,

      'P': null,
      'p': null
    }

    var autocompletion = {
      // Integer
      'C': true,
      'S': true,
      'L': true,
      'Q': true,
      'J': null,

      'S>': true,
      'L>': true,
      'Q>': true,

      'c': true,
      's': true,
      'l': true,
      'q': true,
      'j': null,

      's>': true,
      'l>': true,
      'q>': true,

      'n': null, // aliased later
      'N': null, // aliased later
      'v': null, // aliased later
      'V': null, // aliased later

      'U': false,
      'w': false,

      // Float
      'D': null,
      'd': null,
      'F': null,
      'f': null,
      'E': null,
      'e': null,
      'G': null,
      'g': null,

      // String
      'A': false,
      'a': false,
      'Z': false,
      'B': false,
      'b': false,
      'H': false,
      'h': false,
      'u': false,
      'M': false,
      'm': false,

      'P': null,
      'p': null
    }

    var optimized = {
      'C*': handlers['C'],
      'c*': handlers['c'],
      'A*': handlers['A'],
      'a*': handlers['a'],
      'M*': wrapIntoArray(handlers['M']),
      'm*': wrapIntoArray(handlers['m']),
      'S*': handlers['S'],
      's*': handlers['s'],
      'L*': handlers['L'],
      'l*': handlers['l'],
      'Q*': handlers['Q'],
      'q*': handlers['q'],
      'S>*': handlers['S>'],
      's>*': handlers['s>'],
      'L>*': handlers['L>'],
      'l>*': handlers['l>'],
      'Q>*': handlers['Q>'],
      'q>*': handlers['q>']
    }

    function alias(existingDirective, newDirective) {
      readChunk[newDirective] = readChunk[existingDirective];
      handlers[newDirective] = handlers[existingDirective];
      autocompletion[newDirective] = autocompletion[existingDirective];
    }

    alias('S>', 'n');
    alias('L>', 'N');

    alias('S', 'v');
    alias('L', 'V');
  ;
    
    Opal.def(self, '$unpack', $String_unpack$1 = function $$unpack(format) {
      var self = this;

      
      format = $$($nesting, 'Opal')['$coerce_to!'](format, $$($nesting, 'String'), "to_str").$gsub(/\s/, "").$delete("\u0000");
      
      var output = [];

      var buffer = utf16LEToBytes(self);

      // optimization
      var optimizedHandler = optimized[format];
      if (optimizedHandler) {
        return optimizedHandler(buffer);
      }

      function autocomplete(array, size) {
        while (array.length < size) {
          array.push(nil);
        }

        return array;
      }

      function processChunk(directive, count) {
        var chunk,
            chunkReader = readChunk[directive];

        if (chunkReader == null) {
          self.$raise("" + "Unsupported unpack directive " + ((directive).$inspect()) + " (no chunk reader defined)")
        }

        var chunkData = chunkReader(buffer, count);
        chunk = chunkData.chunk;
        buffer = chunkData.rest;

        var handler = handlers[directive];

        if (handler == null) {
          self.$raise("" + "Unsupported unpack directive " + ((directive).$inspect()) + " (no handler defined)")
        }

        return handler(chunk);
      }

      eachDirectiveAndCount(format, function(directive, count) {
        var part = processChunk(directive, count);

        if (count !== Infinity) {
          var shouldAutocomplete = autocompletion[directive];

          if (shouldAutocomplete == null) {
            self.$raise("" + "Unsupported unpack directive " + ((directive).$inspect()) + " (no autocompletion rule defined)")
          }

          if (shouldAutocomplete) {
            autocomplete(part, count);
          }
        }

        output = output.concat(part);
      });

      return output;
    ;
    }, $String_unpack$1.$$arity = 1);
    return (Opal.def(self, '$unpack1', $String_unpack1$2 = function $$unpack1(format) {
      var self = this;

      
      format = $$($nesting, 'Opal')['$coerce_to!'](format, $$($nesting, 'String'), "to_str").$gsub(/\s/, "").$delete("\u0000");
      return self.$unpack(format['$[]'](0))['$[]'](0);
    }, $String_unpack1$2.$$arity = 1), nil) && 'unpack1';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["opal-builder"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("opal/builder");
  self.$require("opal/builder_processors");
  return self.$require("corelib/string/unpack");
};
