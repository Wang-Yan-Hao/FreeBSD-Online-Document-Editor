Opal.modules["CrossDocumentReferencesMacro/extension"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$, $klass = Opal.klass, $truthy = Opal.truthy, $rb_plus = Opal.rb_plus, $eqeq = Opal.eqeq, $hash2 = Opal.hash2, $def = Opal.def;

  Opal.add_stubs('include,use_dsl,named,name_positional_attributes,[],nil?,+,document,==,attributes,render,create_anchor');
  
  nil;
  self.$include($$$('Asciidoctor'));
  return (function($base, $super) {
    var self = $klass($base, $super, 'CrossDocumentReferencesMacro');

    
    
    self.$use_dsl();
    self.$named("extref");
    self.$name_positional_attributes("attributes");
    return $def(self, '$process', function $$process(parent, target, attrs) {
      var self = this, destination = nil, text = nil, anchor = nil, doc = nil;

      
      destination = target;
      text = attrs['$[]'](1);
      anchor = "";
      if (!$truthy(attrs['$[]'](2)['$nil?']())) {
        anchor = $rb_plus("#", attrs['$[]'](2))
      };
      doc = parent.$document();
      if ($eqeq(doc.$attributes()['$[]']("isonline"), "1")) {
        return self.$create_anchor(parent, text, $hash2(["type", "target"], {"type": "link", "target": "" + (destination) + (anchor)})).$render()
      } else if ($eqeq(doc.$attributes()['$[]']("doctype"), "book")) {
        return self.$create_anchor(parent, text, $hash2(["type", "target"], {"type": "link", "target": "../" + (destination) + "/index.html" + (anchor)})).$render()
      } else {
        return self.$create_anchor(parent, text, $hash2(["type", "target"], {"type": "link", "target": "" + (destination) + "/index.html" + (anchor)})).$render()
      };
    }, 3);
  })($nesting[0], $$$($$$($$('Asciidoctor'), 'Extensions'), 'InlineMacroProcessor'));
};

(function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$, $send = Opal.send;

  Opal.add_stubs('require,register,inline_macro');
  
  
  self.$require("CrossDocumentReferencesMacro/extension");;
  return $send($$$($$('Asciidoctor'), 'Extensions'), 'register', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

    return self.$inline_macro($$('CrossDocumentReferencesMacro'))}, {$$arity: 0, $$s: self});
});

Opal.modules["GitReferencesMacro/extension"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$, $klass = Opal.klass, $truthy = Opal.truthy, $def = Opal.def;

  Opal.add_stubs('include,use_dsl,named,[],to_i');
  
  nil;
  self.$include($$$('Asciidoctor'));
  return (function($base, $super) {
    var self = $klass($base, $super, 'GitReferencesMacro');

    
    
    self.$use_dsl();
    self.$named("gitref");
    return $def(self, '$process', function $$process(parent, target, attrs) {
      var hash = nil, repository = nil, length = nil, url = nil;

      
      hash = target;
      repository = ($truthy((repository = attrs['$[]']("repository"))) ? ("" + (repository)) : ("src"));
      length = ($truthy((length = attrs['$[]']("length"))) ? (length.$to_i()) : (12));
      url = "https://cgit.freebsd.org/" + (repository) + "/commit/?id=" + (hash);
      return "<a href=\"" + (url) + "\">" + (hash['$[]'](0, length)) + "</a>";
    }, 3);
  })($nesting[0], $$$($$$($$('Asciidoctor'), 'Extensions'), 'InlineMacroProcessor'));
};

(function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$, $send = Opal.send;

  Opal.add_stubs('require,register,inline_macro');
  
  
  self.$require("GitReferencesMacro/extension");;
  return $send($$$($$('Asciidoctor'), 'Extensions'), 'register', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

    return self.$inline_macro($$('GitReferencesMacro'))}, {$$arity: 0, $$s: self});
});

Opal.modules["InterDocumentReferencesMacro/extension"] = function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$, $klass = Opal.klass, $eqeq = Opal.eqeq, $hash2 = Opal.hash2, $def = Opal.def;

  Opal.add_stubs('include,use_dsl,named,name_positional_attributes,[],document,==,attributes,render,create_anchor');
  
  nil;
  self.$include($$$('Asciidoctor'));
  return (function($base, $super) {
    var self = $klass($base, $super, 'InterDocumentReferencesMacro');

    
    
    self.$use_dsl();
    self.$named("crossref");
    self.$name_positional_attributes("attributes");
    return $def(self, '$process', function $$process(parent, target, attrs) {
      var self = this, destination = nil, anchor = nil, text = nil, doc = nil;

      
      destination = target;
      anchor = attrs['$[]'](1);
      text = attrs['$[]'](2);
      doc = parent.$document();
      if ($eqeq(doc.$attributes()['$[]']("book"), "True")) {
        if ($eqeq(doc.$attributes()['$[]']("isonline"), 1)) {
          return self.$create_anchor(parent, text, $hash2(["type", "target"], {"type": "link", "target": "./#" + (anchor)})).$render()
        } else {
          return self.$create_anchor(parent, text, $hash2(["type", "target"], {"type": "link", "target": "./index.html#" + (anchor)})).$render()
        }
      } else if ($eqeq(doc.$attributes()['$[]']("isonline"), 1)) {
        return self.$create_anchor(parent, text, $hash2(["type", "target"], {"type": "link", "target": "../" + (destination) + "/#" + (anchor)})).$render()
      } else {
        return self.$create_anchor(parent, text, $hash2(["type", "target"], {"type": "link", "target": "../" + (destination) + "/index.html#" + (anchor)})).$render()
      };
    }, 3);
  })($nesting[0], $$$($$$($$('Asciidoctor'), 'Extensions'), 'InlineMacroProcessor'));
};

(function(Opal) {/* Generated by Opal 1.5.1 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$, $send = Opal.send;

  Opal.add_stubs('require,register,inline_macro');
  
  
  self.$require("InterDocumentReferencesMacro/extension");;
  return $send($$$($$('Asciidoctor'), 'Extensions'), 'register', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

    return self.$inline_macro($$('InterDocumentReferencesMacro'))}, {$$arity: 0, $$s: self});
});
